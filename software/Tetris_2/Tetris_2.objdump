
Tetris_2.elf:     file format elf32-littlenios2
Tetris_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001829c memsz 0x0001829c flags r-x
    LOAD off    0x000192bc vaddr 0x080182bc paddr 0x0801a03c align 2**12
         filesz 0x00001d80 memsz 0x00001d80 flags rw-
    LOAD off    0x0001bdbc vaddr 0x0801bdbc paddr 0x0801bdbc align 2**12
         filesz 0x00000000 memsz 0x00000934 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017b50  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000053c  08017d80  08017d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d80  080182bc  0801a03c  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000934  0801bdbc  0801bdbc  0001bdbc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001b03c  2**0
                  CONTENTS
  7 .sdram        00000000  0801c6f0  0801c6f0  0001b03c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b03c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001030  00000000  00000000  0001b060  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000296e4  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a355  00000000  00000000  00045774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000db8a  00000000  00000000  0004fac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b84  00000000  00000000  0005d654  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004546  00000000  00000000  000601d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cae6  00000000  00000000  0006471e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00081204  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ae0  00000000  00000000  00081248  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00086912  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00086915  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00086921  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00086922  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00086923  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00086927  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008692b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008692f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008693a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00086945  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00086950  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  00086958  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f22  00000000  00000000  0008698c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008af82  00000000  00000000  0008b8ae  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08017d80 l    d  .rodata	00000000 .rodata
080182bc l    d  .rwdata	00000000 .rwdata
0801bdbc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801c6f0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Tetris_2_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08019fe8 l     O .rwdata	00000001 addr
08019fec l     O .rwdata	00000004 vga_ctrl
080182bc l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0801bdd8 l     O .bss	00000004 usb_delay.2608
0801bddc l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08017fc2 l     O .rodata	00000010 zeroes.4389
08017fd2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
08017fe2 l     O .rodata	00000010 zeroes.4404
08009348 l     F .text	000000bc __sbprintf
08017ff2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08009558 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800b0b0 l     F .text	00000008 __fp_unlock
0800b0c4 l     F .text	0000019c __sinit.part.1
0800b260 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801853c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08018980 l     O .rwdata	00000020 lc_ctype_charset
08018960 l     O .rwdata	00000020 lc_message_charset
080189a0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08018024 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08018148 l     O .rodata	00000010 zeroes.4333
08018158 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0800fca4 l     F .text	000000fc __sprint_r.part.0
08018168 l     O .rodata	00000010 zeroes.4349
080112e0 l     F .text	000000bc __sbprintf
08018178 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08015258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0801536c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08015398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0801548c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08015574 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08015660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0801583c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801a02c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08015c84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08015dc0 l     F .text	00000034 alt_dev_reg
08018f88 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080160b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
080162c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08016af4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08016e8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080172ec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801744c l     F .text	0000003c alt_get_errno
08017488 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801be14 g     O .bss	00000004 alt_instruction_exception_handler
0800dd78 g     F .text	00000074 _mprec_log10
0800de64 g     F .text	0000008c __any_on
08011894 g     F .text	00000054 _isatty_r
08018030 g     O .rodata	00000028 __mprec_tinytens
08015778 g     F .text	0000007c alt_main
08019ff0 g     O .rwdata	00000008 ctrl_xfers
08004ae8 g     F .text	000000c0 _puts_r
0801c5f0 g     O .bss	00000100 alt_irq
080118e8 g     F .text	00000060 _lseek_r
08004054 g     F .text	00000644 USB_Task
0801a03c g       *ABS*	00000000 __flash_rwdata_start
08013c30 g     F .text	00000088 .hidden __eqdf2
08000e20 g     F .text	00000140 initGame
080009ec g     F .text	00000270 removeRow
0801c6f0 g       *ABS*	00000000 __alt_heap_start
08004aac g     F .text	0000003c printf
08011b00 g     F .text	0000009c _wcrtomb_r
080031c8 g     F .text	00000088 kbdPoll
0800e5f4 g     F .text	0000005c __sseek
0800b410 g     F .text	00000010 __sinit
080119a8 g     F .text	00000140 __swbuf_r
0800bee4 g     F .text	0000007c _setlocale_r
0800b268 g     F .text	00000078 __sfmoreglue
08015818 g     F .text	00000024 __malloc_unlock
0800026c g     F .text	000001f0 GetDriverandReport
0800cbb4 g     F .text	0000015c memmove
0800b3f8 g     F .text	00000018 _cleanup
0800ce38 g     F .text	000000a8 _Balloc
0800331c g     F .text	00000074 MAXreg_wr
0801850c g     O .rwdata	00000030 ClientDriverTable
08013cb8 g     F .text	000000dc .hidden __gtdf2
080176d0 g     F .text	00000024 altera_nios2_gen2_irq_init
08004698 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08003b54 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801842c g     O .rwdata	00000070 pieceNums
0801be18 g     O .bss	00000010 hid_ep
08011838 g     F .text	0000005c _fstat_r
0801bdf8 g     O .bss	00000004 errno
0800e570 g     F .text	00000008 __seofread
0800e904 g     F .text	000013a0 ___svfiprintf_internal_r
0801be00 g     O .bss	00000004 alt_argv
08021fe8 g       *ABS*	00000000 _gp
08015c54 g     F .text	00000030 usleep
080034e8 g     F .text	00000060 MAXreg_rd
08001c08 g     F .text	000003e0 rotate
08018e08 g     O .rwdata	00000180 alt_fd_list
08003100 g     F .text	00000040 HID_init
080176f4 g     F .text	00000090 alt_find_dev
0800ca6c g     F .text	00000148 memcpy
0800b0b8 g     F .text	0000000c _cleanup_r
08015070 g     F .text	000000dc .hidden __floatsidf
080173d0 g     F .text	0000007c alt_io_redirect
08013d94 g     F .text	000000f4 .hidden __ltdf2
08017d80 g       *ABS*	00000000 __DTOR_END__
08004ba8 g     F .text	00000014 puts
08017950 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800e454 g     F .text	00000074 __fpclassifyd
0800dcd4 g     F .text	000000a4 __ratio
080112c4 g     F .text	0000001c __vfiprintf_internal
080164b8 g     F .text	0000021c altera_avalon_jtag_uart_read
08004a7c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08004998 g     F .text	00000064 .hidden __udivsi3
080154c8 g     F .text	000000ac isatty
08018080 g     O .rodata	000000c8 __mprec_tens
0800bf60 g     F .text	0000000c __locale_charset
0801bdf4 g     O .bss	00000004 __malloc_top_pad
08019ff8 g     O .rwdata	00000001 usb_task_state
0801a004 g     O .rwdata	00000004 __mb_cur_max
0800bf90 g     F .text	0000000c _localeconv_r
0800d26c g     F .text	0000003c __i2b
0800b894 g     F .text	000004c8 __sfvwrite_r
08001934 g     F .text	000002d4 right
0800e4c8 g     F .text	00000054 _sbrk_r
08011948 g     F .text	00000060 _read_r
08003810 g     F .text	00000094 MAX3421E_init
08000738 g     F .text	00000034 setKeycode
0801a024 g     O .rwdata	00000004 alt_max_fd
0801152c g     F .text	000000f0 _fclose_r
0800b080 g     F .text	00000030 fflush
0801bdf0 g     O .bss	00000004 __malloc_max_sbrked_mem
080129b4 g     F .text	000008ac .hidden __adddf3
0800da7c g     F .text	0000010c __b2d
080123f0 g     F .text	000005c4 .hidden __umoddi3
0801569c g     F .text	000000dc lseek
08019ffc g     O .rwdata	00000004 _global_impure_ptr
0800def0 g     F .text	00000564 _realloc_r
0801c6f0 g       *ABS*	00000000 __bss_end
080171fc g     F .text	000000f0 alt_iic_isr_register
08015b4c g     F .text	00000108 alt_tick
08011df4 g     F .text	000005fc .hidden __udivdi3
08011794 g     F .text	00000024 _fputwc_r
08018058 g     O .rodata	00000028 __mprec_bigtens
0800d050 g     F .text	00000104 __s2b
0801514c g     F .text	000000a8 .hidden __floatunsidf
0800d7bc g     F .text	00000060 __mcmp
0800b430 g     F .text	00000018 __fp_lock_all
080171b0 g     F .text	0000004c alt_ic_irq_enabled
08015ab0 g     F .text	0000009c alt_alarm_stop
0801be10 g     O .bss	00000004 alt_irq_active
0800167c g     F .text	000002b8 left
08004760 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
08018de0 g     O .rwdata	00000028 alt_dev_null
08003140 g     F .text	00000088 mousePoll
08003664 g     F .text	00000024 Vbus_power
08016e6c g     F .text	00000020 alt_dcache_flush_all
0800d154 g     F .text	00000068 __hi0bits
08014ff0 g     F .text	00000080 .hidden __fixdfsi
0801a03c g       *ABS*	00000000 __ram_rwdata_end
0801a01c g     O .rwdata	00000008 alt_dev_list
08015cc0 g     F .text	00000100 write
080182bc g       *ABS*	00000000 __ram_rodata_end
0801bddd g     O .bss	00000001 usb_error
080153d4 g     F .text	000000b8 fstat
08000950 g     F .text	0000009c isUsed
08013d94 g     F .text	000000f4 .hidden __ledf2
0800d534 g     F .text	00000140 __pow5mult
0800fdb8 g     F .text	0000150c ___vfiprintf_internal_r
0801bde8 g     O .bss	00000004 __nlocale_changed
080049fc g     F .text	00000058 .hidden __umodsi3
0801c6f0 g       *ABS*	00000000 end
08015ff4 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08003cb0 g     F .text	0000017c XferDispatchPkt
08017d80 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08016b6c g     F .text	0000007c alt_avalon_timer_sc_init
080151f4 g     F .text	00000064 .hidden __clzsi2
080166d4 g     F .text	00000224 altera_avalon_jtag_uart_write
0800b420 g     F .text	00000004 __sfp_lock_acquire
0800c988 g     F .text	000000e4 memchr
08007050 g     F .text	000022dc ___vfprintf_internal_r
080039d4 g     F .text	00000034 MaxGpxHandler
08004c38 g     F .text	00000058 _sprintf_r
0800b584 g     F .text	00000310 _free_r
0800bf6c g     F .text	00000010 __locale_mb_cur_max
08017bcc g     F .text	00000180 __call_exitprocs
0801bde4 g     O .bss	00000004 __mlocale_changed
0801a008 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801be08 g     O .bss	00000004 _alt_tick_rate
08003548 g     F .text	0000007c MAXbytes_rd
08004bd4 g     F .text	00000064 rand
0800d674 g     F .text	00000148 __lshift
080168f8 g     F .text	000001fc alt_avalon_spi_command
08001118 g     F .text	00000564 Down
0801be0c g     O .bss	00000004 _alt_nticks
08015878 g     F .text	00000104 read
08015e2c g     F .text	00000064 alt_sys_init
0800e734 g     F .text	000001d0 __ssprint_r
0801c5a8 g     O .bss	00000048 devtable
08017ab4 g     F .text	00000118 __register_exitproc
08002cf8 g     F .text	00000408 HIDKProbe
0801be28 g     O .bss	00000018 msd_ep
0800d2a8 g     F .text	0000028c __multiply
08016360 g     F .text	00000068 altera_avalon_jtag_uart_close
08003fbc g     F .text	00000098 USB_init
0801c4a8 g     O .bss	00000100 bigbuf
08004a54 g     F .text	00000028 .hidden __mulsi3
080182bc g       *ABS*	00000000 __ram_rwdata_start
08017d80 g       *ABS*	00000000 __ram_rodata_start
0801be40 g     O .bss	00000028 __malloc_current_mallinfo
0801bdd4 g     O .bss	00000001 last_usb_task_state
0800db88 g     F .text	0000014c __d2b
0801bdcc g     O .bss	00000008 dev0ep
0801849c g     O .rwdata	00000070 pieces
080004a0 g     F .text	00000048 clearLED
08015e90 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801788c g     F .text	000000c4 alt_get_fd
08016d14 g     F .text	00000158 alt_busy_sleep
080046c4 g     F .text	00000038 MSDEventHandler
080113fc g     F .text	00000054 _close_r
08017a38 g     F .text	0000007c memcmp
08015f50 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801c6f0 g       *ABS*	00000000 __alt_stack_base
08015fa0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009404 g     F .text	00000154 __swsetup_r
08013260 g     F .text	000009d0 .hidden __divdf3
0800b2e0 g     F .text	00000118 __sfp
0800ddec g     F .text	00000078 __copybits
080189d8 g     O .rwdata	00000408 __malloc_av_
0800b42c g     F .text	00000004 __sinit_lock_release
08004728 g     F .text	00000038 CDCEventHandler
08013e88 g     F .text	0000086c .hidden __muldf3
0800478c g     F .text	00000038 DummyEventHandler
0800e51c g     F .text	00000054 __sread
08017784 g     F .text	00000108 alt_find_file
08016ec8 g     F .text	000000a4 alt_dev_llist_insert
080157f4 g     F .text	00000024 __malloc_lock
08015a00 g     F .text	000000b0 sbrk
08004d94 g     F .text	000022bc ___svfprintf_internal_r
0800b024 g     F .text	0000005c _fflush_r
08011450 g     F .text	000000dc _calloc_r
0801bdbc g       *ABS*	00000000 __bss_start
08003688 g     F .text	00000188 MAX_busprobe
08000c5c g     F .text	000001c4 placeNewTet
0801bdc8 g     O .bss	00000002 hid_device
0800cd10 g     F .text	00000128 memset
08001fe8 g     F .text	00000908 main
080038a4 g     F .text	00000064 MAX3421E_Task
0801be04 g     O .bss	00000004 alt_envp
0801bdec g     O .bss	00000004 __malloc_max_total_mem
08015ef0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08011ae8 g     F .text	00000018 __swbuf
08004bbc g     F .text	00000018 srand
0800481c g     F .text	00000084 ConvUTF8ToStr
0801bdbc g     O .bss	00000004 pieceCount
0800e650 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0801161c g     F .text	00000014 fclose
08009780 g     F .text	00001688 _dtoa_r
0800c17c g     F .text	0000080c _malloc_r
08011c5c g     F .text	00000030 __ascii_wctomb
0801a028 g     O .rwdata	00000004 alt_errno
0800bd5c g     F .text	000000c4 _fwalk
080048a0 g     F .text	00000084 .hidden __divsi3
08003e2c g     F .text	00000190 XferInTransfer
08000864 g     F .text	000000ec setColorPalette
08000600 g     F .text	00000138 printSignedHex1
0800b460 g     F .text	00000124 _malloc_trim_r
08017d80 g       *ABS*	00000000 __CTOR_END__
080047e4 g     F .text	00000038 GetDevtable
0800e658 g     F .text	000000dc strcmp
08017d80 g       *ABS*	00000000 __flash_rodata_start
08017d80 g       *ABS*	00000000 __DTOR_LIST__
08003c3c g     F .text	00000074 XferCtrlND
08013c30 g     F .text	00000088 .hidden __nedf2
080035c4 g     F .text	000000a0 MAX3421E_reset
08015df4 g     F .text	00000038 alt_irq_init
0801597c g     F .text	00000084 alt_release_fd
08004c90 g     F .text	0000006c sprintf
08018188 g     O .rodata	00000100 .hidden __clz_tab
0801bde0 g     O .bss	00000004 _PathLocale
080179ec g     F .text	00000014 atexit
08000f60 g     F .text	00000120 genTet
0801bdc0 g     O .bss	00000008 kbdbuf
0801139c g     F .text	00000060 _write_r
0801be68 g     O .bss	00000640 occupied
0800bf9c g     F .text	00000018 setlocale
0801a000 g     O .rwdata	00000004 _impure_ptr
0801bdfc g     O .bss	00000004 alt_argc
0800ae08 g     F .text	0000021c __sflush_r
08016fcc g     F .text	00000060 _do_dtors
0800bf88 g     F .text	00000008 __locale_cjk_lang
08003390 g     F .text	00000158 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800da18 g     F .text	00000064 __ulp
0800b448 g     F .text	00000018 __fp_unlock_all
0801a014 g     O .rwdata	00000008 alt_fs_list
080046fc g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800bfb4 g     F .text	0000000c localeconv
0800045c g     F .text	00000044 setLED
080047c4 g     F .text	00000020 GetUsbTaskState
0801704c g     F .text	00000050 alt_ic_isr_register
08017dbc g     O .rodata	00000010 devclasses
0801a03c g       *ABS*	00000000 _edata
08003288 g     F .text	00000038 HIDKEventHandler
0801c6f0 g       *ABS*	00000000 _end
08003908 g     F .text	000000cc MaxIntHandler
08011630 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
080163c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08001080 g     F .text	00000098 textVGADrawColorText
080032c0 g     F .text	00000034 SPI_init
08017124 g     F .text	0000008c alt_ic_irq_disable
0800e578 g     F .text	0000007c __swrite
0801a00c g     O .rwdata	00000004 __malloc_trim_threshold
0800bf7c g     F .text	0000000c __locale_msgcharset
08017a00 g     F .text	00000038 exit
0800be20 g     F .text	000000c4 _fwalk_reent
0800076c g     F .text	000000f8 returnKeys
0800d81c g     F .text	000001fc __mdiff
08004924 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800b424 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08003250 g     F .text	00000038 HIDMEventHandler
08017d4c g     F .text	00000034 _exit
08016be8 g     F .text	0000012c alt_alarm_start
080004e8 g     F .text	00000118 printSignedHex0
08011ce8 g     F .text	0000010c .hidden __muldi3
0800bfc0 g     F .text	000001bc __smakebuf_r
08004cfc g     F .text	00000098 strlen
08017574 g     F .text	0000015c open
08013cb8 g     F .text	000000dc .hidden __gedf2
0801a010 g     O .rwdata	00000004 __wctomb
0800fda0 g     F .text	00000018 __sprint_r
0801702c g     F .text	00000020 alt_icache_flush_all
0801a038 g     O .rwdata	00000004 alt_priority_mask
0801709c g     F .text	00000088 alt_ic_irq_enable
0800932c g     F .text	0000001c __vfprintf_internal
080028f0 g     F .text	00000408 HIDMProbe
08011c8c g     F .text	0000005c _wctomb_r
080032f4 g     F .text	00000028 SPI_wr
080146f4 g     F .text	000008fc .hidden __subdf3
0800d1bc g     F .text	000000b0 __lo0bits
0801a030 g     O .rwdata	00000008 alt_alarm_list
08016f6c g     F .text	00000060 _do_ctors
08011b9c g     F .text	000000c0 wcrtomb
08015294 g     F .text	000000d8 close
080155dc g     F .text	00000084 alt_load
080117b8 g     F .text	00000080 fputwc
0800b428 g     F .text	00000004 __sinit_lock_acquire
08003a08 g     F .text	0000014c XferCtrlReq
0800cf08 g     F .text	00000148 __multadd
0800cee0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10b17c04 	addi	r2,r2,-14864
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10b17c04 	addi	r2,r2,-14864
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a78b17 	ldw	r2,-25044(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a78b17 	ldw	r2,-25044(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800023c:	d687fa14 	ori	gp,gp,8168
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10af6f14 	ori	r2,r2,48572

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18f1bc14 	ori	r3,r3,50928

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80155dc0 	call	80155dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80157780 	call	8015778 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };
BOOT_KBD_REPORT kbdbuf;
BYTE GetDriverandReport() {
 800026c:	defff604 	addi	sp,sp,-40
 8000270:	dfc00915 	stw	ra,36(sp)
 8000274:	df000815 	stw	fp,32(sp)
 8000278:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 800027c:	00bfffc4 	movi	r2,-1
 8000280:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000284:	01020074 	movhi	r4,2049
 8000288:	211f7304 	addi	r4,r4,32204
 800028c:	8004ba80 	call	8004ba8 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000290:	00800044 	movi	r2,1
 8000294:	e0bffd05 	stb	r2,-12(fp)
 8000298:	00001f06 	br	8000318 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 800029c:	e0bffd03 	ldbu	r2,-12(fp)
 80002a0:	1009883a 	mov	r4,r2
 80002a4:	80047e40 	call	80047e4 <GetDevtable>
 80002a8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 80002ac:	e0bffe17 	ldw	r2,-8(fp)
 80002b0:	10800017 	ldw	r2,0(r2)
 80002b4:	10001526 	beq	r2,zero,800030c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 80002b8:	e0bffd03 	ldbu	r2,-12(fp)
 80002bc:	100b883a 	mov	r5,r2
 80002c0:	01020074 	movhi	r4,2049
 80002c4:	211f7c04 	addi	r4,r4,32240
 80002c8:	8004aac0 	call	8004aac <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002cc:	e0bffe17 	ldw	r2,-8(fp)
 80002d0:	10800103 	ldbu	r2,4(r2)
 80002d4:	10c03fcc 	andi	r3,r2,255
 80002d8:	00820074 	movhi	r2,2049
 80002dc:	109f6f04 	addi	r2,r2,32188
 80002e0:	18c7883a 	add	r3,r3,r3
 80002e4:	18c7883a 	add	r3,r3,r3
 80002e8:	10c5883a 	add	r2,r2,r3
 80002ec:	10800017 	ldw	r2,0(r2)
 80002f0:	100b883a 	mov	r5,r2
 80002f4:	01020074 	movhi	r4,2049
 80002f8:	211f7f04 	addi	r4,r4,32252
 80002fc:	8004aac0 	call	8004aac <printf>
			device = tpl_ptr->devclass;
 8000300:	e0bffe17 	ldw	r2,-8(fp)
 8000304:	10800103 	ldbu	r2,4(r2)
 8000308:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 800030c:	e0bffd03 	ldbu	r2,-12(fp)
 8000310:	10800044 	addi	r2,r2,1
 8000314:	e0bffd05 	stb	r2,-12(fp)
 8000318:	e0bffd03 	ldbu	r2,-12(fp)
 800031c:	10800230 	cmpltui	r2,r2,8
 8000320:	103fde1e 	bne	r2,zero,800029c <__alt_data_end+0xfc00029c>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000324:	d0a00003 	ldbu	r2,-32768(gp)
 8000328:	11003fcc 	andi	r4,r2,255
 800032c:	d0a77843 	ldbu	r2,-25119(gp)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	e0ffff44 	addi	r3,fp,-3
 8000338:	d8c00415 	stw	r3,16(sp)
 800033c:	00c00044 	movi	r3,1
 8000340:	d8c00315 	stw	r3,12(sp)
 8000344:	d8800215 	stw	r2,8(sp)
 8000348:	d8000115 	stw	zero,4(sp)
 800034c:	d8000015 	stw	zero,0(sp)
 8000350:	01c00084 	movi	r7,2
 8000354:	01802844 	movi	r6,161
 8000358:	000b883a 	mov	r5,zero
 800035c:	8003a080 	call	8003a08 <XferCtrlReq>
 8000360:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8000364:	e0bfff03 	ldbu	r2,-4(fp)
 8000368:	10000926 	beq	r2,zero,8000390 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 800036c:	01020074 	movhi	r4,2049
 8000370:	211f8104 	addi	r4,r4,32260
 8000374:	8004aac0 	call	8004aac <printf>
		printf("%x \n", rcode);
 8000378:	e0bfff03 	ldbu	r2,-4(fp)
 800037c:	100b883a 	mov	r5,r2
 8000380:	01020074 	movhi	r4,2049
 8000384:	211f8804 	addi	r4,r4,32288
 8000388:	8004aac0 	call	8004aac <printf>
 800038c:	00000906 	br	80003b4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 8000390:	01020074 	movhi	r4,2049
 8000394:	211f8a04 	addi	r4,r4,32296
 8000398:	8004aac0 	call	8004aac <printf>
		printf("%x \n", tmpbyte);
 800039c:	e0bfff43 	ldbu	r2,-3(fp)
 80003a0:	10803fcc 	andi	r2,r2,255
 80003a4:	100b883a 	mov	r5,r2
 80003a8:	01020074 	movhi	r4,2049
 80003ac:	211f8804 	addi	r4,r4,32288
 80003b0:	8004aac0 	call	8004aac <printf>
	}
	printf("Protocol: ");
 80003b4:	01020074 	movhi	r4,2049
 80003b8:	211f8e04 	addi	r4,r4,32312
 80003bc:	8004aac0 	call	8004aac <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003c0:	d0a00003 	ldbu	r2,-32768(gp)
 80003c4:	11003fcc 	andi	r4,r2,255
 80003c8:	d0a77843 	ldbu	r2,-25119(gp)
 80003cc:	10803fcc 	andi	r2,r2,255
 80003d0:	e0ffff44 	addi	r3,fp,-3
 80003d4:	d8c00415 	stw	r3,16(sp)
 80003d8:	00c00044 	movi	r3,1
 80003dc:	d8c00315 	stw	r3,12(sp)
 80003e0:	d8800215 	stw	r2,8(sp)
 80003e4:	d8000115 	stw	zero,4(sp)
 80003e8:	d8000015 	stw	zero,0(sp)
 80003ec:	01c000c4 	movi	r7,3
 80003f0:	01802844 	movi	r6,161
 80003f4:	000b883a 	mov	r5,zero
 80003f8:	8003a080 	call	8003a08 <XferCtrlReq>
 80003fc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8000400:	e0bfff03 	ldbu	r2,-4(fp)
 8000404:	10000926 	beq	r2,zero,800042c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 8000408:	01020074 	movhi	r4,2049
 800040c:	211f9104 	addi	r4,r4,32324
 8000410:	8004aac0 	call	8004aac <printf>
		printf("%x \n", rcode);
 8000414:	e0bfff03 	ldbu	r2,-4(fp)
 8000418:	100b883a 	mov	r5,r2
 800041c:	01020074 	movhi	r4,2049
 8000420:	211f8804 	addi	r4,r4,32288
 8000424:	8004aac0 	call	8004aac <printf>
 8000428:	00000606 	br	8000444 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 800042c:	e0bfff43 	ldbu	r2,-3(fp)
 8000430:	10803fcc 	andi	r2,r2,255
 8000434:	100b883a 	mov	r5,r2
 8000438:	01020074 	movhi	r4,2049
 800043c:	211f9804 	addi	r4,r4,32352
 8000440:	8004aac0 	call	8004aac <printf>
	}
	return device;
 8000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 8000448:	e037883a 	mov	sp,fp
 800044c:	dfc00117 	ldw	ra,4(sp)
 8000450:	df000017 	ldw	fp,0(sp)
 8000454:	dec00204 	addi	sp,sp,8
 8000458:	f800283a 	ret

0800045c <setLED>:

void setLED(int LED) {
 800045c:	defffe04 	addi	sp,sp,-8
 8000460:	df000115 	stw	fp,4(sp)
 8000464:	df000104 	addi	fp,sp,4
 8000468:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 800046c:	00805c04 	movi	r2,368
 8000470:	10c00037 	ldwio	r3,0(r2)
 8000474:	01000044 	movi	r4,1
 8000478:	e0bfff17 	ldw	r2,-4(fp)
 800047c:	2084983a 	sll	r2,r4,r2
 8000480:	1886b03a 	or	r3,r3,r2
 8000484:	00805c04 	movi	r2,368
 8000488:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 800048c:	0001883a 	nop
 8000490:	e037883a 	mov	sp,fp
 8000494:	df000017 	ldw	fp,0(sp)
 8000498:	dec00104 	addi	sp,sp,4
 800049c:	f800283a 	ret

080004a0 <clearLED>:

void clearLED(int LED) {
 80004a0:	defffe04 	addi	sp,sp,-8
 80004a4:	df000115 	stw	fp,4(sp)
 80004a8:	df000104 	addi	fp,sp,4
 80004ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 80004b0:	00805c04 	movi	r2,368
 80004b4:	10c00037 	ldwio	r3,0(r2)
 80004b8:	01000044 	movi	r4,1
 80004bc:	e0bfff17 	ldw	r2,-4(fp)
 80004c0:	2084983a 	sll	r2,r4,r2
 80004c4:	0084303a 	nor	r2,zero,r2
 80004c8:	1886703a 	and	r3,r3,r2
 80004cc:	00805c04 	movi	r2,368
 80004d0:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 80004d4:	0001883a 	nop
 80004d8:	e037883a 	mov	sp,fp
 80004dc:	df000017 	ldw	fp,0(sp)
 80004e0:	dec00104 	addi	sp,sp,4
 80004e4:	f800283a 	ret

080004e8 <printSignedHex0>:

void printSignedHex0(signed char value) {
 80004e8:	defffc04 	addi	sp,sp,-16
 80004ec:	dfc00315 	stw	ra,12(sp)
 80004f0:	df000215 	stw	fp,8(sp)
 80004f4:	df000204 	addi	fp,sp,8
 80004f8:	2005883a 	mov	r2,r4
 80004fc:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8000500:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 8000504:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000508:	00806004 	movi	r2,384
 800050c:	10800037 	ldwio	r2,0(r2)
 8000510:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 8000514:	e0bfff07 	ldb	r2,-4(fp)
 8000518:	1000060e 	bge	r2,zero,8000534 <printSignedHex0+0x4c>
		setLED(11);
 800051c:	010002c4 	movi	r4,11
 8000520:	800045c0 	call	800045c <setLED>
		value = -value;
 8000524:	e0bfff03 	ldbu	r2,-4(fp)
 8000528:	0085c83a 	sub	r2,zero,r2
 800052c:	e0bfff05 	stb	r2,-4(fp)
 8000530:	00000206 	br	800053c <printSignedHex0+0x54>
	} else {
		clearLED(11);
 8000534:	010002c4 	movi	r4,11
 8000538:	80004a00 	call	80004a0 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 800053c:	e0bfff03 	ldbu	r2,-4(fp)
 8000540:	108018c4 	addi	r2,r2,99
 8000544:	10803fcc 	andi	r2,r2,255
 8000548:	108031f0 	cmpltui	r2,r2,199
 800054c:	1000031e 	bne	r2,zero,800055c <printSignedHex0+0x74>
		setLED(13);
 8000550:	01000344 	movi	r4,13
 8000554:	800045c0 	call	800045c <setLED>
 8000558:	00000206 	br	8000564 <printSignedHex0+0x7c>
	else
		clearLED(13);
 800055c:	01000344 	movi	r4,13
 8000560:	80004a00 	call	80004a0 <clearLED>

	value = value % 100;
 8000564:	e0bfff07 	ldb	r2,-4(fp)
 8000568:	01401904 	movi	r5,100
 800056c:	1009883a 	mov	r4,r2
 8000570:	80049240 	call	8004924 <__modsi3>
 8000574:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8000578:	e0bfff07 	ldb	r2,-4(fp)
 800057c:	01400284 	movi	r5,10
 8000580:	1009883a 	mov	r4,r2
 8000584:	80048a00 	call	80048a0 <__divsi3>
 8000588:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 800058c:	e0bfff07 	ldb	r2,-4(fp)
 8000590:	01400284 	movi	r5,10
 8000594:	1009883a 	mov	r4,r2
 8000598:	80049240 	call	8004924 <__modsi3>
 800059c:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 80005a0:	e0bffe8b 	ldhu	r2,-6(fp)
 80005a4:	10803fcc 	andi	r2,r2,255
 80005a8:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 80005ac:	e0bffe03 	ldbu	r2,-8(fp)
 80005b0:	1004933a 	slli	r2,r2,12
 80005b4:	1007883a 	mov	r3,r2
 80005b8:	e0bffe8b 	ldhu	r2,-6(fp)
 80005bc:	1884b03a 	or	r2,r3,r2
 80005c0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 80005c4:	e0bffe43 	ldbu	r2,-7(fp)
 80005c8:	1004923a 	slli	r2,r2,8
 80005cc:	1007883a 	mov	r3,r2
 80005d0:	e0bffe8b 	ldhu	r2,-6(fp)
 80005d4:	1884b03a 	or	r2,r3,r2
 80005d8:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80005dc:	e0fffe8b 	ldhu	r3,-6(fp)
 80005e0:	00806004 	movi	r2,384
 80005e4:	10c00035 	stwio	r3,0(r2)
}
 80005e8:	0001883a 	nop
 80005ec:	e037883a 	mov	sp,fp
 80005f0:	dfc00117 	ldw	ra,4(sp)
 80005f4:	df000017 	ldw	fp,0(sp)
 80005f8:	dec00204 	addi	sp,sp,8
 80005fc:	f800283a 	ret

08000600 <printSignedHex1>:

void printSignedHex1(signed char value) {
 8000600:	defffb04 	addi	sp,sp,-20
 8000604:	dfc00415 	stw	ra,16(sp)
 8000608:	df000315 	stw	fp,12(sp)
 800060c:	df000304 	addi	fp,sp,12
 8000610:	2005883a 	mov	r2,r4
 8000614:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8000618:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 800061c:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000620:	00806004 	movi	r2,384
 8000624:	10800037 	ldwio	r2,0(r2)
 8000628:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 800062c:	e0bfff07 	ldb	r2,-4(fp)
 8000630:	1000060e 	bge	r2,zero,800064c <printSignedHex1+0x4c>
		setLED(10);
 8000634:	01000284 	movi	r4,10
 8000638:	800045c0 	call	800045c <setLED>
		value = -value;
 800063c:	e0bfff03 	ldbu	r2,-4(fp)
 8000640:	0085c83a 	sub	r2,zero,r2
 8000644:	e0bfff05 	stb	r2,-4(fp)
 8000648:	00000206 	br	8000654 <printSignedHex1+0x54>
	} else {
		clearLED(10);
 800064c:	01000284 	movi	r4,10
 8000650:	80004a00 	call	80004a0 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000654:	e0bfff03 	ldbu	r2,-4(fp)
 8000658:	108018c4 	addi	r2,r2,99
 800065c:	10803fcc 	andi	r2,r2,255
 8000660:	108031f0 	cmpltui	r2,r2,199
 8000664:	1000031e 	bne	r2,zero,8000674 <printSignedHex1+0x74>
		setLED(12);
 8000668:	01000304 	movi	r4,12
 800066c:	800045c0 	call	800045c <setLED>
 8000670:	00000206 	br	800067c <printSignedHex1+0x7c>
	else
		clearLED(12);
 8000674:	01000304 	movi	r4,12
 8000678:	80004a00 	call	80004a0 <clearLED>

	value = value % 100;
 800067c:	e0bfff07 	ldb	r2,-4(fp)
 8000680:	01401904 	movi	r5,100
 8000684:	1009883a 	mov	r4,r2
 8000688:	80049240 	call	8004924 <__modsi3>
 800068c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8000690:	e0bfff07 	ldb	r2,-4(fp)
 8000694:	01400284 	movi	r5,10
 8000698:	1009883a 	mov	r4,r2
 800069c:	80048a00 	call	80048a0 <__divsi3>
 80006a0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 80006a4:	e0bfff07 	ldb	r2,-4(fp)
 80006a8:	01400284 	movi	r5,10
 80006ac:	1009883a 	mov	r4,r2
 80006b0:	80049240 	call	8004924 <__modsi3>
 80006b4:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 80006b8:	e0bfff07 	ldb	r2,-4(fp)
 80006bc:	01400284 	movi	r5,10
 80006c0:	1009883a 	mov	r4,r2
 80006c4:	80048a00 	call	80048a0 <__divsi3>
 80006c8:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 80006cc:	e0bfff07 	ldb	r2,-4(fp)
 80006d0:	01400284 	movi	r5,10
 80006d4:	1009883a 	mov	r4,r2
 80006d8:	80049240 	call	8004924 <__modsi3>
 80006dc:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 80006e0:	e0bffe17 	ldw	r2,-8(fp)
 80006e4:	10bfc00c 	andi	r2,r2,65280
 80006e8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 80006ec:	e0bffd03 	ldbu	r2,-12(fp)
 80006f0:	1004913a 	slli	r2,r2,4
 80006f4:	1007883a 	mov	r3,r2
 80006f8:	e0bffe17 	ldw	r2,-8(fp)
 80006fc:	10c4b03a 	or	r2,r2,r3
 8000700:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 8000704:	e0bffd43 	ldbu	r2,-11(fp)
 8000708:	e0fffe17 	ldw	r3,-8(fp)
 800070c:	1884b03a 	or	r2,r3,r2
 8000710:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8000714:	e0fffe17 	ldw	r3,-8(fp)
 8000718:	00806004 	movi	r2,384
 800071c:	10c00035 	stwio	r3,0(r2)
}
 8000720:	0001883a 	nop
 8000724:	e037883a 	mov	sp,fp
 8000728:	dfc00117 	ldw	ra,4(sp)
 800072c:	df000017 	ldw	fp,0(sp)
 8000730:	dec00204 	addi	sp,sp,8
 8000734:	f800283a 	ret

08000738 <setKeycode>:

void setKeycode(WORD keycode)
{
 8000738:	defffe04 	addi	sp,sp,-8
 800073c:	df000115 	stw	fp,4(sp)
 8000740:	df000104 	addi	fp,sp,4
 8000744:	2005883a 	mov	r2,r4
 8000748:	e0bfff0d 	sth	r2,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(0x8002000, keycode);
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 800074c:	e0ffff0b 	ldhu	r3,-4(fp)
 8000750:	00806c04 	movi	r2,432
 8000754:	10c00035 	stwio	r3,0(r2)
}
 8000758:	0001883a 	nop
 800075c:	e037883a 	mov	sp,fp
 8000760:	df000017 	ldw	fp,0(sp)
 8000764:	dec00104 	addi	sp,sp,4
 8000768:	f800283a 	ret

0800076c <returnKeys>:

BYTE* returnKeys()
{
 800076c:	defffd04 	addi	sp,sp,-12
 8000770:	dfc00215 	stw	ra,8(sp)
 8000774:	df000115 	stw	fp,4(sp)
 8000778:	df000104 	addi	fp,sp,4
	    BYTE rcode;
		//BOOT_MOUSE_REPORT buf;		//USB mouse report
		//BOOT_KBD_REPORT kbdbuf;

		BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 800077c:	e03fff05 	stb	zero,-4(fp)
		BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 8000780:	e03fff45 	stb	zero,-3(fp)
		BYTE device = 1;
 8000784:	00800044 	movi	r2,1
 8000788:	e0bfff85 	stb	r2,-2(fp)
		//WORD keycode;

		//printf(".");
		MAX3421E_Task();
 800078c:	80038a40 	call	80038a4 <MAX3421E_Task>
		USB_Task();
 8000790:	80040540 	call	8004054 <USB_Task>
	    //usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8000794:	80047c40 	call	80047c4 <GetUsbTaskState>
 8000798:	10803fcc 	andi	r2,r2,255
 800079c:	10801018 	cmpnei	r2,r2,64
 80007a0:	1000171e 	bne	r2,zero,8000800 <returnKeys+0x94>

		    if (device == 1) {
 80007a4:	e0bfff83 	ldbu	r2,-2(fp)
 80007a8:	10800058 	cmpnei	r2,r2,1
 80007ac:	1000211e 	bne	r2,zero,8000834 <returnKeys+0xc8>
				    //run keyboard debug polling
				    rcode = kbdPoll(&kbdbuf);
 80007b0:	d1277604 	addi	r4,gp,-25128
 80007b4:	80031c80 	call	80031c8 <kbdPoll>
 80007b8:	e0bfffc5 	stb	r2,-1(fp)

					if (rcode == hrNAK) {
 80007bc:	e0bfffc3 	ldbu	r2,-1(fp)
 80007c0:	10800118 	cmpnei	r2,r2,4
 80007c4:	1000021e 	bne	r2,zero,80007d0 <returnKeys+0x64>
					//continue; //NAK means no new data
						return 0;
 80007c8:	0005883a 	mov	r2,zero
 80007cc:	00002006 	br	8000850 <returnKeys+0xe4>
					} else if (rcode) {
 80007d0:	e0bfffc3 	ldbu	r2,-1(fp)
 80007d4:	10001726 	beq	r2,zero,8000834 <returnKeys+0xc8>
							printf("Rcode: ");
 80007d8:	01020074 	movhi	r4,2049
 80007dc:	211f9a04 	addi	r4,r4,32360
 80007e0:	8004aac0 	call	8004aac <printf>
							printf("%x \n", rcode);
 80007e4:	e0bfffc3 	ldbu	r2,-1(fp)
 80007e8:	100b883a 	mov	r5,r2
 80007ec:	01020074 	movhi	r4,2049
 80007f0:	211f8804 	addi	r4,r4,32288
 80007f4:	8004aac0 	call	8004aac <printf>
							return 0;
 80007f8:	0005883a 	mov	r2,zero
 80007fc:	00001406 	br	8000850 <returnKeys+0xe4>
						//printf("\n");
					}



				} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000800:	80047c40 	call	80047c4 <GetUsbTaskState>
 8000804:	10803fcc 	andi	r2,r2,255
 8000808:	10803fd8 	cmpnei	r2,r2,255
 800080c:	1000091e 	bne	r2,zero,8000834 <returnKeys+0xc8>
					if (!errorflag) {
 8000810:	e0bfff43 	ldbu	r2,-3(fp)
 8000814:	1000071e 	bne	r2,zero,8000834 <returnKeys+0xc8>
						errorflag = 1;
 8000818:	00800044 	movi	r2,1
 800081c:	e0bfff45 	stb	r2,-3(fp)
						clearLED(9);
 8000820:	01000244 	movi	r4,9
 8000824:	80004a00 	call	80004a0 <clearLED>
						printf("USB Error State\n");
 8000828:	01020074 	movhi	r4,2049
 800082c:	211f9c04 	addi	r4,r4,32368
 8000830:	8004ba80 	call	8004ba8 <puts>
						//MAX3421E_init();
						//USB_init();
					//}
					//errorflag = 0;
					//clearLED(9);
		printf("%x \n",*kbdbuf.keycode);
 8000834:	d0a77683 	ldbu	r2,-25126(gp)
 8000838:	10803fcc 	andi	r2,r2,255
 800083c:	100b883a 	mov	r5,r2
 8000840:	01020074 	movhi	r4,2049
 8000844:	211f8804 	addi	r4,r4,32288
 8000848:	8004aac0 	call	8004aac <printf>
		return kbdbuf.keycode;
 800084c:	d0a77684 	addi	r2,gp,-25126
}
 8000850:	e037883a 	mov	sp,fp
 8000854:	dfc00117 	ldw	ra,4(sp)
 8000858:	df000017 	ldw	fp,0(sp)
 800085c:	dec00204 	addi	sp,sp,8
 8000860:	f800283a 	ret

08000864 <setColorPalette>:
	{"light magenta",  0xf, 0x5, 0xf},
    {"yellow",         0xf, 0xf, 0x5},
	{"white",          0xf, 0xf, 0xf}
};
void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 8000864:	defffa04 	addi	sp,sp,-24
 8000868:	df000515 	stw	fp,20(sp)
 800086c:	df000504 	addi	fp,sp,20
 8000870:	2011883a 	mov	r8,r4
 8000874:	2809883a 	mov	r4,r5
 8000878:	3007883a 	mov	r3,r6
 800087c:	3805883a 	mov	r2,r7
 8000880:	e23ffc05 	stb	r8,-16(fp)
 8000884:	e13ffd05 	stb	r4,-12(fp)
 8000888:	e0fffe05 	stb	r3,-8(fp)
 800088c:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	//vga_ctrl->VRAM[2048+(color>>1)];
	//vga_ctrl->pallette[color>>1] |= 0b11111111111111111111111111111111;
	vga_ctrl->pallette[color] &= 0b00000000000000000000000000000000;
 8000890:	d0e00117 	ldw	r3,-32764(gp)
 8000894:	e0bffc03 	ldbu	r2,-16(fp)
 8000898:	10807604 	addi	r2,r2,472
 800089c:	1085883a 	add	r2,r2,r2
 80008a0:	1085883a 	add	r2,r2,r2
 80008a4:	1885883a 	add	r2,r3,r2
 80008a8:	10800017 	ldw	r2,0(r2)
 80008ac:	d0e00117 	ldw	r3,-32764(gp)
 80008b0:	e0bffc03 	ldbu	r2,-16(fp)
 80008b4:	10807604 	addi	r2,r2,472
 80008b8:	1085883a 	add	r2,r2,r2
 80008bc:	1085883a 	add	r2,r2,r2
 80008c0:	1885883a 	add	r2,r3,r2
 80008c4:	10000015 	stw	zero,0(r2)
	alt_u32 temp;
	temp = red<<8;
 80008c8:	e0bffd03 	ldbu	r2,-12(fp)
 80008cc:	1004923a 	slli	r2,r2,8
 80008d0:	e0bffb15 	stw	r2,-20(fp)
	temp|= green<<4;
 80008d4:	e0bffe03 	ldbu	r2,-8(fp)
 80008d8:	1004913a 	slli	r2,r2,4
 80008dc:	1007883a 	mov	r3,r2
 80008e0:	e0bffb17 	ldw	r2,-20(fp)
 80008e4:	10c4b03a 	or	r2,r2,r3
 80008e8:	e0bffb15 	stw	r2,-20(fp)
	temp|= blue;
 80008ec:	e0bfff03 	ldbu	r2,-4(fp)
 80008f0:	e0fffb17 	ldw	r3,-20(fp)
 80008f4:	1884b03a 	or	r2,r3,r2
 80008f8:	e0bffb15 	stw	r2,-20(fp)
	vga_ctrl->pallette[color] |= temp;
 80008fc:	d1200117 	ldw	r4,-32764(gp)
 8000900:	e17ffc03 	ldbu	r5,-16(fp)
 8000904:	d0e00117 	ldw	r3,-32764(gp)
 8000908:	e0bffc03 	ldbu	r2,-16(fp)
 800090c:	10807604 	addi	r2,r2,472
 8000910:	1085883a 	add	r2,r2,r2
 8000914:	1085883a 	add	r2,r2,r2
 8000918:	1885883a 	add	r2,r3,r2
 800091c:	10c00017 	ldw	r3,0(r2)
 8000920:	e0bffb17 	ldw	r2,-20(fp)
 8000924:	1886b03a 	or	r3,r3,r2
 8000928:	28807604 	addi	r2,r5,472
 800092c:	1085883a 	add	r2,r2,r2
 8000930:	1085883a 	add	r2,r2,r2
 8000934:	2085883a 	add	r2,r4,r2
 8000938:	10c00015 	stw	r3,0(r2)
	}
 800093c:	0001883a 	nop
 8000940:	e037883a 	mov	sp,fp
 8000944:	df000017 	ldw	fp,0(sp)
 8000948:	dec00104 	addi	sp,sp,4
 800094c:	f800283a 	ret

08000950 <isUsed>:


int occupied[400];

//this function determine whether a block is touching the edge
bool isUsed (int x, int y, int offset) {
 8000950:	defffb04 	addi	sp,sp,-20
 8000954:	dfc00415 	stw	ra,16(sp)
 8000958:	df000315 	stw	fp,12(sp)
 800095c:	df000304 	addi	fp,sp,12
 8000960:	e13ffd15 	stw	r4,-12(fp)
 8000964:	e17ffe15 	stw	r5,-8(fp)
 8000968:	e1bfff15 	stw	r6,-4(fp)
	if((x < 0) || (x >= 10) || (y < 0) || (y >= 20)){
 800096c:	e0bffd17 	ldw	r2,-12(fp)
 8000970:	10000816 	blt	r2,zero,8000994 <isUsed+0x44>
 8000974:	e0bffd17 	ldw	r2,-12(fp)
 8000978:	10800288 	cmpgei	r2,r2,10
 800097c:	1000051e 	bne	r2,zero,8000994 <isUsed+0x44>
 8000980:	e0bffe17 	ldw	r2,-8(fp)
 8000984:	10000316 	blt	r2,zero,8000994 <isUsed+0x44>
 8000988:	e0bffe17 	ldw	r2,-8(fp)
 800098c:	10800510 	cmplti	r2,r2,20
 8000990:	1000021e 	bne	r2,zero,800099c <isUsed+0x4c>
      return true;
 8000994:	00800044 	movi	r2,1
 8000998:	00000f06 	br	80009d8 <isUsed+0x88>
	}
	else{
		return(occupied[(y*10) + x+offset] != 0);
 800099c:	01400284 	movi	r5,10
 80009a0:	e13ffe17 	ldw	r4,-8(fp)
 80009a4:	8004a540 	call	8004a54 <__mulsi3>
 80009a8:	1007883a 	mov	r3,r2
 80009ac:	e0bffd17 	ldw	r2,-12(fp)
 80009b0:	1887883a 	add	r3,r3,r2
 80009b4:	e0bfff17 	ldw	r2,-4(fp)
 80009b8:	1887883a 	add	r3,r3,r2
 80009bc:	008200b4 	movhi	r2,2050
 80009c0:	10af9a04 	addi	r2,r2,-16792
 80009c4:	18c7883a 	add	r3,r3,r3
 80009c8:	18c7883a 	add	r3,r3,r3
 80009cc:	10c5883a 	add	r2,r2,r3
 80009d0:	10800017 	ldw	r2,0(r2)
 80009d4:	1004c03a 	cmpne	r2,r2,zero
	}

}
 80009d8:	e037883a 	mov	sp,fp
 80009dc:	dfc00117 	ldw	ra,4(sp)
 80009e0:	df000017 	ldw	fp,0(sp)
 80009e4:	dec00204 	addi	sp,sp,8
 80009e8:	f800283a 	ret

080009ec <removeRow>:
int removeRow(int y,int offset){
 80009ec:	defff704 	addi	sp,sp,-36
 80009f0:	dfc00815 	stw	ra,32(sp)
 80009f4:	df000715 	stw	fp,28(sp)
 80009f8:	df000704 	addi	fp,sp,28
 80009fc:	e13ffe15 	stw	r4,-8(fp)
 8000a00:	e17fff15 	stw	r5,-4(fp)
	int rowCount = 0;
 8000a04:	e03ff915 	stw	zero,-28(fp)
	int colCount = 0;
 8000a08:	e03ffa15 	stw	zero,-24(fp)
	for(int i=y;i<=y+3;i++){
 8000a0c:	e0bffe17 	ldw	r2,-8(fp)
 8000a10:	e0bffb15 	stw	r2,-20(fp)
 8000a14:	00008706 	br	8000c34 <removeRow+0x248>
		if(i<20){
 8000a18:	e0bffb17 	ldw	r2,-20(fp)
 8000a1c:	10800508 	cmpgei	r2,r2,20
 8000a20:	1000811e 	bne	r2,zero,8000c28 <removeRow+0x23c>
			for(int j = 0;j<10;j++){
 8000a24:	e03ffc15 	stw	zero,-16(fp)
 8000a28:	00001506 	br	8000a80 <removeRow+0x94>
				if(occupied[i*10 + j + offset] != 0){
 8000a2c:	01400284 	movi	r5,10
 8000a30:	e13ffb17 	ldw	r4,-20(fp)
 8000a34:	8004a540 	call	8004a54 <__mulsi3>
 8000a38:	1007883a 	mov	r3,r2
 8000a3c:	e0bffc17 	ldw	r2,-16(fp)
 8000a40:	1887883a 	add	r3,r3,r2
 8000a44:	e0bfff17 	ldw	r2,-4(fp)
 8000a48:	1887883a 	add	r3,r3,r2
 8000a4c:	008200b4 	movhi	r2,2050
 8000a50:	10af9a04 	addi	r2,r2,-16792
 8000a54:	18c7883a 	add	r3,r3,r3
 8000a58:	18c7883a 	add	r3,r3,r3
 8000a5c:	10c5883a 	add	r2,r2,r3
 8000a60:	10800017 	ldw	r2,0(r2)
 8000a64:	10000326 	beq	r2,zero,8000a74 <removeRow+0x88>
					colCount ++;
 8000a68:	e0bffa17 	ldw	r2,-24(fp)
 8000a6c:	10800044 	addi	r2,r2,1
 8000a70:	e0bffa15 	stw	r2,-24(fp)
int removeRow(int y,int offset){
	int rowCount = 0;
	int colCount = 0;
	for(int i=y;i<=y+3;i++){
		if(i<20){
			for(int j = 0;j<10;j++){
 8000a74:	e0bffc17 	ldw	r2,-16(fp)
 8000a78:	10800044 	addi	r2,r2,1
 8000a7c:	e0bffc15 	stw	r2,-16(fp)
 8000a80:	e0bffc17 	ldw	r2,-16(fp)
 8000a84:	10800290 	cmplti	r2,r2,10
 8000a88:	103fe81e 	bne	r2,zero,8000a2c <__alt_data_end+0xfc000a2c>
				if(occupied[i*10 + j + offset] != 0){
					colCount ++;
				}
			}
			if(colCount == 10){
 8000a8c:	e0bffa17 	ldw	r2,-24(fp)
 8000a90:	10800298 	cmpnei	r2,r2,10
 8000a94:	1000631e 	bne	r2,zero,8000c24 <removeRow+0x238>
			printf("%x \n", y);
 8000a98:	e17ffe17 	ldw	r5,-8(fp)
 8000a9c:	01020074 	movhi	r4,2049
 8000aa0:	211f8804 	addi	r4,r4,32288
 8000aa4:	8004aac0 	call	8004aac <printf>
				for(int k = ((i)*10+9);k>0;k--){
 8000aa8:	01400284 	movi	r5,10
 8000aac:	e13ffb17 	ldw	r4,-20(fp)
 8000ab0:	8004a540 	call	8004a54 <__mulsi3>
 8000ab4:	10800244 	addi	r2,r2,9
 8000ab8:	e0bffd15 	stw	r2,-12(fp)
 8000abc:	00005406 	br	8000c10 <removeRow+0x224>
					if(k < 200){
 8000ac0:	e0bffd17 	ldw	r2,-12(fp)
 8000ac4:	10803208 	cmpgei	r2,r2,200
 8000ac8:	10004e1e 	bne	r2,zero,8000c04 <removeRow+0x218>
					if((k-(10)) >= 0){
 8000acc:	e0bffd17 	ldw	r2,-12(fp)
 8000ad0:	10bffd84 	addi	r2,r2,-10
 8000ad4:	10003a16 	blt	r2,zero,8000bc0 <removeRow+0x1d4>
						vga_ctrl->VRAM[k-10+offset] = 0b00000000000000000000000000000000;
 8000ad8:	d0e00117 	ldw	r3,-32764(gp)
 8000adc:	e0bffd17 	ldw	r2,-12(fp)
 8000ae0:	113ffd84 	addi	r4,r2,-10
 8000ae4:	e0bfff17 	ldw	r2,-4(fp)
 8000ae8:	2085883a 	add	r2,r4,r2
 8000aec:	1085883a 	add	r2,r2,r2
 8000af0:	1085883a 	add	r2,r2,r2
 8000af4:	1885883a 	add	r2,r3,r2
 8000af8:	10000015 	stw	zero,0(r2)
						vga_ctrl->VRAM[k+offset] = occupied[k-10+offset];
 8000afc:	d1600117 	ldw	r5,-32764(gp)
 8000b00:	e0fffd17 	ldw	r3,-12(fp)
 8000b04:	e0bfff17 	ldw	r2,-4(fp)
 8000b08:	1887883a 	add	r3,r3,r2
 8000b0c:	e0bffd17 	ldw	r2,-12(fp)
 8000b10:	113ffd84 	addi	r4,r2,-10
 8000b14:	e0bfff17 	ldw	r2,-4(fp)
 8000b18:	2089883a 	add	r4,r4,r2
 8000b1c:	008200b4 	movhi	r2,2050
 8000b20:	10af9a04 	addi	r2,r2,-16792
 8000b24:	2109883a 	add	r4,r4,r4
 8000b28:	2109883a 	add	r4,r4,r4
 8000b2c:	1105883a 	add	r2,r2,r4
 8000b30:	10800017 	ldw	r2,0(r2)
 8000b34:	1009883a 	mov	r4,r2
 8000b38:	18c5883a 	add	r2,r3,r3
 8000b3c:	1085883a 	add	r2,r2,r2
 8000b40:	2885883a 	add	r2,r5,r2
 8000b44:	11000015 	stw	r4,0(r2)
						occupied[k+offset] = occupied[k-10+offset];
 8000b48:	e0fffd17 	ldw	r3,-12(fp)
 8000b4c:	e0bfff17 	ldw	r2,-4(fp)
 8000b50:	1887883a 	add	r3,r3,r2
 8000b54:	e0bffd17 	ldw	r2,-12(fp)
 8000b58:	113ffd84 	addi	r4,r2,-10
 8000b5c:	e0bfff17 	ldw	r2,-4(fp)
 8000b60:	2089883a 	add	r4,r4,r2
 8000b64:	008200b4 	movhi	r2,2050
 8000b68:	10af9a04 	addi	r2,r2,-16792
 8000b6c:	2109883a 	add	r4,r4,r4
 8000b70:	2109883a 	add	r4,r4,r4
 8000b74:	1105883a 	add	r2,r2,r4
 8000b78:	11000017 	ldw	r4,0(r2)
 8000b7c:	008200b4 	movhi	r2,2050
 8000b80:	10af9a04 	addi	r2,r2,-16792
 8000b84:	18c7883a 	add	r3,r3,r3
 8000b88:	18c7883a 	add	r3,r3,r3
 8000b8c:	10c5883a 	add	r2,r2,r3
 8000b90:	11000015 	stw	r4,0(r2)
						occupied[k-10+offset] = 0;
 8000b94:	e0bffd17 	ldw	r2,-12(fp)
 8000b98:	10fffd84 	addi	r3,r2,-10
 8000b9c:	e0bfff17 	ldw	r2,-4(fp)
 8000ba0:	1887883a 	add	r3,r3,r2
 8000ba4:	008200b4 	movhi	r2,2050
 8000ba8:	10af9a04 	addi	r2,r2,-16792
 8000bac:	18c7883a 	add	r3,r3,r3
 8000bb0:	18c7883a 	add	r3,r3,r3
 8000bb4:	10c5883a 	add	r2,r2,r3
 8000bb8:	10000015 	stw	zero,0(r2)
 8000bbc:	00001106 	br	8000c04 <removeRow+0x218>
					}
					else{
						vga_ctrl->VRAM[k+offset] = 0b00000000000000000000000000000000;
 8000bc0:	d0e00117 	ldw	r3,-32764(gp)
 8000bc4:	e13ffd17 	ldw	r4,-12(fp)
 8000bc8:	e0bfff17 	ldw	r2,-4(fp)
 8000bcc:	2085883a 	add	r2,r4,r2
 8000bd0:	1085883a 	add	r2,r2,r2
 8000bd4:	1085883a 	add	r2,r2,r2
 8000bd8:	1885883a 	add	r2,r3,r2
 8000bdc:	10000015 	stw	zero,0(r2)
						occupied[k+offset] = 0;
 8000be0:	e0fffd17 	ldw	r3,-12(fp)
 8000be4:	e0bfff17 	ldw	r2,-4(fp)
 8000be8:	1887883a 	add	r3,r3,r2
 8000bec:	008200b4 	movhi	r2,2050
 8000bf0:	10af9a04 	addi	r2,r2,-16792
 8000bf4:	18c7883a 	add	r3,r3,r3
 8000bf8:	18c7883a 	add	r3,r3,r3
 8000bfc:	10c5883a 	add	r2,r2,r3
 8000c00:	10000015 	stw	zero,0(r2)
					colCount ++;
				}
			}
			if(colCount == 10){
			printf("%x \n", y);
				for(int k = ((i)*10+9);k>0;k--){
 8000c04:	e0bffd17 	ldw	r2,-12(fp)
 8000c08:	10bfffc4 	addi	r2,r2,-1
 8000c0c:	e0bffd15 	stw	r2,-12(fp)
 8000c10:	e0bffd17 	ldw	r2,-12(fp)
 8000c14:	00bfaa16 	blt	zero,r2,8000ac0 <__alt_data_end+0xfc000ac0>
						vga_ctrl->VRAM[k+offset] = 0b00000000000000000000000000000000;
						occupied[k+offset] = 0;
					}
					}
				}
				rowCount++;
 8000c18:	e0bff917 	ldw	r2,-28(fp)
 8000c1c:	10800044 	addi	r2,r2,1
 8000c20:	e0bff915 	stw	r2,-28(fp)
			}
			colCount = 0;
 8000c24:	e03ffa15 	stw	zero,-24(fp)

}
int removeRow(int y,int offset){
	int rowCount = 0;
	int colCount = 0;
	for(int i=y;i<=y+3;i++){
 8000c28:	e0bffb17 	ldw	r2,-20(fp)
 8000c2c:	10800044 	addi	r2,r2,1
 8000c30:	e0bffb15 	stw	r2,-20(fp)
 8000c34:	e0bffe17 	ldw	r2,-8(fp)
 8000c38:	10c000c4 	addi	r3,r2,3
 8000c3c:	e0bffb17 	ldw	r2,-20(fp)
 8000c40:	18bf750e 	bge	r3,r2,8000a18 <__alt_data_end+0xfc000a18>
			}
			colCount = 0;
		}

	}
	return rowCount;
 8000c44:	e0bff917 	ldw	r2,-28(fp)
}
 8000c48:	e037883a 	mov	sp,fp
 8000c4c:	dfc00117 	ldw	ra,4(sp)
 8000c50:	df000017 	ldw	fp,0(sp)
 8000c54:	dec00204 	addi	sp,sp,8
 8000c58:	f800283a 	ret

08000c5c <placeNewTet>:
bool placeNewTet(int val,int color,int offset){
 8000c5c:	defff104 	addi	sp,sp,-60
 8000c60:	dfc00e15 	stw	ra,56(sp)
 8000c64:	df000d15 	stw	fp,52(sp)
 8000c68:	df000d04 	addi	fp,sp,52
 8000c6c:	e13ffd15 	stw	r4,-12(fp)
 8000c70:	e17ffe15 	stw	r5,-8(fp)
 8000c74:	e1bfff15 	stw	r6,-4(fp)
	int x = 3;
 8000c78:	008000c4 	movi	r2,3
 8000c7c:	e0bff315 	stw	r2,-52(fp)
	int y = 0;
 8000c80:	e03ff415 	stw	zero,-48(fp)
	bool finish = true;
 8000c84:	00800044 	movi	r2,1
 8000c88:	e0bff505 	stb	r2,-44(fp)
	int blocks[4] = {0,0,0,0};
 8000c8c:	e03ff915 	stw	zero,-28(fp)
 8000c90:	e03ffa15 	stw	zero,-24(fp)
 8000c94:	e03ffb15 	stw	zero,-20(fp)
 8000c98:	e03ffc15 	stw	zero,-16(fp)
	int block_count = 0;
 8000c9c:	e03ff615 	stw	zero,-40(fp)
	for(int bit = 0x8000 ; bit > 0 ; bit = bit >> 1) {
 8000ca0:	00a00014 	movui	r2,32768
 8000ca4:	e0bff715 	stw	r2,-36(fp)
 8000ca8:	00002c06 	br	8000d5c <placeNewTet+0x100>
		if((val & bit) != 0){
 8000cac:	e0fffd17 	ldw	r3,-12(fp)
 8000cb0:	e0bff717 	ldw	r2,-36(fp)
 8000cb4:	1884703a 	and	r2,r3,r2
 8000cb8:	10001a26 	beq	r2,zero,8000d24 <placeNewTet+0xc8>
			if(isUsed(x,y,offset)){
 8000cbc:	e1bfff17 	ldw	r6,-4(fp)
 8000cc0:	e17ff417 	ldw	r5,-48(fp)
 8000cc4:	e13ff317 	ldw	r4,-52(fp)
 8000cc8:	80009500 	call	8000950 <isUsed>
 8000ccc:	10803fcc 	andi	r2,r2,255
 8000cd0:	10000226 	beq	r2,zero,8000cdc <placeNewTet+0x80>
				finish = false;
 8000cd4:	e03ff505 	stb	zero,-44(fp)
				break;
 8000cd8:	00002206 	br	8000d64 <placeNewTet+0x108>
			}
			else{
			blocks[block_count] = y*10+x;
 8000cdc:	01400284 	movi	r5,10
 8000ce0:	e13ff417 	ldw	r4,-48(fp)
 8000ce4:	8004a540 	call	8004a54 <__mulsi3>
 8000ce8:	1007883a 	mov	r3,r2
 8000cec:	e0bff317 	ldw	r2,-52(fp)
 8000cf0:	1887883a 	add	r3,r3,r2
 8000cf4:	e0bff617 	ldw	r2,-40(fp)
 8000cf8:	1085883a 	add	r2,r2,r2
 8000cfc:	1085883a 	add	r2,r2,r2
 8000d00:	e13ff304 	addi	r4,fp,-52
 8000d04:	2085883a 	add	r2,r4,r2
 8000d08:	10800604 	addi	r2,r2,24
 8000d0c:	10c00015 	stw	r3,0(r2)
			block_count++;
 8000d10:	e0bff617 	ldw	r2,-40(fp)
 8000d14:	10800044 	addi	r2,r2,1
 8000d18:	e0bff615 	stw	r2,-40(fp)
			finish = true;
 8000d1c:	00800044 	movi	r2,1
 8000d20:	e0bff505 	stb	r2,-44(fp)
			}
			}
		x++;
 8000d24:	e0bff317 	ldw	r2,-52(fp)
 8000d28:	10800044 	addi	r2,r2,1
 8000d2c:	e0bff315 	stw	r2,-52(fp)
		if(x > 6){
 8000d30:	e0bff317 	ldw	r2,-52(fp)
 8000d34:	108001d0 	cmplti	r2,r2,7
 8000d38:	1000051e 	bne	r2,zero,8000d50 <placeNewTet+0xf4>
		x = 3;
 8000d3c:	008000c4 	movi	r2,3
 8000d40:	e0bff315 	stw	r2,-52(fp)
		y++;
 8000d44:	e0bff417 	ldw	r2,-48(fp)
 8000d48:	10800044 	addi	r2,r2,1
 8000d4c:	e0bff415 	stw	r2,-48(fp)
	int x = 3;
	int y = 0;
	bool finish = true;
	int blocks[4] = {0,0,0,0};
	int block_count = 0;
	for(int bit = 0x8000 ; bit > 0 ; bit = bit >> 1) {
 8000d50:	e0bff717 	ldw	r2,-36(fp)
 8000d54:	1005d07a 	srai	r2,r2,1
 8000d58:	e0bff715 	stw	r2,-36(fp)
 8000d5c:	e0bff717 	ldw	r2,-36(fp)
 8000d60:	00bfd216 	blt	zero,r2,8000cac <__alt_data_end+0xfc000cac>
		if(x > 6){
		x = 3;
		y++;
		}
}
	if(finish){
 8000d64:	e0bff503 	ldbu	r2,-44(fp)
 8000d68:	10002726 	beq	r2,zero,8000e08 <placeNewTet+0x1ac>
		for(int i =0;i<4;i++){
 8000d6c:	e03ff815 	stw	zero,-32(fp)
 8000d70:	00002206 	br	8000dfc <placeNewTet+0x1a0>
			//printf("%x \n",blocks[i]);
			occupied[blocks[i]+offset] = color;
 8000d74:	e0bff817 	ldw	r2,-32(fp)
 8000d78:	1085883a 	add	r2,r2,r2
 8000d7c:	1085883a 	add	r2,r2,r2
 8000d80:	e0fff304 	addi	r3,fp,-52
 8000d84:	1885883a 	add	r2,r3,r2
 8000d88:	10800604 	addi	r2,r2,24
 8000d8c:	10c00017 	ldw	r3,0(r2)
 8000d90:	e0bfff17 	ldw	r2,-4(fp)
 8000d94:	1887883a 	add	r3,r3,r2
 8000d98:	008200b4 	movhi	r2,2050
 8000d9c:	10af9a04 	addi	r2,r2,-16792
 8000da0:	18c7883a 	add	r3,r3,r3
 8000da4:	18c7883a 	add	r3,r3,r3
 8000da8:	10c5883a 	add	r2,r2,r3
 8000dac:	e0fffe17 	ldw	r3,-8(fp)
 8000db0:	10c00015 	stw	r3,0(r2)
			vga_ctrl->VRAM[blocks[i]+offset] = color;
 8000db4:	d1200117 	ldw	r4,-32764(gp)
 8000db8:	e0bff817 	ldw	r2,-32(fp)
 8000dbc:	1085883a 	add	r2,r2,r2
 8000dc0:	1085883a 	add	r2,r2,r2
 8000dc4:	e0fff304 	addi	r3,fp,-52
 8000dc8:	1885883a 	add	r2,r3,r2
 8000dcc:	10800604 	addi	r2,r2,24
 8000dd0:	10c00017 	ldw	r3,0(r2)
 8000dd4:	e0bfff17 	ldw	r2,-4(fp)
 8000dd8:	1885883a 	add	r2,r3,r2
 8000ddc:	e0fffe17 	ldw	r3,-8(fp)
 8000de0:	1085883a 	add	r2,r2,r2
 8000de4:	1085883a 	add	r2,r2,r2
 8000de8:	2085883a 	add	r2,r4,r2
 8000dec:	10c00015 	stw	r3,0(r2)
		x = 3;
		y++;
		}
}
	if(finish){
		for(int i =0;i<4;i++){
 8000df0:	e0bff817 	ldw	r2,-32(fp)
 8000df4:	10800044 	addi	r2,r2,1
 8000df8:	e0bff815 	stw	r2,-32(fp)
 8000dfc:	e0bff817 	ldw	r2,-32(fp)
 8000e00:	10800110 	cmplti	r2,r2,4
 8000e04:	103fdb1e 	bne	r2,zero,8000d74 <__alt_data_end+0xfc000d74>
			occupied[blocks[i]+offset] = color;
			vga_ctrl->VRAM[blocks[i]+offset] = color;
		}

	}
	return finish;
 8000e08:	e0bff503 	ldbu	r2,-44(fp)
}
 8000e0c:	e037883a 	mov	sp,fp
 8000e10:	dfc00117 	ldw	ra,4(sp)
 8000e14:	df000017 	ldw	fp,0(sp)
 8000e18:	dec00204 	addi	sp,sp,8
 8000e1c:	f800283a 	ret

08000e20 <initGame>:

void initGame(){
 8000e20:	defffb04 	addi	sp,sp,-20
 8000e24:	dfc00415 	stw	ra,16(sp)
 8000e28:	df000315 	stw	fp,12(sp)
 8000e2c:	dc400215 	stw	r17,8(sp)
 8000e30:	dc000115 	stw	r16,4(sp)
 8000e34:	df000304 	addi	fp,sp,12
	for(int i=0;i<200;i++){
 8000e38:	e03ffd15 	stw	zero,-12(fp)
 8000e3c:	00003a06 	br	8000f28 <initGame+0x108>
			vga_ctrl->VRAM[i] = rand()%7 +1;
 8000e40:	d4200117 	ldw	r16,-32764(gp)
 8000e44:	8004bd40 	call	8004bd4 <rand>
 8000e48:	014001c4 	movi	r5,7
 8000e4c:	1009883a 	mov	r4,r2
 8000e50:	80049240 	call	8004924 <__modsi3>
 8000e54:	10800044 	addi	r2,r2,1
 8000e58:	1007883a 	mov	r3,r2
 8000e5c:	e0bffd17 	ldw	r2,-12(fp)
 8000e60:	1085883a 	add	r2,r2,r2
 8000e64:	1085883a 	add	r2,r2,r2
 8000e68:	8085883a 	add	r2,r16,r2
 8000e6c:	10c00015 	stw	r3,0(r2)
			vga_ctrl->VRAM[i+200] = rand()%7 +1;
 8000e70:	d4600117 	ldw	r17,-32764(gp)
 8000e74:	e0bffd17 	ldw	r2,-12(fp)
 8000e78:	14003204 	addi	r16,r2,200
 8000e7c:	8004bd40 	call	8004bd4 <rand>
 8000e80:	014001c4 	movi	r5,7
 8000e84:	1009883a 	mov	r4,r2
 8000e88:	80049240 	call	8004924 <__modsi3>
 8000e8c:	10800044 	addi	r2,r2,1
 8000e90:	1007883a 	mov	r3,r2
 8000e94:	8405883a 	add	r2,r16,r16
 8000e98:	1085883a 	add	r2,r2,r2
 8000e9c:	8885883a 	add	r2,r17,r2
 8000ea0:	10c00015 	stw	r3,0(r2)
			usleep(5000);
 8000ea4:	0104e204 	movi	r4,5000
 8000ea8:	8015c540 	call	8015c54 <usleep>
			vga_ctrl->VRAM[i] = 0b00000000000000000000000000000000;
 8000eac:	d0e00117 	ldw	r3,-32764(gp)
 8000eb0:	e0bffd17 	ldw	r2,-12(fp)
 8000eb4:	1085883a 	add	r2,r2,r2
 8000eb8:	1085883a 	add	r2,r2,r2
 8000ebc:	1885883a 	add	r2,r3,r2
 8000ec0:	10000015 	stw	zero,0(r2)
			occupied[i] = 0;
 8000ec4:	008200b4 	movhi	r2,2050
 8000ec8:	10af9a04 	addi	r2,r2,-16792
 8000ecc:	e0fffd17 	ldw	r3,-12(fp)
 8000ed0:	18c7883a 	add	r3,r3,r3
 8000ed4:	18c7883a 	add	r3,r3,r3
 8000ed8:	10c5883a 	add	r2,r2,r3
 8000edc:	10000015 	stw	zero,0(r2)


			vga_ctrl->VRAM[i+200] = 0b00000000000000000000000000000000;
 8000ee0:	d0e00117 	ldw	r3,-32764(gp)
 8000ee4:	e0bffd17 	ldw	r2,-12(fp)
 8000ee8:	10803204 	addi	r2,r2,200
 8000eec:	1085883a 	add	r2,r2,r2
 8000ef0:	1085883a 	add	r2,r2,r2
 8000ef4:	1885883a 	add	r2,r3,r2
 8000ef8:	10000015 	stw	zero,0(r2)
			occupied[i+200] = 0;
 8000efc:	e0bffd17 	ldw	r2,-12(fp)
 8000f00:	10c03204 	addi	r3,r2,200
 8000f04:	008200b4 	movhi	r2,2050
 8000f08:	10af9a04 	addi	r2,r2,-16792
 8000f0c:	18c7883a 	add	r3,r3,r3
 8000f10:	18c7883a 	add	r3,r3,r3
 8000f14:	10c5883a 	add	r2,r2,r3
 8000f18:	10000015 	stw	zero,0(r2)
	}
	return finish;
}

void initGame(){
	for(int i=0;i<200;i++){
 8000f1c:	e0bffd17 	ldw	r2,-12(fp)
 8000f20:	10800044 	addi	r2,r2,1
 8000f24:	e0bffd15 	stw	r2,-12(fp)
 8000f28:	e0bffd17 	ldw	r2,-12(fp)
 8000f2c:	10803210 	cmplti	r2,r2,200
 8000f30:	103fc31e 	bne	r2,zero,8000e40 <__alt_data_end+0xfc000e40>

			vga_ctrl->VRAM[i+200] = 0b00000000000000000000000000000000;
			occupied[i+200] = 0;
		}

	usleep(70000);
 8000f34:	01000074 	movhi	r4,1
 8000f38:	21045c04 	addi	r4,r4,4464
 8000f3c:	8015c540 	call	8015c54 <usleep>
}
 8000f40:	0001883a 	nop
 8000f44:	e6fffe04 	addi	sp,fp,-8
 8000f48:	dfc00317 	ldw	ra,12(sp)
 8000f4c:	df000217 	ldw	fp,8(sp)
 8000f50:	dc400117 	ldw	r17,4(sp)
 8000f54:	dc000017 	ldw	r16,0(sp)
 8000f58:	dec00404 	addi	sp,sp,16
 8000f5c:	f800283a 	ret

08000f60 <genTet>:
int pieceNums[28] = {0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6};
int pieceCount = 0;
int genTet(){
 8000f60:	defffb04 	addi	sp,sp,-20
 8000f64:	dfc00415 	stw	ra,16(sp)
 8000f68:	df000315 	stw	fp,12(sp)
 8000f6c:	df000304 	addi	fp,sp,12
	int res = -1;
 8000f70:	00bfffc4 	movi	r2,-1
 8000f74:	e0bfff15 	stw	r2,-4(fp)
	if(pieceCount == 28){
 8000f78:	d0a77517 	ldw	r2,-25132(gp)
 8000f7c:	10800718 	cmpnei	r2,r2,28
 8000f80:	1000151e 	bne	r2,zero,8000fd8 <genTet+0x78>
		pieceCount = 0;
 8000f84:	d0277515 	stw	zero,-25132(gp)
		for(int i=0;i<28;i++){
 8000f88:	e03ffd15 	stw	zero,-12(fp)
 8000f8c:	00000f06 	br	8000fcc <genTet+0x6c>
			pieceNums[i] = i/4;
 8000f90:	e0bffd17 	ldw	r2,-12(fp)
 8000f94:	1000010e 	bge	r2,zero,8000f9c <genTet+0x3c>
 8000f98:	108000c4 	addi	r2,r2,3
 8000f9c:	1005d0ba 	srai	r2,r2,2
 8000fa0:	1009883a 	mov	r4,r2
 8000fa4:	008200b4 	movhi	r2,2050
 8000fa8:	10a10b04 	addi	r2,r2,-31700
 8000fac:	e0fffd17 	ldw	r3,-12(fp)
 8000fb0:	18c7883a 	add	r3,r3,r3
 8000fb4:	18c7883a 	add	r3,r3,r3
 8000fb8:	10c5883a 	add	r2,r2,r3
 8000fbc:	11000015 	stw	r4,0(r2)
int pieceCount = 0;
int genTet(){
	int res = -1;
	if(pieceCount == 28){
		pieceCount = 0;
		for(int i=0;i<28;i++){
 8000fc0:	e0bffd17 	ldw	r2,-12(fp)
 8000fc4:	10800044 	addi	r2,r2,1
 8000fc8:	e0bffd15 	stw	r2,-12(fp)
 8000fcc:	e0bffd17 	ldw	r2,-12(fp)
 8000fd0:	10800710 	cmplti	r2,r2,28
 8000fd4:	103fee1e 	bne	r2,zero,8000f90 <__alt_data_end+0xfc000f90>
			pieceNums[i] = i/4;
		}
	}
	int select = rand()%28;
 8000fd8:	8004bd40 	call	8004bd4 <rand>
 8000fdc:	01400704 	movi	r5,28
 8000fe0:	1009883a 	mov	r4,r2
 8000fe4:	80049240 	call	8004924 <__modsi3>
 8000fe8:	e0bffe15 	stw	r2,-8(fp)
	while(pieceNums[select] == -1){
 8000fec:	00000506 	br	8001004 <genTet+0xa4>
		select = rand()%28;
 8000ff0:	8004bd40 	call	8004bd4 <rand>
 8000ff4:	01400704 	movi	r5,28
 8000ff8:	1009883a 	mov	r4,r2
 8000ffc:	80049240 	call	8004924 <__modsi3>
 8001000:	e0bffe15 	stw	r2,-8(fp)
		for(int i=0;i<28;i++){
			pieceNums[i] = i/4;
		}
	}
	int select = rand()%28;
	while(pieceNums[select] == -1){
 8001004:	008200b4 	movhi	r2,2050
 8001008:	10a10b04 	addi	r2,r2,-31700
 800100c:	e0fffe17 	ldw	r3,-8(fp)
 8001010:	18c7883a 	add	r3,r3,r3
 8001014:	18c7883a 	add	r3,r3,r3
 8001018:	10c5883a 	add	r2,r2,r3
 800101c:	10800017 	ldw	r2,0(r2)
 8001020:	10bfffe0 	cmpeqi	r2,r2,-1
 8001024:	103ff21e 	bne	r2,zero,8000ff0 <__alt_data_end+0xfc000ff0>
		select = rand()%28;
	}
	res = pieceNums[select];
 8001028:	008200b4 	movhi	r2,2050
 800102c:	10a10b04 	addi	r2,r2,-31700
 8001030:	e0fffe17 	ldw	r3,-8(fp)
 8001034:	18c7883a 	add	r3,r3,r3
 8001038:	18c7883a 	add	r3,r3,r3
 800103c:	10c5883a 	add	r2,r2,r3
 8001040:	10800017 	ldw	r2,0(r2)
 8001044:	e0bfff15 	stw	r2,-4(fp)
	pieceNums[select] = -1;
 8001048:	008200b4 	movhi	r2,2050
 800104c:	10a10b04 	addi	r2,r2,-31700
 8001050:	e0fffe17 	ldw	r3,-8(fp)
 8001054:	18c7883a 	add	r3,r3,r3
 8001058:	18c7883a 	add	r3,r3,r3
 800105c:	10c5883a 	add	r2,r2,r3
 8001060:	00ffffc4 	movi	r3,-1
 8001064:	10c00015 	stw	r3,0(r2)
	return res;
 8001068:	e0bfff17 	ldw	r2,-4(fp)
}
 800106c:	e037883a 	mov	sp,fp
 8001070:	dfc00117 	ldw	ra,4(sp)
 8001074:	df000017 	ldw	fp,0(sp)
 8001078:	dec00204 	addi	sp,sp,8
 800107c:	f800283a 	ret

08001080 <textVGADrawColorText>:


void textVGADrawColorText(char* str, int offset)
{
 8001080:	defffc04 	addi	sp,sp,-16
 8001084:	df000315 	stw	fp,12(sp)
 8001088:	df000304 	addi	fp,sp,12
 800108c:	e13ffe15 	stw	r4,-8(fp)
 8001090:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
 8001094:	e03ffd15 	stw	zero,-12(fp)
	while (str[i]!=0)
 8001098:	00001206 	br	80010e4 <textVGADrawColorText+0x64>
	{
		vga_ctrl->VRAM[i+offset] = str[i];
 800109c:	d1200117 	ldw	r4,-32764(gp)
 80010a0:	e0fffd17 	ldw	r3,-12(fp)
 80010a4:	e0bfff17 	ldw	r2,-4(fp)
 80010a8:	1885883a 	add	r2,r3,r2
 80010ac:	e0fffd17 	ldw	r3,-12(fp)
 80010b0:	e17ffe17 	ldw	r5,-8(fp)
 80010b4:	28c7883a 	add	r3,r5,r3
 80010b8:	18c00003 	ldbu	r3,0(r3)
 80010bc:	18c03fcc 	andi	r3,r3,255
 80010c0:	18c0201c 	xori	r3,r3,128
 80010c4:	18ffe004 	addi	r3,r3,-128
 80010c8:	1085883a 	add	r2,r2,r2
 80010cc:	1085883a 	add	r2,r2,r2
 80010d0:	2085883a 	add	r2,r4,r2
 80010d4:	10c00015 	stw	r3,0(r2)
		i++;
 80010d8:	e0bffd17 	ldw	r2,-12(fp)
 80010dc:	10800044 	addi	r2,r2,1
 80010e0:	e0bffd15 	stw	r2,-12(fp)


void textVGADrawColorText(char* str, int offset)
{
	int i = 0;
	while (str[i]!=0)
 80010e4:	e0bffd17 	ldw	r2,-12(fp)
 80010e8:	e0fffe17 	ldw	r3,-8(fp)
 80010ec:	1885883a 	add	r2,r3,r2
 80010f0:	10800003 	ldbu	r2,0(r2)
 80010f4:	10803fcc 	andi	r2,r2,255
 80010f8:	1080201c 	xori	r2,r2,128
 80010fc:	10bfe004 	addi	r2,r2,-128
 8001100:	103fe61e 	bne	r2,zero,800109c <__alt_data_end+0xfc00109c>
	{
		vga_ctrl->VRAM[i+offset] = str[i];
		i++;
	}
}
 8001104:	0001883a 	nop
 8001108:	e037883a 	mov	sp,fp
 800110c:	df000017 	ldw	fp,0(sp)
 8001110:	dec00104 	addi	sp,sp,4
 8001114:	f800283a 	ret

08001118 <Down>:
			{
					0x0C60, 0x4C80, 0xC600, 0x2640  //z
			}
	};

void Down(int* x,int* y,int* curr_tet,int* lines,int* score,int* level,int* levelThreshold, int* select,bool* flag, int offset){
 8001118:	deffeb04 	addi	sp,sp,-84
 800111c:	dfc01415 	stw	ra,80(sp)
 8001120:	df001315 	stw	fp,76(sp)
 8001124:	dc001215 	stw	r16,72(sp)
 8001128:	df001304 	addi	fp,sp,76
 800112c:	e13ffb15 	stw	r4,-20(fp)
 8001130:	e17ffc15 	stw	r5,-16(fp)
 8001134:	e1bffd15 	stw	r6,-12(fp)
 8001138:	e1fffe15 	stw	r7,-8(fp)
	int currx =0;
 800113c:	e03fed15 	stw	zero,-76(fp)
	int curry =0;
 8001140:	e03fee15 	stw	zero,-72(fp)
	bool last_down[4] = {false,false,false,false};
 8001144:	e03ff505 	stb	zero,-44(fp)
 8001148:	e03ff545 	stb	zero,-43(fp)
 800114c:	e03ff585 	stb	zero,-42(fp)
 8001150:	e03ff5c5 	stb	zero,-41(fp)
	bool now_down[4] = {false,false,false,false};
 8001154:	e03ff605 	stb	zero,-40(fp)
 8001158:	e03ff645 	stb	zero,-39(fp)
 800115c:	e03ff685 	stb	zero,-38(fp)
 8001160:	e03ff6c5 	stb	zero,-37(fp)
	int blocks[4] = {0,0,0,0};
 8001164:	e03ff715 	stw	zero,-36(fp)
 8001168:	e03ff815 	stw	zero,-32(fp)
 800116c:	e03ff915 	stw	zero,-28(fp)
 8001170:	e03ffa15 	stw	zero,-24(fp)
	int block_count =0;
 8001174:	e03fef15 	stw	zero,-68(fp)
	bool move = true;
 8001178:	00800044 	movi	r2,1
 800117c:	e0bff005 	stb	r2,-64(fp)
	int currLines = 0;
 8001180:	e03ff415 	stw	zero,-48(fp)
	for(int bit = 1 ; bit <= 0x8000 ; bit = bit << 1) {
 8001184:	00800044 	movi	r2,1
 8001188:	e0bff115 	stw	r2,-60(fp)
 800118c:	00006306 	br	800131c <Down+0x204>
		if((*curr_tet & bit) != 0){
 8001190:	e0bffd17 	ldw	r2,-12(fp)
 8001194:	10c00017 	ldw	r3,0(r2)
 8001198:	e0bff117 	ldw	r2,-60(fp)
 800119c:	1884703a 	and	r2,r3,r2
 80011a0:	10003926 	beq	r2,zero,8001288 <Down+0x170>
			if(!isUsed(-currx+*x+3,-curry+1+*y+3,offset) || last_down[currx]){
 80011a4:	e0bffb17 	ldw	r2,-20(fp)
 80011a8:	10c00017 	ldw	r3,0(r2)
 80011ac:	e0bfed17 	ldw	r2,-76(fp)
 80011b0:	1885c83a 	sub	r2,r3,r2
 80011b4:	110000c4 	addi	r4,r2,3
 80011b8:	00c00044 	movi	r3,1
 80011bc:	e0bfee17 	ldw	r2,-72(fp)
 80011c0:	1887c83a 	sub	r3,r3,r2
 80011c4:	e0bffc17 	ldw	r2,-16(fp)
 80011c8:	10800017 	ldw	r2,0(r2)
 80011cc:	1885883a 	add	r2,r3,r2
 80011d0:	108000c4 	addi	r2,r2,3
 80011d4:	e1800717 	ldw	r6,28(fp)
 80011d8:	100b883a 	mov	r5,r2
 80011dc:	80009500 	call	8000950 <isUsed>
 80011e0:	1080005c 	xori	r2,r2,1
 80011e4:	10803fcc 	andi	r2,r2,255
 80011e8:	1000061e 	bne	r2,zero,8001204 <Down+0xec>
 80011ec:	e0fff504 	addi	r3,fp,-44
 80011f0:	e0bfed17 	ldw	r2,-76(fp)
 80011f4:	1885883a 	add	r2,r3,r2
 80011f8:	10800003 	ldbu	r2,0(r2)
 80011fc:	10803fcc 	andi	r2,r2,255
 8001200:	10001f26 	beq	r2,zero,8001280 <Down+0x168>
				blocks[block_count] = (-curry+*y+3)*10 + -currx + *x+3;
 8001204:	e0bffc17 	ldw	r2,-16(fp)
 8001208:	10c00017 	ldw	r3,0(r2)
 800120c:	e0bfee17 	ldw	r2,-72(fp)
 8001210:	1885c83a 	sub	r2,r3,r2
 8001214:	108000c4 	addi	r2,r2,3
 8001218:	01400284 	movi	r5,10
 800121c:	1009883a 	mov	r4,r2
 8001220:	8004a540 	call	8004a54 <__mulsi3>
 8001224:	1007883a 	mov	r3,r2
 8001228:	e0bfed17 	ldw	r2,-76(fp)
 800122c:	1887c83a 	sub	r3,r3,r2
 8001230:	e0bffb17 	ldw	r2,-20(fp)
 8001234:	10800017 	ldw	r2,0(r2)
 8001238:	1885883a 	add	r2,r3,r2
 800123c:	10c000c4 	addi	r3,r2,3
 8001240:	e0bfef17 	ldw	r2,-68(fp)
 8001244:	1085883a 	add	r2,r2,r2
 8001248:	1085883a 	add	r2,r2,r2
 800124c:	e13fed04 	addi	r4,fp,-76
 8001250:	2085883a 	add	r2,r4,r2
 8001254:	10800a04 	addi	r2,r2,40
 8001258:	10c00015 	stw	r3,0(r2)
				block_count++;
 800125c:	e0bfef17 	ldw	r2,-68(fp)
 8001260:	10800044 	addi	r2,r2,1
 8001264:	e0bfef15 	stw	r2,-68(fp)
				now_down[currx] = true;
 8001268:	e0fff604 	addi	r3,fp,-40
 800126c:	e0bfed17 	ldw	r2,-76(fp)
 8001270:	1885883a 	add	r2,r3,r2
 8001274:	00c00044 	movi	r3,1
 8001278:	10c00005 	stb	r3,0(r2)
 800127c:	00000606 	br	8001298 <Down+0x180>
			}
			else{
				move = false;
 8001280:	e03ff005 	stb	zero,-64(fp)
				break;
 8001284:	00002806 	br	8001328 <Down+0x210>
			}
		}
		else{
			now_down[currx] = false;
 8001288:	e0fff604 	addi	r3,fp,-40
 800128c:	e0bfed17 	ldw	r2,-76(fp)
 8001290:	1885883a 	add	r2,r3,r2
 8001294:	10000005 	stb	zero,0(r2)
		}
		currx++;
 8001298:	e0bfed17 	ldw	r2,-76(fp)
 800129c:	10800044 	addi	r2,r2,1
 80012a0:	e0bfed15 	stw	r2,-76(fp)
		if(currx > 3){
 80012a4:	e0bfed17 	ldw	r2,-76(fp)
 80012a8:	10800110 	cmplti	r2,r2,4
 80012ac:	1000181e 	bne	r2,zero,8001310 <Down+0x1f8>
			currx = 0;
 80012b0:	e03fed15 	stw	zero,-76(fp)
			curry++;
 80012b4:	e0bfee17 	ldw	r2,-72(fp)
 80012b8:	10800044 	addi	r2,r2,1
 80012bc:	e0bfee15 	stw	r2,-72(fp)
			for(int i=0;i<4;i++){
 80012c0:	e03ff215 	stw	zero,-56(fp)
 80012c4:	00000f06 	br	8001304 <Down+0x1ec>
			last_down[i] = now_down[i];
 80012c8:	e0fff604 	addi	r3,fp,-40
 80012cc:	e0bff217 	ldw	r2,-56(fp)
 80012d0:	1885883a 	add	r2,r3,r2
 80012d4:	10c00003 	ldbu	r3,0(r2)
 80012d8:	e13ff504 	addi	r4,fp,-44
 80012dc:	e0bff217 	ldw	r2,-56(fp)
 80012e0:	2085883a 	add	r2,r4,r2
 80012e4:	10c00005 	stb	r3,0(r2)
			now_down[i] = false;
 80012e8:	e0fff604 	addi	r3,fp,-40
 80012ec:	e0bff217 	ldw	r2,-56(fp)
 80012f0:	1885883a 	add	r2,r3,r2
 80012f4:	10000005 	stb	zero,0(r2)
		}
		currx++;
		if(currx > 3){
			currx = 0;
			curry++;
			for(int i=0;i<4;i++){
 80012f8:	e0bff217 	ldw	r2,-56(fp)
 80012fc:	10800044 	addi	r2,r2,1
 8001300:	e0bff215 	stw	r2,-56(fp)
 8001304:	e0bff217 	ldw	r2,-56(fp)
 8001308:	10800110 	cmplti	r2,r2,4
 800130c:	103fee1e 	bne	r2,zero,80012c8 <__alt_data_end+0xfc0012c8>
	bool now_down[4] = {false,false,false,false};
	int blocks[4] = {0,0,0,0};
	int block_count =0;
	bool move = true;
	int currLines = 0;
	for(int bit = 1 ; bit <= 0x8000 ; bit = bit << 1) {
 8001310:	e0bff117 	ldw	r2,-60(fp)
 8001314:	1085883a 	add	r2,r2,r2
 8001318:	e0bff115 	stw	r2,-60(fp)
 800131c:	e0bff117 	ldw	r2,-60(fp)
 8001320:	00e00014 	movui	r3,32768
 8001324:	18bf9a0e 	bge	r3,r2,8001190 <__alt_data_end+0xfc001190>
			last_down[i] = now_down[i];
			now_down[i] = false;
				}
			}
		}
		if(move){
 8001328:	e0bff003 	ldbu	r2,-64(fp)
 800132c:	10005026 	beq	r2,zero,8001470 <Down+0x358>
			(*y)++;
 8001330:	e0bffc17 	ldw	r2,-16(fp)
 8001334:	10800017 	ldw	r2,0(r2)
 8001338:	10c00044 	addi	r3,r2,1
 800133c:	e0bffc17 	ldw	r2,-16(fp)
 8001340:	10c00015 	stw	r3,0(r2)
			for(int i =0;i<4;i++){
 8001344:	e03ff315 	stw	zero,-52(fp)
 8001348:	00004506 	br	8001460 <Down+0x348>
				vga_ctrl->VRAM[blocks[i]+10+offset] = *select+1;
 800134c:	d0e00117 	ldw	r3,-32764(gp)
 8001350:	e0bff317 	ldw	r2,-52(fp)
 8001354:	1085883a 	add	r2,r2,r2
 8001358:	1085883a 	add	r2,r2,r2
 800135c:	e13fed04 	addi	r4,fp,-76
 8001360:	2085883a 	add	r2,r4,r2
 8001364:	10800a04 	addi	r2,r2,40
 8001368:	10800017 	ldw	r2,0(r2)
 800136c:	11000284 	addi	r4,r2,10
 8001370:	e0800717 	ldw	r2,28(fp)
 8001374:	2085883a 	add	r2,r4,r2
 8001378:	e1000517 	ldw	r4,20(fp)
 800137c:	21000017 	ldw	r4,0(r4)
 8001380:	21000044 	addi	r4,r4,1
 8001384:	1085883a 	add	r2,r2,r2
 8001388:	1085883a 	add	r2,r2,r2
 800138c:	1885883a 	add	r2,r3,r2
 8001390:	11000015 	stw	r4,0(r2)
				vga_ctrl->VRAM[blocks[i]+offset] = 0b00000000000000000000000000000000;
 8001394:	d0e00117 	ldw	r3,-32764(gp)
 8001398:	e0bff317 	ldw	r2,-52(fp)
 800139c:	1085883a 	add	r2,r2,r2
 80013a0:	1085883a 	add	r2,r2,r2
 80013a4:	e13fed04 	addi	r4,fp,-76
 80013a8:	2085883a 	add	r2,r4,r2
 80013ac:	10800a04 	addi	r2,r2,40
 80013b0:	11000017 	ldw	r4,0(r2)
 80013b4:	e0800717 	ldw	r2,28(fp)
 80013b8:	2085883a 	add	r2,r4,r2
 80013bc:	1085883a 	add	r2,r2,r2
 80013c0:	1085883a 	add	r2,r2,r2
 80013c4:	1885883a 	add	r2,r3,r2
 80013c8:	10000015 	stw	zero,0(r2)
				occupied[blocks[i]+offset] = 0;
 80013cc:	e0bff317 	ldw	r2,-52(fp)
 80013d0:	1085883a 	add	r2,r2,r2
 80013d4:	1085883a 	add	r2,r2,r2
 80013d8:	e0ffed04 	addi	r3,fp,-76
 80013dc:	1885883a 	add	r2,r3,r2
 80013e0:	10800a04 	addi	r2,r2,40
 80013e4:	10c00017 	ldw	r3,0(r2)
 80013e8:	e0800717 	ldw	r2,28(fp)
 80013ec:	1887883a 	add	r3,r3,r2
 80013f0:	008200b4 	movhi	r2,2050
 80013f4:	10af9a04 	addi	r2,r2,-16792
 80013f8:	18c7883a 	add	r3,r3,r3
 80013fc:	18c7883a 	add	r3,r3,r3
 8001400:	10c5883a 	add	r2,r2,r3
 8001404:	10000015 	stw	zero,0(r2)
				occupied[blocks[i]+10+offset] = *select+1;
 8001408:	e0bff317 	ldw	r2,-52(fp)
 800140c:	1085883a 	add	r2,r2,r2
 8001410:	1085883a 	add	r2,r2,r2
 8001414:	e13fed04 	addi	r4,fp,-76
 8001418:	2085883a 	add	r2,r4,r2
 800141c:	10800a04 	addi	r2,r2,40
 8001420:	10800017 	ldw	r2,0(r2)
 8001424:	10c00284 	addi	r3,r2,10
 8001428:	e0800717 	ldw	r2,28(fp)
 800142c:	1887883a 	add	r3,r3,r2
 8001430:	e0800517 	ldw	r2,20(fp)
 8001434:	10800017 	ldw	r2,0(r2)
 8001438:	11000044 	addi	r4,r2,1
 800143c:	008200b4 	movhi	r2,2050
 8001440:	10af9a04 	addi	r2,r2,-16792
 8001444:	18c7883a 	add	r3,r3,r3
 8001448:	18c7883a 	add	r3,r3,r3
 800144c:	10c5883a 	add	r2,r2,r3
 8001450:	11000015 	stw	r4,0(r2)
				}
			}
		}
		if(move){
			(*y)++;
			for(int i =0;i<4;i++){
 8001454:	e0bff317 	ldw	r2,-52(fp)
 8001458:	10800044 	addi	r2,r2,1
 800145c:	e0bff315 	stw	r2,-52(fp)
 8001460:	e0bff317 	ldw	r2,-52(fp)
 8001464:	10800110 	cmplti	r2,r2,4
 8001468:	103fb81e 	bne	r2,zero,800134c <__alt_data_end+0xfc00134c>
				*select = genTet();
				*curr_tet = pieces[*select][0];
				*flag = placeNewTet(*curr_tet,*select+1,offset);
			}

}
 800146c:	00007c06 	br	8001660 <Down+0x548>
				occupied[blocks[i]+offset] = 0;
				occupied[blocks[i]+10+offset] = *select+1;
				}
			}
			else{
				currLines = removeRow(*y,offset);
 8001470:	e0bffc17 	ldw	r2,-16(fp)
 8001474:	10800017 	ldw	r2,0(r2)
 8001478:	e1400717 	ldw	r5,28(fp)
 800147c:	1009883a 	mov	r4,r2
 8001480:	80009ec0 	call	80009ec <removeRow>
 8001484:	e0bff415 	stw	r2,-48(fp)
				*lines += currLines;
 8001488:	e0bffe17 	ldw	r2,-8(fp)
 800148c:	10c00017 	ldw	r3,0(r2)
 8001490:	e0bff417 	ldw	r2,-48(fp)
 8001494:	1887883a 	add	r3,r3,r2
 8001498:	e0bffe17 	ldw	r2,-8(fp)
 800149c:	10c00015 	stw	r3,0(r2)

				switch(currLines){
 80014a0:	e0bff417 	ldw	r2,-48(fp)
 80014a4:	10800168 	cmpgeui	r2,r2,5
 80014a8:	1000341e 	bne	r2,zero,800157c <Down+0x464>
 80014ac:	e0bff417 	ldw	r2,-48(fp)
 80014b0:	100690ba 	slli	r3,r2,2
 80014b4:	00820034 	movhi	r2,2048
 80014b8:	10853204 	addi	r2,r2,5320
 80014bc:	1885883a 	add	r2,r3,r2
 80014c0:	10800017 	ldw	r2,0(r2)
 80014c4:	1000683a 	jmp	r2
 80014c8:	08001578 	rdprs	zero,at,85
 80014cc:	080014dc 	xori	zero,at,83
 80014d0:	080014fc 	xorhi	zero,at,83
 80014d4:	08001528 	cmpgeui	zero,at,84
 80014d8:	08001554 	ori	zero,at,85
				case 0:
					break;
				case 1:
					*score += 1*(*level);
 80014dc:	e0800217 	ldw	r2,8(fp)
 80014e0:	10c00017 	ldw	r3,0(r2)
 80014e4:	e0800317 	ldw	r2,12(fp)
 80014e8:	10800017 	ldw	r2,0(r2)
 80014ec:	1887883a 	add	r3,r3,r2
 80014f0:	e0800217 	ldw	r2,8(fp)
 80014f4:	10c00015 	stw	r3,0(r2)
					break;
 80014f8:	00002006 	br	800157c <Down+0x464>
				case 2:
					*score += 3*(*level);
 80014fc:	e0800217 	ldw	r2,8(fp)
 8001500:	11000017 	ldw	r4,0(r2)
 8001504:	e0800317 	ldw	r2,12(fp)
 8001508:	10c00017 	ldw	r3,0(r2)
 800150c:	1805883a 	mov	r2,r3
 8001510:	1085883a 	add	r2,r2,r2
 8001514:	10c5883a 	add	r2,r2,r3
 8001518:	2087883a 	add	r3,r4,r2
 800151c:	e0800217 	ldw	r2,8(fp)
 8001520:	10c00015 	stw	r3,0(r2)
					break;
 8001524:	00001506 	br	800157c <Down+0x464>
				case 3:
					*score += 5*(*level);
 8001528:	e0800217 	ldw	r2,8(fp)
 800152c:	14000017 	ldw	r16,0(r2)
 8001530:	e0800317 	ldw	r2,12(fp)
 8001534:	10800017 	ldw	r2,0(r2)
 8001538:	01400144 	movi	r5,5
 800153c:	1009883a 	mov	r4,r2
 8001540:	8004a540 	call	8004a54 <__mulsi3>
 8001544:	8087883a 	add	r3,r16,r2
 8001548:	e0800217 	ldw	r2,8(fp)
 800154c:	10c00015 	stw	r3,0(r2)
					break;
 8001550:	00000a06 	br	800157c <Down+0x464>
				case 4:
					*score += 8*(*level);
 8001554:	e0800217 	ldw	r2,8(fp)
 8001558:	10c00017 	ldw	r3,0(r2)
 800155c:	e0800317 	ldw	r2,12(fp)
 8001560:	10800017 	ldw	r2,0(r2)
 8001564:	100490fa 	slli	r2,r2,3
 8001568:	1887883a 	add	r3,r3,r2
 800156c:	e0800217 	ldw	r2,8(fp)
 8001570:	10c00015 	stw	r3,0(r2)
					break;
 8001574:	00000106 	br	800157c <Down+0x464>
				currLines = removeRow(*y,offset);
				*lines += currLines;

				switch(currLines){
				case 0:
					break;
 8001578:	0001883a 	nop
					break;
				case 4:
					*score += 8*(*level);
					break;
				}
				if((*lines) >= (*level)*5  + *levelThreshold){
 800157c:	e0bffe17 	ldw	r2,-8(fp)
 8001580:	14000017 	ldw	r16,0(r2)
 8001584:	e0800317 	ldw	r2,12(fp)
 8001588:	10800017 	ldw	r2,0(r2)
 800158c:	01400144 	movi	r5,5
 8001590:	1009883a 	mov	r4,r2
 8001594:	8004a540 	call	8004a54 <__mulsi3>
 8001598:	1007883a 	mov	r3,r2
 800159c:	e0800417 	ldw	r2,16(fp)
 80015a0:	10800017 	ldw	r2,0(r2)
 80015a4:	1885883a 	add	r2,r3,r2
 80015a8:	80800f16 	blt	r16,r2,80015e8 <Down+0x4d0>
					*levelThreshold += (*level)*5;
 80015ac:	e0800417 	ldw	r2,16(fp)
 80015b0:	14000017 	ldw	r16,0(r2)
 80015b4:	e0800317 	ldw	r2,12(fp)
 80015b8:	10800017 	ldw	r2,0(r2)
 80015bc:	01400144 	movi	r5,5
 80015c0:	1009883a 	mov	r4,r2
 80015c4:	8004a540 	call	8004a54 <__mulsi3>
 80015c8:	8087883a 	add	r3,r16,r2
 80015cc:	e0800417 	ldw	r2,16(fp)
 80015d0:	10c00015 	stw	r3,0(r2)
					(*level)++;
 80015d4:	e0800317 	ldw	r2,12(fp)
 80015d8:	10800017 	ldw	r2,0(r2)
 80015dc:	10c00044 	addi	r3,r2,1
 80015e0:	e0800317 	ldw	r2,12(fp)
 80015e4:	10c00015 	stw	r3,0(r2)
				}
				*x= 3;
 80015e8:	e0bffb17 	ldw	r2,-20(fp)
 80015ec:	00c000c4 	movi	r3,3
 80015f0:	10c00015 	stw	r3,0(r2)
				*y =0;
 80015f4:	e0bffc17 	ldw	r2,-16(fp)
 80015f8:	10000015 	stw	zero,0(r2)
				*select = genTet();
 80015fc:	8000f600 	call	8000f60 <genTet>
 8001600:	1007883a 	mov	r3,r2
 8001604:	e0800517 	ldw	r2,20(fp)
 8001608:	10c00015 	stw	r3,0(r2)
				*curr_tet = pieces[*select][0];
 800160c:	e0800517 	ldw	r2,20(fp)
 8001610:	10c00017 	ldw	r3,0(r2)
 8001614:	008200b4 	movhi	r2,2050
 8001618:	10a12704 	addi	r2,r2,-31588
 800161c:	1806913a 	slli	r3,r3,4
 8001620:	10c5883a 	add	r2,r2,r3
 8001624:	10c00017 	ldw	r3,0(r2)
 8001628:	e0bffd17 	ldw	r2,-12(fp)
 800162c:	10c00015 	stw	r3,0(r2)
				*flag = placeNewTet(*curr_tet,*select+1,offset);
 8001630:	e0bffd17 	ldw	r2,-12(fp)
 8001634:	10c00017 	ldw	r3,0(r2)
 8001638:	e0800517 	ldw	r2,20(fp)
 800163c:	10800017 	ldw	r2,0(r2)
 8001640:	10800044 	addi	r2,r2,1
 8001644:	e1800717 	ldw	r6,28(fp)
 8001648:	100b883a 	mov	r5,r2
 800164c:	1809883a 	mov	r4,r3
 8001650:	8000c5c0 	call	8000c5c <placeNewTet>
 8001654:	1007883a 	mov	r3,r2
 8001658:	e0800617 	ldw	r2,24(fp)
 800165c:	10c00005 	stb	r3,0(r2)
			}

}
 8001660:	0001883a 	nop
 8001664:	e6ffff04 	addi	sp,fp,-4
 8001668:	dfc00217 	ldw	ra,8(sp)
 800166c:	df000117 	ldw	fp,4(sp)
 8001670:	dc000017 	ldw	r16,0(sp)
 8001674:	dec00304 	addi	sp,sp,12
 8001678:	f800283a 	ret

0800167c <left>:

void left(int* x,int* y,int* curr_tet, int* select, int offset){
 800167c:	defff004 	addi	sp,sp,-64
 8001680:	dfc00f15 	stw	ra,60(sp)
 8001684:	df000e15 	stw	fp,56(sp)
 8001688:	df000e04 	addi	fp,sp,56
 800168c:	e13ffc15 	stw	r4,-16(fp)
 8001690:	e17ffd15 	stw	r5,-12(fp)
 8001694:	e1bffe15 	stw	r6,-8(fp)
 8001698:	e1ffff15 	stw	r7,-4(fp)
	int currx =0;
 800169c:	e03ff215 	stw	zero,-56(fp)
	int curry =0;
 80016a0:	e03ff315 	stw	zero,-52(fp)
	bool move = true;
 80016a4:	00800044 	movi	r2,1
 80016a8:	e0bff405 	stb	r2,-48(fp)
	bool last = false;
 80016ac:	e03ff445 	stb	zero,-47(fp)
	int blocks[4] = {0,0,0,0};
 80016b0:	e03ff815 	stw	zero,-32(fp)
 80016b4:	e03ff915 	stw	zero,-28(fp)
 80016b8:	e03ffa15 	stw	zero,-24(fp)
 80016bc:	e03ffb15 	stw	zero,-20(fp)
	int block_count =0;
 80016c0:	e03ff515 	stw	zero,-44(fp)
	    for(int bit = 0x8000 ; bit > 0 ; bit = bit >> 1) {
 80016c4:	00a00014 	movui	r2,32768
 80016c8:	e0bff615 	stw	r2,-40(fp)
 80016cc:	00004006 	br	80017d0 <left+0x154>
				if((*curr_tet & bit) != 0){
 80016d0:	e0bffe17 	ldw	r2,-8(fp)
 80016d4:	10c00017 	ldw	r3,0(r2)
 80016d8:	e0bff617 	ldw	r2,-40(fp)
 80016dc:	1884703a 	and	r2,r3,r2
 80016e0:	10002d26 	beq	r2,zero,8001798 <left+0x11c>
					if(!isUsed(currx-1+*x,curry+*y,offset) || last){
 80016e4:	e0bff217 	ldw	r2,-56(fp)
 80016e8:	10ffffc4 	addi	r3,r2,-1
 80016ec:	e0bffc17 	ldw	r2,-16(fp)
 80016f0:	10800017 	ldw	r2,0(r2)
 80016f4:	1889883a 	add	r4,r3,r2
 80016f8:	e0bffd17 	ldw	r2,-12(fp)
 80016fc:	10c00017 	ldw	r3,0(r2)
 8001700:	e0bff317 	ldw	r2,-52(fp)
 8001704:	1885883a 	add	r2,r3,r2
 8001708:	e1800217 	ldw	r6,8(fp)
 800170c:	100b883a 	mov	r5,r2
 8001710:	80009500 	call	8000950 <isUsed>
 8001714:	1080005c 	xori	r2,r2,1
 8001718:	10803fcc 	andi	r2,r2,255
 800171c:	1000021e 	bne	r2,zero,8001728 <left+0xac>
 8001720:	e0bff443 	ldbu	r2,-47(fp)
 8001724:	10001a26 	beq	r2,zero,8001790 <left+0x114>
						blocks[block_count] = (curry+*y)*10 + currx + *x;
 8001728:	e0bffd17 	ldw	r2,-12(fp)
 800172c:	10c00017 	ldw	r3,0(r2)
 8001730:	e0bff317 	ldw	r2,-52(fp)
 8001734:	1885883a 	add	r2,r3,r2
 8001738:	01400284 	movi	r5,10
 800173c:	1009883a 	mov	r4,r2
 8001740:	8004a540 	call	8004a54 <__mulsi3>
 8001744:	1007883a 	mov	r3,r2
 8001748:	e0bff217 	ldw	r2,-56(fp)
 800174c:	1887883a 	add	r3,r3,r2
 8001750:	e0bffc17 	ldw	r2,-16(fp)
 8001754:	10800017 	ldw	r2,0(r2)
 8001758:	1887883a 	add	r3,r3,r2
 800175c:	e0bff517 	ldw	r2,-44(fp)
 8001760:	1085883a 	add	r2,r2,r2
 8001764:	1085883a 	add	r2,r2,r2
 8001768:	e13ff204 	addi	r4,fp,-56
 800176c:	2085883a 	add	r2,r4,r2
 8001770:	10800604 	addi	r2,r2,24
 8001774:	10c00015 	stw	r3,0(r2)
						block_count++;
 8001778:	e0bff517 	ldw	r2,-44(fp)
 800177c:	10800044 	addi	r2,r2,1
 8001780:	e0bff515 	stw	r2,-44(fp)
						last = true;
 8001784:	00800044 	movi	r2,1
 8001788:	e0bff445 	stb	r2,-47(fp)
 800178c:	00000306 	br	800179c <left+0x120>
					}
					else{
						move = false;
 8001790:	e03ff405 	stb	zero,-48(fp)
						break;
 8001794:	00001006 	br	80017d8 <left+0x15c>
					}
				}
				else{
					last = false;
 8001798:	e03ff445 	stb	zero,-47(fp)
				}
				currx++;
 800179c:	e0bff217 	ldw	r2,-56(fp)
 80017a0:	10800044 	addi	r2,r2,1
 80017a4:	e0bff215 	stw	r2,-56(fp)
				if(currx > 3){
 80017a8:	e0bff217 	ldw	r2,-56(fp)
 80017ac:	10800110 	cmplti	r2,r2,4
 80017b0:	1000041e 	bne	r2,zero,80017c4 <left+0x148>
				currx = 0;
 80017b4:	e03ff215 	stw	zero,-56(fp)
				curry++;
 80017b8:	e0bff317 	ldw	r2,-52(fp)
 80017bc:	10800044 	addi	r2,r2,1
 80017c0:	e0bff315 	stw	r2,-52(fp)
	int curry =0;
	bool move = true;
	bool last = false;
	int blocks[4] = {0,0,0,0};
	int block_count =0;
	    for(int bit = 0x8000 ; bit > 0 ; bit = bit >> 1) {
 80017c4:	e0bff617 	ldw	r2,-40(fp)
 80017c8:	1005d07a 	srai	r2,r2,1
 80017cc:	e0bff615 	stw	r2,-40(fp)
 80017d0:	e0bff617 	ldw	r2,-40(fp)
 80017d4:	00bfbe16 	blt	zero,r2,80016d0 <__alt_data_end+0xfc0016d0>
				if(currx > 3){
				currx = 0;
				curry++;
				}
			}
			if(move){
 80017d8:	e0bff403 	ldbu	r2,-48(fp)
 80017dc:	10004f26 	beq	r2,zero,800191c <left+0x2a0>
				*x -=1;
 80017e0:	e0bffc17 	ldw	r2,-16(fp)
 80017e4:	10800017 	ldw	r2,0(r2)
 80017e8:	10ffffc4 	addi	r3,r2,-1
 80017ec:	e0bffc17 	ldw	r2,-16(fp)
 80017f0:	10c00015 	stw	r3,0(r2)
				for(int i =0;i<4;i++){
 80017f4:	e03ff715 	stw	zero,-36(fp)
 80017f8:	00004506 	br	8001910 <left+0x294>

					vga_ctrl->VRAM[blocks[i]-1+offset] = *select+1;
 80017fc:	d0e00117 	ldw	r3,-32764(gp)
 8001800:	e0bff717 	ldw	r2,-36(fp)
 8001804:	1085883a 	add	r2,r2,r2
 8001808:	1085883a 	add	r2,r2,r2
 800180c:	e13ff204 	addi	r4,fp,-56
 8001810:	2085883a 	add	r2,r4,r2
 8001814:	10800604 	addi	r2,r2,24
 8001818:	10800017 	ldw	r2,0(r2)
 800181c:	113fffc4 	addi	r4,r2,-1
 8001820:	e0800217 	ldw	r2,8(fp)
 8001824:	2085883a 	add	r2,r4,r2
 8001828:	e13fff17 	ldw	r4,-4(fp)
 800182c:	21000017 	ldw	r4,0(r4)
 8001830:	21000044 	addi	r4,r4,1
 8001834:	1085883a 	add	r2,r2,r2
 8001838:	1085883a 	add	r2,r2,r2
 800183c:	1885883a 	add	r2,r3,r2
 8001840:	11000015 	stw	r4,0(r2)
					vga_ctrl->VRAM[blocks[i]+offset] = 0b00000000000000000000000000000000;
 8001844:	d0e00117 	ldw	r3,-32764(gp)
 8001848:	e0bff717 	ldw	r2,-36(fp)
 800184c:	1085883a 	add	r2,r2,r2
 8001850:	1085883a 	add	r2,r2,r2
 8001854:	e13ff204 	addi	r4,fp,-56
 8001858:	2085883a 	add	r2,r4,r2
 800185c:	10800604 	addi	r2,r2,24
 8001860:	11000017 	ldw	r4,0(r2)
 8001864:	e0800217 	ldw	r2,8(fp)
 8001868:	2085883a 	add	r2,r4,r2
 800186c:	1085883a 	add	r2,r2,r2
 8001870:	1085883a 	add	r2,r2,r2
 8001874:	1885883a 	add	r2,r3,r2
 8001878:	10000015 	stw	zero,0(r2)
					occupied[blocks[i]+offset] = 0;
 800187c:	e0bff717 	ldw	r2,-36(fp)
 8001880:	1085883a 	add	r2,r2,r2
 8001884:	1085883a 	add	r2,r2,r2
 8001888:	e0fff204 	addi	r3,fp,-56
 800188c:	1885883a 	add	r2,r3,r2
 8001890:	10800604 	addi	r2,r2,24
 8001894:	10c00017 	ldw	r3,0(r2)
 8001898:	e0800217 	ldw	r2,8(fp)
 800189c:	1887883a 	add	r3,r3,r2
 80018a0:	008200b4 	movhi	r2,2050
 80018a4:	10af9a04 	addi	r2,r2,-16792
 80018a8:	18c7883a 	add	r3,r3,r3
 80018ac:	18c7883a 	add	r3,r3,r3
 80018b0:	10c5883a 	add	r2,r2,r3
 80018b4:	10000015 	stw	zero,0(r2)
					occupied[blocks[i]-1+offset] = *select+1;
 80018b8:	e0bff717 	ldw	r2,-36(fp)
 80018bc:	1085883a 	add	r2,r2,r2
 80018c0:	1085883a 	add	r2,r2,r2
 80018c4:	e13ff204 	addi	r4,fp,-56
 80018c8:	2085883a 	add	r2,r4,r2
 80018cc:	10800604 	addi	r2,r2,24
 80018d0:	10800017 	ldw	r2,0(r2)
 80018d4:	10ffffc4 	addi	r3,r2,-1
 80018d8:	e0800217 	ldw	r2,8(fp)
 80018dc:	1887883a 	add	r3,r3,r2
 80018e0:	e0bfff17 	ldw	r2,-4(fp)
 80018e4:	10800017 	ldw	r2,0(r2)
 80018e8:	11000044 	addi	r4,r2,1
 80018ec:	008200b4 	movhi	r2,2050
 80018f0:	10af9a04 	addi	r2,r2,-16792
 80018f4:	18c7883a 	add	r3,r3,r3
 80018f8:	18c7883a 	add	r3,r3,r3
 80018fc:	10c5883a 	add	r2,r2,r3
 8001900:	11000015 	stw	r4,0(r2)
				curry++;
				}
			}
			if(move){
				*x -=1;
				for(int i =0;i<4;i++){
 8001904:	e0bff717 	ldw	r2,-36(fp)
 8001908:	10800044 	addi	r2,r2,1
 800190c:	e0bff715 	stw	r2,-36(fp)
 8001910:	e0bff717 	ldw	r2,-36(fp)
 8001914:	10800110 	cmplti	r2,r2,4
 8001918:	103fb81e 	bne	r2,zero,80017fc <__alt_data_end+0xfc0017fc>
					occupied[blocks[i]-1+offset] = *select+1;

			}
			}

}
 800191c:	0001883a 	nop
 8001920:	e037883a 	mov	sp,fp
 8001924:	dfc00117 	ldw	ra,4(sp)
 8001928:	df000017 	ldw	fp,0(sp)
 800192c:	dec00204 	addi	sp,sp,8
 8001930:	f800283a 	ret

08001934 <right>:
void right(int* x,int* y,int* curr_tet, int* select, int offset) {
 8001934:	defff004 	addi	sp,sp,-64
 8001938:	dfc00f15 	stw	ra,60(sp)
 800193c:	df000e15 	stw	fp,56(sp)
 8001940:	df000e04 	addi	fp,sp,56
 8001944:	e13ffc15 	stw	r4,-16(fp)
 8001948:	e17ffd15 	stw	r5,-12(fp)
 800194c:	e1bffe15 	stw	r6,-8(fp)
 8001950:	e1ffff15 	stw	r7,-4(fp)
int currx =0;
 8001954:	e03ff215 	stw	zero,-56(fp)
int curry =0;
 8001958:	e03ff315 	stw	zero,-52(fp)
bool move = true;
 800195c:	00800044 	movi	r2,1
 8001960:	e0bff405 	stb	r2,-48(fp)
bool last = false;
 8001964:	e03ff445 	stb	zero,-47(fp)
int blocks[4] = {0,0,0,0};
 8001968:	e03ff815 	stw	zero,-32(fp)
 800196c:	e03ff915 	stw	zero,-28(fp)
 8001970:	e03ffa15 	stw	zero,-24(fp)
 8001974:	e03ffb15 	stw	zero,-20(fp)
int block_count =0;
 8001978:	e03ff515 	stw	zero,-44(fp)
     for(int bit = 1 ; bit <= 0x8000 ; bit = bit << 1) {
 800197c:	00800044 	movi	r2,1
 8001980:	e0bff615 	stw	r2,-40(fp)
 8001984:	00004606 	br	8001aa0 <right+0x16c>
					if((*curr_tet & bit) != 0){
 8001988:	e0bffe17 	ldw	r2,-8(fp)
 800198c:	10c00017 	ldw	r3,0(r2)
 8001990:	e0bff617 	ldw	r2,-40(fp)
 8001994:	1884703a 	and	r2,r3,r2
 8001998:	10003226 	beq	r2,zero,8001a64 <right+0x130>
						if(!isUsed(-currx+1+*x+3,-curry+*y+3,offset) || last){
 800199c:	00c00044 	movi	r3,1
 80019a0:	e0bff217 	ldw	r2,-56(fp)
 80019a4:	1887c83a 	sub	r3,r3,r2
 80019a8:	e0bffc17 	ldw	r2,-16(fp)
 80019ac:	10800017 	ldw	r2,0(r2)
 80019b0:	1885883a 	add	r2,r3,r2
 80019b4:	110000c4 	addi	r4,r2,3
 80019b8:	e0bffd17 	ldw	r2,-12(fp)
 80019bc:	10c00017 	ldw	r3,0(r2)
 80019c0:	e0bff317 	ldw	r2,-52(fp)
 80019c4:	1885c83a 	sub	r2,r3,r2
 80019c8:	108000c4 	addi	r2,r2,3
 80019cc:	e1800217 	ldw	r6,8(fp)
 80019d0:	100b883a 	mov	r5,r2
 80019d4:	80009500 	call	8000950 <isUsed>
 80019d8:	1080005c 	xori	r2,r2,1
 80019dc:	10803fcc 	andi	r2,r2,255
 80019e0:	1000021e 	bne	r2,zero,80019ec <right+0xb8>
 80019e4:	e0bff443 	ldbu	r2,-47(fp)
 80019e8:	10001c26 	beq	r2,zero,8001a5c <right+0x128>

							blocks[block_count] = (-curry+*y+3)*10 + -currx + *x+3;
 80019ec:	e0bffd17 	ldw	r2,-12(fp)
 80019f0:	10c00017 	ldw	r3,0(r2)
 80019f4:	e0bff317 	ldw	r2,-52(fp)
 80019f8:	1885c83a 	sub	r2,r3,r2
 80019fc:	108000c4 	addi	r2,r2,3
 8001a00:	01400284 	movi	r5,10
 8001a04:	1009883a 	mov	r4,r2
 8001a08:	8004a540 	call	8004a54 <__mulsi3>
 8001a0c:	1007883a 	mov	r3,r2
 8001a10:	e0bff217 	ldw	r2,-56(fp)
 8001a14:	1887c83a 	sub	r3,r3,r2
 8001a18:	e0bffc17 	ldw	r2,-16(fp)
 8001a1c:	10800017 	ldw	r2,0(r2)
 8001a20:	1885883a 	add	r2,r3,r2
 8001a24:	10c000c4 	addi	r3,r2,3
 8001a28:	e0bff517 	ldw	r2,-44(fp)
 8001a2c:	1085883a 	add	r2,r2,r2
 8001a30:	1085883a 	add	r2,r2,r2
 8001a34:	e13ff204 	addi	r4,fp,-56
 8001a38:	2085883a 	add	r2,r4,r2
 8001a3c:	10800604 	addi	r2,r2,24
 8001a40:	10c00015 	stw	r3,0(r2)
							block_count++;
 8001a44:	e0bff517 	ldw	r2,-44(fp)
 8001a48:	10800044 	addi	r2,r2,1
 8001a4c:	e0bff515 	stw	r2,-44(fp)
							last = true;
 8001a50:	00800044 	movi	r2,1
 8001a54:	e0bff445 	stb	r2,-47(fp)
 8001a58:	00000306 	br	8001a68 <right+0x134>
						}
						else{
							move = false;
 8001a5c:	e03ff405 	stb	zero,-48(fp)
							break;
 8001a60:	00001206 	br	8001aac <right+0x178>
						}
					}
					else{
						last = false;
 8001a64:	e03ff445 	stb	zero,-47(fp)
					}
					currx++;
 8001a68:	e0bff217 	ldw	r2,-56(fp)
 8001a6c:	10800044 	addi	r2,r2,1
 8001a70:	e0bff215 	stw	r2,-56(fp)
					if(currx > 3){
 8001a74:	e0bff217 	ldw	r2,-56(fp)
 8001a78:	10800110 	cmplti	r2,r2,4
 8001a7c:	1000051e 	bne	r2,zero,8001a94 <right+0x160>
					currx = 0;
 8001a80:	e03ff215 	stw	zero,-56(fp)
					curry++;
 8001a84:	e0bff317 	ldw	r2,-52(fp)
 8001a88:	10800044 	addi	r2,r2,1
 8001a8c:	e0bff315 	stw	r2,-52(fp)
					last = false;
 8001a90:	e03ff445 	stb	zero,-47(fp)
int curry =0;
bool move = true;
bool last = false;
int blocks[4] = {0,0,0,0};
int block_count =0;
     for(int bit = 1 ; bit <= 0x8000 ; bit = bit << 1) {
 8001a94:	e0bff617 	ldw	r2,-40(fp)
 8001a98:	1085883a 	add	r2,r2,r2
 8001a9c:	e0bff615 	stw	r2,-40(fp)
 8001aa0:	e0bff617 	ldw	r2,-40(fp)
 8001aa4:	00e00014 	movui	r3,32768
 8001aa8:	18bfb70e 	bge	r3,r2,8001988 <__alt_data_end+0xfc001988>
					currx = 0;
					curry++;
					last = false;
					}
				}
				if(move){
 8001aac:	e0bff403 	ldbu	r2,-48(fp)
 8001ab0:	10004f26 	beq	r2,zero,8001bf0 <right+0x2bc>
					*x +=1;
 8001ab4:	e0bffc17 	ldw	r2,-16(fp)
 8001ab8:	10800017 	ldw	r2,0(r2)
 8001abc:	10c00044 	addi	r3,r2,1
 8001ac0:	e0bffc17 	ldw	r2,-16(fp)
 8001ac4:	10c00015 	stw	r3,0(r2)
					for(int i =0;i<4;i++){
 8001ac8:	e03ff715 	stw	zero,-36(fp)
 8001acc:	00004506 	br	8001be4 <right+0x2b0>

						vga_ctrl->VRAM[blocks[i]+1+offset] = *select+1;
 8001ad0:	d0e00117 	ldw	r3,-32764(gp)
 8001ad4:	e0bff717 	ldw	r2,-36(fp)
 8001ad8:	1085883a 	add	r2,r2,r2
 8001adc:	1085883a 	add	r2,r2,r2
 8001ae0:	e13ff204 	addi	r4,fp,-56
 8001ae4:	2085883a 	add	r2,r4,r2
 8001ae8:	10800604 	addi	r2,r2,24
 8001aec:	10800017 	ldw	r2,0(r2)
 8001af0:	11000044 	addi	r4,r2,1
 8001af4:	e0800217 	ldw	r2,8(fp)
 8001af8:	2085883a 	add	r2,r4,r2
 8001afc:	e13fff17 	ldw	r4,-4(fp)
 8001b00:	21000017 	ldw	r4,0(r4)
 8001b04:	21000044 	addi	r4,r4,1
 8001b08:	1085883a 	add	r2,r2,r2
 8001b0c:	1085883a 	add	r2,r2,r2
 8001b10:	1885883a 	add	r2,r3,r2
 8001b14:	11000015 	stw	r4,0(r2)
						vga_ctrl->VRAM[blocks[i]+offset] = 0b00000000000000000000000000000000;
 8001b18:	d0e00117 	ldw	r3,-32764(gp)
 8001b1c:	e0bff717 	ldw	r2,-36(fp)
 8001b20:	1085883a 	add	r2,r2,r2
 8001b24:	1085883a 	add	r2,r2,r2
 8001b28:	e13ff204 	addi	r4,fp,-56
 8001b2c:	2085883a 	add	r2,r4,r2
 8001b30:	10800604 	addi	r2,r2,24
 8001b34:	11000017 	ldw	r4,0(r2)
 8001b38:	e0800217 	ldw	r2,8(fp)
 8001b3c:	2085883a 	add	r2,r4,r2
 8001b40:	1085883a 	add	r2,r2,r2
 8001b44:	1085883a 	add	r2,r2,r2
 8001b48:	1885883a 	add	r2,r3,r2
 8001b4c:	10000015 	stw	zero,0(r2)
						occupied[blocks[i]+offset] = 0;
 8001b50:	e0bff717 	ldw	r2,-36(fp)
 8001b54:	1085883a 	add	r2,r2,r2
 8001b58:	1085883a 	add	r2,r2,r2
 8001b5c:	e0fff204 	addi	r3,fp,-56
 8001b60:	1885883a 	add	r2,r3,r2
 8001b64:	10800604 	addi	r2,r2,24
 8001b68:	10c00017 	ldw	r3,0(r2)
 8001b6c:	e0800217 	ldw	r2,8(fp)
 8001b70:	1887883a 	add	r3,r3,r2
 8001b74:	008200b4 	movhi	r2,2050
 8001b78:	10af9a04 	addi	r2,r2,-16792
 8001b7c:	18c7883a 	add	r3,r3,r3
 8001b80:	18c7883a 	add	r3,r3,r3
 8001b84:	10c5883a 	add	r2,r2,r3
 8001b88:	10000015 	stw	zero,0(r2)
						occupied[blocks[i]+1+offset] = *select+1;
 8001b8c:	e0bff717 	ldw	r2,-36(fp)
 8001b90:	1085883a 	add	r2,r2,r2
 8001b94:	1085883a 	add	r2,r2,r2
 8001b98:	e13ff204 	addi	r4,fp,-56
 8001b9c:	2085883a 	add	r2,r4,r2
 8001ba0:	10800604 	addi	r2,r2,24
 8001ba4:	10800017 	ldw	r2,0(r2)
 8001ba8:	10c00044 	addi	r3,r2,1
 8001bac:	e0800217 	ldw	r2,8(fp)
 8001bb0:	1887883a 	add	r3,r3,r2
 8001bb4:	e0bfff17 	ldw	r2,-4(fp)
 8001bb8:	10800017 	ldw	r2,0(r2)
 8001bbc:	11000044 	addi	r4,r2,1
 8001bc0:	008200b4 	movhi	r2,2050
 8001bc4:	10af9a04 	addi	r2,r2,-16792
 8001bc8:	18c7883a 	add	r3,r3,r3
 8001bcc:	18c7883a 	add	r3,r3,r3
 8001bd0:	10c5883a 	add	r2,r2,r3
 8001bd4:	11000015 	stw	r4,0(r2)
					last = false;
					}
				}
				if(move){
					*x +=1;
					for(int i =0;i<4;i++){
 8001bd8:	e0bff717 	ldw	r2,-36(fp)
 8001bdc:	10800044 	addi	r2,r2,1
 8001be0:	e0bff715 	stw	r2,-36(fp)
 8001be4:	e0bff717 	ldw	r2,-36(fp)
 8001be8:	10800110 	cmplti	r2,r2,4
 8001bec:	103fb81e 	bne	r2,zero,8001ad0 <__alt_data_end+0xfc001ad0>
						occupied[blocks[i]+offset] = 0;
						occupied[blocks[i]+1+offset] = *select+1;
				}
				}

}
 8001bf0:	0001883a 	nop
 8001bf4:	e037883a 	mov	sp,fp
 8001bf8:	dfc00117 	ldw	ra,4(sp)
 8001bfc:	df000017 	ldw	fp,0(sp)
 8001c00:	dec00204 	addi	sp,sp,8
 8001c04:	f800283a 	ret

08001c08 <rotate>:

void rotate(int*curr_rot,int* x,int* y,int* curr_tet, int* select, int offset){
 8001c08:	deffea04 	addi	sp,sp,-88
 8001c0c:	dfc01515 	stw	ra,84(sp)
 8001c10:	df001415 	stw	fp,80(sp)
 8001c14:	df001404 	addi	fp,sp,80
 8001c18:	e13ffc15 	stw	r4,-16(fp)
 8001c1c:	e17ffd15 	stw	r5,-12(fp)
 8001c20:	e1bffe15 	stw	r6,-8(fp)
 8001c24:	e1ffff15 	stw	r7,-4(fp)
	int currx =0;
 8001c28:	e03fec15 	stw	zero,-80(fp)
	int curry =0;
 8001c2c:	e03fed15 	stw	zero,-76(fp)
	int new_rot;
	int blocks[4] = {0,0,0,0};
 8001c30:	e03ff415 	stw	zero,-48(fp)
 8001c34:	e03ff515 	stw	zero,-44(fp)
 8001c38:	e03ff615 	stw	zero,-40(fp)
 8001c3c:	e03ff715 	stw	zero,-36(fp)
	int block_count =0;
 8001c40:	e03fee15 	stw	zero,-72(fp)
	int rot_blocks[4] = {0,0,0,0};
 8001c44:	e03ff815 	stw	zero,-32(fp)
 8001c48:	e03ff915 	stw	zero,-28(fp)
 8001c4c:	e03ffa15 	stw	zero,-24(fp)
 8001c50:	e03ffb15 	stw	zero,-20(fp)
	bool move = true;
 8001c54:	00800044 	movi	r2,1
 8001c58:	e0bfef05 	stb	r2,-68(fp)
	new_rot = (*curr_rot+1)%4;
 8001c5c:	e0bffc17 	ldw	r2,-16(fp)
 8001c60:	10800017 	ldw	r2,0(r2)
 8001c64:	10c00044 	addi	r3,r2,1
 8001c68:	00a00034 	movhi	r2,32768
 8001c6c:	108000c4 	addi	r2,r2,3
 8001c70:	1884703a 	and	r2,r3,r2
 8001c74:	1000040e 	bge	r2,zero,8001c88 <rotate+0x80>
 8001c78:	10bfffc4 	addi	r2,r2,-1
 8001c7c:	00ffff04 	movi	r3,-4
 8001c80:	10c4b03a 	or	r2,r2,r3
 8001c84:	10800044 	addi	r2,r2,1
 8001c88:	e0bff315 	stw	r2,-52(fp)
	int rot_count =0;
 8001c8c:	e03ff015 	stw	zero,-64(fp)
	for(int bit = 0x8000; bit >0;bit = bit >> 1){
 8001c90:	00a00014 	movui	r2,32768
 8001c94:	e0bff115 	stw	r2,-60(fp)
 8001c98:	00006506 	br	8001e30 <rotate+0x228>

		if((pieces[*select][new_rot] & bit) != 0){
 8001c9c:	e0800217 	ldw	r2,8(fp)
 8001ca0:	10c00017 	ldw	r3,0(r2)
 8001ca4:	008200b4 	movhi	r2,2050
 8001ca8:	10a12704 	addi	r2,r2,-31588
 8001cac:	18c7883a 	add	r3,r3,r3
 8001cb0:	18c9883a 	add	r4,r3,r3
 8001cb4:	e0fff317 	ldw	r3,-52(fp)
 8001cb8:	20c7883a 	add	r3,r4,r3
 8001cbc:	18c7883a 	add	r3,r3,r3
 8001cc0:	18c7883a 	add	r3,r3,r3
 8001cc4:	10c5883a 	add	r2,r2,r3
 8001cc8:	10c00017 	ldw	r3,0(r2)
 8001ccc:	e0bff117 	ldw	r2,-60(fp)
 8001cd0:	1884703a 	and	r2,r3,r2
 8001cd4:	10002d26 	beq	r2,zero,8001d8c <rotate+0x184>

			if(!isUsed(currx + *x,curry+*y,offset) || (*curr_tet & bit) != 0){
 8001cd8:	e0bffd17 	ldw	r2,-12(fp)
 8001cdc:	10c00017 	ldw	r3,0(r2)
 8001ce0:	e0bfec17 	ldw	r2,-80(fp)
 8001ce4:	1889883a 	add	r4,r3,r2
 8001ce8:	e0bffe17 	ldw	r2,-8(fp)
 8001cec:	10c00017 	ldw	r3,0(r2)
 8001cf0:	e0bfed17 	ldw	r2,-76(fp)
 8001cf4:	1885883a 	add	r2,r3,r2
 8001cf8:	e1800317 	ldw	r6,12(fp)
 8001cfc:	100b883a 	mov	r5,r2
 8001d00:	80009500 	call	8000950 <isUsed>
 8001d04:	1080005c 	xori	r2,r2,1
 8001d08:	10803fcc 	andi	r2,r2,255
 8001d0c:	1000051e 	bne	r2,zero,8001d24 <rotate+0x11c>
 8001d10:	e0bfff17 	ldw	r2,-4(fp)
 8001d14:	10c00017 	ldw	r3,0(r2)
 8001d18:	e0bff117 	ldw	r2,-60(fp)
 8001d1c:	1884703a 	and	r2,r3,r2
 8001d20:	10001826 	beq	r2,zero,8001d84 <rotate+0x17c>
				blocks[block_count] = (curry+*y)*10 + currx + *x;
 8001d24:	e0bffe17 	ldw	r2,-8(fp)
 8001d28:	10c00017 	ldw	r3,0(r2)
 8001d2c:	e0bfed17 	ldw	r2,-76(fp)
 8001d30:	1885883a 	add	r2,r3,r2
 8001d34:	01400284 	movi	r5,10
 8001d38:	1009883a 	mov	r4,r2
 8001d3c:	8004a540 	call	8004a54 <__mulsi3>
 8001d40:	1007883a 	mov	r3,r2
 8001d44:	e0bfec17 	ldw	r2,-80(fp)
 8001d48:	1887883a 	add	r3,r3,r2
 8001d4c:	e0bffd17 	ldw	r2,-12(fp)
 8001d50:	10800017 	ldw	r2,0(r2)
 8001d54:	1887883a 	add	r3,r3,r2
 8001d58:	e0bfee17 	ldw	r2,-72(fp)
 8001d5c:	1085883a 	add	r2,r2,r2
 8001d60:	1085883a 	add	r2,r2,r2
 8001d64:	e13fec04 	addi	r4,fp,-80
 8001d68:	2085883a 	add	r2,r4,r2
 8001d6c:	10800804 	addi	r2,r2,32
 8001d70:	10c00015 	stw	r3,0(r2)
				block_count++;
 8001d74:	e0bfee17 	ldw	r2,-72(fp)
 8001d78:	10800044 	addi	r2,r2,1
 8001d7c:	e0bfee15 	stw	r2,-72(fp)
 8001d80:	00001e06 	br	8001dfc <rotate+0x1f4>
			}
			else{
				move = false;
 8001d84:	e03fef05 	stb	zero,-68(fp)
				break;
 8001d88:	00002b06 	br	8001e38 <rotate+0x230>
			}
		}
		else if((*curr_tet & bit) != 0){
 8001d8c:	e0bfff17 	ldw	r2,-4(fp)
 8001d90:	10c00017 	ldw	r3,0(r2)
 8001d94:	e0bff117 	ldw	r2,-60(fp)
 8001d98:	1884703a 	and	r2,r3,r2
 8001d9c:	10001726 	beq	r2,zero,8001dfc <rotate+0x1f4>
			rot_blocks[rot_count] = (curry+*y)*10 + currx + *x;
 8001da0:	e0bffe17 	ldw	r2,-8(fp)
 8001da4:	10c00017 	ldw	r3,0(r2)
 8001da8:	e0bfed17 	ldw	r2,-76(fp)
 8001dac:	1885883a 	add	r2,r3,r2
 8001db0:	01400284 	movi	r5,10
 8001db4:	1009883a 	mov	r4,r2
 8001db8:	8004a540 	call	8004a54 <__mulsi3>
 8001dbc:	1007883a 	mov	r3,r2
 8001dc0:	e0bfec17 	ldw	r2,-80(fp)
 8001dc4:	1887883a 	add	r3,r3,r2
 8001dc8:	e0bffd17 	ldw	r2,-12(fp)
 8001dcc:	10800017 	ldw	r2,0(r2)
 8001dd0:	1887883a 	add	r3,r3,r2
 8001dd4:	e0bff017 	ldw	r2,-64(fp)
 8001dd8:	1085883a 	add	r2,r2,r2
 8001ddc:	1085883a 	add	r2,r2,r2
 8001de0:	e13fec04 	addi	r4,fp,-80
 8001de4:	2085883a 	add	r2,r4,r2
 8001de8:	10800c04 	addi	r2,r2,48
 8001dec:	10c00015 	stw	r3,0(r2)
			rot_count++;
 8001df0:	e0bff017 	ldw	r2,-64(fp)
 8001df4:	10800044 	addi	r2,r2,1
 8001df8:	e0bff015 	stw	r2,-64(fp)
		}

		currx++;
 8001dfc:	e0bfec17 	ldw	r2,-80(fp)
 8001e00:	10800044 	addi	r2,r2,1
 8001e04:	e0bfec15 	stw	r2,-80(fp)
		if(currx > 3){
 8001e08:	e0bfec17 	ldw	r2,-80(fp)
 8001e0c:	10800110 	cmplti	r2,r2,4
 8001e10:	1000041e 	bne	r2,zero,8001e24 <rotate+0x21c>
			currx = 0;
 8001e14:	e03fec15 	stw	zero,-80(fp)
			curry++;
 8001e18:	e0bfed17 	ldw	r2,-76(fp)
 8001e1c:	10800044 	addi	r2,r2,1
 8001e20:	e0bfed15 	stw	r2,-76(fp)
	int block_count =0;
	int rot_blocks[4] = {0,0,0,0};
	bool move = true;
	new_rot = (*curr_rot+1)%4;
	int rot_count =0;
	for(int bit = 0x8000; bit >0;bit = bit >> 1){
 8001e24:	e0bff117 	ldw	r2,-60(fp)
 8001e28:	1005d07a 	srai	r2,r2,1
 8001e2c:	e0bff115 	stw	r2,-60(fp)
 8001e30:	e0bff117 	ldw	r2,-60(fp)
 8001e34:	00bf9916 	blt	zero,r2,8001c9c <__alt_data_end+0xfc001c9c>
		if(currx > 3){
			currx = 0;
			curry++;
		}
	}
	if(move){
 8001e38:	e0bfef03 	ldbu	r2,-68(fp)
 8001e3c:	10006426 	beq	r2,zero,8001fd0 <rotate+0x3c8>
		*curr_tet = pieces[*select][new_rot];
 8001e40:	e0800217 	ldw	r2,8(fp)
 8001e44:	10c00017 	ldw	r3,0(r2)
 8001e48:	008200b4 	movhi	r2,2050
 8001e4c:	10a12704 	addi	r2,r2,-31588
 8001e50:	18c7883a 	add	r3,r3,r3
 8001e54:	18c9883a 	add	r4,r3,r3
 8001e58:	e0fff317 	ldw	r3,-52(fp)
 8001e5c:	20c7883a 	add	r3,r4,r3
 8001e60:	18c7883a 	add	r3,r3,r3
 8001e64:	18c7883a 	add	r3,r3,r3
 8001e68:	10c5883a 	add	r2,r2,r3
 8001e6c:	10c00017 	ldw	r3,0(r2)
 8001e70:	e0bfff17 	ldw	r2,-4(fp)
 8001e74:	10c00015 	stw	r3,0(r2)
		*curr_rot = (*curr_rot +1)%4;
 8001e78:	e0bffc17 	ldw	r2,-16(fp)
 8001e7c:	10800017 	ldw	r2,0(r2)
 8001e80:	10c00044 	addi	r3,r2,1
 8001e84:	00a00034 	movhi	r2,32768
 8001e88:	108000c4 	addi	r2,r2,3
 8001e8c:	1884703a 	and	r2,r3,r2
 8001e90:	1000040e 	bge	r2,zero,8001ea4 <rotate+0x29c>
 8001e94:	10bfffc4 	addi	r2,r2,-1
 8001e98:	00ffff04 	movi	r3,-4
 8001e9c:	10c4b03a 	or	r2,r2,r3
 8001ea0:	10800044 	addi	r2,r2,1
 8001ea4:	1007883a 	mov	r3,r2
 8001ea8:	e0bffc17 	ldw	r2,-16(fp)
 8001eac:	10c00015 	stw	r3,0(r2)
		for(int i =0;i<4;i++){
 8001eb0:	e03ff215 	stw	zero,-56(fp)
 8001eb4:	00004306 	br	8001fc4 <rotate+0x3bc>
		vga_ctrl->VRAM[rot_blocks[i]+offset] = 0b0000000000000000000000000000000;
 8001eb8:	d0e00117 	ldw	r3,-32764(gp)
 8001ebc:	e0bff217 	ldw	r2,-56(fp)
 8001ec0:	1085883a 	add	r2,r2,r2
 8001ec4:	1085883a 	add	r2,r2,r2
 8001ec8:	e13fec04 	addi	r4,fp,-80
 8001ecc:	2085883a 	add	r2,r4,r2
 8001ed0:	10800c04 	addi	r2,r2,48
 8001ed4:	11000017 	ldw	r4,0(r2)
 8001ed8:	e0800317 	ldw	r2,12(fp)
 8001edc:	2085883a 	add	r2,r4,r2
 8001ee0:	1085883a 	add	r2,r2,r2
 8001ee4:	1085883a 	add	r2,r2,r2
 8001ee8:	1885883a 	add	r2,r3,r2
 8001eec:	10000015 	stw	zero,0(r2)
		vga_ctrl->VRAM[blocks[i]+offset] = *select+1;
 8001ef0:	d0e00117 	ldw	r3,-32764(gp)
 8001ef4:	e0bff217 	ldw	r2,-56(fp)
 8001ef8:	1085883a 	add	r2,r2,r2
 8001efc:	1085883a 	add	r2,r2,r2
 8001f00:	e13fec04 	addi	r4,fp,-80
 8001f04:	2085883a 	add	r2,r4,r2
 8001f08:	10800804 	addi	r2,r2,32
 8001f0c:	11000017 	ldw	r4,0(r2)
 8001f10:	e0800317 	ldw	r2,12(fp)
 8001f14:	2085883a 	add	r2,r4,r2
 8001f18:	e1000217 	ldw	r4,8(fp)
 8001f1c:	21000017 	ldw	r4,0(r4)
 8001f20:	21000044 	addi	r4,r4,1
 8001f24:	1085883a 	add	r2,r2,r2
 8001f28:	1085883a 	add	r2,r2,r2
 8001f2c:	1885883a 	add	r2,r3,r2
 8001f30:	11000015 	stw	r4,0(r2)
		occupied[rot_blocks[i]+offset] = 0;
 8001f34:	e0bff217 	ldw	r2,-56(fp)
 8001f38:	1085883a 	add	r2,r2,r2
 8001f3c:	1085883a 	add	r2,r2,r2
 8001f40:	e0ffec04 	addi	r3,fp,-80
 8001f44:	1885883a 	add	r2,r3,r2
 8001f48:	10800c04 	addi	r2,r2,48
 8001f4c:	10c00017 	ldw	r3,0(r2)
 8001f50:	e0800317 	ldw	r2,12(fp)
 8001f54:	1887883a 	add	r3,r3,r2
 8001f58:	008200b4 	movhi	r2,2050
 8001f5c:	10af9a04 	addi	r2,r2,-16792
 8001f60:	18c7883a 	add	r3,r3,r3
 8001f64:	18c7883a 	add	r3,r3,r3
 8001f68:	10c5883a 	add	r2,r2,r3
 8001f6c:	10000015 	stw	zero,0(r2)
		occupied[blocks[i]+offset] = *select +1;
 8001f70:	e0bff217 	ldw	r2,-56(fp)
 8001f74:	1085883a 	add	r2,r2,r2
 8001f78:	1085883a 	add	r2,r2,r2
 8001f7c:	e13fec04 	addi	r4,fp,-80
 8001f80:	2085883a 	add	r2,r4,r2
 8001f84:	10800804 	addi	r2,r2,32
 8001f88:	10c00017 	ldw	r3,0(r2)
 8001f8c:	e0800317 	ldw	r2,12(fp)
 8001f90:	1887883a 	add	r3,r3,r2
 8001f94:	e0800217 	ldw	r2,8(fp)
 8001f98:	10800017 	ldw	r2,0(r2)
 8001f9c:	11000044 	addi	r4,r2,1
 8001fa0:	008200b4 	movhi	r2,2050
 8001fa4:	10af9a04 	addi	r2,r2,-16792
 8001fa8:	18c7883a 	add	r3,r3,r3
 8001fac:	18c7883a 	add	r3,r3,r3
 8001fb0:	10c5883a 	add	r2,r2,r3
 8001fb4:	11000015 	stw	r4,0(r2)
		}
	}
	if(move){
		*curr_tet = pieces[*select][new_rot];
		*curr_rot = (*curr_rot +1)%4;
		for(int i =0;i<4;i++){
 8001fb8:	e0bff217 	ldw	r2,-56(fp)
 8001fbc:	10800044 	addi	r2,r2,1
 8001fc0:	e0bff215 	stw	r2,-56(fp)
 8001fc4:	e0bff217 	ldw	r2,-56(fp)
 8001fc8:	10800110 	cmplti	r2,r2,4
 8001fcc:	103fba1e 	bne	r2,zero,8001eb8 <__alt_data_end+0xfc001eb8>

		}
	}


}
 8001fd0:	0001883a 	nop
 8001fd4:	e037883a 	mov	sp,fp
 8001fd8:	dfc00117 	ldw	ra,4(sp)
 8001fdc:	df000017 	ldw	fp,0(sp)
 8001fe0:	dec00204 	addi	sp,sp,8
 8001fe4:	f800283a 	ret

08001fe8 <main>:

int main() {
 8001fe8:	deff6304 	addi	sp,sp,-628
 8001fec:	dfc09c15 	stw	ra,624(sp)
 8001ff0:	df009b15 	stw	fp,620(sp)
 8001ff4:	dcc09a15 	stw	r19,616(sp)
 8001ff8:	dc809915 	stw	r18,612(sp)
 8001ffc:	dc409815 	stw	r17,608(sp)
 8002000:	dc009715 	stw	r16,604(sp)
 8002004:	df009b04 	addi	fp,sp,620

	printf("initializing MAX3421E...\n");
 8002008:	01020074 	movhi	r4,2049
 800200c:	211fa004 	addi	r4,r4,32384
 8002010:	8004ba80 	call	8004ba8 <puts>
	MAX3421E_init();
 8002014:	80038100 	call	8003810 <MAX3421E_init>
	printf("initializing USB...\n");
 8002018:	01020074 	movhi	r4,2049
 800201c:	211fa704 	addi	r4,r4,32412
 8002020:	8004ba80 	call	8004ba8 <puts>
	USB_init();
 8002024:	8003fbc0 	call	8003fbc <USB_init>
	int count = 0;
 8002028:	e03f6b15 	stw	zero,-596(fp)
	while(*returnKeys() != 0x2C){
 800202c:	00000306 	br	800203c <main+0x54>
		count ++;
 8002030:	e0bf6b17 	ldw	r2,-596(fp)
 8002034:	10800044 	addi	r2,r2,1
 8002038:	e0bf6b15 	stw	r2,-596(fp)
	printf("initializing MAX3421E...\n");
	MAX3421E_init();
	printf("initializing USB...\n");
	USB_init();
	int count = 0;
	while(*returnKeys() != 0x2C){
 800203c:	800076c0 	call	800076c <returnKeys>
 8002040:	10800003 	ldbu	r2,0(r2)
 8002044:	10803fcc 	andi	r2,r2,255
 8002048:	10800b18 	cmpnei	r2,r2,44
 800204c:	103ff81e 	bne	r2,zero,8002030 <__alt_data_end+0xfc002030>
		count ++;
	}
	//intializes random with counter, better than system time
	srand(count);
 8002050:	e0bf6b17 	ldw	r2,-596(fp)
 8002054:	1009883a 	mov	r4,r2
 8002058:	8004bbc0 	call	8004bbc <srand>
//player1 local
	BYTE* curr; //this can be wasd or 8456
	int x = 3;
 800205c:	008000c4 	movi	r2,3
 8002060:	e0bf7015 	stw	r2,-576(fp)
	int y = 0;
 8002064:	e03f7115 	stw	zero,-572(fp)
	int curr_tet = 0;
 8002068:	e03f7215 	stw	zero,-568(fp)
	int curr_rot = 0;
 800206c:	e03f7315 	stw	zero,-564(fp)
	int select = 0;
 8002070:	e03f7415 	stw	zero,-560(fp)
	bool flag = true;
 8002074:	00800044 	movi	r2,1
 8002078:	e0bf7505 	stb	r2,-556(fp)
	int lines = 0;
 800207c:	e03f7615 	stw	zero,-552(fp)
	int score = 0;
 8002080:	e03f7715 	stw	zero,-548(fp)
	int level = 1;
 8002084:	00800044 	movi	r2,1
 8002088:	e0bf7815 	stw	r2,-544(fp)
	int levelThreshold = 0;
 800208c:	e03f7915 	stw	zero,-540(fp)
	char score_string[80];
	char level_string[80];
	char line_string[80];
	BYTE key1;
	BYTE key2;
	bool one = false;
 8002090:	e03f6d85 	stb	zero,-586(fp)
	bool two = false;
 8002094:	e03f6dc5 	stb	zero,-585(fp)

//player 2 local
	int x2 = 3;
 8002098:	008000c4 	movi	r2,3
 800209c:	e0bfb615 	stw	r2,-296(fp)
	int y2 = 0;
 80020a0:	e03fb715 	stw	zero,-292(fp)
	int curr_tet2 = 0;
 80020a4:	e03fb815 	stw	zero,-288(fp)
	int curr_rot2 = 0;
 80020a8:	e03fb915 	stw	zero,-284(fp)
	int select2 = 0;
 80020ac:	e03fba15 	stw	zero,-280(fp)
	bool flag2 = true;
 80020b0:	00800044 	movi	r2,1
 80020b4:	e0bfbb05 	stb	r2,-276(fp)
	int lines2 = 0;
 80020b8:	e03fbc15 	stw	zero,-272(fp)
	int score2 = 0;
 80020bc:	e03fbd15 	stw	zero,-268(fp)
	int level2 = 1;
 80020c0:	00800044 	movi	r2,1
 80020c4:	e0bfbe15 	stw	r2,-264(fp)
	int levelThreshold2 = 0;
 80020c8:	e03fbf15 	stw	zero,-260(fp)
	char line_string2[80];




	for (int i = 0; i < 16; i++)
 80020cc:	e03f6e15 	stw	zero,-584(fp)
 80020d0:	00002806 	br	8002174 <main+0x18c>
		{
			setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 80020d4:	e0bf6e17 	ldw	r2,-584(fp)
 80020d8:	14403fcc 	andi	r17,r2,255
 80020dc:	040200b4 	movhi	r16,2050
 80020e0:	8420af04 	addi	r16,r16,-32068
 80020e4:	e0bf6e17 	ldw	r2,-584(fp)
 80020e8:	014005c4 	movi	r5,23
 80020ec:	1009883a 	mov	r4,r2
 80020f0:	8004a540 	call	8004a54 <__mulsi3>
 80020f4:	8085883a 	add	r2,r16,r2
 80020f8:	10800504 	addi	r2,r2,20
 80020fc:	10800003 	ldbu	r2,0(r2)
 8002100:	14803fcc 	andi	r18,r2,255
 8002104:	040200b4 	movhi	r16,2050
 8002108:	8420af04 	addi	r16,r16,-32068
 800210c:	e0bf6e17 	ldw	r2,-584(fp)
 8002110:	014005c4 	movi	r5,23
 8002114:	1009883a 	mov	r4,r2
 8002118:	8004a540 	call	8004a54 <__mulsi3>
 800211c:	8085883a 	add	r2,r16,r2
 8002120:	10800544 	addi	r2,r2,21
 8002124:	10800003 	ldbu	r2,0(r2)
 8002128:	14c03fcc 	andi	r19,r2,255
 800212c:	040200b4 	movhi	r16,2050
 8002130:	8420af04 	addi	r16,r16,-32068
 8002134:	e0bf6e17 	ldw	r2,-584(fp)
 8002138:	014005c4 	movi	r5,23
 800213c:	1009883a 	mov	r4,r2
 8002140:	8004a540 	call	8004a54 <__mulsi3>
 8002144:	8085883a 	add	r2,r16,r2
 8002148:	10800584 	addi	r2,r2,22
 800214c:	10800003 	ldbu	r2,0(r2)
 8002150:	10803fcc 	andi	r2,r2,255
 8002154:	100f883a 	mov	r7,r2
 8002158:	980d883a 	mov	r6,r19
 800215c:	900b883a 	mov	r5,r18
 8002160:	8809883a 	mov	r4,r17
 8002164:	80008640 	call	8000864 <setColorPalette>
	char line_string2[80];




	for (int i = 0; i < 16; i++)
 8002168:	e0bf6e17 	ldw	r2,-584(fp)
 800216c:	10800044 	addi	r2,r2,1
 8002170:	e0bf6e15 	stw	r2,-584(fp)
 8002174:	e0bf6e17 	ldw	r2,-584(fp)
 8002178:	10800410 	cmplti	r2,r2,16
 800217c:	103fd51e 	bne	r2,zero,80020d4 <__alt_data_end+0xfc0020d4>
		{
			setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
		}


	initGame();
 8002180:	8000e200 	call	8000e20 <initGame>
	//player 1 start
	//select = genTet();
	//curr_tet = pieces[select][0];
	//flag = placeNewTet(curr_tet,select+1,0);
	//player 2 start
	select2 = genTet();
 8002184:	8000f600 	call	8000f60 <genTet>
 8002188:	e0bfba15 	stw	r2,-280(fp)
	curr_tet2 = pieces[select2][0];
 800218c:	e0ffba17 	ldw	r3,-280(fp)
 8002190:	008200b4 	movhi	r2,2050
 8002194:	10a12704 	addi	r2,r2,-31588
 8002198:	1806913a 	slli	r3,r3,4
 800219c:	10c5883a 	add	r2,r2,r3
 80021a0:	10800017 	ldw	r2,0(r2)
 80021a4:	e0bfb815 	stw	r2,-288(fp)
	flag2 = placeNewTet(curr_tet2,select2+1,200);
 80021a8:	e0ffb817 	ldw	r3,-288(fp)
 80021ac:	e0bfba17 	ldw	r2,-280(fp)
 80021b0:	10800044 	addi	r2,r2,1
 80021b4:	01803204 	movi	r6,200
 80021b8:	100b883a 	mov	r5,r2
 80021bc:	1809883a 	mov	r4,r3
 80021c0:	8000c5c0 	call	8000c5c <placeNewTet>
 80021c4:	e0bfbb05 	stb	r2,-276(fp)
	while (1) {
		//draw scores,lines, and levels
		sprintf(score_string, " Score : %d", score);
 80021c8:	e0ff7717 	ldw	r3,-548(fp)
 80021cc:	e0bf7a04 	addi	r2,fp,-536
 80021d0:	180d883a 	mov	r6,r3
 80021d4:	01420074 	movhi	r5,2049
 80021d8:	295fac04 	addi	r5,r5,32432
 80021dc:	1009883a 	mov	r4,r2
 80021e0:	8004c900 	call	8004c90 <sprintf>
		textVGADrawColorText (score_string,436);
 80021e4:	e0bf7a04 	addi	r2,fp,-536
 80021e8:	01406d04 	movi	r5,436
 80021ec:	1009883a 	mov	r4,r2
 80021f0:	80010800 	call	8001080 <textVGADrawColorText>
		sprintf(level_string, " Level : %d", level);
 80021f4:	e0ff7817 	ldw	r3,-544(fp)
 80021f8:	e0bf8e04 	addi	r2,fp,-456
 80021fc:	180d883a 	mov	r6,r3
 8002200:	01420074 	movhi	r5,2049
 8002204:	295faf04 	addi	r5,r5,32444
 8002208:	1009883a 	mov	r4,r2
 800220c:	8004c900 	call	8004c90 <sprintf>
		textVGADrawColorText (level_string,448);
 8002210:	e0bf8e04 	addi	r2,fp,-456
 8002214:	01407004 	movi	r5,448
 8002218:	1009883a 	mov	r4,r2
 800221c:	80010800 	call	8001080 <textVGADrawColorText>
		sprintf(line_string, " Lines : %d", lines);
 8002220:	e0ff7617 	ldw	r3,-552(fp)
 8002224:	e0bfa204 	addi	r2,fp,-376
 8002228:	180d883a 	mov	r6,r3
 800222c:	01420074 	movhi	r5,2049
 8002230:	295fb204 	addi	r5,r5,32456
 8002234:	1009883a 	mov	r4,r2
 8002238:	8004c900 	call	8004c90 <sprintf>
		textVGADrawColorText (line_string,460);
 800223c:	e0bfa204 	addi	r2,fp,-376
 8002240:	01407304 	movi	r5,460
 8002244:	1009883a 	mov	r4,r2
 8002248:	80010800 	call	8001080 <textVGADrawColorText>


		sprintf(score_string2, " Score : %d", score2);
 800224c:	e0ffbd17 	ldw	r3,-268(fp)
 8002250:	e0bfc004 	addi	r2,fp,-256
 8002254:	180d883a 	mov	r6,r3
 8002258:	01420074 	movhi	r5,2049
 800225c:	295fac04 	addi	r5,r5,32432
 8002260:	1009883a 	mov	r4,r2
 8002264:	8004c900 	call	8004c90 <sprintf>
		textVGADrawColorText (score_string2,400);
 8002268:	e0bfc004 	addi	r2,fp,-256
 800226c:	01406404 	movi	r5,400
 8002270:	1009883a 	mov	r4,r2
 8002274:	80010800 	call	8001080 <textVGADrawColorText>
		sprintf(level_string2, " Level : %d", level2);
 8002278:	e0ffbe17 	ldw	r3,-264(fp)
 800227c:	e0bfd404 	addi	r2,fp,-176
 8002280:	180d883a 	mov	r6,r3
 8002284:	01420074 	movhi	r5,2049
 8002288:	295faf04 	addi	r5,r5,32444
 800228c:	1009883a 	mov	r4,r2
 8002290:	8004c900 	call	8004c90 <sprintf>
		textVGADrawColorText (level_string2,412);
 8002294:	e0bfd404 	addi	r2,fp,-176
 8002298:	01406704 	movi	r5,412
 800229c:	1009883a 	mov	r4,r2
 80022a0:	80010800 	call	8001080 <textVGADrawColorText>
		sprintf(line_string2, " Lines : %d", lines2);
 80022a4:	e0ffbc17 	ldw	r3,-272(fp)
 80022a8:	e0bfe804 	addi	r2,fp,-96
 80022ac:	180d883a 	mov	r6,r3
 80022b0:	01420074 	movhi	r5,2049
 80022b4:	295fb204 	addi	r5,r5,32456
 80022b8:	1009883a 	mov	r4,r2
 80022bc:	8004c900 	call	8004c90 <sprintf>
		textVGADrawColorText (line_string2,424);
 80022c0:	e0bfe804 	addi	r2,fp,-96
 80022c4:	01406a04 	movi	r5,424
 80022c8:	1009883a 	mov	r4,r2
 80022cc:	80010800 	call	8001080 <textVGADrawColorText>


		//textVGADrawColorText (level_string,);
        printf("some thing");
 80022d0:	01020074 	movhi	r4,2049
 80022d4:	211fb504 	addi	r4,r4,32468
 80022d8:	8004aac0 	call	8004aac <printf>
		//textVGADrawColorText (line_string,250);
		printSignedHex0(level);
 80022dc:	e0bf7817 	ldw	r2,-544(fp)
 80022e0:	10803fcc 	andi	r2,r2,255
 80022e4:	1080201c 	xori	r2,r2,128
 80022e8:	10bfe004 	addi	r2,r2,-128
 80022ec:	1009883a 	mov	r4,r2
 80022f0:	80004e80 	call	80004e8 <printSignedHex0>
		printSignedHex1(score);
 80022f4:	e0bf7717 	ldw	r2,-548(fp)
 80022f8:	10803fcc 	andi	r2,r2,255
 80022fc:	1080201c 	xori	r2,r2,128
 8002300:	10bfe004 	addi	r2,r2,-128
 8002304:	1009883a 	mov	r4,r2
 8002308:	80006000 	call	8000600 <printSignedHex1>
		curr = returnKeys();
 800230c:	800076c0 	call	800076c <returnKeys>
 8002310:	e0bf6c15 	stw	r2,-592(fp)
		key1 = 0x00;
 8002314:	e03f6d05 	stb	zero,-588(fp)
		key2 = 0x00;
 8002318:	e03f6d45 	stb	zero,-587(fp)
		one = false;
 800231c:	e03f6d85 	stb	zero,-586(fp)
		two = false;
 8002320:	e03f6dc5 	stb	zero,-585(fp)
		for(int i=0;i<6;i++){
 8002324:	e03f6f15 	stw	zero,-580(fp)
 8002328:	00005706 	br	8002488 <main+0x4a0>
			if((curr[i] == 0x1A || curr[i] == 0x04 || curr[i] == 0x07 || curr[i] == 0x16) && !one){
 800232c:	e0bf6f17 	ldw	r2,-580(fp)
 8002330:	e0ff6c17 	ldw	r3,-592(fp)
 8002334:	1885883a 	add	r2,r3,r2
 8002338:	10800003 	ldbu	r2,0(r2)
 800233c:	10803fcc 	andi	r2,r2,255
 8002340:	108006a0 	cmpeqi	r2,r2,26
 8002344:	1000151e 	bne	r2,zero,800239c <main+0x3b4>
 8002348:	e0bf6f17 	ldw	r2,-580(fp)
 800234c:	e0ff6c17 	ldw	r3,-592(fp)
 8002350:	1885883a 	add	r2,r3,r2
 8002354:	10800003 	ldbu	r2,0(r2)
 8002358:	10803fcc 	andi	r2,r2,255
 800235c:	10800120 	cmpeqi	r2,r2,4
 8002360:	10000e1e 	bne	r2,zero,800239c <main+0x3b4>
 8002364:	e0bf6f17 	ldw	r2,-580(fp)
 8002368:	e0ff6c17 	ldw	r3,-592(fp)
 800236c:	1885883a 	add	r2,r3,r2
 8002370:	10800003 	ldbu	r2,0(r2)
 8002374:	10803fcc 	andi	r2,r2,255
 8002378:	108001e0 	cmpeqi	r2,r2,7
 800237c:	1000071e 	bne	r2,zero,800239c <main+0x3b4>
 8002380:	e0bf6f17 	ldw	r2,-580(fp)
 8002384:	e0ff6c17 	ldw	r3,-592(fp)
 8002388:	1885883a 	add	r2,r3,r2
 800238c:	10800003 	ldbu	r2,0(r2)
 8002390:	10803fcc 	andi	r2,r2,255
 8002394:	10800598 	cmpnei	r2,r2,22
 8002398:	10000c1e 	bne	r2,zero,80023cc <main+0x3e4>
 800239c:	e0bf6d83 	ldbu	r2,-586(fp)
 80023a0:	1080005c 	xori	r2,r2,1
 80023a4:	10803fcc 	andi	r2,r2,255
 80023a8:	10000826 	beq	r2,zero,80023cc <main+0x3e4>
				key1 = curr[i];
 80023ac:	e0bf6f17 	ldw	r2,-580(fp)
 80023b0:	e0ff6c17 	ldw	r3,-592(fp)
 80023b4:	1885883a 	add	r2,r3,r2
 80023b8:	10800003 	ldbu	r2,0(r2)
 80023bc:	e0bf6d05 	stb	r2,-588(fp)
				one = true;
 80023c0:	00800044 	movi	r2,1
 80023c4:	e0bf6d85 	stb	r2,-586(fp)
 80023c8:	00002c06 	br	800247c <main+0x494>
			}
			else if((curr[i] == 0x5C || curr[i] == 0x5E || curr[i] == 0x5D || curr[i] == 0x60) && !two){
 80023cc:	e0bf6f17 	ldw	r2,-580(fp)
 80023d0:	e0ff6c17 	ldw	r3,-592(fp)
 80023d4:	1885883a 	add	r2,r3,r2
 80023d8:	10800003 	ldbu	r2,0(r2)
 80023dc:	10803fcc 	andi	r2,r2,255
 80023e0:	10801720 	cmpeqi	r2,r2,92
 80023e4:	1000151e 	bne	r2,zero,800243c <main+0x454>
 80023e8:	e0bf6f17 	ldw	r2,-580(fp)
 80023ec:	e0ff6c17 	ldw	r3,-592(fp)
 80023f0:	1885883a 	add	r2,r3,r2
 80023f4:	10800003 	ldbu	r2,0(r2)
 80023f8:	10803fcc 	andi	r2,r2,255
 80023fc:	108017a0 	cmpeqi	r2,r2,94
 8002400:	10000e1e 	bne	r2,zero,800243c <main+0x454>
 8002404:	e0bf6f17 	ldw	r2,-580(fp)
 8002408:	e0ff6c17 	ldw	r3,-592(fp)
 800240c:	1885883a 	add	r2,r3,r2
 8002410:	10800003 	ldbu	r2,0(r2)
 8002414:	10803fcc 	andi	r2,r2,255
 8002418:	10801760 	cmpeqi	r2,r2,93
 800241c:	1000071e 	bne	r2,zero,800243c <main+0x454>
 8002420:	e0bf6f17 	ldw	r2,-580(fp)
 8002424:	e0ff6c17 	ldw	r3,-592(fp)
 8002428:	1885883a 	add	r2,r3,r2
 800242c:	10800003 	ldbu	r2,0(r2)
 8002430:	10803fcc 	andi	r2,r2,255
 8002434:	10801818 	cmpnei	r2,r2,96
 8002438:	10000c1e 	bne	r2,zero,800246c <main+0x484>
 800243c:	e0bf6dc3 	ldbu	r2,-585(fp)
 8002440:	1080005c 	xori	r2,r2,1
 8002444:	10803fcc 	andi	r2,r2,255
 8002448:	10000826 	beq	r2,zero,800246c <main+0x484>
				key2 = curr[i];
 800244c:	e0bf6f17 	ldw	r2,-580(fp)
 8002450:	e0ff6c17 	ldw	r3,-592(fp)
 8002454:	1885883a 	add	r2,r3,r2
 8002458:	10800003 	ldbu	r2,0(r2)
 800245c:	e0bf6d45 	stb	r2,-587(fp)
				two = true;
 8002460:	00800044 	movi	r2,1
 8002464:	e0bf6dc5 	stb	r2,-585(fp)
 8002468:	00000406 	br	800247c <main+0x494>
			}
			else if(one && two){
 800246c:	e0bf6d83 	ldbu	r2,-586(fp)
 8002470:	10000226 	beq	r2,zero,800247c <main+0x494>
 8002474:	e0bf6dc3 	ldbu	r2,-585(fp)
 8002478:	1000071e 	bne	r2,zero,8002498 <main+0x4b0>
		curr = returnKeys();
		key1 = 0x00;
		key2 = 0x00;
		one = false;
		two = false;
		for(int i=0;i<6;i++){
 800247c:	e0bf6f17 	ldw	r2,-580(fp)
 8002480:	10800044 	addi	r2,r2,1
 8002484:	e0bf6f15 	stw	r2,-580(fp)
 8002488:	e0bf6f17 	ldw	r2,-580(fp)
 800248c:	10800190 	cmplti	r2,r2,6
 8002490:	103fa61e 	bne	r2,zero,800232c <__alt_data_end+0xfc00232c>
 8002494:	00000106 	br	800249c <main+0x4b4>
			else if((curr[i] == 0x5C || curr[i] == 0x5E || curr[i] == 0x5D || curr[i] == 0x60) && !two){
				key2 = curr[i];
				two = true;
			}
			else if(one && two){
				break;
 8002498:	0001883a 	nop
			}
		}
		if(*curr == 0x29){
 800249c:	e0bf6c17 	ldw	r2,-592(fp)
 80024a0:	10800003 	ldbu	r2,0(r2)
 80024a4:	10803fcc 	andi	r2,r2,255
 80024a8:	10800a58 	cmpnei	r2,r2,41
 80024ac:	10000b1e 	bne	r2,zero,80024dc <main+0x4f4>
			while(*curr != 0x2C){
 80024b0:	00000206 	br	80024bc <main+0x4d4>
				curr = returnKeys();
 80024b4:	800076c0 	call	800076c <returnKeys>
 80024b8:	e0bf6c15 	stw	r2,-592(fp)
			else if(one && two){
				break;
			}
		}
		if(*curr == 0x29){
			while(*curr != 0x2C){
 80024bc:	e0bf6c17 	ldw	r2,-592(fp)
 80024c0:	10800003 	ldbu	r2,0(r2)
 80024c4:	10803fcc 	andi	r2,r2,255
 80024c8:	10800b18 	cmpnei	r2,r2,44
 80024cc:	103ff91e 	bne	r2,zero,80024b4 <__alt_data_end+0xfc0024b4>
				curr = returnKeys();
			}
			usleep(250000);
 80024d0:	01000134 	movhi	r4,4
 80024d4:	21342404 	addi	r4,r4,-12144
 80024d8:	8015c540 	call	8015c54 <usleep>
		}
		if(!flag || !flag2){
 80024dc:	e0bf7503 	ldbu	r2,-556(fp)
 80024e0:	1080005c 	xori	r2,r2,1
 80024e4:	10803fcc 	andi	r2,r2,255
 80024e8:	1000041e 	bne	r2,zero,80024fc <main+0x514>
 80024ec:	e0bfbb03 	ldbu	r2,-276(fp)
 80024f0:	1080005c 	xori	r2,r2,1
 80024f4:	10803fcc 	andi	r2,r2,255
 80024f8:	10003926 	beq	r2,zero,80025e0 <main+0x5f8>
			usleep(500000);
 80024fc:	01000234 	movhi	r4,8
 8002500:	21284804 	addi	r4,r4,-24288
 8002504:	8015c540 	call	8015c54 <usleep>
			initGame();
 8002508:	8000e200 	call	8000e20 <initGame>
			select = genTet();
 800250c:	8000f600 	call	8000f60 <genTet>
 8002510:	e0bf7415 	stw	r2,-560(fp)
			score = 0;
 8002514:	e03f7715 	stw	zero,-548(fp)
			level =1;
 8002518:	00800044 	movi	r2,1
 800251c:	e0bf7815 	stw	r2,-544(fp)
			lines = 0;
 8002520:	e03f7615 	stw	zero,-552(fp)
			levelThreshold = 0;
 8002524:	e03f7915 	stw	zero,-540(fp)
			curr_tet = pieces[select][0];
 8002528:	e0ff7417 	ldw	r3,-560(fp)
 800252c:	008200b4 	movhi	r2,2050
 8002530:	10a12704 	addi	r2,r2,-31588
 8002534:	1806913a 	slli	r3,r3,4
 8002538:	10c5883a 	add	r2,r2,r3
 800253c:	10800017 	ldw	r2,0(r2)
 8002540:	e0bf7215 	stw	r2,-568(fp)
			flag = placeNewTet(curr_tet,select+1,0);
 8002544:	e0ff7217 	ldw	r3,-568(fp)
 8002548:	e0bf7417 	ldw	r2,-560(fp)
 800254c:	10800044 	addi	r2,r2,1
 8002550:	000d883a 	mov	r6,zero
 8002554:	100b883a 	mov	r5,r2
 8002558:	1809883a 	mov	r4,r3
 800255c:	8000c5c0 	call	8000c5c <placeNewTet>
 8002560:	e0bf7505 	stb	r2,-556(fp)
			curr_rot = 0;
 8002564:	e03f7315 	stw	zero,-564(fp)
			x= 3;
 8002568:	008000c4 	movi	r2,3
 800256c:	e0bf7015 	stw	r2,-576(fp)
			y= 0;
 8002570:	e03f7115 	stw	zero,-572(fp)
			initGame();
 8002574:	8000e200 	call	8000e20 <initGame>
			select2 = genTet();
 8002578:	8000f600 	call	8000f60 <genTet>
 800257c:	e0bfba15 	stw	r2,-280(fp)
			score2 = 0;
 8002580:	e03fbd15 	stw	zero,-268(fp)
			level2 =1;
 8002584:	00800044 	movi	r2,1
 8002588:	e0bfbe15 	stw	r2,-264(fp)
			lines2 = 0;
 800258c:	e03fbc15 	stw	zero,-272(fp)
			levelThreshold2 = 0;
 8002590:	e03fbf15 	stw	zero,-260(fp)
			curr_tet2 = pieces[select2][0];
 8002594:	e0ffba17 	ldw	r3,-280(fp)
 8002598:	008200b4 	movhi	r2,2050
 800259c:	10a12704 	addi	r2,r2,-31588
 80025a0:	1806913a 	slli	r3,r3,4
 80025a4:	10c5883a 	add	r2,r2,r3
 80025a8:	10800017 	ldw	r2,0(r2)
 80025ac:	e0bfb815 	stw	r2,-288(fp)
			flag2 = placeNewTet(curr_tet2,select2+1,200);
 80025b0:	e0ffb817 	ldw	r3,-288(fp)
 80025b4:	e0bfba17 	ldw	r2,-280(fp)
 80025b8:	10800044 	addi	r2,r2,1
 80025bc:	01803204 	movi	r6,200
 80025c0:	100b883a 	mov	r5,r2
 80025c4:	1809883a 	mov	r4,r3
 80025c8:	8000c5c0 	call	8000c5c <placeNewTet>
 80025cc:	e0bfbb05 	stb	r2,-276(fp)
			curr_rot2 = 0;
 80025d0:	e03fb915 	stw	zero,-284(fp)
			x2= 3;
 80025d4:	008000c4 	movi	r2,3
 80025d8:	e0bfb615 	stw	r2,-296(fp)
			y2= 0;
 80025dc:	e03fb715 	stw	zero,-292(fp)
		}
		//down
		Down(&x,&y,&curr_tet,&lines,&score,&level,&levelThreshold, &select,&flag, 0);
 80025e0:	e1bf7604 	addi	r6,fp,-552
 80025e4:	e17f7204 	addi	r5,fp,-568
 80025e8:	e13f7104 	addi	r4,fp,-572
 80025ec:	e0ff7004 	addi	r3,fp,-576
 80025f0:	d8000515 	stw	zero,20(sp)
 80025f4:	e0bf7504 	addi	r2,fp,-556
 80025f8:	d8800415 	stw	r2,16(sp)
 80025fc:	e0bf7404 	addi	r2,fp,-560
 8002600:	d8800315 	stw	r2,12(sp)
 8002604:	e0bf7904 	addi	r2,fp,-540
 8002608:	d8800215 	stw	r2,8(sp)
 800260c:	e0bf7804 	addi	r2,fp,-544
 8002610:	d8800115 	stw	r2,4(sp)
 8002614:	e0bf7704 	addi	r2,fp,-548
 8002618:	d8800015 	stw	r2,0(sp)
 800261c:	300f883a 	mov	r7,r6
 8002620:	280d883a 	mov	r6,r5
 8002624:	200b883a 	mov	r5,r4
 8002628:	1809883a 	mov	r4,r3
 800262c:	80011180 	call	8001118 <Down>
		Down(&x2,&y2,&curr_tet2,&lines2,&score2,&level2,&levelThreshold2, &select2,&flag2, 200);
 8002630:	e1bfbc04 	addi	r6,fp,-272
 8002634:	e17fb804 	addi	r5,fp,-288
 8002638:	e13fb704 	addi	r4,fp,-292
 800263c:	e0ffb604 	addi	r3,fp,-296
 8002640:	00803204 	movi	r2,200
 8002644:	d8800515 	stw	r2,20(sp)
 8002648:	e0bfbb04 	addi	r2,fp,-276
 800264c:	d8800415 	stw	r2,16(sp)
 8002650:	e0bfba04 	addi	r2,fp,-280
 8002654:	d8800315 	stw	r2,12(sp)
 8002658:	e0bfbf04 	addi	r2,fp,-260
 800265c:	d8800215 	stw	r2,8(sp)
 8002660:	e0bfbe04 	addi	r2,fp,-264
 8002664:	d8800115 	stw	r2,4(sp)
 8002668:	e0bfbd04 	addi	r2,fp,-268
 800266c:	d8800015 	stw	r2,0(sp)
 8002670:	300f883a 	mov	r7,r6
 8002674:	280d883a 	mov	r6,r5
 8002678:	200b883a 	mov	r5,r4
 800267c:	1809883a 	mov	r4,r3
 8002680:	80011180 	call	8001118 <Down>

		usleep(17000-1000*level);
 8002684:	e0bf7817 	ldw	r2,-544(fp)
 8002688:	017f0604 	movi	r5,-1000
 800268c:	1009883a 	mov	r4,r2
 8002690:	8004a540 	call	8004a54 <__mulsi3>
 8002694:	10909a04 	addi	r2,r2,17000
 8002698:	1009883a 	mov	r4,r2
 800269c:	8015c540 	call	8015c54 <usleep>


		switch(key1){
 80026a0:	e0bf6d03 	ldbu	r2,-588(fp)
 80026a4:	10c001e0 	cmpeqi	r3,r2,7
 80026a8:	1800211e 	bne	r3,zero,8002730 <main+0x748>
 80026ac:	10c00208 	cmpgei	r3,r2,8
 80026b0:	1800031e 	bne	r3,zero,80026c0 <main+0x6d8>
 80026b4:	10800120 	cmpeqi	r2,r2,4
 80026b8:	1000121e 	bne	r2,zero,8002704 <main+0x71c>
 80026bc:	00003c06 	br	80027b0 <main+0x7c8>
 80026c0:	10c005a0 	cmpeqi	r3,r2,22
 80026c4:	1800251e 	bne	r3,zero,800275c <main+0x774>
 80026c8:	108006a0 	cmpeqi	r2,r2,26
 80026cc:	10003826 	beq	r2,zero,80027b0 <main+0x7c8>
		//rotate
		case 0x1A:
			rotate(&curr_rot,&x,&y,&curr_tet, &select,0);
 80026d0:	e1bf7204 	addi	r6,fp,-568
 80026d4:	e17f7104 	addi	r5,fp,-572
 80026d8:	e13f7004 	addi	r4,fp,-576
 80026dc:	e0ff7304 	addi	r3,fp,-564
 80026e0:	d8000115 	stw	zero,4(sp)
 80026e4:	e0bf7404 	addi	r2,fp,-560
 80026e8:	d8800015 	stw	r2,0(sp)
 80026ec:	300f883a 	mov	r7,r6
 80026f0:	280d883a 	mov	r6,r5
 80026f4:	200b883a 	mov	r5,r4
 80026f8:	1809883a 	mov	r4,r3
 80026fc:	8001c080 	call	8001c08 <rotate>
			break;
 8002700:	00002b06 	br	80027b0 <main+0x7c8>
		//left
		case 0x04:
			left(&x,& y,& curr_tet,& select,0);
 8002704:	e17f7404 	addi	r5,fp,-560
 8002708:	e13f7204 	addi	r4,fp,-568
 800270c:	e0ff7104 	addi	r3,fp,-572
 8002710:	e0bf7004 	addi	r2,fp,-576
 8002714:	d8000015 	stw	zero,0(sp)
 8002718:	280f883a 	mov	r7,r5
 800271c:	200d883a 	mov	r6,r4
 8002720:	180b883a 	mov	r5,r3
 8002724:	1009883a 	mov	r4,r2
 8002728:	800167c0 	call	800167c <left>
			break;
 800272c:	00002006 	br	80027b0 <main+0x7c8>

		//right
		case 0x07:
			right(&x,& y,& curr_tet,& select,0);
 8002730:	e17f7404 	addi	r5,fp,-560
 8002734:	e13f7204 	addi	r4,fp,-568
 8002738:	e0ff7104 	addi	r3,fp,-572
 800273c:	e0bf7004 	addi	r2,fp,-576
 8002740:	d8000015 	stw	zero,0(sp)
 8002744:	280f883a 	mov	r7,r5
 8002748:	200d883a 	mov	r6,r4
 800274c:	180b883a 	mov	r5,r3
 8002750:	1009883a 	mov	r4,r2
 8002754:	80019340 	call	8001934 <right>
			break;
 8002758:	00001506 	br	80027b0 <main+0x7c8>
		case 0x16:
			//down by control
			Down(&x,&y,&curr_tet,&lines,&score,&level,&levelThreshold, &select,&flag, 0);
 800275c:	e1bf7604 	addi	r6,fp,-552
 8002760:	e17f7204 	addi	r5,fp,-568
 8002764:	e13f7104 	addi	r4,fp,-572
 8002768:	e0ff7004 	addi	r3,fp,-576
 800276c:	d8000515 	stw	zero,20(sp)
 8002770:	e0bf7504 	addi	r2,fp,-556
 8002774:	d8800415 	stw	r2,16(sp)
 8002778:	e0bf7404 	addi	r2,fp,-560
 800277c:	d8800315 	stw	r2,12(sp)
 8002780:	e0bf7904 	addi	r2,fp,-540
 8002784:	d8800215 	stw	r2,8(sp)
 8002788:	e0bf7804 	addi	r2,fp,-544
 800278c:	d8800115 	stw	r2,4(sp)
 8002790:	e0bf7704 	addi	r2,fp,-548
 8002794:	d8800015 	stw	r2,0(sp)
 8002798:	300f883a 	mov	r7,r6
 800279c:	280d883a 	mov	r6,r5
 80027a0:	200b883a 	mov	r5,r4
 80027a4:	1809883a 	mov	r4,r3
 80027a8:	80011180 	call	8001118 <Down>
			break;
 80027ac:	0001883a 	nop
		}
		switch(key2){
 80027b0:	e0bf6d43 	ldbu	r2,-587(fp)
 80027b4:	10c01760 	cmpeqi	r3,r2,93
 80027b8:	18002f1e 	bne	r3,zero,8002878 <main+0x890>
 80027bc:	10c01788 	cmpgei	r3,r2,94
 80027c0:	1800031e 	bne	r3,zero,80027d0 <main+0x7e8>
 80027c4:	10801720 	cmpeqi	r2,r2,92
 80027c8:	1000131e 	bne	r2,zero,8002818 <main+0x830>
 80027cc:	00004006 	br	80028d0 <main+0x8e8>
 80027d0:	10c017a0 	cmpeqi	r3,r2,94
 80027d4:	18001c1e 	bne	r3,zero,8002848 <main+0x860>
 80027d8:	10801820 	cmpeqi	r2,r2,96
 80027dc:	10003c26 	beq	r2,zero,80028d0 <main+0x8e8>
			case 0x60:
				rotate(&curr_rot2,&x2,&y2,&curr_tet2, &select2,200);
 80027e0:	e1bfb804 	addi	r6,fp,-288
 80027e4:	e17fb704 	addi	r5,fp,-292
 80027e8:	e13fb604 	addi	r4,fp,-296
 80027ec:	e0ffb904 	addi	r3,fp,-284
 80027f0:	00803204 	movi	r2,200
 80027f4:	d8800115 	stw	r2,4(sp)
 80027f8:	e0bfba04 	addi	r2,fp,-280
 80027fc:	d8800015 	stw	r2,0(sp)
 8002800:	300f883a 	mov	r7,r6
 8002804:	280d883a 	mov	r6,r5
 8002808:	200b883a 	mov	r5,r4
 800280c:	1809883a 	mov	r4,r3
 8002810:	8001c080 	call	8001c08 <rotate>
				break;
 8002814:	00002e06 	br	80028d0 <main+0x8e8>
			//left
			case 0x5C:
				left(&x2,& y2,& curr_tet2,& select2,200);
 8002818:	e1bfba04 	addi	r6,fp,-280
 800281c:	e17fb804 	addi	r5,fp,-288
 8002820:	e13fb704 	addi	r4,fp,-292
 8002824:	e0ffb604 	addi	r3,fp,-296
 8002828:	00803204 	movi	r2,200
 800282c:	d8800015 	stw	r2,0(sp)
 8002830:	300f883a 	mov	r7,r6
 8002834:	280d883a 	mov	r6,r5
 8002838:	200b883a 	mov	r5,r4
 800283c:	1809883a 	mov	r4,r3
 8002840:	800167c0 	call	800167c <left>
				break;
 8002844:	00002206 	br	80028d0 <main+0x8e8>

			//right
			case 0x5E:
				right(&x2,& y2,& curr_tet2,& select2,200);
 8002848:	e1bfba04 	addi	r6,fp,-280
 800284c:	e17fb804 	addi	r5,fp,-288
 8002850:	e13fb704 	addi	r4,fp,-292
 8002854:	e0ffb604 	addi	r3,fp,-296
 8002858:	00803204 	movi	r2,200
 800285c:	d8800015 	stw	r2,0(sp)
 8002860:	300f883a 	mov	r7,r6
 8002864:	280d883a 	mov	r6,r5
 8002868:	200b883a 	mov	r5,r4
 800286c:	1809883a 	mov	r4,r3
 8002870:	80019340 	call	8001934 <right>
				break;
 8002874:	00001606 	br	80028d0 <main+0x8e8>
			case 0x5D:
				//down by control
				Down(&x2,&y2,&curr_tet2,&lines2,&score2,&level2,&levelThreshold2, &select2,&flag2, 200);
 8002878:	e1bfbc04 	addi	r6,fp,-272
 800287c:	e17fb804 	addi	r5,fp,-288
 8002880:	e13fb704 	addi	r4,fp,-292
 8002884:	e0ffb604 	addi	r3,fp,-296
 8002888:	00803204 	movi	r2,200
 800288c:	d8800515 	stw	r2,20(sp)
 8002890:	e0bfbb04 	addi	r2,fp,-276
 8002894:	d8800415 	stw	r2,16(sp)
 8002898:	e0bfba04 	addi	r2,fp,-280
 800289c:	d8800315 	stw	r2,12(sp)
 80028a0:	e0bfbf04 	addi	r2,fp,-260
 80028a4:	d8800215 	stw	r2,8(sp)
 80028a8:	e0bfbe04 	addi	r2,fp,-264
 80028ac:	d8800115 	stw	r2,4(sp)
 80028b0:	e0bfbd04 	addi	r2,fp,-268
 80028b4:	d8800015 	stw	r2,0(sp)
 80028b8:	300f883a 	mov	r7,r6
 80028bc:	280d883a 	mov	r6,r5
 80028c0:	200b883a 	mov	r5,r4
 80028c4:	1809883a 	mov	r4,r3
 80028c8:	80011180 	call	8001118 <Down>
				break;
 80028cc:	0001883a 	nop
		}
		usleep(17000-1000*level);
 80028d0:	e0bf7817 	ldw	r2,-544(fp)
 80028d4:	017f0604 	movi	r5,-1000
 80028d8:	1009883a 	mov	r4,r2
 80028dc:	8004a540 	call	8004a54 <__mulsi3>
 80028e0:	10909a04 	addi	r2,r2,17000
 80028e4:	1009883a 	mov	r4,r2
 80028e8:	8015c540 	call	8015c54 <usleep>
	}
 80028ec:	003e3606 	br	80021c8 <__alt_data_end+0xfc0021c8>

080028f0 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 80028f0:	defff204 	addi	sp,sp,-56
 80028f4:	dfc00d15 	stw	ra,52(sp)
 80028f8:	df000c15 	stw	fp,48(sp)
 80028fc:	df000c04 	addi	fp,sp,48
 8002900:	2005883a 	mov	r2,r4
 8002904:	e17fff15 	stw	r5,-4(fp)
 8002908:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 800290c:	008200b4 	movhi	r2,2050
 8002910:	10b12a04 	addi	r2,r2,-15192
 8002914:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8002918:	008200b4 	movhi	r2,2050
 800291c:	10b12a04 	addi	r2,r2,-15192
 8002920:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8002924:	e0fffe03 	ldbu	r3,-8(fp)
 8002928:	008200b4 	movhi	r2,2050
 800292c:	10b12a04 	addi	r2,r2,-15192
 8002930:	d8800415 	stw	r2,16(sp)
 8002934:	00800244 	movi	r2,9
 8002938:	d8800315 	stw	r2,12(sp)
 800293c:	d8000215 	stw	zero,8(sp)
 8002940:	00800084 	movi	r2,2
 8002944:	d8800115 	stw	r2,4(sp)
 8002948:	d8000015 	stw	zero,0(sp)
 800294c:	01c00184 	movi	r7,6
 8002950:	01802004 	movi	r6,128
 8002954:	000b883a 	mov	r5,zero
 8002958:	1809883a 	mov	r4,r3
 800295c:	8003a080 	call	8003a08 <XferCtrlReq>
 8002960:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8002964:	e0bffc03 	ldbu	r2,-16(fp)
 8002968:	10000226 	beq	r2,zero,8002974 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 800296c:	0005883a 	mov	r2,zero
 8002970:	0000dc06 	br	8002ce4 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8002974:	e0bffa17 	ldw	r2,-24(fp)
 8002978:	1080008b 	ldhu	r2,2(r2)
 800297c:	10bfffcc 	andi	r2,r2,65535
 8002980:	10804070 	cmpltui	r2,r2,257
 8002984:	1000031e 	bne	r2,zero,8002994 <HIDMProbe+0xa4>
		total_length = 256;
 8002988:	00804004 	movi	r2,256
 800298c:	e0bff90d 	sth	r2,-28(fp)
 8002990:	00000306 	br	80029a0 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8002994:	e0bffa17 	ldw	r2,-24(fp)
 8002998:	1080008b 	ldhu	r2,2(r2)
 800299c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 80029a0:	e13ffe03 	ldbu	r4,-8(fp)
 80029a4:	e0fff90b 	ldhu	r3,-28(fp)
 80029a8:	008200b4 	movhi	r2,2050
 80029ac:	10b12a04 	addi	r2,r2,-15192
 80029b0:	d8800415 	stw	r2,16(sp)
 80029b4:	d8c00315 	stw	r3,12(sp)
 80029b8:	d8000215 	stw	zero,8(sp)
 80029bc:	00800084 	movi	r2,2
 80029c0:	d8800115 	stw	r2,4(sp)
 80029c4:	d8000015 	stw	zero,0(sp)
 80029c8:	01c00184 	movi	r7,6
 80029cc:	01802004 	movi	r6,128
 80029d0:	000b883a 	mov	r5,zero
 80029d4:	8003a080 	call	8003a08 <XferCtrlReq>
 80029d8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 80029dc:	e0bffc03 	ldbu	r2,-16(fp)
 80029e0:	10000226 	beq	r2,zero,80029ec <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 80029e4:	0005883a 	mov	r2,zero
 80029e8:	0000be06 	br	8002ce4 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 80029ec:	e0bffa17 	ldw	r2,-24(fp)
 80029f0:	10800143 	ldbu	r2,5(r2)
 80029f4:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 80029f8:	0000b306 	br	8002cc8 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 80029fc:	e0bffa17 	ldw	r2,-24(fp)
 8002a00:	10800043 	ldbu	r2,1(r2)
 8002a04:	10803fcc 	andi	r2,r2,255
 8002a08:	10800120 	cmpeqi	r2,r2,4
 8002a0c:	1000091e 	bne	r2,zero,8002a34 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8002a10:	e0bffa17 	ldw	r2,-24(fp)
 8002a14:	10800003 	ldbu	r2,0(r2)
 8002a18:	10803fcc 	andi	r2,r2,255
 8002a1c:	e0fffb17 	ldw	r3,-20(fp)
 8002a20:	1885883a 	add	r2,r3,r2
 8002a24:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8002a28:	e0bffb17 	ldw	r2,-20(fp)
 8002a2c:	e0bffa15 	stw	r2,-24(fp)
 8002a30:	0000a506 	br	8002cc8 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8002a34:	e0bffa17 	ldw	r2,-24(fp)
 8002a38:	10800143 	ldbu	r2,5(r2)
 8002a3c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8002a40:	e0bffa17 	ldw	r2,-24(fp)
 8002a44:	10800183 	ldbu	r2,6(r2)
 8002a48:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8002a4c:	e0bffa17 	ldw	r2,-24(fp)
 8002a50:	108001c3 	ldbu	r2,7(r2)
 8002a54:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8002a58:	e0bffc83 	ldbu	r2,-14(fp)
 8002a5c:	108000d8 	cmpnei	r2,r2,3
 8002a60:	1000971e 	bne	r2,zero,8002cc0 <HIDMProbe+0x3d0>
 8002a64:	e0bffcc3 	ldbu	r2,-13(fp)
 8002a68:	10800058 	cmpnei	r2,r2,1
 8002a6c:	1000941e 	bne	r2,zero,8002cc0 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8002a70:	e0bffd03 	ldbu	r2,-12(fp)
 8002a74:	10800098 	cmpnei	r2,r2,2
 8002a78:	1000911e 	bne	r2,zero,8002cc0 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 8002a7c:	e0fffe03 	ldbu	r3,-8(fp)
 8002a80:	008200b4 	movhi	r2,2050
 8002a84:	10b16a04 	addi	r2,r2,-14936
 8002a88:	180690fa 	slli	r3,r3,3
 8002a8c:	10c5883a 	add	r2,r2,r3
 8002a90:	10800104 	addi	r2,r2,4
 8002a94:	00c00084 	movi	r3,2
 8002a98:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8002a9c:	e0fffe03 	ldbu	r3,-8(fp)
 8002aa0:	008200b4 	movhi	r2,2050
 8002aa4:	10b16a04 	addi	r2,r2,-14936
 8002aa8:	180690fa 	slli	r3,r3,3
 8002aac:	10c5883a 	add	r2,r2,r3
 8002ab0:	10800017 	ldw	r2,0(r2)
 8002ab4:	1080008b 	ldhu	r2,2(r2)
 8002ab8:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8002abc:	80031000 	call	8003100 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8002ac0:	e0fffe03 	ldbu	r3,-8(fp)
 8002ac4:	008200b4 	movhi	r2,2050
 8002ac8:	10b16a04 	addi	r2,r2,-14936
 8002acc:	180690fa 	slli	r3,r3,3
 8002ad0:	10c7883a 	add	r3,r2,r3
 8002ad4:	008200b4 	movhi	r2,2050
 8002ad8:	10af8604 	addi	r2,r2,-16872
 8002adc:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8002ae0:	e0fffe03 	ldbu	r3,-8(fp)
 8002ae4:	008200b4 	movhi	r2,2050
 8002ae8:	10b16a04 	addi	r2,r2,-14936
 8002aec:	180690fa 	slli	r3,r3,3
 8002af0:	10c5883a 	add	r2,r2,r3
 8002af4:	10800017 	ldw	r2,0(r2)
 8002af8:	e0fffd43 	ldbu	r3,-11(fp)
 8002afc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 8002b00:	e0bffa17 	ldw	r2,-24(fp)
 8002b04:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 8002b08:	d0a77845 	stb	r2,-25119(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 8002b0c:	e0bffe03 	ldbu	r2,-8(fp)
 8002b10:	d0a77805 	stb	r2,-25120(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8002b14:	e0bffa17 	ldw	r2,-24(fp)
 8002b18:	10800003 	ldbu	r2,0(r2)
 8002b1c:	10803fcc 	andi	r2,r2,255
 8002b20:	e0fffb17 	ldw	r3,-20(fp)
 8002b24:	1885883a 	add	r2,r3,r2
 8002b28:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8002b2c:	e0bffb17 	ldw	r2,-20(fp)
 8002b30:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8002b34:	00005b06 	br	8002ca4 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8002b38:	e0bffa17 	ldw	r2,-24(fp)
 8002b3c:	10800043 	ldbu	r2,1(r2)
 8002b40:	10803fcc 	andi	r2,r2,255
 8002b44:	10800160 	cmpeqi	r2,r2,5
 8002b48:	1000091e 	bne	r2,zero,8002b70 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8002b4c:	e0bffa17 	ldw	r2,-24(fp)
 8002b50:	10800003 	ldbu	r2,0(r2)
 8002b54:	10803fcc 	andi	r2,r2,255
 8002b58:	e0fffb17 	ldw	r3,-20(fp)
 8002b5c:	1885883a 	add	r2,r3,r2
 8002b60:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8002b64:	e0bffb17 	ldw	r2,-20(fp)
 8002b68:	e0bffa15 	stw	r2,-24(fp)
 8002b6c:	00004d06 	br	8002ca4 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8002b70:	e0fffe03 	ldbu	r3,-8(fp)
 8002b74:	008200b4 	movhi	r2,2050
 8002b78:	10b16a04 	addi	r2,r2,-14936
 8002b7c:	180690fa 	slli	r3,r3,3
 8002b80:	10c5883a 	add	r2,r2,r3
 8002b84:	10800017 	ldw	r2,0(r2)
 8002b88:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8002b8c:	e0fffa17 	ldw	r3,-24(fp)
 8002b90:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8002b94:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8002b98:	e0fffe03 	ldbu	r3,-8(fp)
 8002b9c:	008200b4 	movhi	r2,2050
 8002ba0:	10b16a04 	addi	r2,r2,-14936
 8002ba4:	180690fa 	slli	r3,r3,3
 8002ba8:	10c5883a 	add	r2,r2,r3
 8002bac:	10800017 	ldw	r2,0(r2)
 8002bb0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8002bb4:	e0fffa17 	ldw	r3,-24(fp)
 8002bb8:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8002bbc:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8002bc0:	e0fffe03 	ldbu	r3,-8(fp)
 8002bc4:	008200b4 	movhi	r2,2050
 8002bc8:	10b16a04 	addi	r2,r2,-14936
 8002bcc:	180690fa 	slli	r3,r3,3
 8002bd0:	10c5883a 	add	r2,r2,r3
 8002bd4:	10800017 	ldw	r2,0(r2)
 8002bd8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8002bdc:	e0fffa17 	ldw	r3,-24(fp)
 8002be0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8002be4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8002be8:	e0fffe03 	ldbu	r3,-8(fp)
 8002bec:	008200b4 	movhi	r2,2050
 8002bf0:	10b16a04 	addi	r2,r2,-14936
 8002bf4:	180690fa 	slli	r3,r3,3
 8002bf8:	10c5883a 	add	r2,r2,r3
 8002bfc:	10800017 	ldw	r2,0(r2)
 8002c00:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8002c04:	e0fffa17 	ldw	r3,-24(fp)
 8002c08:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8002c0c:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8002c10:	e0fffe03 	ldbu	r3,-8(fp)
 8002c14:	e0bffc43 	ldbu	r2,-15(fp)
 8002c18:	d8000415 	stw	zero,16(sp)
 8002c1c:	d8000315 	stw	zero,12(sp)
 8002c20:	d8000215 	stw	zero,8(sp)
 8002c24:	d8000115 	stw	zero,4(sp)
 8002c28:	d8800015 	stw	r2,0(sp)
 8002c2c:	01c00244 	movi	r7,9
 8002c30:	000d883a 	mov	r6,zero
 8002c34:	000b883a 	mov	r5,zero
 8002c38:	1809883a 	mov	r4,r3
 8002c3c:	8003a080 	call	8003a08 <XferCtrlReq>
 8002c40:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8002c44:	e0bffc03 	ldbu	r2,-16(fp)
 8002c48:	10000226 	beq	r2,zero,8002c54 <HIDMProbe+0x364>
							return (FALSE);
 8002c4c:	0005883a 	mov	r2,zero
 8002c50:	00002406 	br	8002ce4 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8002c54:	e0fffe03 	ldbu	r3,-8(fp)
 8002c58:	d0a77843 	ldbu	r2,-25119(gp)
 8002c5c:	10803fcc 	andi	r2,r2,255
 8002c60:	d8000415 	stw	zero,16(sp)
 8002c64:	d8000315 	stw	zero,12(sp)
 8002c68:	d8800215 	stw	r2,8(sp)
 8002c6c:	d8000115 	stw	zero,4(sp)
 8002c70:	d8000015 	stw	zero,0(sp)
 8002c74:	01c002c4 	movi	r7,11
 8002c78:	01800844 	movi	r6,33
 8002c7c:	000b883a 	mov	r5,zero
 8002c80:	1809883a 	mov	r4,r3
 8002c84:	8003a080 	call	8003a08 <XferCtrlReq>
 8002c88:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8002c8c:	e0bffc03 	ldbu	r2,-16(fp)
 8002c90:	10000226 	beq	r2,zero,8002c9c <HIDMProbe+0x3ac>
							return (FALSE);
 8002c94:	0005883a 	mov	r2,zero
 8002c98:	00001206 	br	8002ce4 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8002c9c:	00800044 	movi	r2,1
 8002ca0:	00001006 	br	8002ce4 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8002ca4:	e0fff90b 	ldhu	r3,-28(fp)
 8002ca8:	008200b4 	movhi	r2,2050
 8002cac:	10b12a04 	addi	r2,r2,-15192
 8002cb0:	1885883a 	add	r2,r3,r2
 8002cb4:	e0fffb17 	ldw	r3,-20(fp)
 8002cb8:	18bf9f36 	bltu	r3,r2,8002b38 <__alt_data_end+0xfc002b38>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8002cbc:	00000206 	br	8002cc8 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8002cc0:	0005883a 	mov	r2,zero
 8002cc4:	00000706 	br	8002ce4 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8002cc8:	e0fff90b 	ldhu	r3,-28(fp)
 8002ccc:	008200b4 	movhi	r2,2050
 8002cd0:	10b12a04 	addi	r2,r2,-15192
 8002cd4:	1885883a 	add	r2,r3,r2
 8002cd8:	e0fffb17 	ldw	r3,-20(fp)
 8002cdc:	18bf4736 	bltu	r3,r2,80029fc <__alt_data_end+0xfc0029fc>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8002ce0:	0005883a 	mov	r2,zero
}
 8002ce4:	e037883a 	mov	sp,fp
 8002ce8:	dfc00117 	ldw	ra,4(sp)
 8002cec:	df000017 	ldw	fp,0(sp)
 8002cf0:	dec00204 	addi	sp,sp,8
 8002cf4:	f800283a 	ret

08002cf8 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8002cf8:	defff204 	addi	sp,sp,-56
 8002cfc:	dfc00d15 	stw	ra,52(sp)
 8002d00:	df000c15 	stw	fp,48(sp)
 8002d04:	df000c04 	addi	fp,sp,48
 8002d08:	2005883a 	mov	r2,r4
 8002d0c:	e17fff15 	stw	r5,-4(fp)
 8002d10:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8002d14:	008200b4 	movhi	r2,2050
 8002d18:	10b12a04 	addi	r2,r2,-15192
 8002d1c:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8002d20:	008200b4 	movhi	r2,2050
 8002d24:	10b12a04 	addi	r2,r2,-15192
 8002d28:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8002d2c:	e0fffe03 	ldbu	r3,-8(fp)
 8002d30:	008200b4 	movhi	r2,2050
 8002d34:	10b12a04 	addi	r2,r2,-15192
 8002d38:	d8800415 	stw	r2,16(sp)
 8002d3c:	00800244 	movi	r2,9
 8002d40:	d8800315 	stw	r2,12(sp)
 8002d44:	d8000215 	stw	zero,8(sp)
 8002d48:	00800084 	movi	r2,2
 8002d4c:	d8800115 	stw	r2,4(sp)
 8002d50:	d8000015 	stw	zero,0(sp)
 8002d54:	01c00184 	movi	r7,6
 8002d58:	01802004 	movi	r6,128
 8002d5c:	000b883a 	mov	r5,zero
 8002d60:	1809883a 	mov	r4,r3
 8002d64:	8003a080 	call	8003a08 <XferCtrlReq>
 8002d68:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 8002d6c:	e0bffc03 	ldbu	r2,-16(fp)
 8002d70:	10000226 	beq	r2,zero,8002d7c <HIDKProbe+0x84>
		return (FALSE);
 8002d74:	0005883a 	mov	r2,zero
 8002d78:	0000dc06 	br	80030ec <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8002d7c:	e0bffa17 	ldw	r2,-24(fp)
 8002d80:	1080008b 	ldhu	r2,2(r2)
 8002d84:	10bfffcc 	andi	r2,r2,65535
 8002d88:	10804070 	cmpltui	r2,r2,257
 8002d8c:	1000031e 	bne	r2,zero,8002d9c <HIDKProbe+0xa4>
		total_length = 256;
 8002d90:	00804004 	movi	r2,256
 8002d94:	e0bff90d 	sth	r2,-28(fp)
 8002d98:	00000306 	br	8002da8 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8002d9c:	e0bffa17 	ldw	r2,-24(fp)
 8002da0:	1080008b 	ldhu	r2,2(r2)
 8002da4:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8002da8:	e13ffe03 	ldbu	r4,-8(fp)
 8002dac:	e0fff90b 	ldhu	r3,-28(fp)
 8002db0:	008200b4 	movhi	r2,2050
 8002db4:	10b12a04 	addi	r2,r2,-15192
 8002db8:	d8800415 	stw	r2,16(sp)
 8002dbc:	d8c00315 	stw	r3,12(sp)
 8002dc0:	d8000215 	stw	zero,8(sp)
 8002dc4:	00800084 	movi	r2,2
 8002dc8:	d8800115 	stw	r2,4(sp)
 8002dcc:	d8000015 	stw	zero,0(sp)
 8002dd0:	01c00184 	movi	r7,6
 8002dd4:	01802004 	movi	r6,128
 8002dd8:	000b883a 	mov	r5,zero
 8002ddc:	8003a080 	call	8003a08 <XferCtrlReq>
 8002de0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8002de4:	e0bffc03 	ldbu	r2,-16(fp)
 8002de8:	10000226 	beq	r2,zero,8002df4 <HIDKProbe+0xfc>
		return (FALSE);
 8002dec:	0005883a 	mov	r2,zero
 8002df0:	0000be06 	br	80030ec <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8002df4:	e0bffa17 	ldw	r2,-24(fp)
 8002df8:	10800143 	ldbu	r2,5(r2)
 8002dfc:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8002e00:	0000b306 	br	80030d0 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8002e04:	e0bffa17 	ldw	r2,-24(fp)
 8002e08:	10800043 	ldbu	r2,1(r2)
 8002e0c:	10803fcc 	andi	r2,r2,255
 8002e10:	10800120 	cmpeqi	r2,r2,4
 8002e14:	1000091e 	bne	r2,zero,8002e3c <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8002e18:	e0bffa17 	ldw	r2,-24(fp)
 8002e1c:	10800003 	ldbu	r2,0(r2)
 8002e20:	10803fcc 	andi	r2,r2,255
 8002e24:	e0fffb17 	ldw	r3,-20(fp)
 8002e28:	1885883a 	add	r2,r3,r2
 8002e2c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8002e30:	e0bffb17 	ldw	r2,-20(fp)
 8002e34:	e0bffa15 	stw	r2,-24(fp)
 8002e38:	0000a506 	br	80030d0 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8002e3c:	e0bffa17 	ldw	r2,-24(fp)
 8002e40:	10800143 	ldbu	r2,5(r2)
 8002e44:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8002e48:	e0bffa17 	ldw	r2,-24(fp)
 8002e4c:	10800183 	ldbu	r2,6(r2)
 8002e50:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8002e54:	e0bffa17 	ldw	r2,-24(fp)
 8002e58:	108001c3 	ldbu	r2,7(r2)
 8002e5c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8002e60:	e0bffc83 	ldbu	r2,-14(fp)
 8002e64:	108000d8 	cmpnei	r2,r2,3
 8002e68:	1000971e 	bne	r2,zero,80030c8 <HIDKProbe+0x3d0>
 8002e6c:	e0bffcc3 	ldbu	r2,-13(fp)
 8002e70:	10800058 	cmpnei	r2,r2,1
 8002e74:	1000941e 	bne	r2,zero,80030c8 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8002e78:	e0bffd03 	ldbu	r2,-12(fp)
 8002e7c:	10800058 	cmpnei	r2,r2,1
 8002e80:	1000911e 	bne	r2,zero,80030c8 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8002e84:	e0fffe03 	ldbu	r3,-8(fp)
 8002e88:	008200b4 	movhi	r2,2050
 8002e8c:	10b16a04 	addi	r2,r2,-14936
 8002e90:	180690fa 	slli	r3,r3,3
 8002e94:	10c5883a 	add	r2,r2,r3
 8002e98:	10800104 	addi	r2,r2,4
 8002e9c:	00c00044 	movi	r3,1
 8002ea0:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8002ea4:	e0fffe03 	ldbu	r3,-8(fp)
 8002ea8:	008200b4 	movhi	r2,2050
 8002eac:	10b16a04 	addi	r2,r2,-14936
 8002eb0:	180690fa 	slli	r3,r3,3
 8002eb4:	10c5883a 	add	r2,r2,r3
 8002eb8:	10800017 	ldw	r2,0(r2)
 8002ebc:	1080008b 	ldhu	r2,2(r2)
 8002ec0:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8002ec4:	80031000 	call	8003100 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8002ec8:	e0fffe03 	ldbu	r3,-8(fp)
 8002ecc:	008200b4 	movhi	r2,2050
 8002ed0:	10b16a04 	addi	r2,r2,-14936
 8002ed4:	180690fa 	slli	r3,r3,3
 8002ed8:	10c7883a 	add	r3,r2,r3
 8002edc:	008200b4 	movhi	r2,2050
 8002ee0:	10af8604 	addi	r2,r2,-16872
 8002ee4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8002ee8:	e0fffe03 	ldbu	r3,-8(fp)
 8002eec:	008200b4 	movhi	r2,2050
 8002ef0:	10b16a04 	addi	r2,r2,-14936
 8002ef4:	180690fa 	slli	r3,r3,3
 8002ef8:	10c5883a 	add	r2,r2,r3
 8002efc:	10800017 	ldw	r2,0(r2)
 8002f00:	e0fffd43 	ldbu	r3,-11(fp)
 8002f04:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8002f08:	e0bffa17 	ldw	r2,-24(fp)
 8002f0c:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 8002f10:	d0a77845 	stb	r2,-25119(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8002f14:	e0bffe03 	ldbu	r2,-8(fp)
 8002f18:	d0a77805 	stb	r2,-25120(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8002f1c:	e0bffa17 	ldw	r2,-24(fp)
 8002f20:	10800003 	ldbu	r2,0(r2)
 8002f24:	10803fcc 	andi	r2,r2,255
 8002f28:	e0fffb17 	ldw	r3,-20(fp)
 8002f2c:	1885883a 	add	r2,r3,r2
 8002f30:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8002f34:	e0bffb17 	ldw	r2,-20(fp)
 8002f38:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8002f3c:	00005b06 	br	80030ac <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8002f40:	e0bffa17 	ldw	r2,-24(fp)
 8002f44:	10800043 	ldbu	r2,1(r2)
 8002f48:	10803fcc 	andi	r2,r2,255
 8002f4c:	10800160 	cmpeqi	r2,r2,5
 8002f50:	1000091e 	bne	r2,zero,8002f78 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8002f54:	e0bffa17 	ldw	r2,-24(fp)
 8002f58:	10800003 	ldbu	r2,0(r2)
 8002f5c:	10803fcc 	andi	r2,r2,255
 8002f60:	e0fffb17 	ldw	r3,-20(fp)
 8002f64:	1885883a 	add	r2,r3,r2
 8002f68:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8002f6c:	e0bffb17 	ldw	r2,-20(fp)
 8002f70:	e0bffa15 	stw	r2,-24(fp)
 8002f74:	00004d06 	br	80030ac <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8002f78:	e0fffe03 	ldbu	r3,-8(fp)
 8002f7c:	008200b4 	movhi	r2,2050
 8002f80:	10b16a04 	addi	r2,r2,-14936
 8002f84:	180690fa 	slli	r3,r3,3
 8002f88:	10c5883a 	add	r2,r2,r3
 8002f8c:	10800017 	ldw	r2,0(r2)
 8002f90:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8002f94:	e0fffa17 	ldw	r3,-24(fp)
 8002f98:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8002f9c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8002fa0:	e0fffe03 	ldbu	r3,-8(fp)
 8002fa4:	008200b4 	movhi	r2,2050
 8002fa8:	10b16a04 	addi	r2,r2,-14936
 8002fac:	180690fa 	slli	r3,r3,3
 8002fb0:	10c5883a 	add	r2,r2,r3
 8002fb4:	10800017 	ldw	r2,0(r2)
 8002fb8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8002fbc:	e0fffa17 	ldw	r3,-24(fp)
 8002fc0:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8002fc4:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8002fc8:	e0fffe03 	ldbu	r3,-8(fp)
 8002fcc:	008200b4 	movhi	r2,2050
 8002fd0:	10b16a04 	addi	r2,r2,-14936
 8002fd4:	180690fa 	slli	r3,r3,3
 8002fd8:	10c5883a 	add	r2,r2,r3
 8002fdc:	10800017 	ldw	r2,0(r2)
 8002fe0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8002fe4:	e0fffa17 	ldw	r3,-24(fp)
 8002fe8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8002fec:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8002ff0:	e0fffe03 	ldbu	r3,-8(fp)
 8002ff4:	008200b4 	movhi	r2,2050
 8002ff8:	10b16a04 	addi	r2,r2,-14936
 8002ffc:	180690fa 	slli	r3,r3,3
 8003000:	10c5883a 	add	r2,r2,r3
 8003004:	10800017 	ldw	r2,0(r2)
 8003008:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 800300c:	e0fffa17 	ldw	r3,-24(fp)
 8003010:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8003014:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8003018:	e0fffe03 	ldbu	r3,-8(fp)
 800301c:	e0bffc43 	ldbu	r2,-15(fp)
 8003020:	d8000415 	stw	zero,16(sp)
 8003024:	d8000315 	stw	zero,12(sp)
 8003028:	d8000215 	stw	zero,8(sp)
 800302c:	d8000115 	stw	zero,4(sp)
 8003030:	d8800015 	stw	r2,0(sp)
 8003034:	01c00244 	movi	r7,9
 8003038:	000d883a 	mov	r6,zero
 800303c:	000b883a 	mov	r5,zero
 8003040:	1809883a 	mov	r4,r3
 8003044:	8003a080 	call	8003a08 <XferCtrlReq>
 8003048:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 800304c:	e0bffc03 	ldbu	r2,-16(fp)
 8003050:	10000226 	beq	r2,zero,800305c <HIDKProbe+0x364>
							return (FALSE);
 8003054:	0005883a 	mov	r2,zero
 8003058:	00002406 	br	80030ec <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 800305c:	e0fffe03 	ldbu	r3,-8(fp)
 8003060:	d0a77843 	ldbu	r2,-25119(gp)
 8003064:	10803fcc 	andi	r2,r2,255
 8003068:	d8000415 	stw	zero,16(sp)
 800306c:	d8000315 	stw	zero,12(sp)
 8003070:	d8800215 	stw	r2,8(sp)
 8003074:	d8000115 	stw	zero,4(sp)
 8003078:	d8000015 	stw	zero,0(sp)
 800307c:	01c002c4 	movi	r7,11
 8003080:	01800844 	movi	r6,33
 8003084:	000b883a 	mov	r5,zero
 8003088:	1809883a 	mov	r4,r3
 800308c:	8003a080 	call	8003a08 <XferCtrlReq>
 8003090:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8003094:	e0bffc03 	ldbu	r2,-16(fp)
 8003098:	10000226 	beq	r2,zero,80030a4 <HIDKProbe+0x3ac>
							return (FALSE);
 800309c:	0005883a 	mov	r2,zero
 80030a0:	00001206 	br	80030ec <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 80030a4:	00800044 	movi	r2,1
 80030a8:	00001006 	br	80030ec <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 80030ac:	e0fff90b 	ldhu	r3,-28(fp)
 80030b0:	008200b4 	movhi	r2,2050
 80030b4:	10b12a04 	addi	r2,r2,-15192
 80030b8:	1885883a 	add	r2,r3,r2
 80030bc:	e0fffb17 	ldw	r3,-20(fp)
 80030c0:	18bf9f36 	bltu	r3,r2,8002f40 <__alt_data_end+0xfc002f40>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80030c4:	00000206 	br	80030d0 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 80030c8:	0005883a 	mov	r2,zero
 80030cc:	00000706 	br	80030ec <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 80030d0:	e0fff90b 	ldhu	r3,-28(fp)
 80030d4:	008200b4 	movhi	r2,2050
 80030d8:	10b12a04 	addi	r2,r2,-15192
 80030dc:	1885883a 	add	r2,r3,r2
 80030e0:	e0fffb17 	ldw	r3,-20(fp)
 80030e4:	18bf4736 	bltu	r3,r2,8002e04 <__alt_data_end+0xfc002e04>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 80030e8:	0005883a 	mov	r2,zero
}
 80030ec:	e037883a 	mov	sp,fp
 80030f0:	dfc00117 	ldw	ra,4(sp)
 80030f4:	df000017 	ldw	fp,0(sp)
 80030f8:	dec00204 	addi	sp,sp,8
 80030fc:	f800283a 	ret

08003100 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8003100:	deffff04 	addi	sp,sp,-4
 8003104:	df000015 	stw	fp,0(sp)
 8003108:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 800310c:	008200b4 	movhi	r2,2050
 8003110:	10af8604 	addi	r2,r2,-16872
 8003114:	00c01004 	movi	r3,64
 8003118:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 800311c:	008200b4 	movhi	r2,2050
 8003120:	10af8604 	addi	r2,r2,-16872
 8003124:	00c00404 	movi	r3,16
 8003128:	10c00385 	stb	r3,14(r2)
}
 800312c:	0001883a 	nop
 8003130:	e037883a 	mov	sp,fp
 8003134:	df000017 	ldw	fp,0(sp)
 8003138:	dec00104 	addi	sp,sp,4
 800313c:	f800283a 	ret

08003140 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8003140:	defffb04 	addi	sp,sp,-20
 8003144:	dfc00415 	stw	ra,16(sp)
 8003148:	df000315 	stw	fp,12(sp)
 800314c:	df000304 	addi	fp,sp,12
 8003150:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8003154:	d0a77803 	ldbu	r2,-25120(gp)
 8003158:	10803fcc 	andi	r2,r2,255
 800315c:	100b883a 	mov	r5,r2
 8003160:	01003804 	movi	r4,224
 8003164:	800331c0 	call	800331c <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8003168:	d0a77803 	ldbu	r2,-25120(gp)
 800316c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8003170:	d0a77803 	ldbu	r2,-25120(gp)
 8003174:	10c03fcc 	andi	r3,r2,255
 8003178:	008200b4 	movhi	r2,2050
 800317c:	10b16a04 	addi	r2,r2,-14936
 8003180:	180690fa 	slli	r3,r3,3
 8003184:	10c5883a 	add	r2,r2,r3
 8003188:	10800017 	ldw	r2,0(r2)
 800318c:	10800204 	addi	r2,r2,8
 8003190:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8003194:	10803fcc 	andi	r2,r2,255
 8003198:	d8800015 	stw	r2,0(sp)
 800319c:	e1ffff17 	ldw	r7,-4(fp)
 80031a0:	01800204 	movi	r6,8
 80031a4:	01400044 	movi	r5,1
 80031a8:	8003e2c0 	call	8003e2c <XferInTransfer>
 80031ac:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 80031b0:	e0bffe03 	ldbu	r2,-8(fp)
}
 80031b4:	e037883a 	mov	sp,fp
 80031b8:	dfc00117 	ldw	ra,4(sp)
 80031bc:	df000017 	ldw	fp,0(sp)
 80031c0:	dec00204 	addi	sp,sp,8
 80031c4:	f800283a 	ret

080031c8 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 80031c8:	defffb04 	addi	sp,sp,-20
 80031cc:	dfc00415 	stw	ra,16(sp)
 80031d0:	df000315 	stw	fp,12(sp)
 80031d4:	df000304 	addi	fp,sp,12
 80031d8:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 80031dc:	d0a77803 	ldbu	r2,-25120(gp)
 80031e0:	10803fcc 	andi	r2,r2,255
 80031e4:	100b883a 	mov	r5,r2
 80031e8:	01003804 	movi	r4,224
 80031ec:	800331c0 	call	800331c <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80031f0:	d0a77803 	ldbu	r2,-25120(gp)
 80031f4:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 80031f8:	d0a77803 	ldbu	r2,-25120(gp)
 80031fc:	10c03fcc 	andi	r3,r2,255
 8003200:	008200b4 	movhi	r2,2050
 8003204:	10b16a04 	addi	r2,r2,-14936
 8003208:	180690fa 	slli	r3,r3,3
 800320c:	10c5883a 	add	r2,r2,r3
 8003210:	10800017 	ldw	r2,0(r2)
 8003214:	10800204 	addi	r2,r2,8
 8003218:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 800321c:	10803fcc 	andi	r2,r2,255
 8003220:	d8800015 	stw	r2,0(sp)
 8003224:	e1ffff17 	ldw	r7,-4(fp)
 8003228:	01800204 	movi	r6,8
 800322c:	01400044 	movi	r5,1
 8003230:	8003e2c0 	call	8003e2c <XferInTransfer>
 8003234:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8003238:	e0bffe03 	ldbu	r2,-8(fp)
}
 800323c:	e037883a 	mov	sp,fp
 8003240:	dfc00117 	ldw	ra,4(sp)
 8003244:	df000017 	ldw	fp,0(sp)
 8003248:	dec00204 	addi	sp,sp,8
 800324c:	f800283a 	ret

08003250 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8003250:	defffb04 	addi	sp,sp,-20
 8003254:	df000415 	stw	fp,16(sp)
 8003258:	df000404 	addi	fp,sp,16
 800325c:	2007883a 	mov	r3,r4
 8003260:	2805883a 	mov	r2,r5
 8003264:	e1bffe15 	stw	r6,-8(fp)
 8003268:	e1ffff15 	stw	r7,-4(fp)
 800326c:	e0fffc05 	stb	r3,-16(fp)
 8003270:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8003274:	0005883a 	mov	r2,zero
}
 8003278:	e037883a 	mov	sp,fp
 800327c:	df000017 	ldw	fp,0(sp)
 8003280:	dec00104 	addi	sp,sp,4
 8003284:	f800283a 	ret

08003288 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8003288:	defffb04 	addi	sp,sp,-20
 800328c:	df000415 	stw	fp,16(sp)
 8003290:	df000404 	addi	fp,sp,16
 8003294:	2007883a 	mov	r3,r4
 8003298:	2805883a 	mov	r2,r5
 800329c:	e1bffe15 	stw	r6,-8(fp)
 80032a0:	e1ffff15 	stw	r7,-4(fp)
 80032a4:	e0fffc05 	stb	r3,-16(fp)
 80032a8:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 80032ac:	0005883a 	mov	r2,zero
}
 80032b0:	e037883a 	mov	sp,fp
 80032b4:	df000017 	ldw	fp,0(sp)
 80032b8:	dec00104 	addi	sp,sp,4
 80032bc:	f800283a 	ret

080032c0 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 80032c0:	defffc04 	addi	sp,sp,-16
 80032c4:	df000315 	stw	fp,12(sp)
 80032c8:	df000304 	addi	fp,sp,12
 80032cc:	2807883a 	mov	r3,r5
 80032d0:	3005883a 	mov	r2,r6
 80032d4:	e13ffd05 	stb	r4,-12(fp)
 80032d8:	e0fffe05 	stb	r3,-8(fp)
 80032dc:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 80032e0:	0001883a 	nop
 80032e4:	e037883a 	mov	sp,fp
 80032e8:	df000017 	ldw	fp,0(sp)
 80032ec:	dec00104 	addi	sp,sp,4
 80032f0:	f800283a 	ret

080032f4 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 80032f4:	defffe04 	addi	sp,sp,-8
 80032f8:	df000115 	stw	fp,4(sp)
 80032fc:	df000104 	addi	fp,sp,4
 8003300:	2005883a 	mov	r2,r4
 8003304:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8003308:	0001883a 	nop
 800330c:	e037883a 	mov	sp,fp
 8003310:	df000017 	ldw	fp,0(sp)
 8003314:	dec00104 	addi	sp,sp,4
 8003318:	f800283a 	ret

0800331c <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 800331c:	defff804 	addi	sp,sp,-32
 8003320:	dfc00715 	stw	ra,28(sp)
 8003324:	df000615 	stw	fp,24(sp)
 8003328:	df000604 	addi	fp,sp,24
 800332c:	2007883a 	mov	r3,r4
 8003330:	2805883a 	mov	r2,r5
 8003334:	e0fffe05 	stb	r3,-8(fp)
 8003338:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 return_code;
	alt_u8 x[2];
	x[0] = reg+2;
 800333c:	e0bffe03 	ldbu	r2,-8(fp)
 8003340:	10800084 	addi	r2,r2,2
 8003344:	e0bffd45 	stb	r2,-11(fp)
	x[1] = val;
 8003348:	e0bfff03 	ldbu	r2,-4(fp)
 800334c:	e0bffd85 	stb	r2,-10(fp)
	return_code = alt_avalon_spi_command(SPI0_BASE,0,2,x,0,NULL,0);
 8003350:	e0bffd44 	addi	r2,fp,-11
 8003354:	d8000215 	stw	zero,8(sp)
 8003358:	d8000115 	stw	zero,4(sp)
 800335c:	d8000015 	stw	zero,0(sp)
 8003360:	100f883a 	mov	r7,r2
 8003364:	01800084 	movi	r6,2
 8003368:	000b883a 	mov	r5,zero
 800336c:	01003004 	movi	r4,192
 8003370:	80168f80 	call	80168f8 <alt_avalon_spi_command>
 8003374:	e0bffd05 	stb	r2,-12(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
    if (return_code < 0) {
    	printf("error");
    }
    return;
 8003378:	0001883a 	nop
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 800337c:	e037883a 	mov	sp,fp
 8003380:	dfc00117 	ldw	ra,4(sp)
 8003384:	df000017 	ldw	fp,0(sp)
 8003388:	dec00204 	addi	sp,sp,8
 800338c:	f800283a 	ret

08003390 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8003390:	defff304 	addi	sp,sp,-52
 8003394:	dfc00c15 	stw	ra,48(sp)
 8003398:	df000b15 	stw	fp,44(sp)
 800339c:	dc000a15 	stw	r16,40(sp)
 80033a0:	df000b04 	addi	fp,sp,44
 80033a4:	201b883a 	mov	r13,r4
 80033a8:	2809883a 	mov	r4,r5
 80033ac:	e1bffe15 	stw	r6,-8(fp)
 80033b0:	e37ffc05 	stb	r13,-16(fp)
 80033b4:	e13ffd05 	stb	r4,-12(fp)
 80033b8:	d809883a 	mov	r4,sp
 80033bc:	2021883a 	mov	r16,r4
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 return_code;
	alt_u8 x[nbytes+1];
 80033c0:	e13ffd03 	ldbu	r4,-12(fp)
 80033c4:	21000044 	addi	r4,r4,1
 80033c8:	217fffc4 	addi	r5,r4,-1
 80033cc:	e17ff915 	stw	r5,-28(fp)
 80033d0:	200b883a 	mov	r5,r4
 80033d4:	2817883a 	mov	r11,r5
 80033d8:	0019883a 	mov	r12,zero
 80033dc:	580ad77a 	srli	r5,r11,29
 80033e0:	601090fa 	slli	r8,r12,3
 80033e4:	2a10b03a 	or	r8,r5,r8
 80033e8:	580e90fa 	slli	r7,r11,3
 80033ec:	200b883a 	mov	r5,r4
 80033f0:	2813883a 	mov	r9,r5
 80033f4:	0015883a 	mov	r10,zero
 80033f8:	480ad77a 	srli	r5,r9,29
 80033fc:	500690fa 	slli	r3,r10,3
 8003400:	28c6b03a 	or	r3,r5,r3
 8003404:	480490fa 	slli	r2,r9,3
 8003408:	2005883a 	mov	r2,r4
 800340c:	108000c4 	addi	r2,r2,3
 8003410:	1004d0ba 	srli	r2,r2,2
 8003414:	1085883a 	add	r2,r2,r2
 8003418:	1085883a 	add	r2,r2,r2
 800341c:	d8b7c83a 	sub	sp,sp,r2
 8003420:	d8800304 	addi	r2,sp,12
 8003424:	1005883a 	mov	r2,r2
 8003428:	e0bffa15 	stw	r2,-24(fp)
	x[0] = reg+2;
 800342c:	e0bffc03 	ldbu	r2,-16(fp)
 8003430:	10800084 	addi	r2,r2,2
 8003434:	1007883a 	mov	r3,r2
 8003438:	e0bffa17 	ldw	r2,-24(fp)
 800343c:	10c00005 	stb	r3,0(r2)
	for (int i = 1; i < nbytes+1; i++){
 8003440:	00800044 	movi	r2,1
 8003444:	e0bff815 	stw	r2,-32(fp)
 8003448:	00000c06 	br	800347c <MAXbytes_wr+0xec>
		x[i] = data[i-1];
 800344c:	e0bff817 	ldw	r2,-32(fp)
 8003450:	10bfffc4 	addi	r2,r2,-1
 8003454:	e0fffe17 	ldw	r3,-8(fp)
 8003458:	1885883a 	add	r2,r3,r2
 800345c:	10c00003 	ldbu	r3,0(r2)
 8003460:	e13ffa17 	ldw	r4,-24(fp)
 8003464:	e0bff817 	ldw	r2,-32(fp)
 8003468:	2085883a 	add	r2,r4,r2
 800346c:	10c00005 	stb	r3,0(r2)
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 return_code;
	alt_u8 x[nbytes+1];
	x[0] = reg+2;
	for (int i = 1; i < nbytes+1; i++){
 8003470:	e0bff817 	ldw	r2,-32(fp)
 8003474:	10800044 	addi	r2,r2,1
 8003478:	e0bff815 	stw	r2,-32(fp)
 800347c:	e0bffd03 	ldbu	r2,-12(fp)
 8003480:	10800044 	addi	r2,r2,1
 8003484:	e0fff817 	ldw	r3,-32(fp)
 8003488:	18bff016 	blt	r3,r2,800344c <__alt_data_end+0xfc00344c>
		x[i] = data[i-1];
	}
	return_code = alt_avalon_spi_command(SPI0_BASE,0,nbytes+1,x,0,NULL,0);
 800348c:	e0bffd03 	ldbu	r2,-12(fp)
 8003490:	10800044 	addi	r2,r2,1
 8003494:	1007883a 	mov	r3,r2
 8003498:	e0bffa17 	ldw	r2,-24(fp)
 800349c:	d8000215 	stw	zero,8(sp)
 80034a0:	d8000115 	stw	zero,4(sp)
 80034a4:	d8000015 	stw	zero,0(sp)
 80034a8:	100f883a 	mov	r7,r2
 80034ac:	180d883a 	mov	r6,r3
 80034b0:	000b883a 	mov	r5,zero
 80034b4:	01003004 	movi	r4,192
 80034b8:	80168f80 	call	80168f8 <alt_avalon_spi_command>
 80034bc:	e0bffb05 	stb	r2,-20(fp)
	//if return code < 0  print an error
	 if (return_code < 0) {
	    	printf("error");
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
 80034c0:	e0bffd03 	ldbu	r2,-12(fp)
 80034c4:	e0fffe17 	ldw	r3,-8(fp)
 80034c8:	1885883a 	add	r2,r3,r2
 80034cc:	8037883a 	mov	sp,r16

}
 80034d0:	e6ffff04 	addi	sp,fp,-4
 80034d4:	dfc00217 	ldw	ra,8(sp)
 80034d8:	df000117 	ldw	fp,4(sp)
 80034dc:	dc000017 	ldw	r16,0(sp)
 80034e0:	dec00304 	addi	sp,sp,12
 80034e4:	f800283a 	ret

080034e8 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 80034e8:	defff904 	addi	sp,sp,-28
 80034ec:	dfc00615 	stw	ra,24(sp)
 80034f0:	df000515 	stw	fp,20(sp)
 80034f4:	df000504 	addi	fp,sp,20
 80034f8:	2005883a 	mov	r2,r4
 80034fc:	e0bfff05 	stb	r2,-4(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	alt_u8 return_code;
	alt_u8 read_data[1];
	return_code = alt_avalon_spi_command(SPI0_BASE,0,1,&reg,1,read_data,0);
 8003500:	e0ffff04 	addi	r3,fp,-4
 8003504:	d8000215 	stw	zero,8(sp)
 8003508:	e0bffe44 	addi	r2,fp,-7
 800350c:	d8800115 	stw	r2,4(sp)
 8003510:	00800044 	movi	r2,1
 8003514:	d8800015 	stw	r2,0(sp)
 8003518:	180f883a 	mov	r7,r3
 800351c:	01800044 	movi	r6,1
 8003520:	000b883a 	mov	r5,zero
 8003524:	01003004 	movi	r4,192
 8003528:	80168f80 	call	80168f8 <alt_avalon_spi_command>
 800352c:	e0bffe05 	stb	r2,-8(fp)
	//return val

	if (return_code < 0) {
		    	printf("error");
		    }
	return read_data[0];
 8003530:	e0bffe43 	ldbu	r2,-7(fp)
}
 8003534:	e037883a 	mov	sp,fp
 8003538:	dfc00117 	ldw	ra,4(sp)
 800353c:	df000017 	ldw	fp,0(sp)
 8003540:	dec00204 	addi	sp,sp,8
 8003544:	f800283a 	ret

08003548 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8003548:	defff704 	addi	sp,sp,-36
 800354c:	dfc00815 	stw	ra,32(sp)
 8003550:	df000715 	stw	fp,28(sp)
 8003554:	df000704 	addi	fp,sp,28
 8003558:	2007883a 	mov	r3,r4
 800355c:	2805883a 	mov	r2,r5
 8003560:	e1bfff15 	stw	r6,-4(fp)
 8003564:	e0fffd05 	stb	r3,-12(fp)
 8003568:	e0bffe05 	stb	r2,-8(fp)
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	alt_u8 return_code;
    alt_u8 x[1];
    x[0] = reg;
 800356c:	e0bffd03 	ldbu	r2,-12(fp)
 8003570:	e0bffc45 	stb	r2,-15(fp)
	return_code = alt_avalon_spi_command(SPI0_BASE,0,1,x,nbytes,data,0);
 8003574:	e0bffe03 	ldbu	r2,-8(fp)
 8003578:	e13ffc44 	addi	r4,fp,-15
 800357c:	d8000215 	stw	zero,8(sp)
 8003580:	e0ffff17 	ldw	r3,-4(fp)
 8003584:	d8c00115 	stw	r3,4(sp)
 8003588:	d8800015 	stw	r2,0(sp)
 800358c:	200f883a 	mov	r7,r4
 8003590:	01800044 	movi	r6,1
 8003594:	000b883a 	mov	r5,zero
 8003598:	01003004 	movi	r4,192
 800359c:	80168f80 	call	80168f8 <alt_avalon_spi_command>
 80035a0:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0) {
			    	printf("error");
			    }
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return (data+nbytes);
 80035a4:	e0bffe03 	ldbu	r2,-8(fp)
 80035a8:	e0ffff17 	ldw	r3,-4(fp)
 80035ac:	1885883a 	add	r2,r3,r2
}
 80035b0:	e037883a 	mov	sp,fp
 80035b4:	dfc00117 	ldw	ra,4(sp)
 80035b8:	df000017 	ldw	fp,0(sp)
 80035bc:	dec00204 	addi	sp,sp,8
 80035c0:	f800283a 	ret

080035c4 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 80035c4:	defffd04 	addi	sp,sp,-12
 80035c8:	dfc00215 	stw	ra,8(sp)
 80035cc:	df000115 	stw	fp,4(sp)
 80035d0:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 80035d4:	0007883a 	mov	r3,zero
 80035d8:	00806404 	movi	r2,400
 80035dc:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 80035e0:	010003f4 	movhi	r4,15
 80035e4:	21109004 	addi	r4,r4,16960
 80035e8:	8015c540 	call	8015c54 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 80035ec:	00c00044 	movi	r3,1
 80035f0:	00806404 	movi	r2,400
 80035f4:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 80035f8:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 80035fc:	01400804 	movi	r5,32
 8003600:	01001e04 	movi	r4,120
 8003604:	800331c0 	call	800331c <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8003608:	000b883a 	mov	r5,zero
 800360c:	01001e04 	movi	r4,120
 8003610:	800331c0 	call	800331c <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8003614:	00000806 	br	8003638 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 8003618:	e0bfff03 	ldbu	r2,-4(fp)
 800361c:	10800044 	addi	r2,r2,1
 8003620:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 8003624:	e0bfff03 	ldbu	r2,-4(fp)
 8003628:	1000031e 	bne	r2,zero,8003638 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 800362c:	01020074 	movhi	r4,2049
 8003630:	211fb804 	addi	r4,r4,32480
 8003634:	8004aac0 	call	8004aac <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8003638:	01001a04 	movi	r4,104
 800363c:	80034e80 	call	80034e8 <MAXreg_rd>
 8003640:	10803fcc 	andi	r2,r2,255
 8003644:	1080004c 	andi	r2,r2,1
 8003648:	103ff326 	beq	r2,zero,8003618 <__alt_data_end+0xfc003618>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 800364c:	0001883a 	nop
 8003650:	e037883a 	mov	sp,fp
 8003654:	dfc00117 	ldw	ra,4(sp)
 8003658:	df000017 	ldw	fp,0(sp)
 800365c:	dec00204 	addi	sp,sp,8
 8003660:	f800283a 	ret

08003664 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8003664:	defffe04 	addi	sp,sp,-8
 8003668:	df000115 	stw	fp,4(sp)
 800366c:	df000104 	addi	fp,sp,4
 8003670:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8003674:	00800044 	movi	r2,1
}
 8003678:	e037883a 	mov	sp,fp
 800367c:	df000017 	ldw	fp,0(sp)
 8003680:	dec00104 	addi	sp,sp,4
 8003684:	f800283a 	ret

08003688 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8003688:	defffd04 	addi	sp,sp,-12
 800368c:	dfc00215 	stw	ra,8(sp)
 8003690:	df000115 	stw	fp,4(sp)
 8003694:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8003698:	01003e04 	movi	r4,248
 800369c:	80034e80 	call	80034e8 <MAXreg_rd>
 80036a0:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 80036a4:	e0ffff03 	ldbu	r3,-4(fp)
 80036a8:	00bff004 	movi	r2,-64
 80036ac:	1884703a 	and	r2,r3,r2
 80036b0:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80036b4:	e0bfff03 	ldbu	r2,-4(fp)
 80036b8:	10c01020 	cmpeqi	r3,r2,64
 80036bc:	1800221e 	bne	r3,zero,8003748 <MAX_busprobe+0xc0>
 80036c0:	10c01048 	cmpgei	r3,r2,65
 80036c4:	1800021e 	bne	r3,zero,80036d0 <MAX_busprobe+0x48>
 80036c8:	10003b26 	beq	r2,zero,80037b8 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80036cc:	00004a06 	br	80037f8 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 80036d0:	10c02020 	cmpeqi	r3,r2,128
 80036d4:	1800031e 	bne	r3,zero,80036e4 <MAX_busprobe+0x5c>
 80036d8:	10803020 	cmpeqi	r2,r2,192
 80036dc:	1000331e 	bne	r2,zero,80037ac <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80036e0:	00004506 	br	80037f8 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80036e4:	d0a00403 	ldbu	r2,-32752(gp)
 80036e8:	10803fcc 	andi	r2,r2,255
 80036ec:	108004e0 	cmpeqi	r2,r2,19
 80036f0:	10003e1e 	bne	r2,zero,80037ec <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80036f4:	01003604 	movi	r4,216
 80036f8:	80034e80 	call	80034e8 <MAXreg_rd>
 80036fc:	10803fcc 	andi	r2,r2,255
 8003700:	1080008c 	andi	r2,r2,2
 8003704:	1000071e 	bne	r2,zero,8003724 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8003708:	01403244 	movi	r5,201
 800370c:	01003604 	movi	r4,216
 8003710:	800331c0 	call	800331c <MAXreg_wr>
				printf("Starting in full speed\n");
 8003714:	01020074 	movhi	r4,2049
 8003718:	211fbc04 	addi	r4,r4,32496
 800371c:	8004ba80 	call	8004ba8 <puts>
 8003720:	00000606 	br	800373c <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 8003724:	014032c4 	movi	r5,203
 8003728:	01003604 	movi	r4,216
 800372c:	800331c0 	call	800331c <MAXreg_wr>
				printf("Starting in low speed\n");
 8003730:	01020074 	movhi	r4,2049
 8003734:	211fc204 	addi	r4,r4,32520
 8003738:	8004ba80 	call	8004ba8 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 800373c:	00800404 	movi	r2,16
 8003740:	d0a00405 	stb	r2,-32752(gp)
		}
		break;
 8003744:	00002906 	br	80037ec <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8003748:	d0a00403 	ldbu	r2,-32752(gp)
 800374c:	10803fcc 	andi	r2,r2,255
 8003750:	108004e0 	cmpeqi	r2,r2,19
 8003754:	1000271e 	bne	r2,zero,80037f4 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8003758:	01003604 	movi	r4,216
 800375c:	80034e80 	call	80034e8 <MAXreg_rd>
 8003760:	10803fcc 	andi	r2,r2,255
 8003764:	1080008c 	andi	r2,r2,2
 8003768:	1000071e 	bne	r2,zero,8003788 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 800376c:	014032c4 	movi	r5,203
 8003770:	01003604 	movi	r4,216
 8003774:	800331c0 	call	800331c <MAXreg_wr>
				printf("Starting in low speed\n");
 8003778:	01020074 	movhi	r4,2049
 800377c:	211fc204 	addi	r4,r4,32520
 8003780:	8004ba80 	call	8004ba8 <puts>
 8003784:	00000606 	br	80037a0 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8003788:	01403244 	movi	r5,201
 800378c:	01003604 	movi	r4,216
 8003790:	800331c0 	call	800331c <MAXreg_wr>
				printf("Starting in full speed\n");
 8003794:	01020074 	movhi	r4,2049
 8003798:	211fbc04 	addi	r4,r4,32496
 800379c:	8004ba80 	call	8004ba8 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80037a0:	00800404 	movi	r2,16
 80037a4:	d0a00405 	stb	r2,-32752(gp)
		}
		break;
 80037a8:	00001206 	br	80037f4 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 80037ac:	00800104 	movi	r2,4
 80037b0:	d0a00405 	stb	r2,-32752(gp)
		break;
 80037b4:	00001006 	br	80037f8 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80037b8:	d0a00403 	ldbu	r2,-32752(gp)
 80037bc:	10803fcc 	andi	r2,r2,255
 80037c0:	10803c0c 	andi	r2,r2,240
 80037c4:	10000326 	beq	r2,zero,80037d4 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 80037c8:	00800044 	movi	r2,1
 80037cc:	d0a00405 	stb	r2,-32752(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 80037d0:	00000906 	br	80037f8 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 80037d4:	01403244 	movi	r5,201
 80037d8:	01003604 	movi	r4,216
 80037dc:	800331c0 	call	800331c <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 80037e0:	008000c4 	movi	r2,3
 80037e4:	d0a00405 	stb	r2,-32752(gp)
		}
		break;
 80037e8:	00000306 	br	80037f8 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 80037ec:	0001883a 	nop
 80037f0:	00000106 	br	80037f8 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 80037f4:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80037f8:	0001883a 	nop
 80037fc:	e037883a 	mov	sp,fp
 8003800:	dfc00117 	ldw	ra,4(sp)
 8003804:	df000017 	ldw	fp,0(sp)
 8003808:	dec00204 	addi	sp,sp,8
 800380c:	f800283a 	ret

08003810 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8003810:	defffe04 	addi	sp,sp,-8
 8003814:	dfc00115 	stw	ra,4(sp)
 8003818:	df000015 	stw	fp,0(sp)
 800381c:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8003820:	01400684 	movi	r5,26
 8003824:	01002204 	movi	r4,136
 8003828:	800331c0 	call	800331c <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 800382c:	80035c40 	call	80035c4 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8003830:	0009883a 	mov	r4,zero
 8003834:	80036640 	call	8003664 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8003838:	01402004 	movi	r5,128
 800383c:	01002e04 	movi	r4,184
 8003840:	800331c0 	call	800331c <MAXreg_wr>
	Vbus_power( ON);
 8003844:	01000044 	movi	r4,1
 8003848:	80036640 	call	8003664 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 800384c:	01403444 	movi	r5,209
 8003850:	01003604 	movi	r4,216
 8003854:	800331c0 	call	800331c <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8003858:	01400804 	movi	r5,32
 800385c:	01003404 	movi	r4,208
 8003860:	800331c0 	call	800331c <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8003864:	01400104 	movi	r5,4
 8003868:	01003a04 	movi	r4,232
 800386c:	800331c0 	call	800331c <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8003870:	80036880 	call	8003688 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8003874:	01400804 	movi	r5,32
 8003878:	01003204 	movi	r4,200
 800387c:	800331c0 	call	800331c <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8003880:	01400044 	movi	r5,1
 8003884:	01002004 	movi	r4,128
 8003888:	800331c0 	call	800331c <MAXreg_wr>
}
 800388c:	0001883a 	nop
 8003890:	e037883a 	mov	sp,fp
 8003894:	dfc00117 	ldw	ra,4(sp)
 8003898:	df000017 	ldw	fp,0(sp)
 800389c:	dec00204 	addi	sp,sp,8
 80038a0:	f800283a 	ret

080038a4 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 80038a4:	defffe04 	addi	sp,sp,-8
 80038a8:	dfc00115 	stw	ra,4(sp)
 80038ac:	df000015 	stw	fp,0(sp)
 80038b0:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80038b4:	00805404 	movi	r2,336
 80038b8:	10800037 	ldwio	r2,0(r2)
 80038bc:	1000041e 	bne	r2,zero,80038d0 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 80038c0:	01020074 	movhi	r4,2049
 80038c4:	211fc804 	addi	r4,r4,32544
 80038c8:	8004aac0 	call	8004aac <printf>
		MaxIntHandler();
 80038cc:	80039080 	call	8003908 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 80038d0:	00806804 	movi	r2,416
 80038d4:	10800037 	ldwio	r2,0(r2)
 80038d8:	10800058 	cmpnei	r2,r2,1
 80038dc:	1000041e 	bne	r2,zero,80038f0 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 80038e0:	01020074 	movhi	r4,2049
 80038e4:	211fcc04 	addi	r4,r4,32560
 80038e8:	8004aac0 	call	8004aac <printf>
		MaxGpxHandler();
 80038ec:	80039d40 	call	80039d4 <MaxGpxHandler>
	}
}
 80038f0:	0001883a 	nop
 80038f4:	e037883a 	mov	sp,fp
 80038f8:	dfc00117 	ldw	ra,4(sp)
 80038fc:	df000017 	ldw	fp,0(sp)
 8003900:	dec00204 	addi	sp,sp,8
 8003904:	f800283a 	ret

08003908 <MaxIntHandler>:

void MaxIntHandler(void) {
 8003908:	defffd04 	addi	sp,sp,-12
 800390c:	dfc00215 	stw	ra,8(sp)
 8003910:	df000115 	stw	fp,4(sp)
 8003914:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8003918:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 800391c:	01003204 	movi	r4,200
 8003920:	80034e80 	call	80034e8 <MAXreg_rd>
 8003924:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 8003928:	e0bfff43 	ldbu	r2,-3(fp)
 800392c:	100b883a 	mov	r5,r2
 8003930:	01020074 	movhi	r4,2049
 8003934:	211fd004 	addi	r4,r4,32576
 8003938:	8004aac0 	call	8004aac <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 800393c:	e0bfff43 	ldbu	r2,-3(fp)
 8003940:	1080100c 	andi	r2,r2,64
 8003944:	10000326 	beq	r2,zero,8003954 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 8003948:	e0bfff03 	ldbu	r2,-4(fp)
 800394c:	10801014 	ori	r2,r2,64
 8003950:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8003954:	e0bfff43 	ldbu	r2,-3(fp)
 8003958:	1080080c 	andi	r2,r2,32
 800395c:	10000426 	beq	r2,zero,8003970 <MaxIntHandler+0x68>
		MAX_busprobe();
 8003960:	80036880 	call	8003688 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8003964:	e0bfff03 	ldbu	r2,-4(fp)
 8003968:	10800814 	ori	r2,r2,32
 800396c:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8003970:	e0bfff43 	ldbu	r2,-3(fp)
 8003974:	1080020c 	andi	r2,r2,8
 8003978:	10000326 	beq	r2,zero,8003988 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 800397c:	000b883a 	mov	r5,zero
 8003980:	01000e04 	movi	r4,56
 8003984:	800331c0 	call	800331c <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8003988:	e0bfff43 	ldbu	r2,-3(fp)
 800398c:	1080004c 	andi	r2,r2,1
 8003990:	10000626 	beq	r2,zero,80039ac <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8003994:	d0a00403 	ldbu	r2,-32752(gp)
 8003998:	10800044 	addi	r2,r2,1
 800399c:	d0a00405 	stb	r2,-32752(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 80039a0:	e0bfff03 	ldbu	r2,-4(fp)
 80039a4:	10800054 	ori	r2,r2,1
 80039a8:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 80039ac:	e0bfff03 	ldbu	r2,-4(fp)
 80039b0:	100b883a 	mov	r5,r2
 80039b4:	01003204 	movi	r4,200
 80039b8:	800331c0 	call	800331c <MAXreg_wr>
}
 80039bc:	0001883a 	nop
 80039c0:	e037883a 	mov	sp,fp
 80039c4:	dfc00117 	ldw	ra,4(sp)
 80039c8:	df000017 	ldw	fp,0(sp)
 80039cc:	dec00204 	addi	sp,sp,8
 80039d0:	f800283a 	ret

080039d4 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 80039d4:	defffd04 	addi	sp,sp,-12
 80039d8:	dfc00215 	stw	ra,8(sp)
 80039dc:	df000115 	stw	fp,4(sp)
 80039e0:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 80039e4:	01002c04 	movi	r4,176
 80039e8:	80034e80 	call	80034e8 <MAXreg_rd>
 80039ec:	e0bfff05 	stb	r2,-4(fp)
}
 80039f0:	0001883a 	nop
 80039f4:	e037883a 	mov	sp,fp
 80039f8:	dfc00117 	ldw	ra,4(sp)
 80039fc:	df000017 	ldw	fp,0(sp)
 8003a00:	dec00204 	addi	sp,sp,8
 8003a04:	f800283a 	ret

08003a08 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8003a08:	defff104 	addi	sp,sp,-60
 8003a0c:	dfc00e15 	stw	ra,56(sp)
 8003a10:	df000d15 	stw	fp,52(sp)
 8003a14:	df000d04 	addi	fp,sp,52
 8003a18:	2015883a 	mov	r10,r4
 8003a1c:	2813883a 	mov	r9,r5
 8003a20:	3011883a 	mov	r8,r6
 8003a24:	380d883a 	mov	r6,r7
 8003a28:	e1400217 	ldw	r5,8(fp)
 8003a2c:	e1000317 	ldw	r4,12(fp)
 8003a30:	e0c00417 	ldw	r3,16(fp)
 8003a34:	e0800517 	ldw	r2,20(fp)
 8003a38:	e2bff805 	stb	r10,-32(fp)
 8003a3c:	e27ff905 	stb	r9,-28(fp)
 8003a40:	e23ffa05 	stb	r8,-24(fp)
 8003a44:	e1bffb05 	stb	r6,-20(fp)
 8003a48:	e17ffc05 	stb	r5,-16(fp)
 8003a4c:	e13ffd05 	stb	r4,-12(fp)
 8003a50:	e0fffe0d 	sth	r3,-8(fp)
 8003a54:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8003a58:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8003a5c:	00800044 	movi	r2,1
 8003a60:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8003a64:	e0800617 	ldw	r2,24(fp)
 8003a68:	1000011e 	bne	r2,zero,8003a70 <XferCtrlReq+0x68>
        datastage = 0;
 8003a6c:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8003a70:	e0bff803 	ldbu	r2,-32(fp)
 8003a74:	100b883a 	mov	r5,r2
 8003a78:	01003804 	movi	r4,224
 8003a7c:	800331c0 	call	800331c <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8003a80:	e0bffa03 	ldbu	r2,-24(fp)
 8003a84:	10803fcc 	andi	r2,r2,255
 8003a88:	1080201c 	xori	r2,r2,128
 8003a8c:	10bfe004 	addi	r2,r2,-128
 8003a90:	1000020e 	bge	r2,zero,8003a9c <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 8003a94:	00800044 	movi	r2,1
 8003a98:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8003a9c:	e0bffa03 	ldbu	r2,-24(fp)
 8003aa0:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 8003aa4:	e0bffb03 	ldbu	r2,-20(fp)
 8003aa8:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8003aac:	e0bffc03 	ldbu	r2,-16(fp)
 8003ab0:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8003ab4:	e0bffd03 	ldbu	r2,-12(fp)
 8003ab8:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 8003abc:	e0bffe0b 	ldhu	r2,-8(fp)
 8003ac0:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 8003ac4:	e0bfff0b 	ldhu	r2,-4(fp)
 8003ac8:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8003acc:	e0bff584 	addi	r2,fp,-42
 8003ad0:	100d883a 	mov	r6,r2
 8003ad4:	01400204 	movi	r5,8
 8003ad8:	01000804 	movi	r4,32
 8003adc:	80033900 	call	8003390 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8003ae0:	e0bff903 	ldbu	r2,-28(fp)
 8003ae4:	100b883a 	mov	r5,r2
 8003ae8:	01000404 	movi	r4,16
 8003aec:	8003cb00 	call	8003cb0 <XferDispatchPkt>
 8003af0:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8003af4:	e0bff543 	ldbu	r2,-43(fp)
 8003af8:	10000226 	beq	r2,zero,8003b04 <XferCtrlReq+0xfc>
        return( rcode );
 8003afc:	e0bff543 	ldbu	r2,-43(fp)
 8003b00:	00000f06 	br	8003b40 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8003b04:	e0bff503 	ldbu	r2,-44(fp)
 8003b08:	1085883a 	add	r2,r2,r2
 8003b0c:	1087883a 	add	r3,r2,r2
 8003b10:	d0a00204 	addi	r2,gp,-32760
 8003b14:	1885883a 	add	r2,r3,r2
 8003b18:	10800017 	ldw	r2,0(r2)
 8003b1c:	e13ff803 	ldbu	r4,-32(fp)
 8003b20:	e17ff903 	ldbu	r5,-28(fp)
 8003b24:	e1bfff0b 	ldhu	r6,-4(fp)
 8003b28:	e0fff417 	ldw	r3,-48(fp)
 8003b2c:	d8c00015 	stw	r3,0(sp)
 8003b30:	e1c00617 	ldw	r7,24(fp)
 8003b34:	103ee83a 	callr	r2
 8003b38:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8003b3c:	e0bff543 	ldbu	r2,-43(fp)
}
 8003b40:	e037883a 	mov	sp,fp
 8003b44:	dfc00117 	ldw	ra,4(sp)
 8003b48:	df000017 	ldw	fp,0(sp)
 8003b4c:	dec00204 	addi	sp,sp,8
 8003b50:	f800283a 	ret

08003b54 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8003b54:	defff804 	addi	sp,sp,-32
 8003b58:	dfc00715 	stw	ra,28(sp)
 8003b5c:	df000615 	stw	fp,24(sp)
 8003b60:	df000604 	addi	fp,sp,24
 8003b64:	2807883a 	mov	r3,r5
 8003b68:	3005883a 	mov	r2,r6
 8003b6c:	e1ffff15 	stw	r7,-4(fp)
 8003b70:	e13ffc05 	stb	r4,-16(fp)
 8003b74:	e0fffd05 	stb	r3,-12(fp)
 8003b78:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8003b7c:	e0800217 	ldw	r2,8(fp)
 8003b80:	10002826 	beq	r2,zero,8003c24 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8003b84:	e0fffc03 	ldbu	r3,-16(fp)
 8003b88:	008200b4 	movhi	r2,2050
 8003b8c:	10b16a04 	addi	r2,r2,-14936
 8003b90:	180690fa 	slli	r3,r3,3
 8003b94:	10c5883a 	add	r2,r2,r3
 8003b98:	10c00017 	ldw	r3,0(r2)
 8003b9c:	e0bffd03 	ldbu	r2,-12(fp)
 8003ba0:	100490fa 	slli	r2,r2,3
 8003ba4:	1885883a 	add	r2,r3,r2
 8003ba8:	00c00804 	movi	r3,32
 8003bac:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8003bb0:	e13ffc03 	ldbu	r4,-16(fp)
 8003bb4:	e17ffd03 	ldbu	r5,-12(fp)
 8003bb8:	e1bffe0b 	ldhu	r6,-8(fp)
 8003bbc:	e0fffc03 	ldbu	r3,-16(fp)
 8003bc0:	008200b4 	movhi	r2,2050
 8003bc4:	10b16a04 	addi	r2,r2,-14936
 8003bc8:	180690fa 	slli	r3,r3,3
 8003bcc:	10c5883a 	add	r2,r2,r3
 8003bd0:	10c00017 	ldw	r3,0(r2)
 8003bd4:	e0bffd03 	ldbu	r2,-12(fp)
 8003bd8:	100490fa 	slli	r2,r2,3
 8003bdc:	1885883a 	add	r2,r3,r2
 8003be0:	1080008b 	ldhu	r2,2(r2)
 8003be4:	10803fcc 	andi	r2,r2,255
 8003be8:	d8800015 	stw	r2,0(sp)
 8003bec:	e1ffff17 	ldw	r7,-4(fp)
 8003bf0:	8003e2c0 	call	8003e2c <XferInTransfer>
 8003bf4:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 8003bf8:	e0bffb03 	ldbu	r2,-20(fp)
 8003bfc:	10000226 	beq	r2,zero,8003c08 <XferCtrlData+0xb4>
        return( rcode );
 8003c00:	e0bffb03 	ldbu	r2,-20(fp)
 8003c04:	00000806 	br	8003c28 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8003c08:	e0bffd03 	ldbu	r2,-12(fp)
 8003c0c:	100b883a 	mov	r5,r2
 8003c10:	01002804 	movi	r4,160
 8003c14:	8003cb00 	call	8003cb0 <XferDispatchPkt>
 8003c18:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8003c1c:	e0bffb03 	ldbu	r2,-20(fp)
 8003c20:	00000106 	br	8003c28 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8003c24:	00bfffc4 	movi	r2,-1
    }
}
 8003c28:	e037883a 	mov	sp,fp
 8003c2c:	dfc00117 	ldw	ra,4(sp)
 8003c30:	df000017 	ldw	fp,0(sp)
 8003c34:	dec00204 	addi	sp,sp,8
 8003c38:	f800283a 	ret

08003c3c <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8003c3c:	defff904 	addi	sp,sp,-28
 8003c40:	dfc00615 	stw	ra,24(sp)
 8003c44:	df000515 	stw	fp,20(sp)
 8003c48:	df000504 	addi	fp,sp,20
 8003c4c:	2807883a 	mov	r3,r5
 8003c50:	3005883a 	mov	r2,r6
 8003c54:	e1ffff15 	stw	r7,-4(fp)
 8003c58:	e13ffc05 	stb	r4,-16(fp)
 8003c5c:	e0fffd05 	stb	r3,-12(fp)
 8003c60:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8003c64:	e0800217 	ldw	r2,8(fp)
 8003c68:	10000626 	beq	r2,zero,8003c84 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8003c6c:	e0bffd03 	ldbu	r2,-12(fp)
 8003c70:	100b883a 	mov	r5,r2
 8003c74:	01002804 	movi	r4,160
 8003c78:	8003cb00 	call	8003cb0 <XferDispatchPkt>
 8003c7c:	e0bffb05 	stb	r2,-20(fp)
 8003c80:	00000506 	br	8003c98 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8003c84:	e0bffd03 	ldbu	r2,-12(fp)
 8003c88:	100b883a 	mov	r5,r2
 8003c8c:	01002004 	movi	r4,128
 8003c90:	8003cb00 	call	8003cb0 <XferDispatchPkt>
 8003c94:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 8003c98:	e0bffb03 	ldbu	r2,-20(fp)
}
 8003c9c:	e037883a 	mov	sp,fp
 8003ca0:	dfc00117 	ldw	ra,4(sp)
 8003ca4:	df000017 	ldw	fp,0(sp)
 8003ca8:	dec00204 	addi	sp,sp,8
 8003cac:	f800283a 	ret

08003cb0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8003cb0:	defff904 	addi	sp,sp,-28
 8003cb4:	dfc00615 	stw	ra,24(sp)
 8003cb8:	df000515 	stw	fp,20(sp)
 8003cbc:	df000504 	addi	fp,sp,20
 8003cc0:	2007883a 	mov	r3,r4
 8003cc4:	2805883a 	mov	r2,r5
 8003cc8:	e0fffe05 	stb	r3,-8(fp)
 8003ccc:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8003cd0:	d0a78917 	ldw	r2,-25052(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8003cd4:	0140fa04 	movi	r5,1000
 8003cd8:	1009883a 	mov	r4,r2
 8003cdc:	8004a540 	call	8004a54 <__mulsi3>
 8003ce0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003ce4:	d0a78817 	ldw	r2,-25056(gp)
 8003ce8:	100b883a 	mov	r5,r2
 8003cec:	1809883a 	mov	r4,r3
 8003cf0:	80049980 	call	8004998 <__udivsi3>
 8003cf4:	1084e204 	addi	r2,r2,5000
 8003cf8:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8003cfc:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8003d00:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8003d04:	e0fffe03 	ldbu	r3,-8(fp)
 8003d08:	e0bfff03 	ldbu	r2,-4(fp)
 8003d0c:	1884b03a 	or	r2,r3,r2
 8003d10:	10803fcc 	andi	r2,r2,255
 8003d14:	100b883a 	mov	r5,r2
 8003d18:	01003c04 	movi	r4,240
 8003d1c:	800331c0 	call	800331c <MAXreg_wr>
        rcode = 0xff;
 8003d20:	00bfffc4 	movi	r2,-1
 8003d24:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8003d28:	00000d06 	br	8003d60 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8003d2c:	01003204 	movi	r4,200
 8003d30:	80034e80 	call	80034e8 <MAXreg_rd>
 8003d34:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8003d38:	e0bffd03 	ldbu	r2,-12(fp)
 8003d3c:	10803fcc 	andi	r2,r2,255
 8003d40:	1080201c 	xori	r2,r2,128
 8003d44:	10bfe004 	addi	r2,r2,-128
 8003d48:	1000050e 	bge	r2,zero,8003d60 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8003d4c:	01402004 	movi	r5,128
 8003d50:	01003204 	movi	r4,200
 8003d54:	800331c0 	call	800331c <MAXreg_wr>
                rcode = 0x00;
 8003d58:	e03ffb05 	stb	zero,-20(fp)
                break;
 8003d5c:	00000c06 	br	8003d90 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8003d60:	d0a78917 	ldw	r2,-25052(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8003d64:	0140fa04 	movi	r5,1000
 8003d68:	1009883a 	mov	r4,r2
 8003d6c:	8004a540 	call	8004a54 <__mulsi3>
 8003d70:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003d74:	d0a78817 	ldw	r2,-25056(gp)
 8003d78:	100b883a 	mov	r5,r2
 8003d7c:	1809883a 	mov	r4,r3
 8003d80:	80049980 	call	8004998 <__udivsi3>
 8003d84:	1007883a 	mov	r3,r2
 8003d88:	e0bffc17 	ldw	r2,-16(fp)
 8003d8c:	18bfe736 	bltu	r3,r2,8003d2c <__alt_data_end+0xfc003d2c>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8003d90:	e0bffb03 	ldbu	r2,-20(fp)
 8003d94:	10000226 	beq	r2,zero,8003da0 <XferDispatchPkt+0xf0>
            return( rcode );
 8003d98:	e0bffb03 	ldbu	r2,-20(fp)
 8003d9c:	00001e06 	br	8003e18 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8003da0:	01003e04 	movi	r4,248
 8003da4:	80034e80 	call	80034e8 <MAXreg_rd>
 8003da8:	108003cc 	andi	r2,r2,15
 8003dac:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8003db0:	e0bffb03 	ldbu	r2,-20(fp)
 8003db4:	10800118 	cmpnei	r2,r2,4
 8003db8:	1000071e 	bne	r2,zero,8003dd8 <XferDispatchPkt+0x128>
            nak_count++;
 8003dbc:	e0bffb83 	ldbu	r2,-18(fp)
 8003dc0:	10800044 	addi	r2,r2,1
 8003dc4:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8003dc8:	e0bffb83 	ldbu	r2,-18(fp)
 8003dcc:	10803218 	cmpnei	r2,r2,200
 8003dd0:	10000b1e 	bne	r2,zero,8003e00 <XferDispatchPkt+0x150>
                break;
 8003dd4:	00000f06 	br	8003e14 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8003dd8:	e0bffb03 	ldbu	r2,-20(fp)
 8003ddc:	10800398 	cmpnei	r2,r2,14
 8003de0:	1000091e 	bne	r2,zero,8003e08 <XferDispatchPkt+0x158>
            retry_count++;
 8003de4:	e0bffb43 	ldbu	r2,-19(fp)
 8003de8:	10800044 	addi	r2,r2,1
 8003dec:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8003df0:	e0bffb47 	ldb	r2,-19(fp)
 8003df4:	108000d8 	cmpnei	r2,r2,3
 8003df8:	10000526 	beq	r2,zero,8003e10 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8003dfc:	00000106 	br	8003e04 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8003e00:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8003e04:	003fbf06 	br	8003d04 <__alt_data_end+0xfc003d04>
            }
            else {
                continue;
            }
        }
        else break;
 8003e08:	0001883a 	nop
 8003e0c:	00000106 	br	8003e14 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8003e10:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8003e14:	e0bffb03 	ldbu	r2,-20(fp)
}
 8003e18:	e037883a 	mov	sp,fp
 8003e1c:	dfc00117 	ldw	ra,4(sp)
 8003e20:	df000017 	ldw	fp,0(sp)
 8003e24:	dec00204 	addi	sp,sp,8
 8003e28:	f800283a 	ret

08003e2c <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8003e2c:	defff804 	addi	sp,sp,-32
 8003e30:	dfc00715 	stw	ra,28(sp)
 8003e34:	df000615 	stw	fp,24(sp)
 8003e38:	df000604 	addi	fp,sp,24
 8003e3c:	2011883a 	mov	r8,r4
 8003e40:	2809883a 	mov	r4,r5
 8003e44:	3007883a 	mov	r3,r6
 8003e48:	e1fffe15 	stw	r7,-8(fp)
 8003e4c:	e0800217 	ldw	r2,8(fp)
 8003e50:	e23ffb05 	stb	r8,-20(fp)
 8003e54:	e13ffc05 	stb	r4,-16(fp)
 8003e58:	e0fffd0d 	sth	r3,-12(fp)
 8003e5c:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8003e60:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8003e64:	e0fffb03 	ldbu	r3,-20(fp)
 8003e68:	008200b4 	movhi	r2,2050
 8003e6c:	10b16a04 	addi	r2,r2,-14936
 8003e70:	180690fa 	slli	r3,r3,3
 8003e74:	10c5883a 	add	r2,r2,r3
 8003e78:	10c00017 	ldw	r3,0(r2)
 8003e7c:	e0bffc03 	ldbu	r2,-16(fp)
 8003e80:	100490fa 	slli	r2,r2,3
 8003e84:	1885883a 	add	r2,r3,r2
 8003e88:	10800183 	ldbu	r2,6(r2)
 8003e8c:	10803fcc 	andi	r2,r2,255
 8003e90:	100b883a 	mov	r5,r2
 8003e94:	01003a04 	movi	r4,232
 8003e98:	800331c0 	call	800331c <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8003e9c:	e0bffc03 	ldbu	r2,-16(fp)
 8003ea0:	100b883a 	mov	r5,r2
 8003ea4:	0009883a 	mov	r4,zero
 8003ea8:	8003cb00 	call	8003cb0 <XferDispatchPkt>
 8003eac:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8003eb0:	e0bffa83 	ldbu	r2,-22(fp)
 8003eb4:	10000226 	beq	r2,zero,8003ec0 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8003eb8:	e0bffa83 	ldbu	r2,-22(fp)
 8003ebc:	00003a06 	br	8003fa8 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8003ec0:	01003204 	movi	r4,200
 8003ec4:	80034e80 	call	80034e8 <MAXreg_rd>
 8003ec8:	10803fcc 	andi	r2,r2,255
 8003ecc:	1080010c 	andi	r2,r2,4
 8003ed0:	1000021e 	bne	r2,zero,8003edc <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8003ed4:	00bffc04 	movi	r2,-16
 8003ed8:	00003306 	br	8003fa8 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8003edc:	01000c04 	movi	r4,48
 8003ee0:	80034e80 	call	80034e8 <MAXreg_rd>
 8003ee4:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8003ee8:	e0bffac3 	ldbu	r2,-21(fp)
 8003eec:	e1bffe17 	ldw	r6,-8(fp)
 8003ef0:	100b883a 	mov	r5,r2
 8003ef4:	01000204 	movi	r4,8
 8003ef8:	80035480 	call	8003548 <MAXbytes_rd>
 8003efc:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8003f00:	01400104 	movi	r5,4
 8003f04:	01003204 	movi	r4,200
 8003f08:	800331c0 	call	800331c <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8003f0c:	e0fffac3 	ldbu	r3,-21(fp)
 8003f10:	e0bffa0b 	ldhu	r2,-24(fp)
 8003f14:	1885883a 	add	r2,r3,r2
 8003f18:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8003f1c:	e0fffac3 	ldbu	r3,-21(fp)
 8003f20:	e0bfff03 	ldbu	r2,-4(fp)
 8003f24:	18800336 	bltu	r3,r2,8003f34 <XferInTransfer+0x108>
 8003f28:	e0fffa0b 	ldhu	r3,-24(fp)
 8003f2c:	e0bffd0b 	ldhu	r2,-12(fp)
 8003f30:	18bfda36 	bltu	r3,r2,8003e9c <__alt_data_end+0xfc003e9c>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8003f34:	01003e04 	movi	r4,248
 8003f38:	80034e80 	call	80034e8 <MAXreg_rd>
 8003f3c:	10803fcc 	andi	r2,r2,255
 8003f40:	1080040c 	andi	r2,r2,16
 8003f44:	10000c26 	beq	r2,zero,8003f78 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8003f48:	e0fffb03 	ldbu	r3,-20(fp)
 8003f4c:	008200b4 	movhi	r2,2050
 8003f50:	10b16a04 	addi	r2,r2,-14936
 8003f54:	180690fa 	slli	r3,r3,3
 8003f58:	10c5883a 	add	r2,r2,r3
 8003f5c:	10c00017 	ldw	r3,0(r2)
 8003f60:	e0bffc03 	ldbu	r2,-16(fp)
 8003f64:	100490fa 	slli	r2,r2,3
 8003f68:	1885883a 	add	r2,r3,r2
 8003f6c:	00c00804 	movi	r3,32
 8003f70:	10c00185 	stb	r3,6(r2)
 8003f74:	00000b06 	br	8003fa4 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8003f78:	e0fffb03 	ldbu	r3,-20(fp)
 8003f7c:	008200b4 	movhi	r2,2050
 8003f80:	10b16a04 	addi	r2,r2,-14936
 8003f84:	180690fa 	slli	r3,r3,3
 8003f88:	10c5883a 	add	r2,r2,r3
 8003f8c:	10c00017 	ldw	r3,0(r2)
 8003f90:	e0bffc03 	ldbu	r2,-16(fp)
 8003f94:	100490fa 	slli	r2,r2,3
 8003f98:	1885883a 	add	r2,r3,r2
 8003f9c:	00c00404 	movi	r3,16
 8003fa0:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8003fa4:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8003fa8:	e037883a 	mov	sp,fp
 8003fac:	dfc00117 	ldw	ra,4(sp)
 8003fb0:	df000017 	ldw	fp,0(sp)
 8003fb4:	dec00204 	addi	sp,sp,8
 8003fb8:	f800283a 	ret

08003fbc <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8003fbc:	defffe04 	addi	sp,sp,-8
 8003fc0:	df000115 	stw	fp,4(sp)
 8003fc4:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8003fc8:	e03fff05 	stb	zero,-4(fp)
 8003fcc:	00001006 	br	8004010 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8003fd0:	e0ffff03 	ldbu	r3,-4(fp)
 8003fd4:	008200b4 	movhi	r2,2050
 8003fd8:	10b16a04 	addi	r2,r2,-14936
 8003fdc:	180690fa 	slli	r3,r3,3
 8003fe0:	10c5883a 	add	r2,r2,r3
 8003fe4:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8003fe8:	e0ffff03 	ldbu	r3,-4(fp)
 8003fec:	008200b4 	movhi	r2,2050
 8003ff0:	10b16a04 	addi	r2,r2,-14936
 8003ff4:	180690fa 	slli	r3,r3,3
 8003ff8:	10c5883a 	add	r2,r2,r3
 8003ffc:	10800104 	addi	r2,r2,4
 8004000:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8004004:	e0bfff03 	ldbu	r2,-4(fp)
 8004008:	10800044 	addi	r2,r2,1
 800400c:	e0bfff05 	stb	r2,-4(fp)
 8004010:	e0bfff03 	ldbu	r2,-4(fp)
 8004014:	10800270 	cmpltui	r2,r2,9
 8004018:	103fed1e 	bne	r2,zero,8003fd0 <__alt_data_end+0xfc003fd0>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 800401c:	008200b4 	movhi	r2,2050
 8004020:	10b16a04 	addi	r2,r2,-14936
 8004024:	d0e77904 	addi	r3,gp,-25116
 8004028:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 800402c:	d027798d 	sth	zero,-25114(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8004030:	00801004 	movi	r2,64
 8004034:	d0a77a45 	stb	r2,-25111(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8004038:	00800404 	movi	r2,16
 800403c:	d0a77a85 	stb	r2,-25110(gp)
}
 8004040:	0001883a 	nop
 8004044:	e037883a 	mov	sp,fp
 8004048:	df000017 	ldw	fp,0(sp)
 800404c:	dec00104 	addi	sp,sp,4
 8004050:	f800283a 	ret

08004054 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8004054:	deffb204 	addi	sp,sp,-312
 8004058:	dfc04d15 	stw	ra,308(sp)
 800405c:	df004c15 	stw	fp,304(sp)
 8004060:	dc004b15 	stw	r16,300(sp)
 8004064:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8004068:	d0a00403 	ldbu	r2,-32752(gp)
 800406c:	10803fcc 	andi	r2,r2,255
 8004070:	10803c0c 	andi	r2,r2,240
 8004074:	10c00820 	cmpeqi	r3,r2,32
 8004078:	1801121e 	bne	r3,zero,80044c4 <USB_Task+0x470>
 800407c:	10c00848 	cmpgei	r3,r2,33
 8004080:	1800041e 	bne	r3,zero,8004094 <USB_Task+0x40>
 8004084:	10000a26 	beq	r2,zero,80040b0 <USB_Task+0x5c>
 8004088:	10800420 	cmpeqi	r2,r2,16
 800408c:	10001b1e 	bne	r2,zero,80040fc <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8004090:	00017a06 	br	800467c <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8004094:	10c01020 	cmpeqi	r3,r2,64
 8004098:	18016f1e 	bne	r3,zero,8004658 <USB_Task+0x604>
 800409c:	10c03fe0 	cmpeqi	r3,r2,255
 80040a0:	18016f1e 	bne	r3,zero,8004660 <USB_Task+0x60c>
 80040a4:	10800c20 	cmpeqi	r2,r2,48
 80040a8:	1001441e 	bne	r2,zero,80045bc <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 80040ac:	00017306 	br	800467c <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 80040b0:	d0a00403 	ldbu	r2,-32752(gp)
 80040b4:	10803fcc 	andi	r2,r2,255
 80040b8:	10c000e0 	cmpeqi	r3,r2,3
 80040bc:	1800091e 	bne	r3,zero,80040e4 <USB_Task+0x90>
 80040c0:	10c00120 	cmpeqi	r3,r2,4
 80040c4:	18000b1e 	bne	r3,zero,80040f4 <USB_Task+0xa0>
 80040c8:	10800060 	cmpeqi	r2,r2,1
 80040cc:	1000011e 	bne	r2,zero,80040d4 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 80040d0:	00016a06 	br	800467c <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 80040d4:	8003fbc0 	call	8003fbc <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80040d8:	008000c4 	movi	r2,3
 80040dc:	d0a00405 	stb	r2,-32752(gp)
                    break;
 80040e0:	00000506 	br	80040f8 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 80040e4:	01400104 	movi	r5,4
 80040e8:	01003a04 	movi	r4,232
 80040ec:	800331c0 	call	800331c <MAXreg_wr>
                    break;
 80040f0:	00000106 	br	80040f8 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 80040f4:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 80040f8:	00016006 	br	800467c <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 80040fc:	d0a00403 	ldbu	r2,-32752(gp)
 8004100:	10803fcc 	andi	r2,r2,255
 8004104:	10bffc04 	addi	r2,r2,-16
 8004108:	10c001a8 	cmpgeui	r3,r2,6
 800410c:	1801561e 	bne	r3,zero,8004668 <USB_Task+0x614>
 8004110:	100690ba 	slli	r3,r2,2
 8004114:	00820034 	movhi	r2,2048
 8004118:	10904a04 	addi	r2,r2,16680
 800411c:	1885883a 	add	r2,r3,r2
 8004120:	10800017 	ldw	r2,0(r2)
 8004124:	1000683a 	jmp	r2
 8004128:	08004140 	call	800414 <__alt_mem_onchip_memory2_0+0x800414>
 800412c:	08004178 	rdprs	zero,at,261
 8004130:	080041b4 	orhi	zero,at,262
 8004134:	080041d8 	cmpnei	zero,at,263
 8004138:	08004218 	cmpnei	zero,at,264
 800413c:	0800422c 	andhi	zero,at,264
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004140:	d0a78917 	ldw	r2,-25052(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8004144:	0140fa04 	movi	r5,1000
 8004148:	1009883a 	mov	r4,r2
 800414c:	8004a540 	call	8004a54 <__mulsi3>
 8004150:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004154:	d0a78817 	ldw	r2,-25056(gp)
 8004158:	100b883a 	mov	r5,r2
 800415c:	1809883a 	mov	r4,r3
 8004160:	80049980 	call	8004998 <__udivsi3>
 8004164:	10803204 	addi	r2,r2,200
 8004168:	d0a77c15 	stw	r2,-25104(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800416c:	00800444 	movi	r2,17
 8004170:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_STATE_ATTACHED )
 8004174:	0000d206 	br	80044c0 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004178:	d0a78917 	ldw	r2,-25052(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 800417c:	0140fa04 	movi	r5,1000
 8004180:	1009883a 	mov	r4,r2
 8004184:	8004a540 	call	8004a54 <__mulsi3>
 8004188:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800418c:	d0a78817 	ldw	r2,-25056(gp)
 8004190:	100b883a 	mov	r5,r2
 8004194:	1809883a 	mov	r4,r3
 8004198:	80049980 	call	8004998 <__udivsi3>
 800419c:	1007883a 	mov	r3,r2
 80041a0:	d0a77c17 	ldw	r2,-25104(gp)
 80041a4:	10c0c32e 	bgeu	r2,r3,80044b4 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80041a8:	00800484 	movi	r2,18
 80041ac:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80041b0:	0000c006 	br	80044b4 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 80041b4:	01400044 	movi	r5,1
 80041b8:	01003204 	movi	r4,200
 80041bc:	800331c0 	call	800331c <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 80041c0:	01400044 	movi	r5,1
 80041c4:	01003a04 	movi	r4,232
 80041c8:	800331c0 	call	800331c <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80041cc:	008004c4 	movi	r2,19
 80041d0:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 80041d4:	0000ba06 	br	80044c0 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 80041d8:	01003a04 	movi	r4,232
 80041dc:	80034e80 	call	80034e8 <MAXreg_rd>
 80041e0:	10803fcc 	andi	r2,r2,255
 80041e4:	1080004c 	andi	r2,r2,1
 80041e8:	1000b41e 	bne	r2,zero,80044bc <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 80041ec:	01003604 	movi	r4,216
 80041f0:	80034e80 	call	80034e8 <MAXreg_rd>
 80041f4:	10800214 	ori	r2,r2,8
 80041f8:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 80041fc:	e0bfb943 	ldbu	r2,-283(fp)
 8004200:	100b883a 	mov	r5,r2
 8004204:	01003604 	movi	r4,216
 8004208:	800331c0 	call	800331c <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800420c:	00800504 	movi	r2,20
 8004210:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8004214:	0000a906 	br	80044bc <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8004218:	01003204 	movi	r4,200
 800421c:	80034e80 	call	80034e8 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8004220:	00800544 	movi	r2,21
 8004224:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8004228:	0000a506 	br	80044c0 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 800422c:	008200b4 	movhi	r2,2050
 8004230:	10b16a04 	addi	r2,r2,-14936
 8004234:	10800017 	ldw	r2,0(r2)
 8004238:	00c00204 	movi	r3,8
 800423c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8004240:	e0bfba04 	addi	r2,fp,-280
 8004244:	d8800415 	stw	r2,16(sp)
 8004248:	00800204 	movi	r2,8
 800424c:	d8800315 	stw	r2,12(sp)
 8004250:	d8000215 	stw	zero,8(sp)
 8004254:	00800044 	movi	r2,1
 8004258:	d8800115 	stw	r2,4(sp)
 800425c:	d8000015 	stw	zero,0(sp)
 8004260:	01c00184 	movi	r7,6
 8004264:	01802004 	movi	r6,128
 8004268:	000b883a 	mov	r5,zero
 800426c:	0009883a 	mov	r4,zero
 8004270:	8003a080 	call	8003a08 <XferCtrlReq>
 8004274:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8004278:	e0bfb983 	ldbu	r2,-282(fp)
 800427c:	1000861e 	bne	r2,zero,8004498 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8004280:	008200b4 	movhi	r2,2050
 8004284:	10b16a04 	addi	r2,r2,-14936
 8004288:	10800017 	ldw	r2,0(r2)
 800428c:	e0ffbbc3 	ldbu	r3,-273(fp)
 8004290:	18c03fcc 	andi	r3,r3,255
 8004294:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8004298:	e0bfba03 	ldbu	r2,-280(fp)
 800429c:	10803fcc 	andi	r2,r2,255
 80042a0:	e0ffba04 	addi	r3,fp,-280
 80042a4:	d8c00415 	stw	r3,16(sp)
 80042a8:	d8800315 	stw	r2,12(sp)
 80042ac:	d8000215 	stw	zero,8(sp)
 80042b0:	00800044 	movi	r2,1
 80042b4:	d8800115 	stw	r2,4(sp)
 80042b8:	d8000015 	stw	zero,0(sp)
 80042bc:	01c00184 	movi	r7,6
 80042c0:	01802004 	movi	r6,128
 80042c4:	000b883a 	mov	r5,zero
 80042c8:	0009883a 	mov	r4,zero
 80042cc:	8003a080 	call	8003a08 <XferCtrlReq>
 80042d0:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 80042d4:	e0bfbd83 	ldbu	r2,-266(fp)
 80042d8:	10803fcc 	andi	r2,r2,255
 80042dc:	10003426 	beq	r2,zero,80043b0 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 80042e0:	e0bfbd83 	ldbu	r2,-266(fp)
 80042e4:	10803fcc 	andi	r2,r2,255
 80042e8:	e0ffbe84 	addi	r3,fp,-262
 80042ec:	d8c00415 	stw	r3,16(sp)
 80042f0:	00c00084 	movi	r3,2
 80042f4:	d8c00315 	stw	r3,12(sp)
 80042f8:	00c10244 	movi	r3,1033
 80042fc:	d8c00215 	stw	r3,8(sp)
 8004300:	00c000c4 	movi	r3,3
 8004304:	d8c00115 	stw	r3,4(sp)
 8004308:	d8800015 	stw	r2,0(sp)
 800430c:	01c00184 	movi	r7,6
 8004310:	01802004 	movi	r6,128
 8004314:	000b883a 	mov	r5,zero
 8004318:	0009883a 	mov	r4,zero
 800431c:	8003a080 	call	8003a08 <XferCtrlReq>
 8004320:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8004324:	e0bfbd83 	ldbu	r2,-266(fp)
 8004328:	10803fcc 	andi	r2,r2,255
 800432c:	e0ffbe83 	ldbu	r3,-262(fp)
 8004330:	18c03fcc 	andi	r3,r3,255
 8004334:	e13fbe84 	addi	r4,fp,-262
 8004338:	d9000415 	stw	r4,16(sp)
 800433c:	d8c00315 	stw	r3,12(sp)
 8004340:	00c10244 	movi	r3,1033
 8004344:	d8c00215 	stw	r3,8(sp)
 8004348:	00c000c4 	movi	r3,3
 800434c:	d8c00115 	stw	r3,4(sp)
 8004350:	d8800015 	stw	r2,0(sp)
 8004354:	01c00184 	movi	r7,6
 8004358:	01802004 	movi	r6,128
 800435c:	000b883a 	mov	r5,zero
 8004360:	0009883a 	mov	r4,zero
 8004364:	8003a080 	call	8003a08 <XferCtrlReq>
 8004368:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 800436c:	e0bfbd83 	ldbu	r2,-266(fp)
 8004370:	14003fcc 	andi	r16,r2,255
 8004374:	e0bfbe83 	ldbu	r2,-262(fp)
 8004378:	10803fcc 	andi	r2,r2,255
 800437c:	1004d07a 	srli	r2,r2,1
 8004380:	10bfffc4 	addi	r2,r2,-1
 8004384:	10c03fcc 	andi	r3,r2,255
 8004388:	e0bfbe84 	addi	r2,fp,-262
 800438c:	10800084 	addi	r2,r2,2
 8004390:	180b883a 	mov	r5,r3
 8004394:	1009883a 	mov	r4,r2
 8004398:	800481c0 	call	800481c <ConvUTF8ToStr>
 800439c:	100d883a 	mov	r6,r2
 80043a0:	800b883a 	mov	r5,r16
 80043a4:	01020074 	movhi	r4,2049
 80043a8:	211fd304 	addi	r4,r4,32588
 80043ac:	8004aac0 	call	8004aac <printf>
                		}
                		if (buf.iProduct != 0)
 80043b0:	e0bfbdc3 	ldbu	r2,-265(fp)
 80043b4:	10803fcc 	andi	r2,r2,255
 80043b8:	10003426 	beq	r2,zero,800448c <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80043bc:	e0bfbdc3 	ldbu	r2,-265(fp)
 80043c0:	10803fcc 	andi	r2,r2,255
 80043c4:	e0ffbe84 	addi	r3,fp,-262
 80043c8:	d8c00415 	stw	r3,16(sp)
 80043cc:	00c00084 	movi	r3,2
 80043d0:	d8c00315 	stw	r3,12(sp)
 80043d4:	00c10244 	movi	r3,1033
 80043d8:	d8c00215 	stw	r3,8(sp)
 80043dc:	00c000c4 	movi	r3,3
 80043e0:	d8c00115 	stw	r3,4(sp)
 80043e4:	d8800015 	stw	r2,0(sp)
 80043e8:	01c00184 	movi	r7,6
 80043ec:	01802004 	movi	r6,128
 80043f0:	000b883a 	mov	r5,zero
 80043f4:	0009883a 	mov	r4,zero
 80043f8:	8003a080 	call	8003a08 <XferCtrlReq>
 80043fc:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8004400:	e0bfbdc3 	ldbu	r2,-265(fp)
 8004404:	10803fcc 	andi	r2,r2,255
 8004408:	e0ffbe83 	ldbu	r3,-262(fp)
 800440c:	18c03fcc 	andi	r3,r3,255
 8004410:	e13fbe84 	addi	r4,fp,-262
 8004414:	d9000415 	stw	r4,16(sp)
 8004418:	d8c00315 	stw	r3,12(sp)
 800441c:	00c10244 	movi	r3,1033
 8004420:	d8c00215 	stw	r3,8(sp)
 8004424:	00c000c4 	movi	r3,3
 8004428:	d8c00115 	stw	r3,4(sp)
 800442c:	d8800015 	stw	r2,0(sp)
 8004430:	01c00184 	movi	r7,6
 8004434:	01802004 	movi	r6,128
 8004438:	000b883a 	mov	r5,zero
 800443c:	0009883a 	mov	r4,zero
 8004440:	8003a080 	call	8003a08 <XferCtrlReq>
 8004444:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8004448:	e0bfbdc3 	ldbu	r2,-265(fp)
 800444c:	14003fcc 	andi	r16,r2,255
 8004450:	e0bfbe83 	ldbu	r2,-262(fp)
 8004454:	10803fcc 	andi	r2,r2,255
 8004458:	1004d07a 	srli	r2,r2,1
 800445c:	10bfffc4 	addi	r2,r2,-1
 8004460:	10c03fcc 	andi	r3,r2,255
 8004464:	e0bfbe84 	addi	r2,fp,-262
 8004468:	10800084 	addi	r2,r2,2
 800446c:	180b883a 	mov	r5,r3
 8004470:	1009883a 	mov	r4,r2
 8004474:	800481c0 	call	800481c <ConvUTF8ToStr>
 8004478:	100d883a 	mov	r6,r2
 800447c:	800b883a 	mov	r5,r16
 8004480:	01020074 	movhi	r4,2049
 8004484:	211fd904 	addi	r4,r4,32612
 8004488:	8004aac0 	call	8004aac <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 800448c:	00800804 	movi	r2,32
 8004490:	d0a00405 	stb	r2,-32752(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8004494:	00000a06 	br	80044c0 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 8004498:	e0bfb983 	ldbu	r2,-282(fp)
 800449c:	d0a77d45 	stb	r2,-25099(gp)
                        last_usb_task_state = usb_task_state;
 80044a0:	d0a00403 	ldbu	r2,-32752(gp)
 80044a4:	d0a77b05 	stb	r2,-25108(gp)
                        usb_task_state = USB_STATE_ERROR;
 80044a8:	00bfffc4 	movi	r2,-1
 80044ac:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80044b0:	00000306 	br	80044c0 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80044b4:	0001883a 	nop
 80044b8:	00006b06 	br	8004668 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80044bc:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 80044c0:	00006906 	br	8004668 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80044c4:	00800044 	movi	r2,1
 80044c8:	e0bfb905 	stb	r2,-284(fp)
 80044cc:	00002d06 	br	8004584 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 80044d0:	e0ffb903 	ldbu	r3,-284(fp)
 80044d4:	008200b4 	movhi	r2,2050
 80044d8:	10b16a04 	addi	r2,r2,-14936
 80044dc:	180690fa 	slli	r3,r3,3
 80044e0:	10c5883a 	add	r2,r2,r3
 80044e4:	10800017 	ldw	r2,0(r2)
 80044e8:	1000231e 	bne	r2,zero,8004578 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 80044ec:	e13fb903 	ldbu	r4,-284(fp)
 80044f0:	008200b4 	movhi	r2,2050
 80044f4:	10b16a04 	addi	r2,r2,-14936
 80044f8:	10c00017 	ldw	r3,0(r2)
 80044fc:	008200b4 	movhi	r2,2050
 8004500:	10b16a04 	addi	r2,r2,-14936
 8004504:	200890fa 	slli	r4,r4,3
 8004508:	1105883a 	add	r2,r2,r4
 800450c:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8004510:	e0bfb903 	ldbu	r2,-284(fp)
 8004514:	d8000415 	stw	zero,16(sp)
 8004518:	d8000315 	stw	zero,12(sp)
 800451c:	d8000215 	stw	zero,8(sp)
 8004520:	d8000115 	stw	zero,4(sp)
 8004524:	d8800015 	stw	r2,0(sp)
 8004528:	01c00144 	movi	r7,5
 800452c:	000d883a 	mov	r6,zero
 8004530:	000b883a 	mov	r5,zero
 8004534:	0009883a 	mov	r4,zero
 8004538:	8003a080 	call	8003a08 <XferCtrlReq>
 800453c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8004540:	e0bfb983 	ldbu	r2,-282(fp)
 8004544:	1000051e 	bne	r2,zero,800455c <USB_Task+0x508>
                        tmp_addr = i;
 8004548:	e0bfb903 	ldbu	r2,-284(fp)
 800454c:	d0a77d05 	stb	r2,-25100(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8004550:	00800c04 	movi	r2,48
 8004554:	d0a00405 	stb	r2,-32752(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8004558:	00000d06 	br	8004590 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 800455c:	e0bfb983 	ldbu	r2,-282(fp)
 8004560:	d0a77d45 	stb	r2,-25099(gp)
                        last_usb_task_state = usb_task_state;
 8004564:	d0a00403 	ldbu	r2,-32752(gp)
 8004568:	d0a77b05 	stb	r2,-25108(gp)
                        usb_task_state = USB_STATE_ERROR;
 800456c:	00bfffc4 	movi	r2,-1
 8004570:	d0a00405 	stb	r2,-32752(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8004574:	00000606 	br	8004590 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8004578:	e0bfb903 	ldbu	r2,-284(fp)
 800457c:	10800044 	addi	r2,r2,1
 8004580:	e0bfb905 	stb	r2,-284(fp)
 8004584:	e0bfb903 	ldbu	r2,-284(fp)
 8004588:	10800230 	cmpltui	r2,r2,8
 800458c:	103fd01e 	bne	r2,zero,80044d0 <__alt_data_end+0xfc0044d0>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8004590:	d0a00403 	ldbu	r2,-32752(gp)
 8004594:	10803fcc 	andi	r2,r2,255
 8004598:	10800818 	cmpnei	r2,r2,32
 800459c:	1000341e 	bne	r2,zero,8004670 <USB_Task+0x61c>
                usb_error = 0xfe;
 80045a0:	00bfff84 	movi	r2,-2
 80045a4:	d0a77d45 	stb	r2,-25099(gp)
                last_usb_task_state = usb_task_state;
 80045a8:	d0a00403 	ldbu	r2,-32752(gp)
 80045ac:	d0a77b05 	stb	r2,-25108(gp)
                usb_task_state = USB_STATE_ERROR;
 80045b0:	00bfffc4 	movi	r2,-1
 80045b4:	d0a00405 	stb	r2,-32752(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 80045b8:	00002d06 	br	8004670 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80045bc:	e03fb905 	stb	zero,-284(fp)
 80045c0:	00001706 	br	8004620 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 80045c4:	e0bfb903 	ldbu	r2,-284(fp)
 80045c8:	040200b4 	movhi	r16,2050
 80045cc:	84214304 	addi	r16,r16,-31476
 80045d0:	01400304 	movi	r5,12
 80045d4:	1009883a 	mov	r4,r2
 80045d8:	8004a540 	call	8004a54 <__mulsi3>
 80045dc:	8085883a 	add	r2,r16,r2
 80045e0:	10800017 	ldw	r2,0(r2)
 80045e4:	d0e77d03 	ldbu	r3,-25100(gp)
 80045e8:	18c03fcc 	andi	r3,r3,255
 80045ec:	000b883a 	mov	r5,zero
 80045f0:	1809883a 	mov	r4,r3
 80045f4:	103ee83a 	callr	r2
 80045f8:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 80045fc:	e0bfb983 	ldbu	r2,-282(fp)
 8004600:	10800058 	cmpnei	r2,r2,1
 8004604:	1000031e 	bne	r2,zero,8004614 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8004608:	00801004 	movi	r2,64
 800460c:	d0a00405 	stb	r2,-32752(gp)
                    break;
 8004610:	00000606 	br	800462c <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8004614:	e0bfb903 	ldbu	r2,-284(fp)
 8004618:	10800044 	addi	r2,r2,1
 800461c:	e0bfb905 	stb	r2,-284(fp)
 8004620:	e0bfb903 	ldbu	r2,-284(fp)
 8004624:	10800130 	cmpltui	r2,r2,4
 8004628:	103fe61e 	bne	r2,zero,80045c4 <__alt_data_end+0xfc0045c4>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 800462c:	d0a00403 	ldbu	r2,-32752(gp)
 8004630:	10803fcc 	andi	r2,r2,255
 8004634:	10800c18 	cmpnei	r2,r2,48
 8004638:	10000f1e 	bne	r2,zero,8004678 <USB_Task+0x624>
                usb_error = 0xfd;
 800463c:	00bfff44 	movi	r2,-3
 8004640:	d0a77d45 	stb	r2,-25099(gp)
                last_usb_task_state = usb_task_state;
 8004644:	d0a00403 	ldbu	r2,-32752(gp)
 8004648:	d0a77b05 	stb	r2,-25108(gp)
                usb_task_state = USB_STATE_ERROR;
 800464c:	00bfffc4 	movi	r2,-1
 8004650:	d0a00405 	stb	r2,-32752(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 8004654:	00000806 	br	8004678 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 8004658:	0001883a 	nop
 800465c:	00000706 	br	800467c <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8004660:	0001883a 	nop
 8004664:	00000506 	br	800467c <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8004668:	0001883a 	nop
 800466c:	00000306 	br	800467c <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8004670:	0001883a 	nop
 8004674:	00000106 	br	800467c <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 8004678:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 800467c:	0001883a 	nop
 8004680:	e6ffff04 	addi	sp,fp,-4
 8004684:	dfc00217 	ldw	ra,8(sp)
 8004688:	df000117 	ldw	fp,4(sp)
 800468c:	dc000017 	ldw	r16,0(sp)
 8004690:	dec00304 	addi	sp,sp,12
 8004694:	f800283a 	ret

08004698 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 8004698:	defffd04 	addi	sp,sp,-12
 800469c:	df000215 	stw	fp,8(sp)
 80046a0:	df000204 	addi	fp,sp,8
 80046a4:	2005883a 	mov	r2,r4
 80046a8:	e17fff15 	stw	r5,-4(fp)
 80046ac:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 80046b0:	0005883a 	mov	r2,zero
}
 80046b4:	e037883a 	mov	sp,fp
 80046b8:	df000017 	ldw	fp,0(sp)
 80046bc:	dec00104 	addi	sp,sp,4
 80046c0:	f800283a 	ret

080046c4 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80046c4:	defffb04 	addi	sp,sp,-20
 80046c8:	df000415 	stw	fp,16(sp)
 80046cc:	df000404 	addi	fp,sp,16
 80046d0:	2007883a 	mov	r3,r4
 80046d4:	2805883a 	mov	r2,r5
 80046d8:	e1bffe15 	stw	r6,-8(fp)
 80046dc:	e1ffff15 	stw	r7,-4(fp)
 80046e0:	e0fffc05 	stb	r3,-16(fp)
 80046e4:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 80046e8:	0005883a 	mov	r2,zero

}
 80046ec:	e037883a 	mov	sp,fp
 80046f0:	df000017 	ldw	fp,0(sp)
 80046f4:	dec00104 	addi	sp,sp,4
 80046f8:	f800283a 	ret

080046fc <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80046fc:	defffd04 	addi	sp,sp,-12
 8004700:	df000215 	stw	fp,8(sp)
 8004704:	df000204 	addi	fp,sp,8
 8004708:	2005883a 	mov	r2,r4
 800470c:	e17fff15 	stw	r5,-4(fp)
 8004710:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 8004714:	0005883a 	mov	r2,zero

}
 8004718:	e037883a 	mov	sp,fp
 800471c:	df000017 	ldw	fp,0(sp)
 8004720:	dec00104 	addi	sp,sp,4
 8004724:	f800283a 	ret

08004728 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8004728:	defffb04 	addi	sp,sp,-20
 800472c:	df000415 	stw	fp,16(sp)
 8004730:	df000404 	addi	fp,sp,16
 8004734:	2007883a 	mov	r3,r4
 8004738:	2805883a 	mov	r2,r5
 800473c:	e1bffe15 	stw	r6,-8(fp)
 8004740:	e1ffff15 	stw	r7,-4(fp)
 8004744:	e0fffc05 	stb	r3,-16(fp)
 8004748:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 800474c:	0005883a 	mov	r2,zero
}
 8004750:	e037883a 	mov	sp,fp
 8004754:	df000017 	ldw	fp,0(sp)
 8004758:	dec00104 	addi	sp,sp,4
 800475c:	f800283a 	ret

08004760 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8004760:	defffd04 	addi	sp,sp,-12
 8004764:	df000215 	stw	fp,8(sp)
 8004768:	df000204 	addi	fp,sp,8
 800476c:	2005883a 	mov	r2,r4
 8004770:	e17fff15 	stw	r5,-4(fp)
 8004774:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 8004778:	0005883a 	mov	r2,zero
}
 800477c:	e037883a 	mov	sp,fp
 8004780:	df000017 	ldw	fp,0(sp)
 8004784:	dec00104 	addi	sp,sp,4
 8004788:	f800283a 	ret

0800478c <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800478c:	defffb04 	addi	sp,sp,-20
 8004790:	df000415 	stw	fp,16(sp)
 8004794:	df000404 	addi	fp,sp,16
 8004798:	2007883a 	mov	r3,r4
 800479c:	2805883a 	mov	r2,r5
 80047a0:	e1bffe15 	stw	r6,-8(fp)
 80047a4:	e1ffff15 	stw	r7,-4(fp)
 80047a8:	e0fffc05 	stb	r3,-16(fp)
 80047ac:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80047b0:	0005883a 	mov	r2,zero
}
 80047b4:	e037883a 	mov	sp,fp
 80047b8:	df000017 	ldw	fp,0(sp)
 80047bc:	dec00104 	addi	sp,sp,4
 80047c0:	f800283a 	ret

080047c4 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80047c4:	deffff04 	addi	sp,sp,-4
 80047c8:	df000015 	stw	fp,0(sp)
 80047cc:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80047d0:	d0a00403 	ldbu	r2,-32752(gp)
}
 80047d4:	e037883a 	mov	sp,fp
 80047d8:	df000017 	ldw	fp,0(sp)
 80047dc:	dec00104 	addi	sp,sp,4
 80047e0:	f800283a 	ret

080047e4 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80047e4:	defffe04 	addi	sp,sp,-8
 80047e8:	df000115 	stw	fp,4(sp)
 80047ec:	df000104 	addi	fp,sp,4
 80047f0:	2005883a 	mov	r2,r4
 80047f4:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 80047f8:	e0bfff03 	ldbu	r2,-4(fp)
 80047fc:	100690fa 	slli	r3,r2,3
 8004800:	008200b4 	movhi	r2,2050
 8004804:	10b16a04 	addi	r2,r2,-14936
 8004808:	1885883a 	add	r2,r3,r2
}
 800480c:	e037883a 	mov	sp,fp
 8004810:	df000017 	ldw	fp,0(sp)
 8004814:	dec00104 	addi	sp,sp,4
 8004818:	f800283a 	ret

0800481c <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 800481c:	defffc04 	addi	sp,sp,-16
 8004820:	df000315 	stw	fp,12(sp)
 8004824:	df000304 	addi	fp,sp,12
 8004828:	e13ffe15 	stw	r4,-8(fp)
 800482c:	2805883a 	mov	r2,r5
 8004830:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8004834:	e03ffd05 	stb	zero,-12(fp)
 8004838:	00000d06 	br	8004870 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 800483c:	e0bffd03 	ldbu	r2,-12(fp)
 8004840:	e0fffe17 	ldw	r3,-8(fp)
 8004844:	1887883a 	add	r3,r3,r2
 8004848:	e0bffd03 	ldbu	r2,-12(fp)
 800484c:	1085883a 	add	r2,r2,r2
 8004850:	1009883a 	mov	r4,r2
 8004854:	e0bffe17 	ldw	r2,-8(fp)
 8004858:	1105883a 	add	r2,r2,r4
 800485c:	10800003 	ldbu	r2,0(r2)
 8004860:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 8004864:	e0bffd03 	ldbu	r2,-12(fp)
 8004868:	10800044 	addi	r2,r2,1
 800486c:	e0bffd05 	stb	r2,-12(fp)
 8004870:	e0fffd03 	ldbu	r3,-12(fp)
 8004874:	e0bfff03 	ldbu	r2,-4(fp)
 8004878:	18bff036 	bltu	r3,r2,800483c <__alt_data_end+0xfc00483c>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 800487c:	e0bfff03 	ldbu	r2,-4(fp)
 8004880:	e0fffe17 	ldw	r3,-8(fp)
 8004884:	1885883a 	add	r2,r3,r2
 8004888:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 800488c:	e0bffe17 	ldw	r2,-8(fp)
}
 8004890:	e037883a 	mov	sp,fp
 8004894:	df000017 	ldw	fp,0(sp)
 8004898:	dec00104 	addi	sp,sp,4
 800489c:	f800283a 	ret

080048a0 <__divsi3>:
 80048a0:	20001b16 	blt	r4,zero,8004910 <__divsi3+0x70>
 80048a4:	000f883a 	mov	r7,zero
 80048a8:	28001616 	blt	r5,zero,8004904 <__divsi3+0x64>
 80048ac:	200d883a 	mov	r6,r4
 80048b0:	29001a2e 	bgeu	r5,r4,800491c <__divsi3+0x7c>
 80048b4:	00800804 	movi	r2,32
 80048b8:	00c00044 	movi	r3,1
 80048bc:	00000106 	br	80048c4 <__divsi3+0x24>
 80048c0:	10000d26 	beq	r2,zero,80048f8 <__divsi3+0x58>
 80048c4:	294b883a 	add	r5,r5,r5
 80048c8:	10bfffc4 	addi	r2,r2,-1
 80048cc:	18c7883a 	add	r3,r3,r3
 80048d0:	293ffb36 	bltu	r5,r4,80048c0 <__alt_data_end+0xfc0048c0>
 80048d4:	0005883a 	mov	r2,zero
 80048d8:	18000726 	beq	r3,zero,80048f8 <__divsi3+0x58>
 80048dc:	0005883a 	mov	r2,zero
 80048e0:	31400236 	bltu	r6,r5,80048ec <__divsi3+0x4c>
 80048e4:	314dc83a 	sub	r6,r6,r5
 80048e8:	10c4b03a 	or	r2,r2,r3
 80048ec:	1806d07a 	srli	r3,r3,1
 80048f0:	280ad07a 	srli	r5,r5,1
 80048f4:	183ffa1e 	bne	r3,zero,80048e0 <__alt_data_end+0xfc0048e0>
 80048f8:	38000126 	beq	r7,zero,8004900 <__divsi3+0x60>
 80048fc:	0085c83a 	sub	r2,zero,r2
 8004900:	f800283a 	ret
 8004904:	014bc83a 	sub	r5,zero,r5
 8004908:	39c0005c 	xori	r7,r7,1
 800490c:	003fe706 	br	80048ac <__alt_data_end+0xfc0048ac>
 8004910:	0109c83a 	sub	r4,zero,r4
 8004914:	01c00044 	movi	r7,1
 8004918:	003fe306 	br	80048a8 <__alt_data_end+0xfc0048a8>
 800491c:	00c00044 	movi	r3,1
 8004920:	003fee06 	br	80048dc <__alt_data_end+0xfc0048dc>

08004924 <__modsi3>:
 8004924:	20001716 	blt	r4,zero,8004984 <__modsi3+0x60>
 8004928:	000f883a 	mov	r7,zero
 800492c:	2005883a 	mov	r2,r4
 8004930:	28001216 	blt	r5,zero,800497c <__modsi3+0x58>
 8004934:	2900162e 	bgeu	r5,r4,8004990 <__modsi3+0x6c>
 8004938:	01800804 	movi	r6,32
 800493c:	00c00044 	movi	r3,1
 8004940:	00000106 	br	8004948 <__modsi3+0x24>
 8004944:	30000a26 	beq	r6,zero,8004970 <__modsi3+0x4c>
 8004948:	294b883a 	add	r5,r5,r5
 800494c:	31bfffc4 	addi	r6,r6,-1
 8004950:	18c7883a 	add	r3,r3,r3
 8004954:	293ffb36 	bltu	r5,r4,8004944 <__alt_data_end+0xfc004944>
 8004958:	18000526 	beq	r3,zero,8004970 <__modsi3+0x4c>
 800495c:	1806d07a 	srli	r3,r3,1
 8004960:	11400136 	bltu	r2,r5,8004968 <__modsi3+0x44>
 8004964:	1145c83a 	sub	r2,r2,r5
 8004968:	280ad07a 	srli	r5,r5,1
 800496c:	183ffb1e 	bne	r3,zero,800495c <__alt_data_end+0xfc00495c>
 8004970:	38000126 	beq	r7,zero,8004978 <__modsi3+0x54>
 8004974:	0085c83a 	sub	r2,zero,r2
 8004978:	f800283a 	ret
 800497c:	014bc83a 	sub	r5,zero,r5
 8004980:	003fec06 	br	8004934 <__alt_data_end+0xfc004934>
 8004984:	0109c83a 	sub	r4,zero,r4
 8004988:	01c00044 	movi	r7,1
 800498c:	003fe706 	br	800492c <__alt_data_end+0xfc00492c>
 8004990:	00c00044 	movi	r3,1
 8004994:	003ff106 	br	800495c <__alt_data_end+0xfc00495c>

08004998 <__udivsi3>:
 8004998:	200d883a 	mov	r6,r4
 800499c:	2900152e 	bgeu	r5,r4,80049f4 <__udivsi3+0x5c>
 80049a0:	28001416 	blt	r5,zero,80049f4 <__udivsi3+0x5c>
 80049a4:	00800804 	movi	r2,32
 80049a8:	00c00044 	movi	r3,1
 80049ac:	00000206 	br	80049b8 <__udivsi3+0x20>
 80049b0:	10000e26 	beq	r2,zero,80049ec <__udivsi3+0x54>
 80049b4:	28000516 	blt	r5,zero,80049cc <__udivsi3+0x34>
 80049b8:	294b883a 	add	r5,r5,r5
 80049bc:	10bfffc4 	addi	r2,r2,-1
 80049c0:	18c7883a 	add	r3,r3,r3
 80049c4:	293ffa36 	bltu	r5,r4,80049b0 <__alt_data_end+0xfc0049b0>
 80049c8:	18000826 	beq	r3,zero,80049ec <__udivsi3+0x54>
 80049cc:	0005883a 	mov	r2,zero
 80049d0:	31400236 	bltu	r6,r5,80049dc <__udivsi3+0x44>
 80049d4:	314dc83a 	sub	r6,r6,r5
 80049d8:	10c4b03a 	or	r2,r2,r3
 80049dc:	1806d07a 	srli	r3,r3,1
 80049e0:	280ad07a 	srli	r5,r5,1
 80049e4:	183ffa1e 	bne	r3,zero,80049d0 <__alt_data_end+0xfc0049d0>
 80049e8:	f800283a 	ret
 80049ec:	0005883a 	mov	r2,zero
 80049f0:	f800283a 	ret
 80049f4:	00c00044 	movi	r3,1
 80049f8:	003ff406 	br	80049cc <__alt_data_end+0xfc0049cc>

080049fc <__umodsi3>:
 80049fc:	2005883a 	mov	r2,r4
 8004a00:	2900122e 	bgeu	r5,r4,8004a4c <__umodsi3+0x50>
 8004a04:	28001116 	blt	r5,zero,8004a4c <__umodsi3+0x50>
 8004a08:	01800804 	movi	r6,32
 8004a0c:	00c00044 	movi	r3,1
 8004a10:	00000206 	br	8004a1c <__umodsi3+0x20>
 8004a14:	30000c26 	beq	r6,zero,8004a48 <__umodsi3+0x4c>
 8004a18:	28000516 	blt	r5,zero,8004a30 <__umodsi3+0x34>
 8004a1c:	294b883a 	add	r5,r5,r5
 8004a20:	31bfffc4 	addi	r6,r6,-1
 8004a24:	18c7883a 	add	r3,r3,r3
 8004a28:	293ffa36 	bltu	r5,r4,8004a14 <__alt_data_end+0xfc004a14>
 8004a2c:	18000626 	beq	r3,zero,8004a48 <__umodsi3+0x4c>
 8004a30:	1806d07a 	srli	r3,r3,1
 8004a34:	11400136 	bltu	r2,r5,8004a3c <__umodsi3+0x40>
 8004a38:	1145c83a 	sub	r2,r2,r5
 8004a3c:	280ad07a 	srli	r5,r5,1
 8004a40:	183ffb1e 	bne	r3,zero,8004a30 <__alt_data_end+0xfc004a30>
 8004a44:	f800283a 	ret
 8004a48:	f800283a 	ret
 8004a4c:	00c00044 	movi	r3,1
 8004a50:	003ff706 	br	8004a30 <__alt_data_end+0xfc004a30>

08004a54 <__mulsi3>:
 8004a54:	0005883a 	mov	r2,zero
 8004a58:	20000726 	beq	r4,zero,8004a78 <__mulsi3+0x24>
 8004a5c:	20c0004c 	andi	r3,r4,1
 8004a60:	2008d07a 	srli	r4,r4,1
 8004a64:	18000126 	beq	r3,zero,8004a6c <__mulsi3+0x18>
 8004a68:	1145883a 	add	r2,r2,r5
 8004a6c:	294b883a 	add	r5,r5,r5
 8004a70:	203ffa1e 	bne	r4,zero,8004a5c <__alt_data_end+0xfc004a5c>
 8004a74:	f800283a 	ret
 8004a78:	f800283a 	ret

08004a7c <_printf_r>:
 8004a7c:	defffd04 	addi	sp,sp,-12
 8004a80:	2805883a 	mov	r2,r5
 8004a84:	dfc00015 	stw	ra,0(sp)
 8004a88:	d9800115 	stw	r6,4(sp)
 8004a8c:	d9c00215 	stw	r7,8(sp)
 8004a90:	21400217 	ldw	r5,8(r4)
 8004a94:	d9c00104 	addi	r7,sp,4
 8004a98:	100d883a 	mov	r6,r2
 8004a9c:	80070500 	call	8007050 <___vfprintf_internal_r>
 8004aa0:	dfc00017 	ldw	ra,0(sp)
 8004aa4:	dec00304 	addi	sp,sp,12
 8004aa8:	f800283a 	ret

08004aac <printf>:
 8004aac:	defffc04 	addi	sp,sp,-16
 8004ab0:	dfc00015 	stw	ra,0(sp)
 8004ab4:	d9400115 	stw	r5,4(sp)
 8004ab8:	d9800215 	stw	r6,8(sp)
 8004abc:	d9c00315 	stw	r7,12(sp)
 8004ac0:	008200b4 	movhi	r2,2050
 8004ac4:	10a80004 	addi	r2,r2,-24576
 8004ac8:	10800017 	ldw	r2,0(r2)
 8004acc:	200b883a 	mov	r5,r4
 8004ad0:	d9800104 	addi	r6,sp,4
 8004ad4:	11000217 	ldw	r4,8(r2)
 8004ad8:	800932c0 	call	800932c <__vfprintf_internal>
 8004adc:	dfc00017 	ldw	ra,0(sp)
 8004ae0:	dec00404 	addi	sp,sp,16
 8004ae4:	f800283a 	ret

08004ae8 <_puts_r>:
 8004ae8:	defff604 	addi	sp,sp,-40
 8004aec:	dc000715 	stw	r16,28(sp)
 8004af0:	2021883a 	mov	r16,r4
 8004af4:	2809883a 	mov	r4,r5
 8004af8:	dc400815 	stw	r17,32(sp)
 8004afc:	dfc00915 	stw	ra,36(sp)
 8004b00:	2823883a 	mov	r17,r5
 8004b04:	8004cfc0 	call	8004cfc <strlen>
 8004b08:	10c00044 	addi	r3,r2,1
 8004b0c:	d8800115 	stw	r2,4(sp)
 8004b10:	00820074 	movhi	r2,2049
 8004b14:	109fdf04 	addi	r2,r2,32636
 8004b18:	d8800215 	stw	r2,8(sp)
 8004b1c:	00800044 	movi	r2,1
 8004b20:	d8800315 	stw	r2,12(sp)
 8004b24:	00800084 	movi	r2,2
 8004b28:	dc400015 	stw	r17,0(sp)
 8004b2c:	d8c00615 	stw	r3,24(sp)
 8004b30:	dec00415 	stw	sp,16(sp)
 8004b34:	d8800515 	stw	r2,20(sp)
 8004b38:	80000226 	beq	r16,zero,8004b44 <_puts_r+0x5c>
 8004b3c:	80800e17 	ldw	r2,56(r16)
 8004b40:	10001426 	beq	r2,zero,8004b94 <_puts_r+0xac>
 8004b44:	81400217 	ldw	r5,8(r16)
 8004b48:	2880030b 	ldhu	r2,12(r5)
 8004b4c:	10c8000c 	andi	r3,r2,8192
 8004b50:	1800061e 	bne	r3,zero,8004b6c <_puts_r+0x84>
 8004b54:	29001917 	ldw	r4,100(r5)
 8004b58:	00f7ffc4 	movi	r3,-8193
 8004b5c:	10880014 	ori	r2,r2,8192
 8004b60:	20c6703a 	and	r3,r4,r3
 8004b64:	2880030d 	sth	r2,12(r5)
 8004b68:	28c01915 	stw	r3,100(r5)
 8004b6c:	d9800404 	addi	r6,sp,16
 8004b70:	8009883a 	mov	r4,r16
 8004b74:	800b8940 	call	800b894 <__sfvwrite_r>
 8004b78:	1000091e 	bne	r2,zero,8004ba0 <_puts_r+0xb8>
 8004b7c:	00800284 	movi	r2,10
 8004b80:	dfc00917 	ldw	ra,36(sp)
 8004b84:	dc400817 	ldw	r17,32(sp)
 8004b88:	dc000717 	ldw	r16,28(sp)
 8004b8c:	dec00a04 	addi	sp,sp,40
 8004b90:	f800283a 	ret
 8004b94:	8009883a 	mov	r4,r16
 8004b98:	800b4100 	call	800b410 <__sinit>
 8004b9c:	003fe906 	br	8004b44 <__alt_data_end+0xfc004b44>
 8004ba0:	00bfffc4 	movi	r2,-1
 8004ba4:	003ff606 	br	8004b80 <__alt_data_end+0xfc004b80>

08004ba8 <puts>:
 8004ba8:	008200b4 	movhi	r2,2050
 8004bac:	10a80004 	addi	r2,r2,-24576
 8004bb0:	200b883a 	mov	r5,r4
 8004bb4:	11000017 	ldw	r4,0(r2)
 8004bb8:	8004ae81 	jmpi	8004ae8 <_puts_r>

08004bbc <srand>:
 8004bbc:	008200b4 	movhi	r2,2050
 8004bc0:	10a80004 	addi	r2,r2,-24576
 8004bc4:	10800017 	ldw	r2,0(r2)
 8004bc8:	11002915 	stw	r4,164(r2)
 8004bcc:	10002a15 	stw	zero,168(r2)
 8004bd0:	f800283a 	ret

08004bd4 <rand>:
 8004bd4:	008200b4 	movhi	r2,2050
 8004bd8:	defffe04 	addi	sp,sp,-8
 8004bdc:	10a80004 	addi	r2,r2,-24576
 8004be0:	dc000015 	stw	r16,0(sp)
 8004be4:	14000017 	ldw	r16,0(r2)
 8004be8:	dfc00115 	stw	ra,4(sp)
 8004bec:	01932574 	movhi	r6,19605
 8004bf0:	81002917 	ldw	r4,164(r16)
 8004bf4:	81402a17 	ldw	r5,168(r16)
 8004bf8:	01d614b4 	movhi	r7,22610
 8004bfc:	319fcb44 	addi	r6,r6,32557
 8004c00:	39fd0b44 	addi	r7,r7,-3027
 8004c04:	8011ce80 	call	8011ce8 <__muldi3>
 8004c08:	11000044 	addi	r4,r2,1
 8004c0c:	2085803a 	cmpltu	r2,r4,r2
 8004c10:	10c7883a 	add	r3,r2,r3
 8004c14:	00a00034 	movhi	r2,32768
 8004c18:	10bfffc4 	addi	r2,r2,-1
 8004c1c:	1884703a 	and	r2,r3,r2
 8004c20:	81002915 	stw	r4,164(r16)
 8004c24:	80c02a15 	stw	r3,168(r16)
 8004c28:	dfc00117 	ldw	ra,4(sp)
 8004c2c:	dc000017 	ldw	r16,0(sp)
 8004c30:	dec00204 	addi	sp,sp,8
 8004c34:	f800283a 	ret

08004c38 <_sprintf_r>:
 8004c38:	deffe404 	addi	sp,sp,-112
 8004c3c:	2807883a 	mov	r3,r5
 8004c40:	dfc01a15 	stw	ra,104(sp)
 8004c44:	d9c01b15 	stw	r7,108(sp)
 8004c48:	00a00034 	movhi	r2,32768
 8004c4c:	10bfffc4 	addi	r2,r2,-1
 8004c50:	02008204 	movi	r8,520
 8004c54:	d8800215 	stw	r2,8(sp)
 8004c58:	d8800515 	stw	r2,20(sp)
 8004c5c:	d9c01b04 	addi	r7,sp,108
 8004c60:	d80b883a 	mov	r5,sp
 8004c64:	00bfffc4 	movi	r2,-1
 8004c68:	d8c00015 	stw	r3,0(sp)
 8004c6c:	d8c00415 	stw	r3,16(sp)
 8004c70:	da00030d 	sth	r8,12(sp)
 8004c74:	d880038d 	sth	r2,14(sp)
 8004c78:	8004d940 	call	8004d94 <___svfprintf_internal_r>
 8004c7c:	d8c00017 	ldw	r3,0(sp)
 8004c80:	18000005 	stb	zero,0(r3)
 8004c84:	dfc01a17 	ldw	ra,104(sp)
 8004c88:	dec01c04 	addi	sp,sp,112
 8004c8c:	f800283a 	ret

08004c90 <sprintf>:
 8004c90:	deffe304 	addi	sp,sp,-116
 8004c94:	2007883a 	mov	r3,r4
 8004c98:	dfc01a15 	stw	ra,104(sp)
 8004c9c:	d9801b15 	stw	r6,108(sp)
 8004ca0:	d9c01c15 	stw	r7,112(sp)
 8004ca4:	010200b4 	movhi	r4,2050
 8004ca8:	21280004 	addi	r4,r4,-24576
 8004cac:	21000017 	ldw	r4,0(r4)
 8004cb0:	00a00034 	movhi	r2,32768
 8004cb4:	10bfffc4 	addi	r2,r2,-1
 8004cb8:	280d883a 	mov	r6,r5
 8004cbc:	02008204 	movi	r8,520
 8004cc0:	d8800215 	stw	r2,8(sp)
 8004cc4:	d8800515 	stw	r2,20(sp)
 8004cc8:	d9c01b04 	addi	r7,sp,108
 8004ccc:	d80b883a 	mov	r5,sp
 8004cd0:	00bfffc4 	movi	r2,-1
 8004cd4:	d8c00015 	stw	r3,0(sp)
 8004cd8:	d8c00415 	stw	r3,16(sp)
 8004cdc:	da00030d 	sth	r8,12(sp)
 8004ce0:	d880038d 	sth	r2,14(sp)
 8004ce4:	8004d940 	call	8004d94 <___svfprintf_internal_r>
 8004ce8:	d8c00017 	ldw	r3,0(sp)
 8004cec:	18000005 	stb	zero,0(r3)
 8004cf0:	dfc01a17 	ldw	ra,104(sp)
 8004cf4:	dec01d04 	addi	sp,sp,116
 8004cf8:	f800283a 	ret

08004cfc <strlen>:
 8004cfc:	208000cc 	andi	r2,r4,3
 8004d00:	10002026 	beq	r2,zero,8004d84 <strlen+0x88>
 8004d04:	20800007 	ldb	r2,0(r4)
 8004d08:	10002026 	beq	r2,zero,8004d8c <strlen+0x90>
 8004d0c:	2005883a 	mov	r2,r4
 8004d10:	00000206 	br	8004d1c <strlen+0x20>
 8004d14:	10c00007 	ldb	r3,0(r2)
 8004d18:	18001826 	beq	r3,zero,8004d7c <strlen+0x80>
 8004d1c:	10800044 	addi	r2,r2,1
 8004d20:	10c000cc 	andi	r3,r2,3
 8004d24:	183ffb1e 	bne	r3,zero,8004d14 <__alt_data_end+0xfc004d14>
 8004d28:	10c00017 	ldw	r3,0(r2)
 8004d2c:	01ffbff4 	movhi	r7,65279
 8004d30:	39ffbfc4 	addi	r7,r7,-257
 8004d34:	00ca303a 	nor	r5,zero,r3
 8004d38:	01a02074 	movhi	r6,32897
 8004d3c:	19c7883a 	add	r3,r3,r7
 8004d40:	31a02004 	addi	r6,r6,-32640
 8004d44:	1946703a 	and	r3,r3,r5
 8004d48:	1986703a 	and	r3,r3,r6
 8004d4c:	1800091e 	bne	r3,zero,8004d74 <strlen+0x78>
 8004d50:	10800104 	addi	r2,r2,4
 8004d54:	10c00017 	ldw	r3,0(r2)
 8004d58:	19cb883a 	add	r5,r3,r7
 8004d5c:	00c6303a 	nor	r3,zero,r3
 8004d60:	28c6703a 	and	r3,r5,r3
 8004d64:	1986703a 	and	r3,r3,r6
 8004d68:	183ff926 	beq	r3,zero,8004d50 <__alt_data_end+0xfc004d50>
 8004d6c:	00000106 	br	8004d74 <strlen+0x78>
 8004d70:	10800044 	addi	r2,r2,1
 8004d74:	10c00007 	ldb	r3,0(r2)
 8004d78:	183ffd1e 	bne	r3,zero,8004d70 <__alt_data_end+0xfc004d70>
 8004d7c:	1105c83a 	sub	r2,r2,r4
 8004d80:	f800283a 	ret
 8004d84:	2005883a 	mov	r2,r4
 8004d88:	003fe706 	br	8004d28 <__alt_data_end+0xfc004d28>
 8004d8c:	0005883a 	mov	r2,zero
 8004d90:	f800283a 	ret

08004d94 <___svfprintf_internal_r>:
 8004d94:	deffb704 	addi	sp,sp,-292
 8004d98:	dfc04815 	stw	ra,288(sp)
 8004d9c:	ddc04615 	stw	r23,280(sp)
 8004da0:	d9402d15 	stw	r5,180(sp)
 8004da4:	d9003915 	stw	r4,228(sp)
 8004da8:	302f883a 	mov	r23,r6
 8004dac:	d9c02e15 	stw	r7,184(sp)
 8004db0:	df004715 	stw	fp,284(sp)
 8004db4:	dd804515 	stw	r22,276(sp)
 8004db8:	dd404415 	stw	r21,272(sp)
 8004dbc:	dd004315 	stw	r20,268(sp)
 8004dc0:	dcc04215 	stw	r19,264(sp)
 8004dc4:	dc804115 	stw	r18,260(sp)
 8004dc8:	dc404015 	stw	r17,256(sp)
 8004dcc:	dc003f15 	stw	r16,252(sp)
 8004dd0:	800bf900 	call	800bf90 <_localeconv_r>
 8004dd4:	10800017 	ldw	r2,0(r2)
 8004dd8:	1009883a 	mov	r4,r2
 8004ddc:	d8803415 	stw	r2,208(sp)
 8004de0:	8004cfc0 	call	8004cfc <strlen>
 8004de4:	d8c02d17 	ldw	r3,180(sp)
 8004de8:	d8803815 	stw	r2,224(sp)
 8004dec:	1880030b 	ldhu	r2,12(r3)
 8004df0:	1080200c 	andi	r2,r2,128
 8004df4:	10000226 	beq	r2,zero,8004e00 <___svfprintf_internal_r+0x6c>
 8004df8:	18800417 	ldw	r2,16(r3)
 8004dfc:	1006b126 	beq	r2,zero,80068c4 <___svfprintf_internal_r+0x1b30>
 8004e00:	dcc03917 	ldw	r19,228(sp)
 8004e04:	d8c00404 	addi	r3,sp,16
 8004e08:	05420074 	movhi	r21,2049
 8004e0c:	d9001e04 	addi	r4,sp,120
 8004e10:	ad5ff084 	addi	r21,r21,32706
 8004e14:	d8c01e15 	stw	r3,120(sp)
 8004e18:	d8002015 	stw	zero,128(sp)
 8004e1c:	d8001f15 	stw	zero,124(sp)
 8004e20:	d8003315 	stw	zero,204(sp)
 8004e24:	d8003615 	stw	zero,216(sp)
 8004e28:	d8003715 	stw	zero,220(sp)
 8004e2c:	1811883a 	mov	r8,r3
 8004e30:	d8003a15 	stw	zero,232(sp)
 8004e34:	d8003b15 	stw	zero,236(sp)
 8004e38:	d8002f15 	stw	zero,188(sp)
 8004e3c:	d9002815 	stw	r4,160(sp)
 8004e40:	b8800007 	ldb	r2,0(r23)
 8004e44:	10027726 	beq	r2,zero,8005824 <___svfprintf_internal_r+0xa90>
 8004e48:	00c00944 	movi	r3,37
 8004e4c:	b823883a 	mov	r17,r23
 8004e50:	10c0021e 	bne	r2,r3,8004e5c <___svfprintf_internal_r+0xc8>
 8004e54:	00001406 	br	8004ea8 <___svfprintf_internal_r+0x114>
 8004e58:	10c00326 	beq	r2,r3,8004e68 <___svfprintf_internal_r+0xd4>
 8004e5c:	8c400044 	addi	r17,r17,1
 8004e60:	88800007 	ldb	r2,0(r17)
 8004e64:	103ffc1e 	bne	r2,zero,8004e58 <__alt_data_end+0xfc004e58>
 8004e68:	8de1c83a 	sub	r16,r17,r23
 8004e6c:	80000e26 	beq	r16,zero,8004ea8 <___svfprintf_internal_r+0x114>
 8004e70:	d8c02017 	ldw	r3,128(sp)
 8004e74:	d8801f17 	ldw	r2,124(sp)
 8004e78:	45c00015 	stw	r23,0(r8)
 8004e7c:	1c07883a 	add	r3,r3,r16
 8004e80:	10800044 	addi	r2,r2,1
 8004e84:	d8c02015 	stw	r3,128(sp)
 8004e88:	44000115 	stw	r16,4(r8)
 8004e8c:	d8801f15 	stw	r2,124(sp)
 8004e90:	00c001c4 	movi	r3,7
 8004e94:	18809916 	blt	r3,r2,80050fc <___svfprintf_internal_r+0x368>
 8004e98:	42000204 	addi	r8,r8,8
 8004e9c:	d9402f17 	ldw	r5,188(sp)
 8004ea0:	2c0b883a 	add	r5,r5,r16
 8004ea4:	d9402f15 	stw	r5,188(sp)
 8004ea8:	88800007 	ldb	r2,0(r17)
 8004eac:	10009a26 	beq	r2,zero,8005118 <___svfprintf_internal_r+0x384>
 8004eb0:	8dc00044 	addi	r23,r17,1
 8004eb4:	8c400047 	ldb	r17,1(r17)
 8004eb8:	0021883a 	mov	r16,zero
 8004ebc:	00bfffc4 	movi	r2,-1
 8004ec0:	0025883a 	mov	r18,zero
 8004ec4:	dc002905 	stb	r16,164(sp)
 8004ec8:	d8002785 	stb	zero,158(sp)
 8004ecc:	d8002b05 	stb	zero,172(sp)
 8004ed0:	d8802a15 	stw	r2,168(sp)
 8004ed4:	d8003115 	stw	zero,196(sp)
 8004ed8:	05001604 	movi	r20,88
 8004edc:	05800244 	movi	r22,9
 8004ee0:	4039883a 	mov	fp,r8
 8004ee4:	9021883a 	mov	r16,r18
 8004ee8:	bdc00044 	addi	r23,r23,1
 8004eec:	88bff804 	addi	r2,r17,-32
 8004ef0:	a0831e36 	bltu	r20,r2,8005b6c <___svfprintf_internal_r+0xdd8>
 8004ef4:	100490ba 	slli	r2,r2,2
 8004ef8:	00c20034 	movhi	r3,2048
 8004efc:	18d3c304 	addi	r3,r3,20236
 8004f00:	10c5883a 	add	r2,r2,r3
 8004f04:	10800017 	ldw	r2,0(r2)
 8004f08:	1000683a 	jmp	r2
 8004f0c:	08005ab4 	orhi	zero,at,362
 8004f10:	08005b6c 	andhi	zero,at,365
 8004f14:	08005b6c 	andhi	zero,at,365
 8004f18:	08005aa8 	cmpgeui	zero,at,362
 8004f1c:	08005b6c 	andhi	zero,at,365
 8004f20:	08005b6c 	andhi	zero,at,365
 8004f24:	08005b6c 	andhi	zero,at,365
 8004f28:	08005b6c 	andhi	zero,at,365
 8004f2c:	08005b6c 	andhi	zero,at,365
 8004f30:	08005b6c 	andhi	zero,at,365
 8004f34:	08005174 	orhi	zero,at,325
 8004f38:	080059b8 	rdprs	zero,at,358
 8004f3c:	08005b6c 	andhi	zero,at,365
 8004f40:	08005080 	call	800508 <__alt_mem_onchip_memory2_0+0x800508>
 8004f44:	08005198 	cmpnei	zero,at,326
 8004f48:	08005b6c 	andhi	zero,at,365
 8004f4c:	08005224 	muli	zero,at,328
 8004f50:	080051e8 	cmpgeui	zero,at,327
 8004f54:	080051e8 	cmpgeui	zero,at,327
 8004f58:	080051e8 	cmpgeui	zero,at,327
 8004f5c:	080051e8 	cmpgeui	zero,at,327
 8004f60:	080051e8 	cmpgeui	zero,at,327
 8004f64:	080051e8 	cmpgeui	zero,at,327
 8004f68:	080051e8 	cmpgeui	zero,at,327
 8004f6c:	080051e8 	cmpgeui	zero,at,327
 8004f70:	080051e8 	cmpgeui	zero,at,327
 8004f74:	08005b6c 	andhi	zero,at,365
 8004f78:	08005b6c 	andhi	zero,at,365
 8004f7c:	08005b6c 	andhi	zero,at,365
 8004f80:	08005b6c 	andhi	zero,at,365
 8004f84:	08005b6c 	andhi	zero,at,365
 8004f88:	08005b6c 	andhi	zero,at,365
 8004f8c:	08005b6c 	andhi	zero,at,365
 8004f90:	08005b6c 	andhi	zero,at,365
 8004f94:	08005b6c 	andhi	zero,at,365
 8004f98:	08005b6c 	andhi	zero,at,365
 8004f9c:	080052e8 	cmpgeui	zero,at,331
 8004fa0:	08005230 	cmpltui	zero,at,328
 8004fa4:	08005b6c 	andhi	zero,at,365
 8004fa8:	08005230 	cmpltui	zero,at,328
 8004fac:	08005b6c 	andhi	zero,at,365
 8004fb0:	08005b6c 	andhi	zero,at,365
 8004fb4:	08005b6c 	andhi	zero,at,365
 8004fb8:	08005b6c 	andhi	zero,at,365
 8004fbc:	080052dc 	xori	zero,at,331
 8004fc0:	08005b6c 	andhi	zero,at,365
 8004fc4:	08005b6c 	andhi	zero,at,365
 8004fc8:	080053b0 	cmpltui	zero,at,334
 8004fcc:	08005b6c 	andhi	zero,at,365
 8004fd0:	08005b6c 	andhi	zero,at,365
 8004fd4:	08005b6c 	andhi	zero,at,365
 8004fd8:	08005b6c 	andhi	zero,at,365
 8004fdc:	08005b6c 	andhi	zero,at,365
 8004fe0:	0800582c 	andhi	zero,at,352
 8004fe4:	08005b6c 	andhi	zero,at,365
 8004fe8:	08005b6c 	andhi	zero,at,365
 8004fec:	08005898 	cmpnei	zero,at,354
 8004ff0:	08005b6c 	andhi	zero,at,365
 8004ff4:	08005b6c 	andhi	zero,at,365
 8004ff8:	08005b6c 	andhi	zero,at,365
 8004ffc:	08005b6c 	andhi	zero,at,365
 8005000:	08005b6c 	andhi	zero,at,365
 8005004:	08005b6c 	andhi	zero,at,365
 8005008:	08005b6c 	andhi	zero,at,365
 800500c:	08005b6c 	andhi	zero,at,365
 8005010:	08005b6c 	andhi	zero,at,365
 8005014:	08005b6c 	andhi	zero,at,365
 8005018:	08005954 	ori	zero,at,357
 800501c:	08005ad4 	ori	zero,at,363
 8005020:	08005230 	cmpltui	zero,at,328
 8005024:	08005230 	cmpltui	zero,at,328
 8005028:	08005230 	cmpltui	zero,at,328
 800502c:	08005b48 	cmpgei	zero,at,365
 8005030:	08005ad4 	ori	zero,at,363
 8005034:	08005b6c 	andhi	zero,at,365
 8005038:	08005b6c 	andhi	zero,at,365
 800503c:	08005af4 	orhi	zero,at,363
 8005040:	08005b6c 	andhi	zero,at,365
 8005044:	08005b08 	cmpgei	zero,at,364
 8005048:	08005998 	cmpnei	zero,at,358
 800504c:	0800508c 	andi	zero,at,322
 8005050:	080059d0 	cmplti	zero,at,359
 8005054:	08005b6c 	andhi	zero,at,365
 8005058:	080059dc 	xori	zero,at,359
 800505c:	08005b6c 	andhi	zero,at,365
 8005060:	08005a40 	call	8005a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 8005064:	08005b6c 	andhi	zero,at,365
 8005068:	08005b6c 	andhi	zero,at,365
 800506c:	08005a60 	cmpeqi	zero,at,361
 8005070:	d8c03117 	ldw	r3,196(sp)
 8005074:	d8802e15 	stw	r2,184(sp)
 8005078:	00c7c83a 	sub	r3,zero,r3
 800507c:	d8c03115 	stw	r3,196(sp)
 8005080:	84000114 	ori	r16,r16,4
 8005084:	bc400007 	ldb	r17,0(r23)
 8005088:	003f9706 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 800508c:	00800c04 	movi	r2,48
 8005090:	d8802705 	stb	r2,156(sp)
 8005094:	00801e04 	movi	r2,120
 8005098:	d8802745 	stb	r2,157(sp)
 800509c:	d9002a17 	ldw	r4,168(sp)
 80050a0:	d8802e17 	ldw	r2,184(sp)
 80050a4:	d8002785 	stb	zero,158(sp)
 80050a8:	e011883a 	mov	r8,fp
 80050ac:	10c00104 	addi	r3,r2,4
 80050b0:	15000017 	ldw	r20,0(r2)
 80050b4:	002d883a 	mov	r22,zero
 80050b8:	80800094 	ori	r2,r16,2
 80050bc:	2002b616 	blt	r4,zero,8005b98 <___svfprintf_internal_r+0xe04>
 80050c0:	00bfdfc4 	movi	r2,-129
 80050c4:	80a4703a 	and	r18,r16,r2
 80050c8:	d8c02e15 	stw	r3,184(sp)
 80050cc:	94800094 	ori	r18,r18,2
 80050d0:	a002a01e 	bne	r20,zero,8005b54 <___svfprintf_internal_r+0xdc0>
 80050d4:	01420074 	movhi	r5,2049
 80050d8:	295fe904 	addi	r5,r5,32676
 80050dc:	d9403a15 	stw	r5,232(sp)
 80050e0:	04401e04 	movi	r17,120
 80050e4:	d8c02a17 	ldw	r3,168(sp)
 80050e8:	0039883a 	mov	fp,zero
 80050ec:	1801e626 	beq	r3,zero,8005888 <___svfprintf_internal_r+0xaf4>
 80050f0:	0029883a 	mov	r20,zero
 80050f4:	002d883a 	mov	r22,zero
 80050f8:	00020506 	br	8005910 <___svfprintf_internal_r+0xb7c>
 80050fc:	d9402d17 	ldw	r5,180(sp)
 8005100:	d9801e04 	addi	r6,sp,120
 8005104:	9809883a 	mov	r4,r19
 8005108:	800e7340 	call	800e734 <__ssprint_r>
 800510c:	1000081e 	bne	r2,zero,8005130 <___svfprintf_internal_r+0x39c>
 8005110:	da000404 	addi	r8,sp,16
 8005114:	003f6106 	br	8004e9c <__alt_data_end+0xfc004e9c>
 8005118:	d8802017 	ldw	r2,128(sp)
 800511c:	10000426 	beq	r2,zero,8005130 <___svfprintf_internal_r+0x39c>
 8005120:	d9402d17 	ldw	r5,180(sp)
 8005124:	d9003917 	ldw	r4,228(sp)
 8005128:	d9801e04 	addi	r6,sp,120
 800512c:	800e7340 	call	800e734 <__ssprint_r>
 8005130:	d8802d17 	ldw	r2,180(sp)
 8005134:	10c0030b 	ldhu	r3,12(r2)
 8005138:	d8802f17 	ldw	r2,188(sp)
 800513c:	18c0100c 	andi	r3,r3,64
 8005140:	1806251e 	bne	r3,zero,80069d8 <___svfprintf_internal_r+0x1c44>
 8005144:	dfc04817 	ldw	ra,288(sp)
 8005148:	df004717 	ldw	fp,284(sp)
 800514c:	ddc04617 	ldw	r23,280(sp)
 8005150:	dd804517 	ldw	r22,276(sp)
 8005154:	dd404417 	ldw	r21,272(sp)
 8005158:	dd004317 	ldw	r20,268(sp)
 800515c:	dcc04217 	ldw	r19,264(sp)
 8005160:	dc804117 	ldw	r18,260(sp)
 8005164:	dc404017 	ldw	r17,256(sp)
 8005168:	dc003f17 	ldw	r16,252(sp)
 800516c:	dec04904 	addi	sp,sp,292
 8005170:	f800283a 	ret
 8005174:	d9002e17 	ldw	r4,184(sp)
 8005178:	d9402e17 	ldw	r5,184(sp)
 800517c:	21000017 	ldw	r4,0(r4)
 8005180:	28800104 	addi	r2,r5,4
 8005184:	d9003115 	stw	r4,196(sp)
 8005188:	203fb916 	blt	r4,zero,8005070 <__alt_data_end+0xfc005070>
 800518c:	d8802e15 	stw	r2,184(sp)
 8005190:	bc400007 	ldb	r17,0(r23)
 8005194:	003f5406 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005198:	bc400007 	ldb	r17,0(r23)
 800519c:	01000a84 	movi	r4,42
 80051a0:	b8c00044 	addi	r3,r23,1
 80051a4:	89076926 	beq	r17,r4,8006f4c <___svfprintf_internal_r+0x21b8>
 80051a8:	8cbff404 	addi	r18,r17,-48
 80051ac:	b486b936 	bltu	r22,r18,8006c94 <___svfprintf_internal_r+0x1f00>
 80051b0:	0009883a 	mov	r4,zero
 80051b4:	1823883a 	mov	r17,r3
 80051b8:	01400284 	movi	r5,10
 80051bc:	8004a540 	call	8004a54 <__mulsi3>
 80051c0:	88c00007 	ldb	r3,0(r17)
 80051c4:	1489883a 	add	r4,r2,r18
 80051c8:	8dc00044 	addi	r23,r17,1
 80051cc:	1cbff404 	addi	r18,r3,-48
 80051d0:	b823883a 	mov	r17,r23
 80051d4:	b4bff82e 	bgeu	r22,r18,80051b8 <__alt_data_end+0xfc0051b8>
 80051d8:	1823883a 	mov	r17,r3
 80051dc:	20060416 	blt	r4,zero,80069f0 <___svfprintf_internal_r+0x1c5c>
 80051e0:	d9002a15 	stw	r4,168(sp)
 80051e4:	003f4106 	br	8004eec <__alt_data_end+0xfc004eec>
 80051e8:	8cbff404 	addi	r18,r17,-48
 80051ec:	d8003115 	stw	zero,196(sp)
 80051f0:	0009883a 	mov	r4,zero
 80051f4:	b823883a 	mov	r17,r23
 80051f8:	01400284 	movi	r5,10
 80051fc:	8004a540 	call	8004a54 <__mulsi3>
 8005200:	88c00007 	ldb	r3,0(r17)
 8005204:	9089883a 	add	r4,r18,r2
 8005208:	bdc00044 	addi	r23,r23,1
 800520c:	1cbff404 	addi	r18,r3,-48
 8005210:	b823883a 	mov	r17,r23
 8005214:	b4bff82e 	bgeu	r22,r18,80051f8 <__alt_data_end+0xfc0051f8>
 8005218:	1823883a 	mov	r17,r3
 800521c:	d9003115 	stw	r4,196(sp)
 8005220:	003f3206 	br	8004eec <__alt_data_end+0xfc004eec>
 8005224:	84002014 	ori	r16,r16,128
 8005228:	bc400007 	ldb	r17,0(r23)
 800522c:	003f2e06 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005230:	8025883a 	mov	r18,r16
 8005234:	dc002903 	ldbu	r16,164(sp)
 8005238:	e011883a 	mov	r8,fp
 800523c:	84003fcc 	andi	r16,r16,255
 8005240:	8007721e 	bne	r16,zero,800700c <___svfprintf_internal_r+0x2278>
 8005244:	9080020c 	andi	r2,r18,8
 8005248:	1004a526 	beq	r2,zero,80064e0 <___svfprintf_internal_r+0x174c>
 800524c:	d9002e17 	ldw	r4,184(sp)
 8005250:	d9402e17 	ldw	r5,184(sp)
 8005254:	d8802e17 	ldw	r2,184(sp)
 8005258:	21000017 	ldw	r4,0(r4)
 800525c:	29400117 	ldw	r5,4(r5)
 8005260:	10800204 	addi	r2,r2,8
 8005264:	d9003615 	stw	r4,216(sp)
 8005268:	d9403715 	stw	r5,220(sp)
 800526c:	d8802e15 	stw	r2,184(sp)
 8005270:	d9003617 	ldw	r4,216(sp)
 8005274:	d9403717 	ldw	r5,220(sp)
 8005278:	da003e15 	stw	r8,248(sp)
 800527c:	04000044 	movi	r16,1
 8005280:	800e4540 	call	800e454 <__fpclassifyd>
 8005284:	da003e17 	ldw	r8,248(sp)
 8005288:	1404731e 	bne	r2,r16,8006458 <___svfprintf_internal_r+0x16c4>
 800528c:	d9003617 	ldw	r4,216(sp)
 8005290:	d9403717 	ldw	r5,220(sp)
 8005294:	000d883a 	mov	r6,zero
 8005298:	000f883a 	mov	r7,zero
 800529c:	8013d940 	call	8013d94 <__ledf2>
 80052a0:	da003e17 	ldw	r8,248(sp)
 80052a4:	10061b16 	blt	r2,zero,8006b14 <___svfprintf_internal_r+0x1d80>
 80052a8:	df002783 	ldbu	fp,158(sp)
 80052ac:	008011c4 	movi	r2,71
 80052b0:	1445810e 	bge	r2,r17,80068b8 <___svfprintf_internal_r+0x1b24>
 80052b4:	04020074 	movhi	r16,2049
 80052b8:	841fe104 	addi	r16,r16,32644
 80052bc:	00c000c4 	movi	r3,3
 80052c0:	00bfdfc4 	movi	r2,-129
 80052c4:	d8c02915 	stw	r3,164(sp)
 80052c8:	90a4703a 	and	r18,r18,r2
 80052cc:	d8c02b15 	stw	r3,172(sp)
 80052d0:	d8002a15 	stw	zero,168(sp)
 80052d4:	d8003215 	stw	zero,200(sp)
 80052d8:	00006c06 	br	800548c <___svfprintf_internal_r+0x6f8>
 80052dc:	84000214 	ori	r16,r16,8
 80052e0:	bc400007 	ldb	r17,0(r23)
 80052e4:	003f0006 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 80052e8:	8025883a 	mov	r18,r16
 80052ec:	dc002903 	ldbu	r16,164(sp)
 80052f0:	e011883a 	mov	r8,fp
 80052f4:	84003fcc 	andi	r16,r16,255
 80052f8:	80073f1e 	bne	r16,zero,8006ff8 <___svfprintf_internal_r+0x2264>
 80052fc:	94800414 	ori	r18,r18,16
 8005300:	9080080c 	andi	r2,r18,32
 8005304:	1003bb26 	beq	r2,zero,80061f4 <___svfprintf_internal_r+0x1460>
 8005308:	d9002e17 	ldw	r4,184(sp)
 800530c:	20800117 	ldw	r2,4(r4)
 8005310:	25000017 	ldw	r20,0(r4)
 8005314:	21000204 	addi	r4,r4,8
 8005318:	d9002e15 	stw	r4,184(sp)
 800531c:	102d883a 	mov	r22,r2
 8005320:	1003bd16 	blt	r2,zero,8006218 <___svfprintf_internal_r+0x1484>
 8005324:	d9002a17 	ldw	r4,168(sp)
 8005328:	df002783 	ldbu	fp,158(sp)
 800532c:	2003d016 	blt	r4,zero,8006270 <___svfprintf_internal_r+0x14dc>
 8005330:	00ffdfc4 	movi	r3,-129
 8005334:	a584b03a 	or	r2,r20,r22
 8005338:	90e4703a 	and	r18,r18,r3
 800533c:	10015026 	beq	r2,zero,8005880 <___svfprintf_internal_r+0xaec>
 8005340:	b0037026 	beq	r22,zero,8006104 <___svfprintf_internal_r+0x1370>
 8005344:	dc402915 	stw	r17,164(sp)
 8005348:	dc001e04 	addi	r16,sp,120
 800534c:	b023883a 	mov	r17,r22
 8005350:	402d883a 	mov	r22,r8
 8005354:	a009883a 	mov	r4,r20
 8005358:	880b883a 	mov	r5,r17
 800535c:	01800284 	movi	r6,10
 8005360:	000f883a 	mov	r7,zero
 8005364:	80123f00 	call	80123f0 <__umoddi3>
 8005368:	10800c04 	addi	r2,r2,48
 800536c:	843fffc4 	addi	r16,r16,-1
 8005370:	a009883a 	mov	r4,r20
 8005374:	880b883a 	mov	r5,r17
 8005378:	80800005 	stb	r2,0(r16)
 800537c:	01800284 	movi	r6,10
 8005380:	000f883a 	mov	r7,zero
 8005384:	8011df40 	call	8011df4 <__udivdi3>
 8005388:	1029883a 	mov	r20,r2
 800538c:	10c4b03a 	or	r2,r2,r3
 8005390:	1823883a 	mov	r17,r3
 8005394:	103fef1e 	bne	r2,zero,8005354 <__alt_data_end+0xfc005354>
 8005398:	d8c02817 	ldw	r3,160(sp)
 800539c:	dc402917 	ldw	r17,164(sp)
 80053a0:	b011883a 	mov	r8,r22
 80053a4:	1c07c83a 	sub	r3,r3,r16
 80053a8:	d8c02b15 	stw	r3,172(sp)
 80053ac:	00003106 	br	8005474 <___svfprintf_internal_r+0x6e0>
 80053b0:	8025883a 	mov	r18,r16
 80053b4:	dc002903 	ldbu	r16,164(sp)
 80053b8:	e011883a 	mov	r8,fp
 80053bc:	84003fcc 	andi	r16,r16,255
 80053c0:	80070a1e 	bne	r16,zero,8006fec <___svfprintf_internal_r+0x2258>
 80053c4:	94800414 	ori	r18,r18,16
 80053c8:	9080080c 	andi	r2,r18,32
 80053cc:	1002f626 	beq	r2,zero,8005fa8 <___svfprintf_internal_r+0x1214>
 80053d0:	d9002e17 	ldw	r4,184(sp)
 80053d4:	d9402a17 	ldw	r5,168(sp)
 80053d8:	d8002785 	stb	zero,158(sp)
 80053dc:	20800204 	addi	r2,r4,8
 80053e0:	25000017 	ldw	r20,0(r4)
 80053e4:	25800117 	ldw	r22,4(r4)
 80053e8:	28043716 	blt	r5,zero,80064c8 <___svfprintf_internal_r+0x1734>
 80053ec:	013fdfc4 	movi	r4,-129
 80053f0:	a586b03a 	or	r3,r20,r22
 80053f4:	d8802e15 	stw	r2,184(sp)
 80053f8:	9124703a 	and	r18,r18,r4
 80053fc:	1802f71e 	bne	r3,zero,8005fdc <___svfprintf_internal_r+0x1248>
 8005400:	d9402a17 	ldw	r5,168(sp)
 8005404:	0039883a 	mov	fp,zero
 8005408:	2806df26 	beq	r5,zero,8006f88 <___svfprintf_internal_r+0x21f4>
 800540c:	0029883a 	mov	r20,zero
 8005410:	002d883a 	mov	r22,zero
 8005414:	dc001e04 	addi	r16,sp,120
 8005418:	a006d0fa 	srli	r3,r20,3
 800541c:	b008977a 	slli	r4,r22,29
 8005420:	b02cd0fa 	srli	r22,r22,3
 8005424:	a50001cc 	andi	r20,r20,7
 8005428:	a0800c04 	addi	r2,r20,48
 800542c:	843fffc4 	addi	r16,r16,-1
 8005430:	20e8b03a 	or	r20,r4,r3
 8005434:	80800005 	stb	r2,0(r16)
 8005438:	a586b03a 	or	r3,r20,r22
 800543c:	183ff61e 	bne	r3,zero,8005418 <__alt_data_end+0xfc005418>
 8005440:	90c0004c 	andi	r3,r18,1
 8005444:	18013f26 	beq	r3,zero,8005944 <___svfprintf_internal_r+0xbb0>
 8005448:	10803fcc 	andi	r2,r2,255
 800544c:	1080201c 	xori	r2,r2,128
 8005450:	10bfe004 	addi	r2,r2,-128
 8005454:	00c00c04 	movi	r3,48
 8005458:	10c13a26 	beq	r2,r3,8005944 <___svfprintf_internal_r+0xbb0>
 800545c:	80ffffc5 	stb	r3,-1(r16)
 8005460:	d8c02817 	ldw	r3,160(sp)
 8005464:	80bfffc4 	addi	r2,r16,-1
 8005468:	1021883a 	mov	r16,r2
 800546c:	1887c83a 	sub	r3,r3,r2
 8005470:	d8c02b15 	stw	r3,172(sp)
 8005474:	d8802b17 	ldw	r2,172(sp)
 8005478:	d9002a17 	ldw	r4,168(sp)
 800547c:	1100010e 	bge	r2,r4,8005484 <___svfprintf_internal_r+0x6f0>
 8005480:	2005883a 	mov	r2,r4
 8005484:	d8802915 	stw	r2,164(sp)
 8005488:	d8003215 	stw	zero,200(sp)
 800548c:	e7003fcc 	andi	fp,fp,255
 8005490:	e700201c 	xori	fp,fp,128
 8005494:	e73fe004 	addi	fp,fp,-128
 8005498:	e0000326 	beq	fp,zero,80054a8 <___svfprintf_internal_r+0x714>
 800549c:	d8c02917 	ldw	r3,164(sp)
 80054a0:	18c00044 	addi	r3,r3,1
 80054a4:	d8c02915 	stw	r3,164(sp)
 80054a8:	90c0008c 	andi	r3,r18,2
 80054ac:	d8c02c15 	stw	r3,176(sp)
 80054b0:	18000326 	beq	r3,zero,80054c0 <___svfprintf_internal_r+0x72c>
 80054b4:	d8c02917 	ldw	r3,164(sp)
 80054b8:	18c00084 	addi	r3,r3,2
 80054bc:	d8c02915 	stw	r3,164(sp)
 80054c0:	90c0210c 	andi	r3,r18,132
 80054c4:	d8c03015 	stw	r3,192(sp)
 80054c8:	1801c31e 	bne	r3,zero,8005bd8 <___svfprintf_internal_r+0xe44>
 80054cc:	d9003117 	ldw	r4,196(sp)
 80054d0:	d8c02917 	ldw	r3,164(sp)
 80054d4:	20e9c83a 	sub	r20,r4,r3
 80054d8:	0501bf0e 	bge	zero,r20,8005bd8 <___svfprintf_internal_r+0xe44>
 80054dc:	02400404 	movi	r9,16
 80054e0:	d8c02017 	ldw	r3,128(sp)
 80054e4:	d8801f17 	ldw	r2,124(sp)
 80054e8:	4d053d0e 	bge	r9,r20,80069e0 <___svfprintf_internal_r+0x1c4c>
 80054ec:	01420074 	movhi	r5,2049
 80054f0:	295ff484 	addi	r5,r5,32722
 80054f4:	dc403c15 	stw	r17,240(sp)
 80054f8:	d9403515 	stw	r5,212(sp)
 80054fc:	a023883a 	mov	r17,r20
 8005500:	482d883a 	mov	r22,r9
 8005504:	9029883a 	mov	r20,r18
 8005508:	070001c4 	movi	fp,7
 800550c:	8025883a 	mov	r18,r16
 8005510:	dc002d17 	ldw	r16,180(sp)
 8005514:	00000306 	br	8005524 <___svfprintf_internal_r+0x790>
 8005518:	8c7ffc04 	addi	r17,r17,-16
 800551c:	42000204 	addi	r8,r8,8
 8005520:	b440130e 	bge	r22,r17,8005570 <___svfprintf_internal_r+0x7dc>
 8005524:	01020074 	movhi	r4,2049
 8005528:	18c00404 	addi	r3,r3,16
 800552c:	10800044 	addi	r2,r2,1
 8005530:	211ff484 	addi	r4,r4,32722
 8005534:	41000015 	stw	r4,0(r8)
 8005538:	45800115 	stw	r22,4(r8)
 800553c:	d8c02015 	stw	r3,128(sp)
 8005540:	d8801f15 	stw	r2,124(sp)
 8005544:	e0bff40e 	bge	fp,r2,8005518 <__alt_data_end+0xfc005518>
 8005548:	d9801e04 	addi	r6,sp,120
 800554c:	800b883a 	mov	r5,r16
 8005550:	9809883a 	mov	r4,r19
 8005554:	800e7340 	call	800e734 <__ssprint_r>
 8005558:	103ef51e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 800555c:	8c7ffc04 	addi	r17,r17,-16
 8005560:	d8c02017 	ldw	r3,128(sp)
 8005564:	d8801f17 	ldw	r2,124(sp)
 8005568:	da000404 	addi	r8,sp,16
 800556c:	b47fed16 	blt	r22,r17,8005524 <__alt_data_end+0xfc005524>
 8005570:	9021883a 	mov	r16,r18
 8005574:	a025883a 	mov	r18,r20
 8005578:	8829883a 	mov	r20,r17
 800557c:	dc403c17 	ldw	r17,240(sp)
 8005580:	d9403517 	ldw	r5,212(sp)
 8005584:	a0c7883a 	add	r3,r20,r3
 8005588:	10800044 	addi	r2,r2,1
 800558c:	41400015 	stw	r5,0(r8)
 8005590:	45000115 	stw	r20,4(r8)
 8005594:	d8c02015 	stw	r3,128(sp)
 8005598:	d8801f15 	stw	r2,124(sp)
 800559c:	010001c4 	movi	r4,7
 80055a0:	2082c116 	blt	r4,r2,80060a8 <___svfprintf_internal_r+0x1314>
 80055a4:	df002787 	ldb	fp,158(sp)
 80055a8:	42000204 	addi	r8,r8,8
 80055ac:	e0000c26 	beq	fp,zero,80055e0 <___svfprintf_internal_r+0x84c>
 80055b0:	d8801f17 	ldw	r2,124(sp)
 80055b4:	d9002784 	addi	r4,sp,158
 80055b8:	18c00044 	addi	r3,r3,1
 80055bc:	10800044 	addi	r2,r2,1
 80055c0:	41000015 	stw	r4,0(r8)
 80055c4:	01000044 	movi	r4,1
 80055c8:	41000115 	stw	r4,4(r8)
 80055cc:	d8c02015 	stw	r3,128(sp)
 80055d0:	d8801f15 	stw	r2,124(sp)
 80055d4:	010001c4 	movi	r4,7
 80055d8:	20825a16 	blt	r4,r2,8005f44 <___svfprintf_internal_r+0x11b0>
 80055dc:	42000204 	addi	r8,r8,8
 80055e0:	d8802c17 	ldw	r2,176(sp)
 80055e4:	10000c26 	beq	r2,zero,8005618 <___svfprintf_internal_r+0x884>
 80055e8:	d8801f17 	ldw	r2,124(sp)
 80055ec:	d9002704 	addi	r4,sp,156
 80055f0:	18c00084 	addi	r3,r3,2
 80055f4:	10800044 	addi	r2,r2,1
 80055f8:	41000015 	stw	r4,0(r8)
 80055fc:	01000084 	movi	r4,2
 8005600:	41000115 	stw	r4,4(r8)
 8005604:	d8c02015 	stw	r3,128(sp)
 8005608:	d8801f15 	stw	r2,124(sp)
 800560c:	010001c4 	movi	r4,7
 8005610:	20825416 	blt	r4,r2,8005f64 <___svfprintf_internal_r+0x11d0>
 8005614:	42000204 	addi	r8,r8,8
 8005618:	d9003017 	ldw	r4,192(sp)
 800561c:	00802004 	movi	r2,128
 8005620:	2081b926 	beq	r4,r2,8005d08 <___svfprintf_internal_r+0xf74>
 8005624:	d9402a17 	ldw	r5,168(sp)
 8005628:	d8802b17 	ldw	r2,172(sp)
 800562c:	28adc83a 	sub	r22,r5,r2
 8005630:	05802f0e 	bge	zero,r22,80056f0 <___svfprintf_internal_r+0x95c>
 8005634:	07000404 	movi	fp,16
 8005638:	d8801f17 	ldw	r2,124(sp)
 800563c:	e583e20e 	bge	fp,r22,80065c8 <___svfprintf_internal_r+0x1834>
 8005640:	01420074 	movhi	r5,2049
 8005644:	295ff084 	addi	r5,r5,32706
 8005648:	dc402a15 	stw	r17,168(sp)
 800564c:	d9402c15 	stw	r5,176(sp)
 8005650:	b023883a 	mov	r17,r22
 8005654:	050001c4 	movi	r20,7
 8005658:	902d883a 	mov	r22,r18
 800565c:	8025883a 	mov	r18,r16
 8005660:	dc002d17 	ldw	r16,180(sp)
 8005664:	00000306 	br	8005674 <___svfprintf_internal_r+0x8e0>
 8005668:	8c7ffc04 	addi	r17,r17,-16
 800566c:	42000204 	addi	r8,r8,8
 8005670:	e440110e 	bge	fp,r17,80056b8 <___svfprintf_internal_r+0x924>
 8005674:	18c00404 	addi	r3,r3,16
 8005678:	10800044 	addi	r2,r2,1
 800567c:	45400015 	stw	r21,0(r8)
 8005680:	47000115 	stw	fp,4(r8)
 8005684:	d8c02015 	stw	r3,128(sp)
 8005688:	d8801f15 	stw	r2,124(sp)
 800568c:	a0bff60e 	bge	r20,r2,8005668 <__alt_data_end+0xfc005668>
 8005690:	d9801e04 	addi	r6,sp,120
 8005694:	800b883a 	mov	r5,r16
 8005698:	9809883a 	mov	r4,r19
 800569c:	800e7340 	call	800e734 <__ssprint_r>
 80056a0:	103ea31e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80056a4:	8c7ffc04 	addi	r17,r17,-16
 80056a8:	d8c02017 	ldw	r3,128(sp)
 80056ac:	d8801f17 	ldw	r2,124(sp)
 80056b0:	da000404 	addi	r8,sp,16
 80056b4:	e47fef16 	blt	fp,r17,8005674 <__alt_data_end+0xfc005674>
 80056b8:	9021883a 	mov	r16,r18
 80056bc:	b025883a 	mov	r18,r22
 80056c0:	882d883a 	mov	r22,r17
 80056c4:	dc402a17 	ldw	r17,168(sp)
 80056c8:	d9002c17 	ldw	r4,176(sp)
 80056cc:	1d87883a 	add	r3,r3,r22
 80056d0:	10800044 	addi	r2,r2,1
 80056d4:	41000015 	stw	r4,0(r8)
 80056d8:	45800115 	stw	r22,4(r8)
 80056dc:	d8c02015 	stw	r3,128(sp)
 80056e0:	d8801f15 	stw	r2,124(sp)
 80056e4:	010001c4 	movi	r4,7
 80056e8:	20820e16 	blt	r4,r2,8005f24 <___svfprintf_internal_r+0x1190>
 80056ec:	42000204 	addi	r8,r8,8
 80056f0:	9080400c 	andi	r2,r18,256
 80056f4:	10013a1e 	bne	r2,zero,8005be0 <___svfprintf_internal_r+0xe4c>
 80056f8:	d9402b17 	ldw	r5,172(sp)
 80056fc:	d8801f17 	ldw	r2,124(sp)
 8005700:	44000015 	stw	r16,0(r8)
 8005704:	1947883a 	add	r3,r3,r5
 8005708:	10800044 	addi	r2,r2,1
 800570c:	41400115 	stw	r5,4(r8)
 8005710:	d8c02015 	stw	r3,128(sp)
 8005714:	d8801f15 	stw	r2,124(sp)
 8005718:	010001c4 	movi	r4,7
 800571c:	2081f316 	blt	r4,r2,8005eec <___svfprintf_internal_r+0x1158>
 8005720:	42000204 	addi	r8,r8,8
 8005724:	9480010c 	andi	r18,r18,4
 8005728:	90003226 	beq	r18,zero,80057f4 <___svfprintf_internal_r+0xa60>
 800572c:	d9403117 	ldw	r5,196(sp)
 8005730:	d8802917 	ldw	r2,164(sp)
 8005734:	28a1c83a 	sub	r16,r5,r2
 8005738:	04002e0e 	bge	zero,r16,80057f4 <___svfprintf_internal_r+0xa60>
 800573c:	04400404 	movi	r17,16
 8005740:	d8801f17 	ldw	r2,124(sp)
 8005744:	8c04db0e 	bge	r17,r16,8006ab4 <___svfprintf_internal_r+0x1d20>
 8005748:	01420074 	movhi	r5,2049
 800574c:	295ff484 	addi	r5,r5,32722
 8005750:	d9403515 	stw	r5,212(sp)
 8005754:	048001c4 	movi	r18,7
 8005758:	dd002d17 	ldw	r20,180(sp)
 800575c:	00000306 	br	800576c <___svfprintf_internal_r+0x9d8>
 8005760:	843ffc04 	addi	r16,r16,-16
 8005764:	42000204 	addi	r8,r8,8
 8005768:	8c00130e 	bge	r17,r16,80057b8 <___svfprintf_internal_r+0xa24>
 800576c:	01020074 	movhi	r4,2049
 8005770:	18c00404 	addi	r3,r3,16
 8005774:	10800044 	addi	r2,r2,1
 8005778:	211ff484 	addi	r4,r4,32722
 800577c:	41000015 	stw	r4,0(r8)
 8005780:	44400115 	stw	r17,4(r8)
 8005784:	d8c02015 	stw	r3,128(sp)
 8005788:	d8801f15 	stw	r2,124(sp)
 800578c:	90bff40e 	bge	r18,r2,8005760 <__alt_data_end+0xfc005760>
 8005790:	d9801e04 	addi	r6,sp,120
 8005794:	a00b883a 	mov	r5,r20
 8005798:	9809883a 	mov	r4,r19
 800579c:	800e7340 	call	800e734 <__ssprint_r>
 80057a0:	103e631e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80057a4:	843ffc04 	addi	r16,r16,-16
 80057a8:	d8c02017 	ldw	r3,128(sp)
 80057ac:	d8801f17 	ldw	r2,124(sp)
 80057b0:	da000404 	addi	r8,sp,16
 80057b4:	8c3fed16 	blt	r17,r16,800576c <__alt_data_end+0xfc00576c>
 80057b8:	d9403517 	ldw	r5,212(sp)
 80057bc:	1c07883a 	add	r3,r3,r16
 80057c0:	10800044 	addi	r2,r2,1
 80057c4:	41400015 	stw	r5,0(r8)
 80057c8:	44000115 	stw	r16,4(r8)
 80057cc:	d8c02015 	stw	r3,128(sp)
 80057d0:	d8801f15 	stw	r2,124(sp)
 80057d4:	010001c4 	movi	r4,7
 80057d8:	2080060e 	bge	r4,r2,80057f4 <___svfprintf_internal_r+0xa60>
 80057dc:	d9402d17 	ldw	r5,180(sp)
 80057e0:	d9801e04 	addi	r6,sp,120
 80057e4:	9809883a 	mov	r4,r19
 80057e8:	800e7340 	call	800e734 <__ssprint_r>
 80057ec:	103e501e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80057f0:	d8c02017 	ldw	r3,128(sp)
 80057f4:	d8803117 	ldw	r2,196(sp)
 80057f8:	d9002917 	ldw	r4,164(sp)
 80057fc:	1100010e 	bge	r2,r4,8005804 <___svfprintf_internal_r+0xa70>
 8005800:	2005883a 	mov	r2,r4
 8005804:	d9402f17 	ldw	r5,188(sp)
 8005808:	288b883a 	add	r5,r5,r2
 800580c:	d9402f15 	stw	r5,188(sp)
 8005810:	1801be1e 	bne	r3,zero,8005f0c <___svfprintf_internal_r+0x1178>
 8005814:	b8800007 	ldb	r2,0(r23)
 8005818:	d8001f15 	stw	zero,124(sp)
 800581c:	da000404 	addi	r8,sp,16
 8005820:	103d891e 	bne	r2,zero,8004e48 <__alt_data_end+0xfc004e48>
 8005824:	b823883a 	mov	r17,r23
 8005828:	003d9f06 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 800582c:	8025883a 	mov	r18,r16
 8005830:	dc002903 	ldbu	r16,164(sp)
 8005834:	e011883a 	mov	r8,fp
 8005838:	84003fcc 	andi	r16,r16,255
 800583c:	8005e61e 	bne	r16,zero,8006fd8 <___svfprintf_internal_r+0x2244>
 8005840:	94800414 	ori	r18,r18,16
 8005844:	9080080c 	andi	r2,r18,32
 8005848:	10022026 	beq	r2,zero,80060cc <___svfprintf_internal_r+0x1338>
 800584c:	d9002e17 	ldw	r4,184(sp)
 8005850:	d9402a17 	ldw	r5,168(sp)
 8005854:	d8002785 	stb	zero,158(sp)
 8005858:	20c00204 	addi	r3,r4,8
 800585c:	25000017 	ldw	r20,0(r4)
 8005860:	25800117 	ldw	r22,4(r4)
 8005864:	2803ad16 	blt	r5,zero,800671c <___svfprintf_internal_r+0x1988>
 8005868:	013fdfc4 	movi	r4,-129
 800586c:	a584b03a 	or	r2,r20,r22
 8005870:	d8c02e15 	stw	r3,184(sp)
 8005874:	9124703a 	and	r18,r18,r4
 8005878:	0039883a 	mov	fp,zero
 800587c:	103eb01e 	bne	r2,zero,8005340 <__alt_data_end+0xfc005340>
 8005880:	d8802a17 	ldw	r2,168(sp)
 8005884:	1002e71e 	bne	r2,zero,8006424 <___svfprintf_internal_r+0x1690>
 8005888:	d8002a15 	stw	zero,168(sp)
 800588c:	d8002b15 	stw	zero,172(sp)
 8005890:	dc001e04 	addi	r16,sp,120
 8005894:	003ef706 	br	8005474 <__alt_data_end+0xfc005474>
 8005898:	8025883a 	mov	r18,r16
 800589c:	dc002903 	ldbu	r16,164(sp)
 80058a0:	e011883a 	mov	r8,fp
 80058a4:	84003fcc 	andi	r16,r16,255
 80058a8:	8005c81e 	bne	r16,zero,8006fcc <___svfprintf_internal_r+0x2238>
 80058ac:	01020074 	movhi	r4,2049
 80058b0:	211fe404 	addi	r4,r4,32656
 80058b4:	d9003a15 	stw	r4,232(sp)
 80058b8:	9080080c 	andi	r2,r18,32
 80058bc:	10007226 	beq	r2,zero,8005a88 <___svfprintf_internal_r+0xcf4>
 80058c0:	d9402e17 	ldw	r5,184(sp)
 80058c4:	2d000017 	ldw	r20,0(r5)
 80058c8:	2d800117 	ldw	r22,4(r5)
 80058cc:	29400204 	addi	r5,r5,8
 80058d0:	d9402e15 	stw	r5,184(sp)
 80058d4:	9080004c 	andi	r2,r18,1
 80058d8:	1001aa26 	beq	r2,zero,8005f84 <___svfprintf_internal_r+0x11f0>
 80058dc:	a584b03a 	or	r2,r20,r22
 80058e0:	10032526 	beq	r2,zero,8006578 <___svfprintf_internal_r+0x17e4>
 80058e4:	d8c02a17 	ldw	r3,168(sp)
 80058e8:	00800c04 	movi	r2,48
 80058ec:	d8802705 	stb	r2,156(sp)
 80058f0:	dc402745 	stb	r17,157(sp)
 80058f4:	d8002785 	stb	zero,158(sp)
 80058f8:	90800094 	ori	r2,r18,2
 80058fc:	1804a316 	blt	r3,zero,8006b8c <___svfprintf_internal_r+0x1df8>
 8005900:	00bfdfc4 	movi	r2,-129
 8005904:	90a4703a 	and	r18,r18,r2
 8005908:	94800094 	ori	r18,r18,2
 800590c:	0039883a 	mov	fp,zero
 8005910:	d9003a17 	ldw	r4,232(sp)
 8005914:	dc001e04 	addi	r16,sp,120
 8005918:	a08003cc 	andi	r2,r20,15
 800591c:	b006973a 	slli	r3,r22,28
 8005920:	2085883a 	add	r2,r4,r2
 8005924:	a028d13a 	srli	r20,r20,4
 8005928:	10800003 	ldbu	r2,0(r2)
 800592c:	b02cd13a 	srli	r22,r22,4
 8005930:	843fffc4 	addi	r16,r16,-1
 8005934:	1d28b03a 	or	r20,r3,r20
 8005938:	80800005 	stb	r2,0(r16)
 800593c:	a584b03a 	or	r2,r20,r22
 8005940:	103ff51e 	bne	r2,zero,8005918 <__alt_data_end+0xfc005918>
 8005944:	d8c02817 	ldw	r3,160(sp)
 8005948:	1c07c83a 	sub	r3,r3,r16
 800594c:	d8c02b15 	stw	r3,172(sp)
 8005950:	003ec806 	br	8005474 <__alt_data_end+0xfc005474>
 8005954:	d8c02e17 	ldw	r3,184(sp)
 8005958:	d9002e17 	ldw	r4,184(sp)
 800595c:	8025883a 	mov	r18,r16
 8005960:	18800017 	ldw	r2,0(r3)
 8005964:	21000104 	addi	r4,r4,4
 8005968:	00c00044 	movi	r3,1
 800596c:	e011883a 	mov	r8,fp
 8005970:	d8c02915 	stw	r3,164(sp)
 8005974:	d8002785 	stb	zero,158(sp)
 8005978:	d8801405 	stb	r2,80(sp)
 800597c:	d9002e15 	stw	r4,184(sp)
 8005980:	d8c02b15 	stw	r3,172(sp)
 8005984:	d8002a15 	stw	zero,168(sp)
 8005988:	d8003215 	stw	zero,200(sp)
 800598c:	dc001404 	addi	r16,sp,80
 8005990:	0039883a 	mov	fp,zero
 8005994:	003ec406 	br	80054a8 <__alt_data_end+0xfc0054a8>
 8005998:	8025883a 	mov	r18,r16
 800599c:	dc002903 	ldbu	r16,164(sp)
 80059a0:	e011883a 	mov	r8,fp
 80059a4:	84003fcc 	andi	r16,r16,255
 80059a8:	803e8726 	beq	r16,zero,80053c8 <__alt_data_end+0xfc0053c8>
 80059ac:	d8c02b03 	ldbu	r3,172(sp)
 80059b0:	d8c02785 	stb	r3,158(sp)
 80059b4:	003e8406 	br	80053c8 <__alt_data_end+0xfc0053c8>
 80059b8:	00c00044 	movi	r3,1
 80059bc:	d8c02905 	stb	r3,164(sp)
 80059c0:	00c00ac4 	movi	r3,43
 80059c4:	d8c02b05 	stb	r3,172(sp)
 80059c8:	bc400007 	ldb	r17,0(r23)
 80059cc:	003d4606 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 80059d0:	84000814 	ori	r16,r16,32
 80059d4:	bc400007 	ldb	r17,0(r23)
 80059d8:	003d4306 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 80059dc:	d8802e17 	ldw	r2,184(sp)
 80059e0:	8025883a 	mov	r18,r16
 80059e4:	d8002785 	stb	zero,158(sp)
 80059e8:	14000017 	ldw	r16,0(r2)
 80059ec:	e011883a 	mov	r8,fp
 80059f0:	15000104 	addi	r20,r2,4
 80059f4:	80042126 	beq	r16,zero,8006a7c <___svfprintf_internal_r+0x1ce8>
 80059f8:	d8c02a17 	ldw	r3,168(sp)
 80059fc:	1803ee16 	blt	r3,zero,80069b8 <___svfprintf_internal_r+0x1c24>
 8005a00:	180d883a 	mov	r6,r3
 8005a04:	000b883a 	mov	r5,zero
 8005a08:	8009883a 	mov	r4,r16
 8005a0c:	df003e15 	stw	fp,248(sp)
 8005a10:	800c9880 	call	800c988 <memchr>
 8005a14:	da003e17 	ldw	r8,248(sp)
 8005a18:	10046a26 	beq	r2,zero,8006bc4 <___svfprintf_internal_r+0x1e30>
 8005a1c:	1405c83a 	sub	r2,r2,r16
 8005a20:	d8802b15 	stw	r2,172(sp)
 8005a24:	1003ea16 	blt	r2,zero,80069d0 <___svfprintf_internal_r+0x1c3c>
 8005a28:	df002783 	ldbu	fp,158(sp)
 8005a2c:	d8802915 	stw	r2,164(sp)
 8005a30:	dd002e15 	stw	r20,184(sp)
 8005a34:	d8002a15 	stw	zero,168(sp)
 8005a38:	d8003215 	stw	zero,200(sp)
 8005a3c:	003e9306 	br	800548c <__alt_data_end+0xfc00548c>
 8005a40:	8025883a 	mov	r18,r16
 8005a44:	dc002903 	ldbu	r16,164(sp)
 8005a48:	e011883a 	mov	r8,fp
 8005a4c:	84003fcc 	andi	r16,r16,255
 8005a50:	803f7c26 	beq	r16,zero,8005844 <__alt_data_end+0xfc005844>
 8005a54:	d8c02b03 	ldbu	r3,172(sp)
 8005a58:	d8c02785 	stb	r3,158(sp)
 8005a5c:	003f7906 	br	8005844 <__alt_data_end+0xfc005844>
 8005a60:	8025883a 	mov	r18,r16
 8005a64:	dc002903 	ldbu	r16,164(sp)
 8005a68:	e011883a 	mov	r8,fp
 8005a6c:	84003fcc 	andi	r16,r16,255
 8005a70:	8005741e 	bne	r16,zero,8007044 <___svfprintf_internal_r+0x22b0>
 8005a74:	01020074 	movhi	r4,2049
 8005a78:	211fe904 	addi	r4,r4,32676
 8005a7c:	d9003a15 	stw	r4,232(sp)
 8005a80:	9080080c 	andi	r2,r18,32
 8005a84:	103f8e1e 	bne	r2,zero,80058c0 <__alt_data_end+0xfc0058c0>
 8005a88:	9080040c 	andi	r2,r18,16
 8005a8c:	1002a726 	beq	r2,zero,800652c <___svfprintf_internal_r+0x1798>
 8005a90:	d8802e17 	ldw	r2,184(sp)
 8005a94:	002d883a 	mov	r22,zero
 8005a98:	15000017 	ldw	r20,0(r2)
 8005a9c:	10800104 	addi	r2,r2,4
 8005aa0:	d8802e15 	stw	r2,184(sp)
 8005aa4:	003f8b06 	br	80058d4 <__alt_data_end+0xfc0058d4>
 8005aa8:	84000054 	ori	r16,r16,1
 8005aac:	bc400007 	ldb	r17,0(r23)
 8005ab0:	003d0d06 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005ab4:	d8802b07 	ldb	r2,172(sp)
 8005ab8:	1002a41e 	bne	r2,zero,800654c <___svfprintf_internal_r+0x17b8>
 8005abc:	00c00044 	movi	r3,1
 8005ac0:	d8c02905 	stb	r3,164(sp)
 8005ac4:	00c00804 	movi	r3,32
 8005ac8:	d8c02b05 	stb	r3,172(sp)
 8005acc:	bc400007 	ldb	r17,0(r23)
 8005ad0:	003d0506 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005ad4:	8025883a 	mov	r18,r16
 8005ad8:	dc002903 	ldbu	r16,164(sp)
 8005adc:	e011883a 	mov	r8,fp
 8005ae0:	84003fcc 	andi	r16,r16,255
 8005ae4:	803e0626 	beq	r16,zero,8005300 <__alt_data_end+0xfc005300>
 8005ae8:	d8c02b03 	ldbu	r3,172(sp)
 8005aec:	d8c02785 	stb	r3,158(sp)
 8005af0:	003e0306 	br	8005300 <__alt_data_end+0xfc005300>
 8005af4:	bc400007 	ldb	r17,0(r23)
 8005af8:	00801b04 	movi	r2,108
 8005afc:	88830a26 	beq	r17,r2,8006728 <___svfprintf_internal_r+0x1994>
 8005b00:	84000414 	ori	r16,r16,16
 8005b04:	003cf806 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005b08:	8025883a 	mov	r18,r16
 8005b0c:	dc002903 	ldbu	r16,164(sp)
 8005b10:	e011883a 	mov	r8,fp
 8005b14:	84003fcc 	andi	r16,r16,255
 8005b18:	8005471e 	bne	r16,zero,8007038 <___svfprintf_internal_r+0x22a4>
 8005b1c:	9080080c 	andi	r2,r18,32
 8005b20:	10028c26 	beq	r2,zero,8006554 <___svfprintf_internal_r+0x17c0>
 8005b24:	d9002e17 	ldw	r4,184(sp)
 8005b28:	d9402f17 	ldw	r5,188(sp)
 8005b2c:	20800017 	ldw	r2,0(r4)
 8005b30:	2807d7fa 	srai	r3,r5,31
 8005b34:	21000104 	addi	r4,r4,4
 8005b38:	d9002e15 	stw	r4,184(sp)
 8005b3c:	11400015 	stw	r5,0(r2)
 8005b40:	10c00115 	stw	r3,4(r2)
 8005b44:	003cbe06 	br	8004e40 <__alt_data_end+0xfc004e40>
 8005b48:	84001014 	ori	r16,r16,64
 8005b4c:	bc400007 	ldb	r17,0(r23)
 8005b50:	003ce506 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005b54:	01020074 	movhi	r4,2049
 8005b58:	211fe904 	addi	r4,r4,32676
 8005b5c:	0039883a 	mov	fp,zero
 8005b60:	d9003a15 	stw	r4,232(sp)
 8005b64:	04401e04 	movi	r17,120
 8005b68:	003f6906 	br	8005910 <__alt_data_end+0xfc005910>
 8005b6c:	8025883a 	mov	r18,r16
 8005b70:	dc002903 	ldbu	r16,164(sp)
 8005b74:	e011883a 	mov	r8,fp
 8005b78:	84003fcc 	andi	r16,r16,255
 8005b7c:	8005261e 	bne	r16,zero,8007018 <___svfprintf_internal_r+0x2284>
 8005b80:	883d6526 	beq	r17,zero,8005118 <__alt_data_end+0xfc005118>
 8005b84:	00c00044 	movi	r3,1
 8005b88:	d8c02915 	stw	r3,164(sp)
 8005b8c:	dc401405 	stb	r17,80(sp)
 8005b90:	d8002785 	stb	zero,158(sp)
 8005b94:	003f7a06 	br	8005980 <__alt_data_end+0xfc005980>
 8005b98:	01020074 	movhi	r4,2049
 8005b9c:	211fe904 	addi	r4,r4,32676
 8005ba0:	d9003a15 	stw	r4,232(sp)
 8005ba4:	d8c02e15 	stw	r3,184(sp)
 8005ba8:	1025883a 	mov	r18,r2
 8005bac:	04401e04 	movi	r17,120
 8005bb0:	a584b03a 	or	r2,r20,r22
 8005bb4:	1000fa1e 	bne	r2,zero,8005fa0 <___svfprintf_internal_r+0x120c>
 8005bb8:	0039883a 	mov	fp,zero
 8005bbc:	00800084 	movi	r2,2
 8005bc0:	10803fcc 	andi	r2,r2,255
 8005bc4:	00c00044 	movi	r3,1
 8005bc8:	10c21626 	beq	r2,r3,8006424 <___svfprintf_internal_r+0x1690>
 8005bcc:	00c00084 	movi	r3,2
 8005bd0:	10fe0e1e 	bne	r2,r3,800540c <__alt_data_end+0xfc00540c>
 8005bd4:	003d4606 	br	80050f0 <__alt_data_end+0xfc0050f0>
 8005bd8:	d8c02017 	ldw	r3,128(sp)
 8005bdc:	003e7306 	br	80055ac <__alt_data_end+0xfc0055ac>
 8005be0:	00801944 	movi	r2,101
 8005be4:	14407c0e 	bge	r2,r17,8005dd8 <___svfprintf_internal_r+0x1044>
 8005be8:	d9003617 	ldw	r4,216(sp)
 8005bec:	d9403717 	ldw	r5,220(sp)
 8005bf0:	000d883a 	mov	r6,zero
 8005bf4:	000f883a 	mov	r7,zero
 8005bf8:	d8c03d15 	stw	r3,244(sp)
 8005bfc:	da003e15 	stw	r8,248(sp)
 8005c00:	8013c300 	call	8013c30 <__eqdf2>
 8005c04:	d8c03d17 	ldw	r3,244(sp)
 8005c08:	da003e17 	ldw	r8,248(sp)
 8005c0c:	1000f51e 	bne	r2,zero,8005fe4 <___svfprintf_internal_r+0x1250>
 8005c10:	d8801f17 	ldw	r2,124(sp)
 8005c14:	01020074 	movhi	r4,2049
 8005c18:	211ff004 	addi	r4,r4,32704
 8005c1c:	18c00044 	addi	r3,r3,1
 8005c20:	10800044 	addi	r2,r2,1
 8005c24:	41000015 	stw	r4,0(r8)
 8005c28:	01000044 	movi	r4,1
 8005c2c:	41000115 	stw	r4,4(r8)
 8005c30:	d8c02015 	stw	r3,128(sp)
 8005c34:	d8801f15 	stw	r2,124(sp)
 8005c38:	010001c4 	movi	r4,7
 8005c3c:	20826616 	blt	r4,r2,80065d8 <___svfprintf_internal_r+0x1844>
 8005c40:	42000204 	addi	r8,r8,8
 8005c44:	d8802617 	ldw	r2,152(sp)
 8005c48:	d9403317 	ldw	r5,204(sp)
 8005c4c:	11400216 	blt	r2,r5,8005c58 <___svfprintf_internal_r+0xec4>
 8005c50:	9080004c 	andi	r2,r18,1
 8005c54:	103eb326 	beq	r2,zero,8005724 <__alt_data_end+0xfc005724>
 8005c58:	d8803817 	ldw	r2,224(sp)
 8005c5c:	d9003417 	ldw	r4,208(sp)
 8005c60:	d9403817 	ldw	r5,224(sp)
 8005c64:	1887883a 	add	r3,r3,r2
 8005c68:	d8801f17 	ldw	r2,124(sp)
 8005c6c:	41000015 	stw	r4,0(r8)
 8005c70:	41400115 	stw	r5,4(r8)
 8005c74:	10800044 	addi	r2,r2,1
 8005c78:	d8c02015 	stw	r3,128(sp)
 8005c7c:	d8801f15 	stw	r2,124(sp)
 8005c80:	010001c4 	movi	r4,7
 8005c84:	2082af16 	blt	r4,r2,8006744 <___svfprintf_internal_r+0x19b0>
 8005c88:	42000204 	addi	r8,r8,8
 8005c8c:	d8803317 	ldw	r2,204(sp)
 8005c90:	143fffc4 	addi	r16,r2,-1
 8005c94:	043ea30e 	bge	zero,r16,8005724 <__alt_data_end+0xfc005724>
 8005c98:	04400404 	movi	r17,16
 8005c9c:	d8801f17 	ldw	r2,124(sp)
 8005ca0:	8c00860e 	bge	r17,r16,8005ebc <___svfprintf_internal_r+0x1128>
 8005ca4:	01420074 	movhi	r5,2049
 8005ca8:	295ff084 	addi	r5,r5,32706
 8005cac:	d9402c15 	stw	r5,176(sp)
 8005cb0:	058001c4 	movi	r22,7
 8005cb4:	dd002d17 	ldw	r20,180(sp)
 8005cb8:	00000306 	br	8005cc8 <___svfprintf_internal_r+0xf34>
 8005cbc:	42000204 	addi	r8,r8,8
 8005cc0:	843ffc04 	addi	r16,r16,-16
 8005cc4:	8c00800e 	bge	r17,r16,8005ec8 <___svfprintf_internal_r+0x1134>
 8005cc8:	18c00404 	addi	r3,r3,16
 8005ccc:	10800044 	addi	r2,r2,1
 8005cd0:	45400015 	stw	r21,0(r8)
 8005cd4:	44400115 	stw	r17,4(r8)
 8005cd8:	d8c02015 	stw	r3,128(sp)
 8005cdc:	d8801f15 	stw	r2,124(sp)
 8005ce0:	b0bff60e 	bge	r22,r2,8005cbc <__alt_data_end+0xfc005cbc>
 8005ce4:	d9801e04 	addi	r6,sp,120
 8005ce8:	a00b883a 	mov	r5,r20
 8005cec:	9809883a 	mov	r4,r19
 8005cf0:	800e7340 	call	800e734 <__ssprint_r>
 8005cf4:	103d0e1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8005cf8:	d8c02017 	ldw	r3,128(sp)
 8005cfc:	d8801f17 	ldw	r2,124(sp)
 8005d00:	da000404 	addi	r8,sp,16
 8005d04:	003fee06 	br	8005cc0 <__alt_data_end+0xfc005cc0>
 8005d08:	d9403117 	ldw	r5,196(sp)
 8005d0c:	d8802917 	ldw	r2,164(sp)
 8005d10:	28adc83a 	sub	r22,r5,r2
 8005d14:	05be430e 	bge	zero,r22,8005624 <__alt_data_end+0xfc005624>
 8005d18:	07000404 	movi	fp,16
 8005d1c:	d8801f17 	ldw	r2,124(sp)
 8005d20:	e583a20e 	bge	fp,r22,8006bac <___svfprintf_internal_r+0x1e18>
 8005d24:	01420074 	movhi	r5,2049
 8005d28:	295ff084 	addi	r5,r5,32706
 8005d2c:	dc403015 	stw	r17,192(sp)
 8005d30:	d9402c15 	stw	r5,176(sp)
 8005d34:	b023883a 	mov	r17,r22
 8005d38:	050001c4 	movi	r20,7
 8005d3c:	902d883a 	mov	r22,r18
 8005d40:	8025883a 	mov	r18,r16
 8005d44:	dc002d17 	ldw	r16,180(sp)
 8005d48:	00000306 	br	8005d58 <___svfprintf_internal_r+0xfc4>
 8005d4c:	8c7ffc04 	addi	r17,r17,-16
 8005d50:	42000204 	addi	r8,r8,8
 8005d54:	e440110e 	bge	fp,r17,8005d9c <___svfprintf_internal_r+0x1008>
 8005d58:	18c00404 	addi	r3,r3,16
 8005d5c:	10800044 	addi	r2,r2,1
 8005d60:	45400015 	stw	r21,0(r8)
 8005d64:	47000115 	stw	fp,4(r8)
 8005d68:	d8c02015 	stw	r3,128(sp)
 8005d6c:	d8801f15 	stw	r2,124(sp)
 8005d70:	a0bff60e 	bge	r20,r2,8005d4c <__alt_data_end+0xfc005d4c>
 8005d74:	d9801e04 	addi	r6,sp,120
 8005d78:	800b883a 	mov	r5,r16
 8005d7c:	9809883a 	mov	r4,r19
 8005d80:	800e7340 	call	800e734 <__ssprint_r>
 8005d84:	103cea1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8005d88:	8c7ffc04 	addi	r17,r17,-16
 8005d8c:	d8c02017 	ldw	r3,128(sp)
 8005d90:	d8801f17 	ldw	r2,124(sp)
 8005d94:	da000404 	addi	r8,sp,16
 8005d98:	e47fef16 	blt	fp,r17,8005d58 <__alt_data_end+0xfc005d58>
 8005d9c:	9021883a 	mov	r16,r18
 8005da0:	b025883a 	mov	r18,r22
 8005da4:	882d883a 	mov	r22,r17
 8005da8:	dc403017 	ldw	r17,192(sp)
 8005dac:	d9002c17 	ldw	r4,176(sp)
 8005db0:	1d87883a 	add	r3,r3,r22
 8005db4:	10800044 	addi	r2,r2,1
 8005db8:	41000015 	stw	r4,0(r8)
 8005dbc:	45800115 	stw	r22,4(r8)
 8005dc0:	d8c02015 	stw	r3,128(sp)
 8005dc4:	d8801f15 	stw	r2,124(sp)
 8005dc8:	010001c4 	movi	r4,7
 8005dcc:	20819a16 	blt	r4,r2,8006438 <___svfprintf_internal_r+0x16a4>
 8005dd0:	42000204 	addi	r8,r8,8
 8005dd4:	003e1306 	br	8005624 <__alt_data_end+0xfc005624>
 8005dd8:	d9403317 	ldw	r5,204(sp)
 8005ddc:	00800044 	movi	r2,1
 8005de0:	18c00044 	addi	r3,r3,1
 8005de4:	1141710e 	bge	r2,r5,80063ac <___svfprintf_internal_r+0x1618>
 8005de8:	dc401f17 	ldw	r17,124(sp)
 8005dec:	00800044 	movi	r2,1
 8005df0:	40800115 	stw	r2,4(r8)
 8005df4:	8c400044 	addi	r17,r17,1
 8005df8:	44000015 	stw	r16,0(r8)
 8005dfc:	d8c02015 	stw	r3,128(sp)
 8005e00:	dc401f15 	stw	r17,124(sp)
 8005e04:	008001c4 	movi	r2,7
 8005e08:	14417416 	blt	r2,r17,80063dc <___svfprintf_internal_r+0x1648>
 8005e0c:	42000204 	addi	r8,r8,8
 8005e10:	d8803817 	ldw	r2,224(sp)
 8005e14:	d9003417 	ldw	r4,208(sp)
 8005e18:	8c400044 	addi	r17,r17,1
 8005e1c:	10c7883a 	add	r3,r2,r3
 8005e20:	40800115 	stw	r2,4(r8)
 8005e24:	41000015 	stw	r4,0(r8)
 8005e28:	d8c02015 	stw	r3,128(sp)
 8005e2c:	dc401f15 	stw	r17,124(sp)
 8005e30:	008001c4 	movi	r2,7
 8005e34:	14417216 	blt	r2,r17,8006400 <___svfprintf_internal_r+0x166c>
 8005e38:	45800204 	addi	r22,r8,8
 8005e3c:	d9003617 	ldw	r4,216(sp)
 8005e40:	d9403717 	ldw	r5,220(sp)
 8005e44:	000d883a 	mov	r6,zero
 8005e48:	000f883a 	mov	r7,zero
 8005e4c:	d8c03d15 	stw	r3,244(sp)
 8005e50:	8013c300 	call	8013c30 <__eqdf2>
 8005e54:	d8c03d17 	ldw	r3,244(sp)
 8005e58:	1000b326 	beq	r2,zero,8006128 <___svfprintf_internal_r+0x1394>
 8005e5c:	d9403317 	ldw	r5,204(sp)
 8005e60:	84000044 	addi	r16,r16,1
 8005e64:	8c400044 	addi	r17,r17,1
 8005e68:	28bfffc4 	addi	r2,r5,-1
 8005e6c:	1887883a 	add	r3,r3,r2
 8005e70:	b0800115 	stw	r2,4(r22)
 8005e74:	b4000015 	stw	r16,0(r22)
 8005e78:	d8c02015 	stw	r3,128(sp)
 8005e7c:	dc401f15 	stw	r17,124(sp)
 8005e80:	008001c4 	movi	r2,7
 8005e84:	1440d216 	blt	r2,r17,80061d0 <___svfprintf_internal_r+0x143c>
 8005e88:	b5800204 	addi	r22,r22,8
 8005e8c:	d9003b17 	ldw	r4,236(sp)
 8005e90:	df0022c4 	addi	fp,sp,139
 8005e94:	8c400044 	addi	r17,r17,1
 8005e98:	20c7883a 	add	r3,r4,r3
 8005e9c:	b7000015 	stw	fp,0(r22)
 8005ea0:	b1000115 	stw	r4,4(r22)
 8005ea4:	d8c02015 	stw	r3,128(sp)
 8005ea8:	dc401f15 	stw	r17,124(sp)
 8005eac:	008001c4 	movi	r2,7
 8005eb0:	14400e16 	blt	r2,r17,8005eec <___svfprintf_internal_r+0x1158>
 8005eb4:	b2000204 	addi	r8,r22,8
 8005eb8:	003e1a06 	br	8005724 <__alt_data_end+0xfc005724>
 8005ebc:	01020074 	movhi	r4,2049
 8005ec0:	211ff084 	addi	r4,r4,32706
 8005ec4:	d9002c15 	stw	r4,176(sp)
 8005ec8:	d9002c17 	ldw	r4,176(sp)
 8005ecc:	1c07883a 	add	r3,r3,r16
 8005ed0:	44000115 	stw	r16,4(r8)
 8005ed4:	41000015 	stw	r4,0(r8)
 8005ed8:	10800044 	addi	r2,r2,1
 8005edc:	d8c02015 	stw	r3,128(sp)
 8005ee0:	d8801f15 	stw	r2,124(sp)
 8005ee4:	010001c4 	movi	r4,7
 8005ee8:	20be0d0e 	bge	r4,r2,8005720 <__alt_data_end+0xfc005720>
 8005eec:	d9402d17 	ldw	r5,180(sp)
 8005ef0:	d9801e04 	addi	r6,sp,120
 8005ef4:	9809883a 	mov	r4,r19
 8005ef8:	800e7340 	call	800e734 <__ssprint_r>
 8005efc:	103c8c1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8005f00:	d8c02017 	ldw	r3,128(sp)
 8005f04:	da000404 	addi	r8,sp,16
 8005f08:	003e0606 	br	8005724 <__alt_data_end+0xfc005724>
 8005f0c:	d9402d17 	ldw	r5,180(sp)
 8005f10:	d9801e04 	addi	r6,sp,120
 8005f14:	9809883a 	mov	r4,r19
 8005f18:	800e7340 	call	800e734 <__ssprint_r>
 8005f1c:	103e3d26 	beq	r2,zero,8005814 <__alt_data_end+0xfc005814>
 8005f20:	003c8306 	br	8005130 <__alt_data_end+0xfc005130>
 8005f24:	d9402d17 	ldw	r5,180(sp)
 8005f28:	d9801e04 	addi	r6,sp,120
 8005f2c:	9809883a 	mov	r4,r19
 8005f30:	800e7340 	call	800e734 <__ssprint_r>
 8005f34:	103c7e1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8005f38:	d8c02017 	ldw	r3,128(sp)
 8005f3c:	da000404 	addi	r8,sp,16
 8005f40:	003deb06 	br	80056f0 <__alt_data_end+0xfc0056f0>
 8005f44:	d9402d17 	ldw	r5,180(sp)
 8005f48:	d9801e04 	addi	r6,sp,120
 8005f4c:	9809883a 	mov	r4,r19
 8005f50:	800e7340 	call	800e734 <__ssprint_r>
 8005f54:	103c761e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8005f58:	d8c02017 	ldw	r3,128(sp)
 8005f5c:	da000404 	addi	r8,sp,16
 8005f60:	003d9f06 	br	80055e0 <__alt_data_end+0xfc0055e0>
 8005f64:	d9402d17 	ldw	r5,180(sp)
 8005f68:	d9801e04 	addi	r6,sp,120
 8005f6c:	9809883a 	mov	r4,r19
 8005f70:	800e7340 	call	800e734 <__ssprint_r>
 8005f74:	103c6e1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8005f78:	d8c02017 	ldw	r3,128(sp)
 8005f7c:	da000404 	addi	r8,sp,16
 8005f80:	003da506 	br	8005618 <__alt_data_end+0xfc005618>
 8005f84:	d9402a17 	ldw	r5,168(sp)
 8005f88:	d8002785 	stb	zero,158(sp)
 8005f8c:	283f0816 	blt	r5,zero,8005bb0 <__alt_data_end+0xfc005bb0>
 8005f90:	00ffdfc4 	movi	r3,-129
 8005f94:	a584b03a 	or	r2,r20,r22
 8005f98:	90e4703a 	and	r18,r18,r3
 8005f9c:	103c5126 	beq	r2,zero,80050e4 <__alt_data_end+0xfc0050e4>
 8005fa0:	0039883a 	mov	fp,zero
 8005fa4:	003e5a06 	br	8005910 <__alt_data_end+0xfc005910>
 8005fa8:	9080040c 	andi	r2,r18,16
 8005fac:	10013d26 	beq	r2,zero,80064a4 <___svfprintf_internal_r+0x1710>
 8005fb0:	d8c02e17 	ldw	r3,184(sp)
 8005fb4:	d9002a17 	ldw	r4,168(sp)
 8005fb8:	d8002785 	stb	zero,158(sp)
 8005fbc:	18800104 	addi	r2,r3,4
 8005fc0:	1d000017 	ldw	r20,0(r3)
 8005fc4:	002d883a 	mov	r22,zero
 8005fc8:	20013f16 	blt	r4,zero,80064c8 <___svfprintf_internal_r+0x1734>
 8005fcc:	00ffdfc4 	movi	r3,-129
 8005fd0:	d8802e15 	stw	r2,184(sp)
 8005fd4:	90e4703a 	and	r18,r18,r3
 8005fd8:	a03d0926 	beq	r20,zero,8005400 <__alt_data_end+0xfc005400>
 8005fdc:	0039883a 	mov	fp,zero
 8005fe0:	003d0c06 	br	8005414 <__alt_data_end+0xfc005414>
 8005fe4:	dc402617 	ldw	r17,152(sp)
 8005fe8:	0441830e 	bge	zero,r17,80065f8 <___svfprintf_internal_r+0x1864>
 8005fec:	dc403217 	ldw	r17,200(sp)
 8005ff0:	d8803317 	ldw	r2,204(sp)
 8005ff4:	1440010e 	bge	r2,r17,8005ffc <___svfprintf_internal_r+0x1268>
 8005ff8:	1023883a 	mov	r17,r2
 8005ffc:	04400a0e 	bge	zero,r17,8006028 <___svfprintf_internal_r+0x1294>
 8006000:	d8801f17 	ldw	r2,124(sp)
 8006004:	1c47883a 	add	r3,r3,r17
 8006008:	44000015 	stw	r16,0(r8)
 800600c:	10800044 	addi	r2,r2,1
 8006010:	44400115 	stw	r17,4(r8)
 8006014:	d8c02015 	stw	r3,128(sp)
 8006018:	d8801f15 	stw	r2,124(sp)
 800601c:	010001c4 	movi	r4,7
 8006020:	20827516 	blt	r4,r2,80069f8 <___svfprintf_internal_r+0x1c64>
 8006024:	42000204 	addi	r8,r8,8
 8006028:	88027b16 	blt	r17,zero,8006a18 <___svfprintf_internal_r+0x1c84>
 800602c:	d9003217 	ldw	r4,200(sp)
 8006030:	2463c83a 	sub	r17,r4,r17
 8006034:	0440990e 	bge	zero,r17,800629c <___svfprintf_internal_r+0x1508>
 8006038:	05800404 	movi	r22,16
 800603c:	d8801f17 	ldw	r2,124(sp)
 8006040:	b441530e 	bge	r22,r17,8006590 <___svfprintf_internal_r+0x17fc>
 8006044:	01020074 	movhi	r4,2049
 8006048:	211ff084 	addi	r4,r4,32706
 800604c:	d9002c15 	stw	r4,176(sp)
 8006050:	070001c4 	movi	fp,7
 8006054:	dd002d17 	ldw	r20,180(sp)
 8006058:	00000306 	br	8006068 <___svfprintf_internal_r+0x12d4>
 800605c:	42000204 	addi	r8,r8,8
 8006060:	8c7ffc04 	addi	r17,r17,-16
 8006064:	b4414d0e 	bge	r22,r17,800659c <___svfprintf_internal_r+0x1808>
 8006068:	18c00404 	addi	r3,r3,16
 800606c:	10800044 	addi	r2,r2,1
 8006070:	45400015 	stw	r21,0(r8)
 8006074:	45800115 	stw	r22,4(r8)
 8006078:	d8c02015 	stw	r3,128(sp)
 800607c:	d8801f15 	stw	r2,124(sp)
 8006080:	e0bff60e 	bge	fp,r2,800605c <__alt_data_end+0xfc00605c>
 8006084:	d9801e04 	addi	r6,sp,120
 8006088:	a00b883a 	mov	r5,r20
 800608c:	9809883a 	mov	r4,r19
 8006090:	800e7340 	call	800e734 <__ssprint_r>
 8006094:	103c261e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006098:	d8c02017 	ldw	r3,128(sp)
 800609c:	d8801f17 	ldw	r2,124(sp)
 80060a0:	da000404 	addi	r8,sp,16
 80060a4:	003fee06 	br	8006060 <__alt_data_end+0xfc006060>
 80060a8:	d9402d17 	ldw	r5,180(sp)
 80060ac:	d9801e04 	addi	r6,sp,120
 80060b0:	9809883a 	mov	r4,r19
 80060b4:	800e7340 	call	800e734 <__ssprint_r>
 80060b8:	103c1d1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80060bc:	d8c02017 	ldw	r3,128(sp)
 80060c0:	df002787 	ldb	fp,158(sp)
 80060c4:	da000404 	addi	r8,sp,16
 80060c8:	003d3806 	br	80055ac <__alt_data_end+0xfc0055ac>
 80060cc:	9080040c 	andi	r2,r18,16
 80060d0:	10005c26 	beq	r2,zero,8006244 <___svfprintf_internal_r+0x14b0>
 80060d4:	d8c02e17 	ldw	r3,184(sp)
 80060d8:	d9002a17 	ldw	r4,168(sp)
 80060dc:	d8002785 	stb	zero,158(sp)
 80060e0:	18800104 	addi	r2,r3,4
 80060e4:	1d000017 	ldw	r20,0(r3)
 80060e8:	002d883a 	mov	r22,zero
 80060ec:	20005e16 	blt	r4,zero,8006268 <___svfprintf_internal_r+0x14d4>
 80060f0:	00ffdfc4 	movi	r3,-129
 80060f4:	d8802e15 	stw	r2,184(sp)
 80060f8:	90e4703a 	and	r18,r18,r3
 80060fc:	0039883a 	mov	fp,zero
 8006100:	a03ddf26 	beq	r20,zero,8005880 <__alt_data_end+0xfc005880>
 8006104:	00800244 	movi	r2,9
 8006108:	153c8e36 	bltu	r2,r20,8005344 <__alt_data_end+0xfc005344>
 800610c:	a5000c04 	addi	r20,r20,48
 8006110:	dc001dc4 	addi	r16,sp,119
 8006114:	dd001dc5 	stb	r20,119(sp)
 8006118:	d8c02817 	ldw	r3,160(sp)
 800611c:	1c07c83a 	sub	r3,r3,r16
 8006120:	d8c02b15 	stw	r3,172(sp)
 8006124:	003cd306 	br	8005474 <__alt_data_end+0xfc005474>
 8006128:	d8803317 	ldw	r2,204(sp)
 800612c:	143fffc4 	addi	r16,r2,-1
 8006130:	043f560e 	bge	zero,r16,8005e8c <__alt_data_end+0xfc005e8c>
 8006134:	07000404 	movi	fp,16
 8006138:	e403530e 	bge	fp,r16,8006e88 <___svfprintf_internal_r+0x20f4>
 800613c:	01420074 	movhi	r5,2049
 8006140:	295ff084 	addi	r5,r5,32706
 8006144:	d9402c15 	stw	r5,176(sp)
 8006148:	01c001c4 	movi	r7,7
 800614c:	dd002d17 	ldw	r20,180(sp)
 8006150:	00000306 	br	8006160 <___svfprintf_internal_r+0x13cc>
 8006154:	843ffc04 	addi	r16,r16,-16
 8006158:	b5800204 	addi	r22,r22,8
 800615c:	e400130e 	bge	fp,r16,80061ac <___svfprintf_internal_r+0x1418>
 8006160:	18c00404 	addi	r3,r3,16
 8006164:	8c400044 	addi	r17,r17,1
 8006168:	b5400015 	stw	r21,0(r22)
 800616c:	b7000115 	stw	fp,4(r22)
 8006170:	d8c02015 	stw	r3,128(sp)
 8006174:	dc401f15 	stw	r17,124(sp)
 8006178:	3c7ff60e 	bge	r7,r17,8006154 <__alt_data_end+0xfc006154>
 800617c:	d9801e04 	addi	r6,sp,120
 8006180:	a00b883a 	mov	r5,r20
 8006184:	9809883a 	mov	r4,r19
 8006188:	d9c03d15 	stw	r7,244(sp)
 800618c:	800e7340 	call	800e734 <__ssprint_r>
 8006190:	d9c03d17 	ldw	r7,244(sp)
 8006194:	103be61e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006198:	843ffc04 	addi	r16,r16,-16
 800619c:	d8c02017 	ldw	r3,128(sp)
 80061a0:	dc401f17 	ldw	r17,124(sp)
 80061a4:	dd800404 	addi	r22,sp,16
 80061a8:	e43fed16 	blt	fp,r16,8006160 <__alt_data_end+0xfc006160>
 80061ac:	d8802c17 	ldw	r2,176(sp)
 80061b0:	1c07883a 	add	r3,r3,r16
 80061b4:	8c400044 	addi	r17,r17,1
 80061b8:	b0800015 	stw	r2,0(r22)
 80061bc:	b4000115 	stw	r16,4(r22)
 80061c0:	d8c02015 	stw	r3,128(sp)
 80061c4:	dc401f15 	stw	r17,124(sp)
 80061c8:	008001c4 	movi	r2,7
 80061cc:	147f2e0e 	bge	r2,r17,8005e88 <__alt_data_end+0xfc005e88>
 80061d0:	d9402d17 	ldw	r5,180(sp)
 80061d4:	d9801e04 	addi	r6,sp,120
 80061d8:	9809883a 	mov	r4,r19
 80061dc:	800e7340 	call	800e734 <__ssprint_r>
 80061e0:	103bd31e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80061e4:	d8c02017 	ldw	r3,128(sp)
 80061e8:	dc401f17 	ldw	r17,124(sp)
 80061ec:	dd800404 	addi	r22,sp,16
 80061f0:	003f2606 	br	8005e8c <__alt_data_end+0xfc005e8c>
 80061f4:	9080040c 	andi	r2,r18,16
 80061f8:	1000c326 	beq	r2,zero,8006508 <___svfprintf_internal_r+0x1774>
 80061fc:	d9402e17 	ldw	r5,184(sp)
 8006200:	2d000017 	ldw	r20,0(r5)
 8006204:	29400104 	addi	r5,r5,4
 8006208:	d9402e15 	stw	r5,184(sp)
 800620c:	a02dd7fa 	srai	r22,r20,31
 8006210:	b005883a 	mov	r2,r22
 8006214:	103c430e 	bge	r2,zero,8005324 <__alt_data_end+0xfc005324>
 8006218:	d9402a17 	ldw	r5,168(sp)
 800621c:	0529c83a 	sub	r20,zero,r20
 8006220:	07000b44 	movi	fp,45
 8006224:	a004c03a 	cmpne	r2,r20,zero
 8006228:	05adc83a 	sub	r22,zero,r22
 800622c:	df002785 	stb	fp,158(sp)
 8006230:	b0adc83a 	sub	r22,r22,r2
 8006234:	28022e16 	blt	r5,zero,8006af0 <___svfprintf_internal_r+0x1d5c>
 8006238:	00bfdfc4 	movi	r2,-129
 800623c:	90a4703a 	and	r18,r18,r2
 8006240:	003c3f06 	br	8005340 <__alt_data_end+0xfc005340>
 8006244:	9080100c 	andi	r2,r18,64
 8006248:	d8002785 	stb	zero,158(sp)
 800624c:	10012526 	beq	r2,zero,80066e4 <___svfprintf_internal_r+0x1950>
 8006250:	d9402e17 	ldw	r5,184(sp)
 8006254:	d8c02a17 	ldw	r3,168(sp)
 8006258:	002d883a 	mov	r22,zero
 800625c:	28800104 	addi	r2,r5,4
 8006260:	2d00000b 	ldhu	r20,0(r5)
 8006264:	183fa20e 	bge	r3,zero,80060f0 <__alt_data_end+0xfc0060f0>
 8006268:	d8802e15 	stw	r2,184(sp)
 800626c:	0039883a 	mov	fp,zero
 8006270:	a584b03a 	or	r2,r20,r22
 8006274:	103c321e 	bne	r2,zero,8005340 <__alt_data_end+0xfc005340>
 8006278:	00800044 	movi	r2,1
 800627c:	003e5006 	br	8005bc0 <__alt_data_end+0xfc005bc0>
 8006280:	d9402d17 	ldw	r5,180(sp)
 8006284:	d9801e04 	addi	r6,sp,120
 8006288:	9809883a 	mov	r4,r19
 800628c:	800e7340 	call	800e734 <__ssprint_r>
 8006290:	103ba71e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006294:	d8c02017 	ldw	r3,128(sp)
 8006298:	da000404 	addi	r8,sp,16
 800629c:	d9003217 	ldw	r4,200(sp)
 80062a0:	d8802617 	ldw	r2,152(sp)
 80062a4:	d9403317 	ldw	r5,204(sp)
 80062a8:	8123883a 	add	r17,r16,r4
 80062ac:	11400216 	blt	r2,r5,80062b8 <___svfprintf_internal_r+0x1524>
 80062b0:	9100004c 	andi	r4,r18,1
 80062b4:	20000d26 	beq	r4,zero,80062ec <___svfprintf_internal_r+0x1558>
 80062b8:	d9003817 	ldw	r4,224(sp)
 80062bc:	d9403417 	ldw	r5,208(sp)
 80062c0:	1907883a 	add	r3,r3,r4
 80062c4:	d9001f17 	ldw	r4,124(sp)
 80062c8:	41400015 	stw	r5,0(r8)
 80062cc:	d9403817 	ldw	r5,224(sp)
 80062d0:	21000044 	addi	r4,r4,1
 80062d4:	d8c02015 	stw	r3,128(sp)
 80062d8:	41400115 	stw	r5,4(r8)
 80062dc:	d9001f15 	stw	r4,124(sp)
 80062e0:	014001c4 	movi	r5,7
 80062e4:	2901dc16 	blt	r5,r4,8006a58 <___svfprintf_internal_r+0x1cc4>
 80062e8:	42000204 	addi	r8,r8,8
 80062ec:	d9003317 	ldw	r4,204(sp)
 80062f0:	8121883a 	add	r16,r16,r4
 80062f4:	2085c83a 	sub	r2,r4,r2
 80062f8:	8461c83a 	sub	r16,r16,r17
 80062fc:	1400010e 	bge	r2,r16,8006304 <___svfprintf_internal_r+0x1570>
 8006300:	1021883a 	mov	r16,r2
 8006304:	04000a0e 	bge	zero,r16,8006330 <___svfprintf_internal_r+0x159c>
 8006308:	d9001f17 	ldw	r4,124(sp)
 800630c:	1c07883a 	add	r3,r3,r16
 8006310:	44400015 	stw	r17,0(r8)
 8006314:	21000044 	addi	r4,r4,1
 8006318:	44000115 	stw	r16,4(r8)
 800631c:	d8c02015 	stw	r3,128(sp)
 8006320:	d9001f15 	stw	r4,124(sp)
 8006324:	014001c4 	movi	r5,7
 8006328:	2901e616 	blt	r5,r4,8006ac4 <___svfprintf_internal_r+0x1d30>
 800632c:	42000204 	addi	r8,r8,8
 8006330:	8001f616 	blt	r16,zero,8006b0c <___svfprintf_internal_r+0x1d78>
 8006334:	1421c83a 	sub	r16,r2,r16
 8006338:	043cfa0e 	bge	zero,r16,8005724 <__alt_data_end+0xfc005724>
 800633c:	04400404 	movi	r17,16
 8006340:	d8801f17 	ldw	r2,124(sp)
 8006344:	8c3edd0e 	bge	r17,r16,8005ebc <__alt_data_end+0xfc005ebc>
 8006348:	01420074 	movhi	r5,2049
 800634c:	295ff084 	addi	r5,r5,32706
 8006350:	d9402c15 	stw	r5,176(sp)
 8006354:	058001c4 	movi	r22,7
 8006358:	dd002d17 	ldw	r20,180(sp)
 800635c:	00000306 	br	800636c <___svfprintf_internal_r+0x15d8>
 8006360:	42000204 	addi	r8,r8,8
 8006364:	843ffc04 	addi	r16,r16,-16
 8006368:	8c3ed70e 	bge	r17,r16,8005ec8 <__alt_data_end+0xfc005ec8>
 800636c:	18c00404 	addi	r3,r3,16
 8006370:	10800044 	addi	r2,r2,1
 8006374:	45400015 	stw	r21,0(r8)
 8006378:	44400115 	stw	r17,4(r8)
 800637c:	d8c02015 	stw	r3,128(sp)
 8006380:	d8801f15 	stw	r2,124(sp)
 8006384:	b0bff60e 	bge	r22,r2,8006360 <__alt_data_end+0xfc006360>
 8006388:	d9801e04 	addi	r6,sp,120
 800638c:	a00b883a 	mov	r5,r20
 8006390:	9809883a 	mov	r4,r19
 8006394:	800e7340 	call	800e734 <__ssprint_r>
 8006398:	103b651e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 800639c:	d8c02017 	ldw	r3,128(sp)
 80063a0:	d8801f17 	ldw	r2,124(sp)
 80063a4:	da000404 	addi	r8,sp,16
 80063a8:	003fee06 	br	8006364 <__alt_data_end+0xfc006364>
 80063ac:	9088703a 	and	r4,r18,r2
 80063b0:	203e8d1e 	bne	r4,zero,8005de8 <__alt_data_end+0xfc005de8>
 80063b4:	dc401f17 	ldw	r17,124(sp)
 80063b8:	40800115 	stw	r2,4(r8)
 80063bc:	44000015 	stw	r16,0(r8)
 80063c0:	8c400044 	addi	r17,r17,1
 80063c4:	d8c02015 	stw	r3,128(sp)
 80063c8:	dc401f15 	stw	r17,124(sp)
 80063cc:	008001c4 	movi	r2,7
 80063d0:	147f7f16 	blt	r2,r17,80061d0 <__alt_data_end+0xfc0061d0>
 80063d4:	45800204 	addi	r22,r8,8
 80063d8:	003eac06 	br	8005e8c <__alt_data_end+0xfc005e8c>
 80063dc:	d9402d17 	ldw	r5,180(sp)
 80063e0:	d9801e04 	addi	r6,sp,120
 80063e4:	9809883a 	mov	r4,r19
 80063e8:	800e7340 	call	800e734 <__ssprint_r>
 80063ec:	103b501e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80063f0:	d8c02017 	ldw	r3,128(sp)
 80063f4:	dc401f17 	ldw	r17,124(sp)
 80063f8:	da000404 	addi	r8,sp,16
 80063fc:	003e8406 	br	8005e10 <__alt_data_end+0xfc005e10>
 8006400:	d9402d17 	ldw	r5,180(sp)
 8006404:	d9801e04 	addi	r6,sp,120
 8006408:	9809883a 	mov	r4,r19
 800640c:	800e7340 	call	800e734 <__ssprint_r>
 8006410:	103b471e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006414:	d8c02017 	ldw	r3,128(sp)
 8006418:	dc401f17 	ldw	r17,124(sp)
 800641c:	dd800404 	addi	r22,sp,16
 8006420:	003e8606 	br	8005e3c <__alt_data_end+0xfc005e3c>
 8006424:	0029883a 	mov	r20,zero
 8006428:	a5000c04 	addi	r20,r20,48
 800642c:	dc001dc4 	addi	r16,sp,119
 8006430:	dd001dc5 	stb	r20,119(sp)
 8006434:	003f3806 	br	8006118 <__alt_data_end+0xfc006118>
 8006438:	d9402d17 	ldw	r5,180(sp)
 800643c:	d9801e04 	addi	r6,sp,120
 8006440:	9809883a 	mov	r4,r19
 8006444:	800e7340 	call	800e734 <__ssprint_r>
 8006448:	103b391e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 800644c:	d8c02017 	ldw	r3,128(sp)
 8006450:	da000404 	addi	r8,sp,16
 8006454:	003c7306 	br	8005624 <__alt_data_end+0xfc005624>
 8006458:	d9003617 	ldw	r4,216(sp)
 800645c:	d9403717 	ldw	r5,220(sp)
 8006460:	da003e15 	stw	r8,248(sp)
 8006464:	800e4540 	call	800e454 <__fpclassifyd>
 8006468:	da003e17 	ldw	r8,248(sp)
 800646c:	1000bd1e 	bne	r2,zero,8006764 <___svfprintf_internal_r+0x19d0>
 8006470:	008011c4 	movi	r2,71
 8006474:	14411e0e 	bge	r2,r17,80068f0 <___svfprintf_internal_r+0x1b5c>
 8006478:	04020074 	movhi	r16,2049
 800647c:	841fe304 	addi	r16,r16,32652
 8006480:	00c000c4 	movi	r3,3
 8006484:	00bfdfc4 	movi	r2,-129
 8006488:	d8c02915 	stw	r3,164(sp)
 800648c:	90a4703a 	and	r18,r18,r2
 8006490:	df002783 	ldbu	fp,158(sp)
 8006494:	d8c02b15 	stw	r3,172(sp)
 8006498:	d8002a15 	stw	zero,168(sp)
 800649c:	d8003215 	stw	zero,200(sp)
 80064a0:	003bfa06 	br	800548c <__alt_data_end+0xfc00548c>
 80064a4:	9080100c 	andi	r2,r18,64
 80064a8:	d8002785 	stb	zero,158(sp)
 80064ac:	10009426 	beq	r2,zero,8006700 <___svfprintf_internal_r+0x196c>
 80064b0:	d9402e17 	ldw	r5,184(sp)
 80064b4:	d8c02a17 	ldw	r3,168(sp)
 80064b8:	002d883a 	mov	r22,zero
 80064bc:	28800104 	addi	r2,r5,4
 80064c0:	2d00000b 	ldhu	r20,0(r5)
 80064c4:	183ec10e 	bge	r3,zero,8005fcc <__alt_data_end+0xfc005fcc>
 80064c8:	a586b03a 	or	r3,r20,r22
 80064cc:	d8802e15 	stw	r2,184(sp)
 80064d0:	183ec21e 	bne	r3,zero,8005fdc <__alt_data_end+0xfc005fdc>
 80064d4:	0039883a 	mov	fp,zero
 80064d8:	0005883a 	mov	r2,zero
 80064dc:	003db806 	br	8005bc0 <__alt_data_end+0xfc005bc0>
 80064e0:	d8c02e17 	ldw	r3,184(sp)
 80064e4:	d9002e17 	ldw	r4,184(sp)
 80064e8:	d9402e17 	ldw	r5,184(sp)
 80064ec:	18c00017 	ldw	r3,0(r3)
 80064f0:	21000117 	ldw	r4,4(r4)
 80064f4:	29400204 	addi	r5,r5,8
 80064f8:	d8c03615 	stw	r3,216(sp)
 80064fc:	d9003715 	stw	r4,220(sp)
 8006500:	d9402e15 	stw	r5,184(sp)
 8006504:	003b5a06 	br	8005270 <__alt_data_end+0xfc005270>
 8006508:	9080100c 	andi	r2,r18,64
 800650c:	10010726 	beq	r2,zero,800692c <___svfprintf_internal_r+0x1b98>
 8006510:	d8802e17 	ldw	r2,184(sp)
 8006514:	1500000f 	ldh	r20,0(r2)
 8006518:	10800104 	addi	r2,r2,4
 800651c:	d8802e15 	stw	r2,184(sp)
 8006520:	a02dd7fa 	srai	r22,r20,31
 8006524:	b005883a 	mov	r2,r22
 8006528:	003b7d06 	br	8005320 <__alt_data_end+0xfc005320>
 800652c:	9080100c 	andi	r2,r18,64
 8006530:	10010526 	beq	r2,zero,8006948 <___svfprintf_internal_r+0x1bb4>
 8006534:	d8c02e17 	ldw	r3,184(sp)
 8006538:	002d883a 	mov	r22,zero
 800653c:	1d00000b 	ldhu	r20,0(r3)
 8006540:	18c00104 	addi	r3,r3,4
 8006544:	d8c02e15 	stw	r3,184(sp)
 8006548:	003ce206 	br	80058d4 <__alt_data_end+0xfc0058d4>
 800654c:	bc400007 	ldb	r17,0(r23)
 8006550:	003a6506 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8006554:	9080040c 	andi	r2,r18,16
 8006558:	10010126 	beq	r2,zero,8006960 <___svfprintf_internal_r+0x1bcc>
 800655c:	d8c02e17 	ldw	r3,184(sp)
 8006560:	d9002f17 	ldw	r4,188(sp)
 8006564:	18800017 	ldw	r2,0(r3)
 8006568:	18c00104 	addi	r3,r3,4
 800656c:	d8c02e15 	stw	r3,184(sp)
 8006570:	11000015 	stw	r4,0(r2)
 8006574:	003a3206 	br	8004e40 <__alt_data_end+0xfc004e40>
 8006578:	d9002a17 	ldw	r4,168(sp)
 800657c:	d8002785 	stb	zero,158(sp)
 8006580:	203d8d16 	blt	r4,zero,8005bb8 <__alt_data_end+0xfc005bb8>
 8006584:	00bfdfc4 	movi	r2,-129
 8006588:	90a4703a 	and	r18,r18,r2
 800658c:	003ad506 	br	80050e4 <__alt_data_end+0xfc0050e4>
 8006590:	01420074 	movhi	r5,2049
 8006594:	295ff084 	addi	r5,r5,32706
 8006598:	d9402c15 	stw	r5,176(sp)
 800659c:	d9402c17 	ldw	r5,176(sp)
 80065a0:	1c47883a 	add	r3,r3,r17
 80065a4:	10800044 	addi	r2,r2,1
 80065a8:	41400015 	stw	r5,0(r8)
 80065ac:	44400115 	stw	r17,4(r8)
 80065b0:	d8c02015 	stw	r3,128(sp)
 80065b4:	d8801f15 	stw	r2,124(sp)
 80065b8:	010001c4 	movi	r4,7
 80065bc:	20bf3016 	blt	r4,r2,8006280 <__alt_data_end+0xfc006280>
 80065c0:	42000204 	addi	r8,r8,8
 80065c4:	003f3506 	br	800629c <__alt_data_end+0xfc00629c>
 80065c8:	01020074 	movhi	r4,2049
 80065cc:	211ff084 	addi	r4,r4,32706
 80065d0:	d9002c15 	stw	r4,176(sp)
 80065d4:	003c3c06 	br	80056c8 <__alt_data_end+0xfc0056c8>
 80065d8:	d9402d17 	ldw	r5,180(sp)
 80065dc:	d9801e04 	addi	r6,sp,120
 80065e0:	9809883a 	mov	r4,r19
 80065e4:	800e7340 	call	800e734 <__ssprint_r>
 80065e8:	103ad11e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80065ec:	d8c02017 	ldw	r3,128(sp)
 80065f0:	da000404 	addi	r8,sp,16
 80065f4:	003d9306 	br	8005c44 <__alt_data_end+0xfc005c44>
 80065f8:	d8801f17 	ldw	r2,124(sp)
 80065fc:	01420074 	movhi	r5,2049
 8006600:	01000044 	movi	r4,1
 8006604:	18c00044 	addi	r3,r3,1
 8006608:	10800044 	addi	r2,r2,1
 800660c:	295ff004 	addi	r5,r5,32704
 8006610:	41000115 	stw	r4,4(r8)
 8006614:	41400015 	stw	r5,0(r8)
 8006618:	d8c02015 	stw	r3,128(sp)
 800661c:	d8801f15 	stw	r2,124(sp)
 8006620:	010001c4 	movi	r4,7
 8006624:	2080b516 	blt	r4,r2,80068fc <___svfprintf_internal_r+0x1b68>
 8006628:	42000204 	addi	r8,r8,8
 800662c:	8800041e 	bne	r17,zero,8006640 <___svfprintf_internal_r+0x18ac>
 8006630:	d8803317 	ldw	r2,204(sp)
 8006634:	1000021e 	bne	r2,zero,8006640 <___svfprintf_internal_r+0x18ac>
 8006638:	9080004c 	andi	r2,r18,1
 800663c:	103c3926 	beq	r2,zero,8005724 <__alt_data_end+0xfc005724>
 8006640:	d9003817 	ldw	r4,224(sp)
 8006644:	d8801f17 	ldw	r2,124(sp)
 8006648:	d9403417 	ldw	r5,208(sp)
 800664c:	20c7883a 	add	r3,r4,r3
 8006650:	10800044 	addi	r2,r2,1
 8006654:	41000115 	stw	r4,4(r8)
 8006658:	41400015 	stw	r5,0(r8)
 800665c:	d8c02015 	stw	r3,128(sp)
 8006660:	d8801f15 	stw	r2,124(sp)
 8006664:	010001c4 	movi	r4,7
 8006668:	20818016 	blt	r4,r2,8006c6c <___svfprintf_internal_r+0x1ed8>
 800666c:	42000204 	addi	r8,r8,8
 8006670:	0463c83a 	sub	r17,zero,r17
 8006674:	0440cb0e 	bge	zero,r17,80069a4 <___svfprintf_internal_r+0x1c10>
 8006678:	05800404 	movi	r22,16
 800667c:	b440e80e 	bge	r22,r17,8006a20 <___svfprintf_internal_r+0x1c8c>
 8006680:	01420074 	movhi	r5,2049
 8006684:	295ff084 	addi	r5,r5,32706
 8006688:	d9402c15 	stw	r5,176(sp)
 800668c:	070001c4 	movi	fp,7
 8006690:	dd002d17 	ldw	r20,180(sp)
 8006694:	00000306 	br	80066a4 <___svfprintf_internal_r+0x1910>
 8006698:	42000204 	addi	r8,r8,8
 800669c:	8c7ffc04 	addi	r17,r17,-16
 80066a0:	b440e20e 	bge	r22,r17,8006a2c <___svfprintf_internal_r+0x1c98>
 80066a4:	18c00404 	addi	r3,r3,16
 80066a8:	10800044 	addi	r2,r2,1
 80066ac:	45400015 	stw	r21,0(r8)
 80066b0:	45800115 	stw	r22,4(r8)
 80066b4:	d8c02015 	stw	r3,128(sp)
 80066b8:	d8801f15 	stw	r2,124(sp)
 80066bc:	e0bff60e 	bge	fp,r2,8006698 <__alt_data_end+0xfc006698>
 80066c0:	d9801e04 	addi	r6,sp,120
 80066c4:	a00b883a 	mov	r5,r20
 80066c8:	9809883a 	mov	r4,r19
 80066cc:	800e7340 	call	800e734 <__ssprint_r>
 80066d0:	103a971e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 80066d4:	d8c02017 	ldw	r3,128(sp)
 80066d8:	d8801f17 	ldw	r2,124(sp)
 80066dc:	da000404 	addi	r8,sp,16
 80066e0:	003fee06 	br	800669c <__alt_data_end+0xfc00669c>
 80066e4:	d9002e17 	ldw	r4,184(sp)
 80066e8:	d9402a17 	ldw	r5,168(sp)
 80066ec:	002d883a 	mov	r22,zero
 80066f0:	20800104 	addi	r2,r4,4
 80066f4:	25000017 	ldw	r20,0(r4)
 80066f8:	283e7d0e 	bge	r5,zero,80060f0 <__alt_data_end+0xfc0060f0>
 80066fc:	003eda06 	br	8006268 <__alt_data_end+0xfc006268>
 8006700:	d9002e17 	ldw	r4,184(sp)
 8006704:	d9402a17 	ldw	r5,168(sp)
 8006708:	002d883a 	mov	r22,zero
 800670c:	20800104 	addi	r2,r4,4
 8006710:	25000017 	ldw	r20,0(r4)
 8006714:	283e2d0e 	bge	r5,zero,8005fcc <__alt_data_end+0xfc005fcc>
 8006718:	003f6b06 	br	80064c8 <__alt_data_end+0xfc0064c8>
 800671c:	d8c02e15 	stw	r3,184(sp)
 8006720:	0039883a 	mov	fp,zero
 8006724:	003ed206 	br	8006270 <__alt_data_end+0xfc006270>
 8006728:	bc400043 	ldbu	r17,1(r23)
 800672c:	84000814 	ori	r16,r16,32
 8006730:	bdc00044 	addi	r23,r23,1
 8006734:	8c403fcc 	andi	r17,r17,255
 8006738:	8c40201c 	xori	r17,r17,128
 800673c:	8c7fe004 	addi	r17,r17,-128
 8006740:	0039e906 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8006744:	d9402d17 	ldw	r5,180(sp)
 8006748:	d9801e04 	addi	r6,sp,120
 800674c:	9809883a 	mov	r4,r19
 8006750:	800e7340 	call	800e734 <__ssprint_r>
 8006754:	103a761e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006758:	d8c02017 	ldw	r3,128(sp)
 800675c:	da000404 	addi	r8,sp,16
 8006760:	003d4a06 	br	8005c8c <__alt_data_end+0xfc005c8c>
 8006764:	d9002a17 	ldw	r4,168(sp)
 8006768:	05bff7c4 	movi	r22,-33
 800676c:	00bfffc4 	movi	r2,-1
 8006770:	8dac703a 	and	r22,r17,r22
 8006774:	20806a26 	beq	r4,r2,8006920 <___svfprintf_internal_r+0x1b8c>
 8006778:	008011c4 	movi	r2,71
 800677c:	b0813726 	beq	r22,r2,8006c5c <___svfprintf_internal_r+0x1ec8>
 8006780:	d9003717 	ldw	r4,220(sp)
 8006784:	90c04014 	ori	r3,r18,256
 8006788:	d8c02c15 	stw	r3,176(sp)
 800678c:	20015d16 	blt	r4,zero,8006d04 <___svfprintf_internal_r+0x1f70>
 8006790:	dd003717 	ldw	r20,220(sp)
 8006794:	d8002905 	stb	zero,164(sp)
 8006798:	00801984 	movi	r2,102
 800679c:	88814026 	beq	r17,r2,8006ca0 <___svfprintf_internal_r+0x1f0c>
 80067a0:	00801184 	movi	r2,70
 80067a4:	88817126 	beq	r17,r2,8006d6c <___svfprintf_internal_r+0x1fd8>
 80067a8:	00801144 	movi	r2,69
 80067ac:	b0816226 	beq	r22,r2,8006d38 <___svfprintf_internal_r+0x1fa4>
 80067b0:	d8c02a17 	ldw	r3,168(sp)
 80067b4:	d8802104 	addi	r2,sp,132
 80067b8:	d8800315 	stw	r2,12(sp)
 80067bc:	d9403617 	ldw	r5,216(sp)
 80067c0:	d8802504 	addi	r2,sp,148
 80067c4:	d8800215 	stw	r2,8(sp)
 80067c8:	d8802604 	addi	r2,sp,152
 80067cc:	d8c00015 	stw	r3,0(sp)
 80067d0:	d8800115 	stw	r2,4(sp)
 80067d4:	01c00084 	movi	r7,2
 80067d8:	a00d883a 	mov	r6,r20
 80067dc:	9809883a 	mov	r4,r19
 80067e0:	d8c03d15 	stw	r3,244(sp)
 80067e4:	da003e15 	stw	r8,248(sp)
 80067e8:	80097800 	call	8009780 <_dtoa_r>
 80067ec:	1021883a 	mov	r16,r2
 80067f0:	008019c4 	movi	r2,103
 80067f4:	d8c03d17 	ldw	r3,244(sp)
 80067f8:	da003e17 	ldw	r8,248(sp)
 80067fc:	8880e726 	beq	r17,r2,8006b9c <___svfprintf_internal_r+0x1e08>
 8006800:	008011c4 	movi	r2,71
 8006804:	8880d426 	beq	r17,r2,8006b58 <___svfprintf_internal_r+0x1dc4>
 8006808:	80f9883a 	add	fp,r16,r3
 800680c:	d9003617 	ldw	r4,216(sp)
 8006810:	000d883a 	mov	r6,zero
 8006814:	000f883a 	mov	r7,zero
 8006818:	a00b883a 	mov	r5,r20
 800681c:	da003e15 	stw	r8,248(sp)
 8006820:	8013c300 	call	8013c30 <__eqdf2>
 8006824:	da003e17 	ldw	r8,248(sp)
 8006828:	1000e426 	beq	r2,zero,8006bbc <___svfprintf_internal_r+0x1e28>
 800682c:	d8802117 	ldw	r2,132(sp)
 8006830:	1700062e 	bgeu	r2,fp,800684c <___svfprintf_internal_r+0x1ab8>
 8006834:	01000c04 	movi	r4,48
 8006838:	10c00044 	addi	r3,r2,1
 800683c:	d8c02115 	stw	r3,132(sp)
 8006840:	11000005 	stb	r4,0(r2)
 8006844:	d8802117 	ldw	r2,132(sp)
 8006848:	173ffb36 	bltu	r2,fp,8006838 <__alt_data_end+0xfc006838>
 800684c:	1405c83a 	sub	r2,r2,r16
 8006850:	d8803315 	stw	r2,204(sp)
 8006854:	008011c4 	movi	r2,71
 8006858:	b080c526 	beq	r22,r2,8006b70 <___svfprintf_internal_r+0x1ddc>
 800685c:	00801944 	movi	r2,101
 8006860:	1441d80e 	bge	r2,r17,8006fc4 <___svfprintf_internal_r+0x2230>
 8006864:	d8c02617 	ldw	r3,152(sp)
 8006868:	00801984 	movi	r2,102
 800686c:	d8c03215 	stw	r3,200(sp)
 8006870:	88813426 	beq	r17,r2,8006d44 <___svfprintf_internal_r+0x1fb0>
 8006874:	d8c03217 	ldw	r3,200(sp)
 8006878:	d9003317 	ldw	r4,204(sp)
 800687c:	19012516 	blt	r3,r4,8006d14 <___svfprintf_internal_r+0x1f80>
 8006880:	9480004c 	andi	r18,r18,1
 8006884:	9001841e 	bne	r18,zero,8006e98 <___svfprintf_internal_r+0x2104>
 8006888:	1805883a 	mov	r2,r3
 800688c:	1801cb16 	blt	r3,zero,8006fbc <___svfprintf_internal_r+0x2228>
 8006890:	d8c03217 	ldw	r3,200(sp)
 8006894:	044019c4 	movi	r17,103
 8006898:	d8c02b15 	stw	r3,172(sp)
 800689c:	df002907 	ldb	fp,164(sp)
 80068a0:	e000a61e 	bne	fp,zero,8006b3c <___svfprintf_internal_r+0x1da8>
 80068a4:	df002783 	ldbu	fp,158(sp)
 80068a8:	d8802915 	stw	r2,164(sp)
 80068ac:	dc802c17 	ldw	r18,176(sp)
 80068b0:	d8002a15 	stw	zero,168(sp)
 80068b4:	003af506 	br	800548c <__alt_data_end+0xfc00548c>
 80068b8:	04020074 	movhi	r16,2049
 80068bc:	841fe004 	addi	r16,r16,32640
 80068c0:	003a7e06 	br	80052bc <__alt_data_end+0xfc0052bc>
 80068c4:	d9003917 	ldw	r4,228(sp)
 80068c8:	04001004 	movi	r16,64
 80068cc:	800b883a 	mov	r5,r16
 80068d0:	800c17c0 	call	800c17c <_malloc_r>
 80068d4:	d9002d17 	ldw	r4,180(sp)
 80068d8:	20800015 	stw	r2,0(r4)
 80068dc:	20800415 	stw	r2,16(r4)
 80068e0:	1001d026 	beq	r2,zero,8007024 <___svfprintf_internal_r+0x2290>
 80068e4:	d8802d17 	ldw	r2,180(sp)
 80068e8:	14000515 	stw	r16,20(r2)
 80068ec:	00394406 	br	8004e00 <__alt_data_end+0xfc004e00>
 80068f0:	04020074 	movhi	r16,2049
 80068f4:	841fe204 	addi	r16,r16,32648
 80068f8:	003ee106 	br	8006480 <__alt_data_end+0xfc006480>
 80068fc:	d9402d17 	ldw	r5,180(sp)
 8006900:	d9801e04 	addi	r6,sp,120
 8006904:	9809883a 	mov	r4,r19
 8006908:	800e7340 	call	800e734 <__ssprint_r>
 800690c:	103a081e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006910:	dc402617 	ldw	r17,152(sp)
 8006914:	d8c02017 	ldw	r3,128(sp)
 8006918:	da000404 	addi	r8,sp,16
 800691c:	003f4306 	br	800662c <__alt_data_end+0xfc00662c>
 8006920:	01400184 	movi	r5,6
 8006924:	d9402a15 	stw	r5,168(sp)
 8006928:	003f9506 	br	8006780 <__alt_data_end+0xfc006780>
 800692c:	d8c02e17 	ldw	r3,184(sp)
 8006930:	1d000017 	ldw	r20,0(r3)
 8006934:	18c00104 	addi	r3,r3,4
 8006938:	d8c02e15 	stw	r3,184(sp)
 800693c:	a02dd7fa 	srai	r22,r20,31
 8006940:	b005883a 	mov	r2,r22
 8006944:	003a7606 	br	8005320 <__alt_data_end+0xfc005320>
 8006948:	d9002e17 	ldw	r4,184(sp)
 800694c:	002d883a 	mov	r22,zero
 8006950:	25000017 	ldw	r20,0(r4)
 8006954:	21000104 	addi	r4,r4,4
 8006958:	d9002e15 	stw	r4,184(sp)
 800695c:	003bdd06 	br	80058d4 <__alt_data_end+0xfc0058d4>
 8006960:	9480100c 	andi	r18,r18,64
 8006964:	90006e26 	beq	r18,zero,8006b20 <___svfprintf_internal_r+0x1d8c>
 8006968:	d9402e17 	ldw	r5,184(sp)
 800696c:	d8c02f17 	ldw	r3,188(sp)
 8006970:	28800017 	ldw	r2,0(r5)
 8006974:	29400104 	addi	r5,r5,4
 8006978:	d9402e15 	stw	r5,184(sp)
 800697c:	10c0000d 	sth	r3,0(r2)
 8006980:	00392f06 	br	8004e40 <__alt_data_end+0xfc004e40>
 8006984:	d9402d17 	ldw	r5,180(sp)
 8006988:	d9801e04 	addi	r6,sp,120
 800698c:	9809883a 	mov	r4,r19
 8006990:	800e7340 	call	800e734 <__ssprint_r>
 8006994:	1039e61e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006998:	d8c02017 	ldw	r3,128(sp)
 800699c:	d8801f17 	ldw	r2,124(sp)
 80069a0:	da000404 	addi	r8,sp,16
 80069a4:	d9403317 	ldw	r5,204(sp)
 80069a8:	10800044 	addi	r2,r2,1
 80069ac:	44000015 	stw	r16,0(r8)
 80069b0:	28c7883a 	add	r3,r5,r3
 80069b4:	003b5506 	br	800570c <__alt_data_end+0xfc00570c>
 80069b8:	8009883a 	mov	r4,r16
 80069bc:	df003e15 	stw	fp,248(sp)
 80069c0:	8004cfc0 	call	8004cfc <strlen>
 80069c4:	d8802b15 	stw	r2,172(sp)
 80069c8:	da003e17 	ldw	r8,248(sp)
 80069cc:	103c160e 	bge	r2,zero,8005a28 <__alt_data_end+0xfc005a28>
 80069d0:	0005883a 	mov	r2,zero
 80069d4:	003c1406 	br	8005a28 <__alt_data_end+0xfc005a28>
 80069d8:	00bfffc4 	movi	r2,-1
 80069dc:	0039d906 	br	8005144 <__alt_data_end+0xfc005144>
 80069e0:	01020074 	movhi	r4,2049
 80069e4:	211ff484 	addi	r4,r4,32722
 80069e8:	d9003515 	stw	r4,212(sp)
 80069ec:	003ae406 	br	8005580 <__alt_data_end+0xfc005580>
 80069f0:	013fffc4 	movi	r4,-1
 80069f4:	0039fa06 	br	80051e0 <__alt_data_end+0xfc0051e0>
 80069f8:	d9402d17 	ldw	r5,180(sp)
 80069fc:	d9801e04 	addi	r6,sp,120
 8006a00:	9809883a 	mov	r4,r19
 8006a04:	800e7340 	call	800e734 <__ssprint_r>
 8006a08:	1039c91e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006a0c:	d8c02017 	ldw	r3,128(sp)
 8006a10:	da000404 	addi	r8,sp,16
 8006a14:	003d8406 	br	8006028 <__alt_data_end+0xfc006028>
 8006a18:	0023883a 	mov	r17,zero
 8006a1c:	003d8306 	br	800602c <__alt_data_end+0xfc00602c>
 8006a20:	01020074 	movhi	r4,2049
 8006a24:	211ff084 	addi	r4,r4,32706
 8006a28:	d9002c15 	stw	r4,176(sp)
 8006a2c:	d9002c17 	ldw	r4,176(sp)
 8006a30:	1c47883a 	add	r3,r3,r17
 8006a34:	10800044 	addi	r2,r2,1
 8006a38:	41000015 	stw	r4,0(r8)
 8006a3c:	44400115 	stw	r17,4(r8)
 8006a40:	d8c02015 	stw	r3,128(sp)
 8006a44:	d8801f15 	stw	r2,124(sp)
 8006a48:	010001c4 	movi	r4,7
 8006a4c:	20bfcd16 	blt	r4,r2,8006984 <__alt_data_end+0xfc006984>
 8006a50:	42000204 	addi	r8,r8,8
 8006a54:	003fd306 	br	80069a4 <__alt_data_end+0xfc0069a4>
 8006a58:	d9402d17 	ldw	r5,180(sp)
 8006a5c:	d9801e04 	addi	r6,sp,120
 8006a60:	9809883a 	mov	r4,r19
 8006a64:	800e7340 	call	800e734 <__ssprint_r>
 8006a68:	1039b11e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006a6c:	d8802617 	ldw	r2,152(sp)
 8006a70:	d8c02017 	ldw	r3,128(sp)
 8006a74:	da000404 	addi	r8,sp,16
 8006a78:	003e1c06 	br	80062ec <__alt_data_end+0xfc0062ec>
 8006a7c:	d8802a17 	ldw	r2,168(sp)
 8006a80:	00c00184 	movi	r3,6
 8006a84:	1880012e 	bgeu	r3,r2,8006a8c <___svfprintf_internal_r+0x1cf8>
 8006a88:	1805883a 	mov	r2,r3
 8006a8c:	d8802b15 	stw	r2,172(sp)
 8006a90:	1000f316 	blt	r2,zero,8006e60 <___svfprintf_internal_r+0x20cc>
 8006a94:	04020074 	movhi	r16,2049
 8006a98:	d8802915 	stw	r2,164(sp)
 8006a9c:	dd002e15 	stw	r20,184(sp)
 8006aa0:	d8002a15 	stw	zero,168(sp)
 8006aa4:	d8003215 	stw	zero,200(sp)
 8006aa8:	841fee04 	addi	r16,r16,32696
 8006aac:	0039883a 	mov	fp,zero
 8006ab0:	003a7d06 	br	80054a8 <__alt_data_end+0xfc0054a8>
 8006ab4:	01020074 	movhi	r4,2049
 8006ab8:	211ff484 	addi	r4,r4,32722
 8006abc:	d9003515 	stw	r4,212(sp)
 8006ac0:	003b3d06 	br	80057b8 <__alt_data_end+0xfc0057b8>
 8006ac4:	d9402d17 	ldw	r5,180(sp)
 8006ac8:	d9801e04 	addi	r6,sp,120
 8006acc:	9809883a 	mov	r4,r19
 8006ad0:	800e7340 	call	800e734 <__ssprint_r>
 8006ad4:	1039961e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006ad8:	d8802617 	ldw	r2,152(sp)
 8006adc:	d9403317 	ldw	r5,204(sp)
 8006ae0:	d8c02017 	ldw	r3,128(sp)
 8006ae4:	da000404 	addi	r8,sp,16
 8006ae8:	2885c83a 	sub	r2,r5,r2
 8006aec:	003e1006 	br	8006330 <__alt_data_end+0xfc006330>
 8006af0:	00800044 	movi	r2,1
 8006af4:	10803fcc 	andi	r2,r2,255
 8006af8:	00c00044 	movi	r3,1
 8006afc:	10fa1026 	beq	r2,r3,8005340 <__alt_data_end+0xfc005340>
 8006b00:	00c00084 	movi	r3,2
 8006b04:	10fb8226 	beq	r2,r3,8005910 <__alt_data_end+0xfc005910>
 8006b08:	003a4206 	br	8005414 <__alt_data_end+0xfc005414>
 8006b0c:	0021883a 	mov	r16,zero
 8006b10:	003e0806 	br	8006334 <__alt_data_end+0xfc006334>
 8006b14:	07000b44 	movi	fp,45
 8006b18:	df002785 	stb	fp,158(sp)
 8006b1c:	0039e306 	br	80052ac <__alt_data_end+0xfc0052ac>
 8006b20:	d9002e17 	ldw	r4,184(sp)
 8006b24:	d9402f17 	ldw	r5,188(sp)
 8006b28:	20800017 	ldw	r2,0(r4)
 8006b2c:	21000104 	addi	r4,r4,4
 8006b30:	d9002e15 	stw	r4,184(sp)
 8006b34:	11400015 	stw	r5,0(r2)
 8006b38:	0038c106 	br	8004e40 <__alt_data_end+0xfc004e40>
 8006b3c:	00c00b44 	movi	r3,45
 8006b40:	d8c02785 	stb	r3,158(sp)
 8006b44:	d8802915 	stw	r2,164(sp)
 8006b48:	dc802c17 	ldw	r18,176(sp)
 8006b4c:	d8002a15 	stw	zero,168(sp)
 8006b50:	07000b44 	movi	fp,45
 8006b54:	003a5106 	br	800549c <__alt_data_end+0xfc00549c>
 8006b58:	9080004c 	andi	r2,r18,1
 8006b5c:	1000941e 	bne	r2,zero,8006db0 <___svfprintf_internal_r+0x201c>
 8006b60:	d8802117 	ldw	r2,132(sp)
 8006b64:	1405c83a 	sub	r2,r2,r16
 8006b68:	d8803315 	stw	r2,204(sp)
 8006b6c:	b441151e 	bne	r22,r17,8006fc4 <___svfprintf_internal_r+0x2230>
 8006b70:	dd802617 	ldw	r22,152(sp)
 8006b74:	00bfff44 	movi	r2,-3
 8006b78:	b0801a16 	blt	r22,r2,8006be4 <___svfprintf_internal_r+0x1e50>
 8006b7c:	d9402a17 	ldw	r5,168(sp)
 8006b80:	2d801816 	blt	r5,r22,8006be4 <___svfprintf_internal_r+0x1e50>
 8006b84:	dd803215 	stw	r22,200(sp)
 8006b88:	003f3a06 	br	8006874 <__alt_data_end+0xfc006874>
 8006b8c:	1025883a 	mov	r18,r2
 8006b90:	0039883a 	mov	fp,zero
 8006b94:	00800084 	movi	r2,2
 8006b98:	003fd606 	br	8006af4 <__alt_data_end+0xfc006af4>
 8006b9c:	9080004c 	andi	r2,r18,1
 8006ba0:	103f191e 	bne	r2,zero,8006808 <__alt_data_end+0xfc006808>
 8006ba4:	d8802117 	ldw	r2,132(sp)
 8006ba8:	003f2806 	br	800684c <__alt_data_end+0xfc00684c>
 8006bac:	01020074 	movhi	r4,2049
 8006bb0:	211ff084 	addi	r4,r4,32706
 8006bb4:	d9002c15 	stw	r4,176(sp)
 8006bb8:	003c7c06 	br	8005dac <__alt_data_end+0xfc005dac>
 8006bbc:	e005883a 	mov	r2,fp
 8006bc0:	003f2206 	br	800684c <__alt_data_end+0xfc00684c>
 8006bc4:	d9002a17 	ldw	r4,168(sp)
 8006bc8:	df002783 	ldbu	fp,158(sp)
 8006bcc:	dd002e15 	stw	r20,184(sp)
 8006bd0:	d9002915 	stw	r4,164(sp)
 8006bd4:	d9002b15 	stw	r4,172(sp)
 8006bd8:	d8002a15 	stw	zero,168(sp)
 8006bdc:	d8003215 	stw	zero,200(sp)
 8006be0:	003a2a06 	br	800548c <__alt_data_end+0xfc00548c>
 8006be4:	8c7fff84 	addi	r17,r17,-2
 8006be8:	b5bfffc4 	addi	r22,r22,-1
 8006bec:	dd802615 	stw	r22,152(sp)
 8006bf0:	dc4022c5 	stb	r17,139(sp)
 8006bf4:	b000c316 	blt	r22,zero,8006f04 <___svfprintf_internal_r+0x2170>
 8006bf8:	00800ac4 	movi	r2,43
 8006bfc:	d8802305 	stb	r2,140(sp)
 8006c00:	00800244 	movi	r2,9
 8006c04:	15806e16 	blt	r2,r22,8006dc0 <___svfprintf_internal_r+0x202c>
 8006c08:	00800c04 	movi	r2,48
 8006c0c:	b5800c04 	addi	r22,r22,48
 8006c10:	d8802345 	stb	r2,141(sp)
 8006c14:	dd802385 	stb	r22,142(sp)
 8006c18:	d88023c4 	addi	r2,sp,143
 8006c1c:	df0022c4 	addi	fp,sp,139
 8006c20:	d8c03317 	ldw	r3,204(sp)
 8006c24:	1739c83a 	sub	fp,r2,fp
 8006c28:	d9003317 	ldw	r4,204(sp)
 8006c2c:	e0c7883a 	add	r3,fp,r3
 8006c30:	df003b15 	stw	fp,236(sp)
 8006c34:	d8c02b15 	stw	r3,172(sp)
 8006c38:	00800044 	movi	r2,1
 8006c3c:	1100b70e 	bge	r2,r4,8006f1c <___svfprintf_internal_r+0x2188>
 8006c40:	d8c02b17 	ldw	r3,172(sp)
 8006c44:	18c00044 	addi	r3,r3,1
 8006c48:	d8c02b15 	stw	r3,172(sp)
 8006c4c:	1805883a 	mov	r2,r3
 8006c50:	1800b016 	blt	r3,zero,8006f14 <___svfprintf_internal_r+0x2180>
 8006c54:	d8003215 	stw	zero,200(sp)
 8006c58:	003f1006 	br	800689c <__alt_data_end+0xfc00689c>
 8006c5c:	d8802a17 	ldw	r2,168(sp)
 8006c60:	103ec71e 	bne	r2,zero,8006780 <__alt_data_end+0xfc006780>
 8006c64:	dc002a15 	stw	r16,168(sp)
 8006c68:	003ec506 	br	8006780 <__alt_data_end+0xfc006780>
 8006c6c:	d9402d17 	ldw	r5,180(sp)
 8006c70:	d9801e04 	addi	r6,sp,120
 8006c74:	9809883a 	mov	r4,r19
 8006c78:	800e7340 	call	800e734 <__ssprint_r>
 8006c7c:	10392c1e 	bne	r2,zero,8005130 <__alt_data_end+0xfc005130>
 8006c80:	dc402617 	ldw	r17,152(sp)
 8006c84:	d8c02017 	ldw	r3,128(sp)
 8006c88:	d8801f17 	ldw	r2,124(sp)
 8006c8c:	da000404 	addi	r8,sp,16
 8006c90:	003e7706 	br	8006670 <__alt_data_end+0xfc006670>
 8006c94:	182f883a 	mov	r23,r3
 8006c98:	d8002a15 	stw	zero,168(sp)
 8006c9c:	00389306 	br	8004eec <__alt_data_end+0xfc004eec>
 8006ca0:	d8c02a17 	ldw	r3,168(sp)
 8006ca4:	d8802104 	addi	r2,sp,132
 8006ca8:	d8800315 	stw	r2,12(sp)
 8006cac:	d9403617 	ldw	r5,216(sp)
 8006cb0:	d8802504 	addi	r2,sp,148
 8006cb4:	d8800215 	stw	r2,8(sp)
 8006cb8:	d8802604 	addi	r2,sp,152
 8006cbc:	d8c00015 	stw	r3,0(sp)
 8006cc0:	9809883a 	mov	r4,r19
 8006cc4:	d8800115 	stw	r2,4(sp)
 8006cc8:	01c000c4 	movi	r7,3
 8006ccc:	a00d883a 	mov	r6,r20
 8006cd0:	da003e15 	stw	r8,248(sp)
 8006cd4:	80097800 	call	8009780 <_dtoa_r>
 8006cd8:	d9002a17 	ldw	r4,168(sp)
 8006cdc:	da003e17 	ldw	r8,248(sp)
 8006ce0:	1021883a 	mov	r16,r2
 8006ce4:	1139883a 	add	fp,r2,r4
 8006ce8:	2007883a 	mov	r3,r4
 8006cec:	81000007 	ldb	r4,0(r16)
 8006cf0:	00800c04 	movi	r2,48
 8006cf4:	20806f26 	beq	r4,r2,8006eb4 <___svfprintf_internal_r+0x2120>
 8006cf8:	d8c02617 	ldw	r3,152(sp)
 8006cfc:	e0f9883a 	add	fp,fp,r3
 8006d00:	003ec206 	br	800680c <__alt_data_end+0xfc00680c>
 8006d04:	00c00b44 	movi	r3,45
 8006d08:	2520003c 	xorhi	r20,r4,32768
 8006d0c:	d8c02905 	stb	r3,164(sp)
 8006d10:	003ea106 	br	8006798 <__alt_data_end+0xfc006798>
 8006d14:	d8c03217 	ldw	r3,200(sp)
 8006d18:	00c0890e 	bge	zero,r3,8006f40 <___svfprintf_internal_r+0x21ac>
 8006d1c:	00800044 	movi	r2,1
 8006d20:	d9003317 	ldw	r4,204(sp)
 8006d24:	1105883a 	add	r2,r2,r4
 8006d28:	d8802b15 	stw	r2,172(sp)
 8006d2c:	10005f16 	blt	r2,zero,8006eac <___svfprintf_internal_r+0x2118>
 8006d30:	044019c4 	movi	r17,103
 8006d34:	003ed906 	br	800689c <__alt_data_end+0xfc00689c>
 8006d38:	d9002a17 	ldw	r4,168(sp)
 8006d3c:	20c00044 	addi	r3,r4,1
 8006d40:	003e9c06 	br	80067b4 <__alt_data_end+0xfc0067b4>
 8006d44:	d9002a17 	ldw	r4,168(sp)
 8006d48:	00c0680e 	bge	zero,r3,8006eec <___svfprintf_internal_r+0x2158>
 8006d4c:	2000461e 	bne	r4,zero,8006e68 <___svfprintf_internal_r+0x20d4>
 8006d50:	9480004c 	andi	r18,r18,1
 8006d54:	9000441e 	bne	r18,zero,8006e68 <___svfprintf_internal_r+0x20d4>
 8006d58:	1805883a 	mov	r2,r3
 8006d5c:	1800a116 	blt	r3,zero,8006fe4 <___svfprintf_internal_r+0x2250>
 8006d60:	d8c03217 	ldw	r3,200(sp)
 8006d64:	d8c02b15 	stw	r3,172(sp)
 8006d68:	003ecc06 	br	800689c <__alt_data_end+0xfc00689c>
 8006d6c:	d9402a17 	ldw	r5,168(sp)
 8006d70:	d8802104 	addi	r2,sp,132
 8006d74:	d8800315 	stw	r2,12(sp)
 8006d78:	d9400015 	stw	r5,0(sp)
 8006d7c:	d8802504 	addi	r2,sp,148
 8006d80:	d9403617 	ldw	r5,216(sp)
 8006d84:	d8800215 	stw	r2,8(sp)
 8006d88:	d8802604 	addi	r2,sp,152
 8006d8c:	d8800115 	stw	r2,4(sp)
 8006d90:	01c000c4 	movi	r7,3
 8006d94:	a00d883a 	mov	r6,r20
 8006d98:	9809883a 	mov	r4,r19
 8006d9c:	da003e15 	stw	r8,248(sp)
 8006da0:	80097800 	call	8009780 <_dtoa_r>
 8006da4:	d8c02a17 	ldw	r3,168(sp)
 8006da8:	da003e17 	ldw	r8,248(sp)
 8006dac:	1021883a 	mov	r16,r2
 8006db0:	00801184 	movi	r2,70
 8006db4:	80f9883a 	add	fp,r16,r3
 8006db8:	88bfcc26 	beq	r17,r2,8006cec <__alt_data_end+0xfc006cec>
 8006dbc:	003e9306 	br	800680c <__alt_data_end+0xfc00680c>
 8006dc0:	df0022c4 	addi	fp,sp,139
 8006dc4:	dc002a15 	stw	r16,168(sp)
 8006dc8:	9829883a 	mov	r20,r19
 8006dcc:	e021883a 	mov	r16,fp
 8006dd0:	4027883a 	mov	r19,r8
 8006dd4:	b009883a 	mov	r4,r22
 8006dd8:	01400284 	movi	r5,10
 8006ddc:	80049240 	call	8004924 <__modsi3>
 8006de0:	10800c04 	addi	r2,r2,48
 8006de4:	843fffc4 	addi	r16,r16,-1
 8006de8:	b009883a 	mov	r4,r22
 8006dec:	01400284 	movi	r5,10
 8006df0:	80800005 	stb	r2,0(r16)
 8006df4:	80048a00 	call	80048a0 <__divsi3>
 8006df8:	102d883a 	mov	r22,r2
 8006dfc:	00800244 	movi	r2,9
 8006e00:	15bff416 	blt	r2,r22,8006dd4 <__alt_data_end+0xfc006dd4>
 8006e04:	9811883a 	mov	r8,r19
 8006e08:	b0800c04 	addi	r2,r22,48
 8006e0c:	a027883a 	mov	r19,r20
 8006e10:	8029883a 	mov	r20,r16
 8006e14:	a17fffc4 	addi	r5,r20,-1
 8006e18:	a0bfffc5 	stb	r2,-1(r20)
 8006e1c:	dc002a17 	ldw	r16,168(sp)
 8006e20:	2f00782e 	bgeu	r5,fp,8007004 <___svfprintf_internal_r+0x2270>
 8006e24:	d9c02384 	addi	r7,sp,142
 8006e28:	3d0fc83a 	sub	r7,r7,r20
 8006e2c:	d9002344 	addi	r4,sp,141
 8006e30:	e1cf883a 	add	r7,fp,r7
 8006e34:	00000106 	br	8006e3c <___svfprintf_internal_r+0x20a8>
 8006e38:	28800003 	ldbu	r2,0(r5)
 8006e3c:	20800005 	stb	r2,0(r4)
 8006e40:	21000044 	addi	r4,r4,1
 8006e44:	29400044 	addi	r5,r5,1
 8006e48:	21fffb1e 	bne	r4,r7,8006e38 <__alt_data_end+0xfc006e38>
 8006e4c:	d8802304 	addi	r2,sp,140
 8006e50:	1505c83a 	sub	r2,r2,r20
 8006e54:	d8c02344 	addi	r3,sp,141
 8006e58:	1885883a 	add	r2,r3,r2
 8006e5c:	003f7006 	br	8006c20 <__alt_data_end+0xfc006c20>
 8006e60:	0005883a 	mov	r2,zero
 8006e64:	003f0b06 	br	8006a94 <__alt_data_end+0xfc006a94>
 8006e68:	d9002a17 	ldw	r4,168(sp)
 8006e6c:	d8c03217 	ldw	r3,200(sp)
 8006e70:	20800044 	addi	r2,r4,1
 8006e74:	1885883a 	add	r2,r3,r2
 8006e78:	d8802b15 	stw	r2,172(sp)
 8006e7c:	103e870e 	bge	r2,zero,800689c <__alt_data_end+0xfc00689c>
 8006e80:	0005883a 	mov	r2,zero
 8006e84:	003e8506 	br	800689c <__alt_data_end+0xfc00689c>
 8006e88:	01020074 	movhi	r4,2049
 8006e8c:	211ff084 	addi	r4,r4,32706
 8006e90:	d9002c15 	stw	r4,176(sp)
 8006e94:	003cc506 	br	80061ac <__alt_data_end+0xfc0061ac>
 8006e98:	d8c03217 	ldw	r3,200(sp)
 8006e9c:	18c00044 	addi	r3,r3,1
 8006ea0:	d8c02b15 	stw	r3,172(sp)
 8006ea4:	1805883a 	mov	r2,r3
 8006ea8:	183fa10e 	bge	r3,zero,8006d30 <__alt_data_end+0xfc006d30>
 8006eac:	0005883a 	mov	r2,zero
 8006eb0:	003f9f06 	br	8006d30 <__alt_data_end+0xfc006d30>
 8006eb4:	d9003617 	ldw	r4,216(sp)
 8006eb8:	000d883a 	mov	r6,zero
 8006ebc:	000f883a 	mov	r7,zero
 8006ec0:	a00b883a 	mov	r5,r20
 8006ec4:	d8c03d15 	stw	r3,244(sp)
 8006ec8:	da003e15 	stw	r8,248(sp)
 8006ecc:	8013c300 	call	8013c30 <__eqdf2>
 8006ed0:	d8c03d17 	ldw	r3,244(sp)
 8006ed4:	da003e17 	ldw	r8,248(sp)
 8006ed8:	103f8726 	beq	r2,zero,8006cf8 <__alt_data_end+0xfc006cf8>
 8006edc:	00800044 	movi	r2,1
 8006ee0:	10c7c83a 	sub	r3,r2,r3
 8006ee4:	d8c02615 	stw	r3,152(sp)
 8006ee8:	003f8406 	br	8006cfc <__alt_data_end+0xfc006cfc>
 8006eec:	20000e1e 	bne	r4,zero,8006f28 <___svfprintf_internal_r+0x2194>
 8006ef0:	9480004c 	andi	r18,r18,1
 8006ef4:	90000c1e 	bne	r18,zero,8006f28 <___svfprintf_internal_r+0x2194>
 8006ef8:	00800044 	movi	r2,1
 8006efc:	d8802b15 	stw	r2,172(sp)
 8006f00:	003e6606 	br	800689c <__alt_data_end+0xfc00689c>
 8006f04:	00800b44 	movi	r2,45
 8006f08:	05adc83a 	sub	r22,zero,r22
 8006f0c:	d8802305 	stb	r2,140(sp)
 8006f10:	003f3b06 	br	8006c00 <__alt_data_end+0xfc006c00>
 8006f14:	0005883a 	mov	r2,zero
 8006f18:	003f4e06 	br	8006c54 <__alt_data_end+0xfc006c54>
 8006f1c:	90a4703a 	and	r18,r18,r2
 8006f20:	903f4a26 	beq	r18,zero,8006c4c <__alt_data_end+0xfc006c4c>
 8006f24:	003f4606 	br	8006c40 <__alt_data_end+0xfc006c40>
 8006f28:	d8c02a17 	ldw	r3,168(sp)
 8006f2c:	18c00084 	addi	r3,r3,2
 8006f30:	d8c02b15 	stw	r3,172(sp)
 8006f34:	1805883a 	mov	r2,r3
 8006f38:	183e580e 	bge	r3,zero,800689c <__alt_data_end+0xfc00689c>
 8006f3c:	003fd006 	br	8006e80 <__alt_data_end+0xfc006e80>
 8006f40:	00800084 	movi	r2,2
 8006f44:	10c5c83a 	sub	r2,r2,r3
 8006f48:	003f7506 	br	8006d20 <__alt_data_end+0xfc006d20>
 8006f4c:	d9402e17 	ldw	r5,184(sp)
 8006f50:	d9002e17 	ldw	r4,184(sp)
 8006f54:	bc400043 	ldbu	r17,1(r23)
 8006f58:	29400017 	ldw	r5,0(r5)
 8006f5c:	20800104 	addi	r2,r4,4
 8006f60:	d8802e15 	stw	r2,184(sp)
 8006f64:	d9402a15 	stw	r5,168(sp)
 8006f68:	182f883a 	mov	r23,r3
 8006f6c:	283df10e 	bge	r5,zero,8006734 <__alt_data_end+0xfc006734>
 8006f70:	8c403fcc 	andi	r17,r17,255
 8006f74:	017fffc4 	movi	r5,-1
 8006f78:	8c40201c 	xori	r17,r17,128
 8006f7c:	d9402a15 	stw	r5,168(sp)
 8006f80:	8c7fe004 	addi	r17,r17,-128
 8006f84:	0037d806 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8006f88:	9080004c 	andi	r2,r18,1
 8006f8c:	0039883a 	mov	fp,zero
 8006f90:	10000726 	beq	r2,zero,8006fb0 <___svfprintf_internal_r+0x221c>
 8006f94:	d8c02817 	ldw	r3,160(sp)
 8006f98:	dc001dc4 	addi	r16,sp,119
 8006f9c:	00800c04 	movi	r2,48
 8006fa0:	1c07c83a 	sub	r3,r3,r16
 8006fa4:	d8801dc5 	stb	r2,119(sp)
 8006fa8:	d8c02b15 	stw	r3,172(sp)
 8006fac:	00393106 	br	8005474 <__alt_data_end+0xfc005474>
 8006fb0:	d8002b15 	stw	zero,172(sp)
 8006fb4:	dc001e04 	addi	r16,sp,120
 8006fb8:	00392e06 	br	8005474 <__alt_data_end+0xfc005474>
 8006fbc:	0005883a 	mov	r2,zero
 8006fc0:	003e3306 	br	8006890 <__alt_data_end+0xfc006890>
 8006fc4:	dd802617 	ldw	r22,152(sp)
 8006fc8:	003f0706 	br	8006be8 <__alt_data_end+0xfc006be8>
 8006fcc:	d8c02b03 	ldbu	r3,172(sp)
 8006fd0:	d8c02785 	stb	r3,158(sp)
 8006fd4:	003a3506 	br	80058ac <__alt_data_end+0xfc0058ac>
 8006fd8:	d8c02b03 	ldbu	r3,172(sp)
 8006fdc:	d8c02785 	stb	r3,158(sp)
 8006fe0:	003a1706 	br	8005840 <__alt_data_end+0xfc005840>
 8006fe4:	0005883a 	mov	r2,zero
 8006fe8:	003f5d06 	br	8006d60 <__alt_data_end+0xfc006d60>
 8006fec:	d8c02b03 	ldbu	r3,172(sp)
 8006ff0:	d8c02785 	stb	r3,158(sp)
 8006ff4:	0038f306 	br	80053c4 <__alt_data_end+0xfc0053c4>
 8006ff8:	d8c02b03 	ldbu	r3,172(sp)
 8006ffc:	d8c02785 	stb	r3,158(sp)
 8007000:	0038be06 	br	80052fc <__alt_data_end+0xfc0052fc>
 8007004:	d8802344 	addi	r2,sp,141
 8007008:	003f0506 	br	8006c20 <__alt_data_end+0xfc006c20>
 800700c:	d8c02b03 	ldbu	r3,172(sp)
 8007010:	d8c02785 	stb	r3,158(sp)
 8007014:	00388b06 	br	8005244 <__alt_data_end+0xfc005244>
 8007018:	d8c02b03 	ldbu	r3,172(sp)
 800701c:	d8c02785 	stb	r3,158(sp)
 8007020:	003ad706 	br	8005b80 <__alt_data_end+0xfc005b80>
 8007024:	d9403917 	ldw	r5,228(sp)
 8007028:	00800304 	movi	r2,12
 800702c:	28800015 	stw	r2,0(r5)
 8007030:	00bfffc4 	movi	r2,-1
 8007034:	00384306 	br	8005144 <__alt_data_end+0xfc005144>
 8007038:	d8c02b03 	ldbu	r3,172(sp)
 800703c:	d8c02785 	stb	r3,158(sp)
 8007040:	003ab606 	br	8005b1c <__alt_data_end+0xfc005b1c>
 8007044:	d8c02b03 	ldbu	r3,172(sp)
 8007048:	d8c02785 	stb	r3,158(sp)
 800704c:	003a8906 	br	8005a74 <__alt_data_end+0xfc005a74>

08007050 <___vfprintf_internal_r>:
 8007050:	deffb804 	addi	sp,sp,-288
 8007054:	dfc04715 	stw	ra,284(sp)
 8007058:	ddc04515 	stw	r23,276(sp)
 800705c:	dd404315 	stw	r21,268(sp)
 8007060:	d9002d15 	stw	r4,180(sp)
 8007064:	282f883a 	mov	r23,r5
 8007068:	302b883a 	mov	r21,r6
 800706c:	d9c02e15 	stw	r7,184(sp)
 8007070:	df004615 	stw	fp,280(sp)
 8007074:	dd804415 	stw	r22,272(sp)
 8007078:	dd004215 	stw	r20,264(sp)
 800707c:	dcc04115 	stw	r19,260(sp)
 8007080:	dc804015 	stw	r18,256(sp)
 8007084:	dc403f15 	stw	r17,252(sp)
 8007088:	dc003e15 	stw	r16,248(sp)
 800708c:	800bf900 	call	800bf90 <_localeconv_r>
 8007090:	10800017 	ldw	r2,0(r2)
 8007094:	1009883a 	mov	r4,r2
 8007098:	d8803415 	stw	r2,208(sp)
 800709c:	8004cfc0 	call	8004cfc <strlen>
 80070a0:	d8803715 	stw	r2,220(sp)
 80070a4:	d8802d17 	ldw	r2,180(sp)
 80070a8:	10000226 	beq	r2,zero,80070b4 <___vfprintf_internal_r+0x64>
 80070ac:	10800e17 	ldw	r2,56(r2)
 80070b0:	1000fb26 	beq	r2,zero,80074a0 <___vfprintf_internal_r+0x450>
 80070b4:	b880030b 	ldhu	r2,12(r23)
 80070b8:	10c8000c 	andi	r3,r2,8192
 80070bc:	1800061e 	bne	r3,zero,80070d8 <___vfprintf_internal_r+0x88>
 80070c0:	b9001917 	ldw	r4,100(r23)
 80070c4:	00f7ffc4 	movi	r3,-8193
 80070c8:	10880014 	ori	r2,r2,8192
 80070cc:	20c6703a 	and	r3,r4,r3
 80070d0:	b880030d 	sth	r2,12(r23)
 80070d4:	b8c01915 	stw	r3,100(r23)
 80070d8:	10c0020c 	andi	r3,r2,8
 80070dc:	1800c326 	beq	r3,zero,80073ec <___vfprintf_internal_r+0x39c>
 80070e0:	b8c00417 	ldw	r3,16(r23)
 80070e4:	1800c126 	beq	r3,zero,80073ec <___vfprintf_internal_r+0x39c>
 80070e8:	1080068c 	andi	r2,r2,26
 80070ec:	00c00284 	movi	r3,10
 80070f0:	10c0c626 	beq	r2,r3,800740c <___vfprintf_internal_r+0x3bc>
 80070f4:	d8c00404 	addi	r3,sp,16
 80070f8:	05020074 	movhi	r20,2049
 80070fc:	d9001e04 	addi	r4,sp,120
 8007100:	a51ff884 	addi	r20,r20,32738
 8007104:	d8c01e15 	stw	r3,120(sp)
 8007108:	d8002015 	stw	zero,128(sp)
 800710c:	d8001f15 	stw	zero,124(sp)
 8007110:	d8003315 	stw	zero,204(sp)
 8007114:	d8003615 	stw	zero,216(sp)
 8007118:	d8003815 	stw	zero,224(sp)
 800711c:	1811883a 	mov	r8,r3
 8007120:	d8003915 	stw	zero,228(sp)
 8007124:	d8003a15 	stw	zero,232(sp)
 8007128:	d8002f15 	stw	zero,188(sp)
 800712c:	d9002815 	stw	r4,160(sp)
 8007130:	a8800007 	ldb	r2,0(r21)
 8007134:	10028b26 	beq	r2,zero,8007b64 <___vfprintf_internal_r+0xb14>
 8007138:	00c00944 	movi	r3,37
 800713c:	a823883a 	mov	r17,r21
 8007140:	10c0021e 	bne	r2,r3,800714c <___vfprintf_internal_r+0xfc>
 8007144:	00001406 	br	8007198 <___vfprintf_internal_r+0x148>
 8007148:	10c00326 	beq	r2,r3,8007158 <___vfprintf_internal_r+0x108>
 800714c:	8c400044 	addi	r17,r17,1
 8007150:	88800007 	ldb	r2,0(r17)
 8007154:	103ffc1e 	bne	r2,zero,8007148 <__alt_data_end+0xfc007148>
 8007158:	8d61c83a 	sub	r16,r17,r21
 800715c:	80000e26 	beq	r16,zero,8007198 <___vfprintf_internal_r+0x148>
 8007160:	d8c02017 	ldw	r3,128(sp)
 8007164:	d8801f17 	ldw	r2,124(sp)
 8007168:	45400015 	stw	r21,0(r8)
 800716c:	1c07883a 	add	r3,r3,r16
 8007170:	10800044 	addi	r2,r2,1
 8007174:	d8c02015 	stw	r3,128(sp)
 8007178:	44000115 	stw	r16,4(r8)
 800717c:	d8801f15 	stw	r2,124(sp)
 8007180:	00c001c4 	movi	r3,7
 8007184:	1880a916 	blt	r3,r2,800742c <___vfprintf_internal_r+0x3dc>
 8007188:	42000204 	addi	r8,r8,8
 800718c:	d9402f17 	ldw	r5,188(sp)
 8007190:	2c0b883a 	add	r5,r5,r16
 8007194:	d9402f15 	stw	r5,188(sp)
 8007198:	88800007 	ldb	r2,0(r17)
 800719c:	1000aa26 	beq	r2,zero,8007448 <___vfprintf_internal_r+0x3f8>
 80071a0:	8d400044 	addi	r21,r17,1
 80071a4:	8c400047 	ldb	r17,1(r17)
 80071a8:	0021883a 	mov	r16,zero
 80071ac:	00bfffc4 	movi	r2,-1
 80071b0:	0025883a 	mov	r18,zero
 80071b4:	dc002905 	stb	r16,164(sp)
 80071b8:	d8002785 	stb	zero,158(sp)
 80071bc:	d8002b05 	stb	zero,172(sp)
 80071c0:	d8802a15 	stw	r2,168(sp)
 80071c4:	d8003115 	stw	zero,196(sp)
 80071c8:	04c01604 	movi	r19,88
 80071cc:	05800244 	movi	r22,9
 80071d0:	9021883a 	mov	r16,r18
 80071d4:	4039883a 	mov	fp,r8
 80071d8:	ad400044 	addi	r21,r21,1
 80071dc:	88bff804 	addi	r2,r17,-32
 80071e0:	98833236 	bltu	r19,r2,8007eac <___vfprintf_internal_r+0xe5c>
 80071e4:	100490ba 	slli	r2,r2,2
 80071e8:	00c20034 	movhi	r3,2048
 80071ec:	18dc7f04 	addi	r3,r3,29180
 80071f0:	10c5883a 	add	r2,r2,r3
 80071f4:	10800017 	ldw	r2,0(r2)
 80071f8:	1000683a 	jmp	r2
 80071fc:	08007da4 	muli	zero,at,502
 8007200:	08007eac 	andhi	zero,at,506
 8007204:	08007eac 	andhi	zero,at,506
 8007208:	08007dc4 	addi	zero,at,503
 800720c:	08007eac 	andhi	zero,at,506
 8007210:	08007eac 	andhi	zero,at,506
 8007214:	08007eac 	andhi	zero,at,506
 8007218:	08007eac 	andhi	zero,at,506
 800721c:	08007eac 	andhi	zero,at,506
 8007220:	08007eac 	andhi	zero,at,506
 8007224:	080074ac 	andhi	zero,at,466
 8007228:	08007cb4 	orhi	zero,at,498
 800722c:	08007eac 	andhi	zero,at,506
 8007230:	08007370 	cmpltui	zero,at,461
 8007234:	080074d0 	cmplti	zero,at,467
 8007238:	08007eac 	andhi	zero,at,506
 800723c:	08007520 	cmpeqi	zero,at,468
 8007240:	0800752c 	andhi	zero,at,468
 8007244:	0800752c 	andhi	zero,at,468
 8007248:	0800752c 	andhi	zero,at,468
 800724c:	0800752c 	andhi	zero,at,468
 8007250:	0800752c 	andhi	zero,at,468
 8007254:	0800752c 	andhi	zero,at,468
 8007258:	0800752c 	andhi	zero,at,468
 800725c:	0800752c 	andhi	zero,at,468
 8007260:	0800752c 	andhi	zero,at,468
 8007264:	08007eac 	andhi	zero,at,506
 8007268:	08007eac 	andhi	zero,at,506
 800726c:	08007eac 	andhi	zero,at,506
 8007270:	08007eac 	andhi	zero,at,506
 8007274:	08007eac 	andhi	zero,at,506
 8007278:	08007eac 	andhi	zero,at,506
 800727c:	08007eac 	andhi	zero,at,506
 8007280:	08007eac 	andhi	zero,at,506
 8007284:	08007eac 	andhi	zero,at,506
 8007288:	08007eac 	andhi	zero,at,506
 800728c:	08007568 	cmpgeui	zero,at,469
 8007290:	08007630 	cmpltui	zero,at,472
 8007294:	08007eac 	andhi	zero,at,506
 8007298:	08007630 	cmpltui	zero,at,472
 800729c:	08007eac 	andhi	zero,at,506
 80072a0:	08007eac 	andhi	zero,at,506
 80072a4:	08007eac 	andhi	zero,at,506
 80072a8:	08007eac 	andhi	zero,at,506
 80072ac:	080076dc 	xori	zero,at,475
 80072b0:	08007eac 	andhi	zero,at,506
 80072b4:	08007eac 	andhi	zero,at,506
 80072b8:	080076e8 	cmpgeui	zero,at,475
 80072bc:	08007eac 	andhi	zero,at,506
 80072c0:	08007eac 	andhi	zero,at,506
 80072c4:	08007eac 	andhi	zero,at,506
 80072c8:	08007eac 	andhi	zero,at,506
 80072cc:	08007eac 	andhi	zero,at,506
 80072d0:	08007b6c 	andhi	zero,at,493
 80072d4:	08007eac 	andhi	zero,at,506
 80072d8:	08007eac 	andhi	zero,at,506
 80072dc:	08007bd8 	cmpnei	zero,at,495
 80072e0:	08007eac 	andhi	zero,at,506
 80072e4:	08007eac 	andhi	zero,at,506
 80072e8:	08007eac 	andhi	zero,at,506
 80072ec:	08007eac 	andhi	zero,at,506
 80072f0:	08007eac 	andhi	zero,at,506
 80072f4:	08007eac 	andhi	zero,at,506
 80072f8:	08007eac 	andhi	zero,at,506
 80072fc:	08007eac 	andhi	zero,at,506
 8007300:	08007eac 	andhi	zero,at,506
 8007304:	08007eac 	andhi	zero,at,506
 8007308:	08007e50 	cmplti	zero,at,505
 800730c:	08007dd0 	cmplti	zero,at,503
 8007310:	08007630 	cmpltui	zero,at,472
 8007314:	08007630 	cmpltui	zero,at,472
 8007318:	08007630 	cmpltui	zero,at,472
 800731c:	08007df0 	cmpltui	zero,at,503
 8007320:	08007dd0 	cmplti	zero,at,503
 8007324:	08007eac 	andhi	zero,at,506
 8007328:	08007eac 	andhi	zero,at,506
 800732c:	08007dfc 	xorhi	zero,at,503
 8007330:	08007eac 	andhi	zero,at,506
 8007334:	08007e10 	cmplti	zero,at,504
 8007338:	08007c94 	ori	zero,at,498
 800733c:	0800737c 	xorhi	zero,at,461
 8007340:	08007ccc 	andi	zero,at,499
 8007344:	08007eac 	andhi	zero,at,506
 8007348:	08007cd8 	cmpnei	zero,at,499
 800734c:	08007eac 	andhi	zero,at,506
 8007350:	08007d3c 	xorhi	zero,at,500
 8007354:	08007eac 	andhi	zero,at,506
 8007358:	08007eac 	andhi	zero,at,506
 800735c:	08007d5c 	xori	zero,at,501
 8007360:	d8c03117 	ldw	r3,196(sp)
 8007364:	d8802e15 	stw	r2,184(sp)
 8007368:	00c7c83a 	sub	r3,zero,r3
 800736c:	d8c03115 	stw	r3,196(sp)
 8007370:	84000114 	ori	r16,r16,4
 8007374:	ac400007 	ldb	r17,0(r21)
 8007378:	003f9706 	br	80071d8 <__alt_data_end+0xfc0071d8>
 800737c:	00800c04 	movi	r2,48
 8007380:	d8802705 	stb	r2,156(sp)
 8007384:	00801e04 	movi	r2,120
 8007388:	d8802745 	stb	r2,157(sp)
 800738c:	d9002a17 	ldw	r4,168(sp)
 8007390:	d8802e17 	ldw	r2,184(sp)
 8007394:	d8002785 	stb	zero,158(sp)
 8007398:	e011883a 	mov	r8,fp
 800739c:	10c00104 	addi	r3,r2,4
 80073a0:	14c00017 	ldw	r19,0(r2)
 80073a4:	002d883a 	mov	r22,zero
 80073a8:	80800094 	ori	r2,r16,2
 80073ac:	2002ca16 	blt	r4,zero,8007ed8 <___vfprintf_internal_r+0xe88>
 80073b0:	00bfdfc4 	movi	r2,-129
 80073b4:	80a4703a 	and	r18,r16,r2
 80073b8:	d8c02e15 	stw	r3,184(sp)
 80073bc:	94800094 	ori	r18,r18,2
 80073c0:	9802b41e 	bne	r19,zero,8007e94 <___vfprintf_internal_r+0xe44>
 80073c4:	01420074 	movhi	r5,2049
 80073c8:	295fe904 	addi	r5,r5,32676
 80073cc:	d9403915 	stw	r5,228(sp)
 80073d0:	04401e04 	movi	r17,120
 80073d4:	d8802a17 	ldw	r2,168(sp)
 80073d8:	0039883a 	mov	fp,zero
 80073dc:	1001fa26 	beq	r2,zero,8007bc8 <___vfprintf_internal_r+0xb78>
 80073e0:	0027883a 	mov	r19,zero
 80073e4:	002d883a 	mov	r22,zero
 80073e8:	00021906 	br	8007c50 <___vfprintf_internal_r+0xc00>
 80073ec:	d9002d17 	ldw	r4,180(sp)
 80073f0:	b80b883a 	mov	r5,r23
 80073f4:	80094040 	call	8009404 <__swsetup_r>
 80073f8:	1005dc1e 	bne	r2,zero,8008b6c <___vfprintf_internal_r+0x1b1c>
 80073fc:	b880030b 	ldhu	r2,12(r23)
 8007400:	00c00284 	movi	r3,10
 8007404:	1080068c 	andi	r2,r2,26
 8007408:	10ff3a1e 	bne	r2,r3,80070f4 <__alt_data_end+0xfc0070f4>
 800740c:	b880038f 	ldh	r2,14(r23)
 8007410:	103f3816 	blt	r2,zero,80070f4 <__alt_data_end+0xfc0070f4>
 8007414:	d9c02e17 	ldw	r7,184(sp)
 8007418:	d9002d17 	ldw	r4,180(sp)
 800741c:	a80d883a 	mov	r6,r21
 8007420:	b80b883a 	mov	r5,r23
 8007424:	80093480 	call	8009348 <__sbprintf>
 8007428:	00001106 	br	8007470 <___vfprintf_internal_r+0x420>
 800742c:	d9002d17 	ldw	r4,180(sp)
 8007430:	d9801e04 	addi	r6,sp,120
 8007434:	b80b883a 	mov	r5,r23
 8007438:	800fda00 	call	800fda0 <__sprint_r>
 800743c:	1000081e 	bne	r2,zero,8007460 <___vfprintf_internal_r+0x410>
 8007440:	da000404 	addi	r8,sp,16
 8007444:	003f5106 	br	800718c <__alt_data_end+0xfc00718c>
 8007448:	d8802017 	ldw	r2,128(sp)
 800744c:	10000426 	beq	r2,zero,8007460 <___vfprintf_internal_r+0x410>
 8007450:	d9002d17 	ldw	r4,180(sp)
 8007454:	d9801e04 	addi	r6,sp,120
 8007458:	b80b883a 	mov	r5,r23
 800745c:	800fda00 	call	800fda0 <__sprint_r>
 8007460:	b880030b 	ldhu	r2,12(r23)
 8007464:	1080100c 	andi	r2,r2,64
 8007468:	1005c01e 	bne	r2,zero,8008b6c <___vfprintf_internal_r+0x1b1c>
 800746c:	d8802f17 	ldw	r2,188(sp)
 8007470:	dfc04717 	ldw	ra,284(sp)
 8007474:	df004617 	ldw	fp,280(sp)
 8007478:	ddc04517 	ldw	r23,276(sp)
 800747c:	dd804417 	ldw	r22,272(sp)
 8007480:	dd404317 	ldw	r21,268(sp)
 8007484:	dd004217 	ldw	r20,264(sp)
 8007488:	dcc04117 	ldw	r19,260(sp)
 800748c:	dc804017 	ldw	r18,256(sp)
 8007490:	dc403f17 	ldw	r17,252(sp)
 8007494:	dc003e17 	ldw	r16,248(sp)
 8007498:	dec04804 	addi	sp,sp,288
 800749c:	f800283a 	ret
 80074a0:	d9002d17 	ldw	r4,180(sp)
 80074a4:	800b4100 	call	800b410 <__sinit>
 80074a8:	003f0206 	br	80070b4 <__alt_data_end+0xfc0070b4>
 80074ac:	d9002e17 	ldw	r4,184(sp)
 80074b0:	d9402e17 	ldw	r5,184(sp)
 80074b4:	21000017 	ldw	r4,0(r4)
 80074b8:	28800104 	addi	r2,r5,4
 80074bc:	d9003115 	stw	r4,196(sp)
 80074c0:	203fa716 	blt	r4,zero,8007360 <__alt_data_end+0xfc007360>
 80074c4:	d8802e15 	stw	r2,184(sp)
 80074c8:	ac400007 	ldb	r17,0(r21)
 80074cc:	003f4206 	br	80071d8 <__alt_data_end+0xfc0071d8>
 80074d0:	ac400007 	ldb	r17,0(r21)
 80074d4:	01000a84 	movi	r4,42
 80074d8:	a8c00044 	addi	r3,r21,1
 80074dc:	89075826 	beq	r17,r4,8009240 <___vfprintf_internal_r+0x21f0>
 80074e0:	8cbff404 	addi	r18,r17,-48
 80074e4:	b486ae36 	bltu	r22,r18,8008fa0 <___vfprintf_internal_r+0x1f50>
 80074e8:	0009883a 	mov	r4,zero
 80074ec:	1823883a 	mov	r17,r3
 80074f0:	01400284 	movi	r5,10
 80074f4:	8004a540 	call	8004a54 <__mulsi3>
 80074f8:	88c00007 	ldb	r3,0(r17)
 80074fc:	1489883a 	add	r4,r2,r18
 8007500:	8d400044 	addi	r21,r17,1
 8007504:	1cbff404 	addi	r18,r3,-48
 8007508:	a823883a 	mov	r17,r21
 800750c:	b4bff82e 	bgeu	r22,r18,80074f0 <__alt_data_end+0xfc0074f0>
 8007510:	1823883a 	mov	r17,r3
 8007514:	2005f616 	blt	r4,zero,8008cf0 <___vfprintf_internal_r+0x1ca0>
 8007518:	d9002a15 	stw	r4,168(sp)
 800751c:	003f2f06 	br	80071dc <__alt_data_end+0xfc0071dc>
 8007520:	84002014 	ori	r16,r16,128
 8007524:	ac400007 	ldb	r17,0(r21)
 8007528:	003f2b06 	br	80071d8 <__alt_data_end+0xfc0071d8>
 800752c:	8cbff404 	addi	r18,r17,-48
 8007530:	d8003115 	stw	zero,196(sp)
 8007534:	0009883a 	mov	r4,zero
 8007538:	a823883a 	mov	r17,r21
 800753c:	01400284 	movi	r5,10
 8007540:	8004a540 	call	8004a54 <__mulsi3>
 8007544:	88c00007 	ldb	r3,0(r17)
 8007548:	9089883a 	add	r4,r18,r2
 800754c:	ad400044 	addi	r21,r21,1
 8007550:	1cbff404 	addi	r18,r3,-48
 8007554:	a823883a 	mov	r17,r21
 8007558:	b4bff82e 	bgeu	r22,r18,800753c <__alt_data_end+0xfc00753c>
 800755c:	1823883a 	mov	r17,r3
 8007560:	d9003115 	stw	r4,196(sp)
 8007564:	003f1d06 	br	80071dc <__alt_data_end+0xfc0071dc>
 8007568:	8025883a 	mov	r18,r16
 800756c:	dc002903 	ldbu	r16,164(sp)
 8007570:	e011883a 	mov	r8,fp
 8007574:	84003fcc 	andi	r16,r16,255
 8007578:	8007531e 	bne	r16,zero,80092c8 <___vfprintf_internal_r+0x2278>
 800757c:	94800414 	ori	r18,r18,16
 8007580:	9080080c 	andi	r2,r18,32
 8007584:	1003a326 	beq	r2,zero,8008414 <___vfprintf_internal_r+0x13c4>
 8007588:	d9002e17 	ldw	r4,184(sp)
 800758c:	20800117 	ldw	r2,4(r4)
 8007590:	24c00017 	ldw	r19,0(r4)
 8007594:	21000204 	addi	r4,r4,8
 8007598:	d9002e15 	stw	r4,184(sp)
 800759c:	102d883a 	mov	r22,r2
 80075a0:	10047316 	blt	r2,zero,8008770 <___vfprintf_internal_r+0x1720>
 80075a4:	d9002a17 	ldw	r4,168(sp)
 80075a8:	df002783 	ldbu	fp,158(sp)
 80075ac:	2003e416 	blt	r4,zero,8008540 <___vfprintf_internal_r+0x14f0>
 80075b0:	00ffdfc4 	movi	r3,-129
 80075b4:	9d84b03a 	or	r2,r19,r22
 80075b8:	90e4703a 	and	r18,r18,r3
 80075bc:	10018026 	beq	r2,zero,8007bc0 <___vfprintf_internal_r+0xb70>
 80075c0:	b003ab26 	beq	r22,zero,8008470 <___vfprintf_internal_r+0x1420>
 80075c4:	dc402915 	stw	r17,164(sp)
 80075c8:	dc001e04 	addi	r16,sp,120
 80075cc:	b023883a 	mov	r17,r22
 80075d0:	402d883a 	mov	r22,r8
 80075d4:	9809883a 	mov	r4,r19
 80075d8:	880b883a 	mov	r5,r17
 80075dc:	01800284 	movi	r6,10
 80075e0:	000f883a 	mov	r7,zero
 80075e4:	80123f00 	call	80123f0 <__umoddi3>
 80075e8:	10800c04 	addi	r2,r2,48
 80075ec:	843fffc4 	addi	r16,r16,-1
 80075f0:	9809883a 	mov	r4,r19
 80075f4:	880b883a 	mov	r5,r17
 80075f8:	80800005 	stb	r2,0(r16)
 80075fc:	01800284 	movi	r6,10
 8007600:	000f883a 	mov	r7,zero
 8007604:	8011df40 	call	8011df4 <__udivdi3>
 8007608:	1027883a 	mov	r19,r2
 800760c:	10c4b03a 	or	r2,r2,r3
 8007610:	1823883a 	mov	r17,r3
 8007614:	103fef1e 	bne	r2,zero,80075d4 <__alt_data_end+0xfc0075d4>
 8007618:	d8c02817 	ldw	r3,160(sp)
 800761c:	dc402917 	ldw	r17,164(sp)
 8007620:	b011883a 	mov	r8,r22
 8007624:	1c07c83a 	sub	r3,r3,r16
 8007628:	d8c02b15 	stw	r3,172(sp)
 800762c:	00005f06 	br	80077ac <___vfprintf_internal_r+0x75c>
 8007630:	8025883a 	mov	r18,r16
 8007634:	dc002903 	ldbu	r16,164(sp)
 8007638:	e011883a 	mov	r8,fp
 800763c:	84003fcc 	andi	r16,r16,255
 8007640:	80071e1e 	bne	r16,zero,80092bc <___vfprintf_internal_r+0x226c>
 8007644:	9080020c 	andi	r2,r18,8
 8007648:	1004af26 	beq	r2,zero,8008908 <___vfprintf_internal_r+0x18b8>
 800764c:	d9002e17 	ldw	r4,184(sp)
 8007650:	d9402e17 	ldw	r5,184(sp)
 8007654:	d8802e17 	ldw	r2,184(sp)
 8007658:	21000017 	ldw	r4,0(r4)
 800765c:	29400117 	ldw	r5,4(r5)
 8007660:	10800204 	addi	r2,r2,8
 8007664:	d9003615 	stw	r4,216(sp)
 8007668:	d9403815 	stw	r5,224(sp)
 800766c:	d8802e15 	stw	r2,184(sp)
 8007670:	d9003617 	ldw	r4,216(sp)
 8007674:	d9403817 	ldw	r5,224(sp)
 8007678:	da003d15 	stw	r8,244(sp)
 800767c:	04000044 	movi	r16,1
 8007680:	800e4540 	call	800e454 <__fpclassifyd>
 8007684:	da003d17 	ldw	r8,244(sp)
 8007688:	1404441e 	bne	r2,r16,800879c <___vfprintf_internal_r+0x174c>
 800768c:	d9003617 	ldw	r4,216(sp)
 8007690:	d9403817 	ldw	r5,224(sp)
 8007694:	000d883a 	mov	r6,zero
 8007698:	000f883a 	mov	r7,zero
 800769c:	8013d940 	call	8013d94 <__ledf2>
 80076a0:	da003d17 	ldw	r8,244(sp)
 80076a4:	1005e316 	blt	r2,zero,8008e34 <___vfprintf_internal_r+0x1de4>
 80076a8:	df002783 	ldbu	fp,158(sp)
 80076ac:	008011c4 	movi	r2,71
 80076b0:	1445580e 	bge	r2,r17,8008c14 <___vfprintf_internal_r+0x1bc4>
 80076b4:	04020074 	movhi	r16,2049
 80076b8:	841fe104 	addi	r16,r16,32644
 80076bc:	00c000c4 	movi	r3,3
 80076c0:	00bfdfc4 	movi	r2,-129
 80076c4:	d8c02915 	stw	r3,164(sp)
 80076c8:	90a4703a 	and	r18,r18,r2
 80076cc:	d8c02b15 	stw	r3,172(sp)
 80076d0:	d8002a15 	stw	zero,168(sp)
 80076d4:	d8003215 	stw	zero,200(sp)
 80076d8:	00003a06 	br	80077c4 <___vfprintf_internal_r+0x774>
 80076dc:	84000214 	ori	r16,r16,8
 80076e0:	ac400007 	ldb	r17,0(r21)
 80076e4:	003ebc06 	br	80071d8 <__alt_data_end+0xfc0071d8>
 80076e8:	8025883a 	mov	r18,r16
 80076ec:	dc002903 	ldbu	r16,164(sp)
 80076f0:	e011883a 	mov	r8,fp
 80076f4:	84003fcc 	andi	r16,r16,255
 80076f8:	8007001e 	bne	r16,zero,80092fc <___vfprintf_internal_r+0x22ac>
 80076fc:	94800414 	ori	r18,r18,16
 8007700:	9080080c 	andi	r2,r18,32
 8007704:	1002fa26 	beq	r2,zero,80082f0 <___vfprintf_internal_r+0x12a0>
 8007708:	d9002e17 	ldw	r4,184(sp)
 800770c:	d9402a17 	ldw	r5,168(sp)
 8007710:	d8002785 	stb	zero,158(sp)
 8007714:	20800204 	addi	r2,r4,8
 8007718:	24c00017 	ldw	r19,0(r4)
 800771c:	25800117 	ldw	r22,4(r4)
 8007720:	2804b116 	blt	r5,zero,80089e8 <___vfprintf_internal_r+0x1998>
 8007724:	013fdfc4 	movi	r4,-129
 8007728:	9d86b03a 	or	r3,r19,r22
 800772c:	d8802e15 	stw	r2,184(sp)
 8007730:	9124703a 	and	r18,r18,r4
 8007734:	1802fb1e 	bne	r3,zero,8008324 <___vfprintf_internal_r+0x12d4>
 8007738:	d8c02a17 	ldw	r3,168(sp)
 800773c:	0039883a 	mov	fp,zero
 8007740:	1805e526 	beq	r3,zero,8008ed8 <___vfprintf_internal_r+0x1e88>
 8007744:	0027883a 	mov	r19,zero
 8007748:	002d883a 	mov	r22,zero
 800774c:	dc001e04 	addi	r16,sp,120
 8007750:	9806d0fa 	srli	r3,r19,3
 8007754:	b008977a 	slli	r4,r22,29
 8007758:	b02cd0fa 	srli	r22,r22,3
 800775c:	9cc001cc 	andi	r19,r19,7
 8007760:	98800c04 	addi	r2,r19,48
 8007764:	843fffc4 	addi	r16,r16,-1
 8007768:	20e6b03a 	or	r19,r4,r3
 800776c:	80800005 	stb	r2,0(r16)
 8007770:	9d86b03a 	or	r3,r19,r22
 8007774:	183ff61e 	bne	r3,zero,8007750 <__alt_data_end+0xfc007750>
 8007778:	90c0004c 	andi	r3,r18,1
 800777c:	18014126 	beq	r3,zero,8007c84 <___vfprintf_internal_r+0xc34>
 8007780:	10803fcc 	andi	r2,r2,255
 8007784:	1080201c 	xori	r2,r2,128
 8007788:	10bfe004 	addi	r2,r2,-128
 800778c:	00c00c04 	movi	r3,48
 8007790:	10c13c26 	beq	r2,r3,8007c84 <___vfprintf_internal_r+0xc34>
 8007794:	80ffffc5 	stb	r3,-1(r16)
 8007798:	d8c02817 	ldw	r3,160(sp)
 800779c:	80bfffc4 	addi	r2,r16,-1
 80077a0:	1021883a 	mov	r16,r2
 80077a4:	1887c83a 	sub	r3,r3,r2
 80077a8:	d8c02b15 	stw	r3,172(sp)
 80077ac:	d8802b17 	ldw	r2,172(sp)
 80077b0:	d9002a17 	ldw	r4,168(sp)
 80077b4:	1100010e 	bge	r2,r4,80077bc <___vfprintf_internal_r+0x76c>
 80077b8:	2005883a 	mov	r2,r4
 80077bc:	d8802915 	stw	r2,164(sp)
 80077c0:	d8003215 	stw	zero,200(sp)
 80077c4:	e7003fcc 	andi	fp,fp,255
 80077c8:	e700201c 	xori	fp,fp,128
 80077cc:	e73fe004 	addi	fp,fp,-128
 80077d0:	e0000326 	beq	fp,zero,80077e0 <___vfprintf_internal_r+0x790>
 80077d4:	d8c02917 	ldw	r3,164(sp)
 80077d8:	18c00044 	addi	r3,r3,1
 80077dc:	d8c02915 	stw	r3,164(sp)
 80077e0:	90c0008c 	andi	r3,r18,2
 80077e4:	d8c02c15 	stw	r3,176(sp)
 80077e8:	18000326 	beq	r3,zero,80077f8 <___vfprintf_internal_r+0x7a8>
 80077ec:	d8c02917 	ldw	r3,164(sp)
 80077f0:	18c00084 	addi	r3,r3,2
 80077f4:	d8c02915 	stw	r3,164(sp)
 80077f8:	90c0210c 	andi	r3,r18,132
 80077fc:	d8c03015 	stw	r3,192(sp)
 8007800:	1801c51e 	bne	r3,zero,8007f18 <___vfprintf_internal_r+0xec8>
 8007804:	d9003117 	ldw	r4,196(sp)
 8007808:	d8c02917 	ldw	r3,164(sp)
 800780c:	20e7c83a 	sub	r19,r4,r3
 8007810:	04c1c10e 	bge	zero,r19,8007f18 <___vfprintf_internal_r+0xec8>
 8007814:	02400404 	movi	r9,16
 8007818:	d8c02017 	ldw	r3,128(sp)
 800781c:	d8801f17 	ldw	r2,124(sp)
 8007820:	4cc52f0e 	bge	r9,r19,8008ce0 <___vfprintf_internal_r+0x1c90>
 8007824:	01420074 	movhi	r5,2049
 8007828:	295ffc84 	addi	r5,r5,32754
 800782c:	dc403b15 	stw	r17,236(sp)
 8007830:	d9403515 	stw	r5,212(sp)
 8007834:	9823883a 	mov	r17,r19
 8007838:	482d883a 	mov	r22,r9
 800783c:	9027883a 	mov	r19,r18
 8007840:	070001c4 	movi	fp,7
 8007844:	8025883a 	mov	r18,r16
 8007848:	dc002d17 	ldw	r16,180(sp)
 800784c:	00000306 	br	800785c <___vfprintf_internal_r+0x80c>
 8007850:	8c7ffc04 	addi	r17,r17,-16
 8007854:	42000204 	addi	r8,r8,8
 8007858:	b440130e 	bge	r22,r17,80078a8 <___vfprintf_internal_r+0x858>
 800785c:	01020074 	movhi	r4,2049
 8007860:	18c00404 	addi	r3,r3,16
 8007864:	10800044 	addi	r2,r2,1
 8007868:	211ffc84 	addi	r4,r4,32754
 800786c:	41000015 	stw	r4,0(r8)
 8007870:	45800115 	stw	r22,4(r8)
 8007874:	d8c02015 	stw	r3,128(sp)
 8007878:	d8801f15 	stw	r2,124(sp)
 800787c:	e0bff40e 	bge	fp,r2,8007850 <__alt_data_end+0xfc007850>
 8007880:	d9801e04 	addi	r6,sp,120
 8007884:	b80b883a 	mov	r5,r23
 8007888:	8009883a 	mov	r4,r16
 800788c:	800fda00 	call	800fda0 <__sprint_r>
 8007890:	103ef31e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8007894:	8c7ffc04 	addi	r17,r17,-16
 8007898:	d8c02017 	ldw	r3,128(sp)
 800789c:	d8801f17 	ldw	r2,124(sp)
 80078a0:	da000404 	addi	r8,sp,16
 80078a4:	b47fed16 	blt	r22,r17,800785c <__alt_data_end+0xfc00785c>
 80078a8:	9021883a 	mov	r16,r18
 80078ac:	9825883a 	mov	r18,r19
 80078b0:	8827883a 	mov	r19,r17
 80078b4:	dc403b17 	ldw	r17,236(sp)
 80078b8:	d9403517 	ldw	r5,212(sp)
 80078bc:	98c7883a 	add	r3,r19,r3
 80078c0:	10800044 	addi	r2,r2,1
 80078c4:	41400015 	stw	r5,0(r8)
 80078c8:	44c00115 	stw	r19,4(r8)
 80078cc:	d8c02015 	stw	r3,128(sp)
 80078d0:	d8801f15 	stw	r2,124(sp)
 80078d4:	010001c4 	movi	r4,7
 80078d8:	2082c516 	blt	r4,r2,80083f0 <___vfprintf_internal_r+0x13a0>
 80078dc:	df002787 	ldb	fp,158(sp)
 80078e0:	42000204 	addi	r8,r8,8
 80078e4:	e0000c26 	beq	fp,zero,8007918 <___vfprintf_internal_r+0x8c8>
 80078e8:	d8801f17 	ldw	r2,124(sp)
 80078ec:	d9002784 	addi	r4,sp,158
 80078f0:	18c00044 	addi	r3,r3,1
 80078f4:	10800044 	addi	r2,r2,1
 80078f8:	41000015 	stw	r4,0(r8)
 80078fc:	01000044 	movi	r4,1
 8007900:	41000115 	stw	r4,4(r8)
 8007904:	d8c02015 	stw	r3,128(sp)
 8007908:	d8801f15 	stw	r2,124(sp)
 800790c:	010001c4 	movi	r4,7
 8007910:	20825e16 	blt	r4,r2,800828c <___vfprintf_internal_r+0x123c>
 8007914:	42000204 	addi	r8,r8,8
 8007918:	d8802c17 	ldw	r2,176(sp)
 800791c:	10000c26 	beq	r2,zero,8007950 <___vfprintf_internal_r+0x900>
 8007920:	d8801f17 	ldw	r2,124(sp)
 8007924:	d9002704 	addi	r4,sp,156
 8007928:	18c00084 	addi	r3,r3,2
 800792c:	10800044 	addi	r2,r2,1
 8007930:	41000015 	stw	r4,0(r8)
 8007934:	01000084 	movi	r4,2
 8007938:	41000115 	stw	r4,4(r8)
 800793c:	d8c02015 	stw	r3,128(sp)
 8007940:	d8801f15 	stw	r2,124(sp)
 8007944:	010001c4 	movi	r4,7
 8007948:	20825816 	blt	r4,r2,80082ac <___vfprintf_internal_r+0x125c>
 800794c:	42000204 	addi	r8,r8,8
 8007950:	d9003017 	ldw	r4,192(sp)
 8007954:	00802004 	movi	r2,128
 8007958:	2081bb26 	beq	r4,r2,8008048 <___vfprintf_internal_r+0xff8>
 800795c:	d9402a17 	ldw	r5,168(sp)
 8007960:	d8802b17 	ldw	r2,172(sp)
 8007964:	28adc83a 	sub	r22,r5,r2
 8007968:	0580310e 	bge	zero,r22,8007a30 <___vfprintf_internal_r+0x9e0>
 800796c:	07000404 	movi	fp,16
 8007970:	d8801f17 	ldw	r2,124(sp)
 8007974:	e584360e 	bge	fp,r22,8008a50 <___vfprintf_internal_r+0x1a00>
 8007978:	01420074 	movhi	r5,2049
 800797c:	295ff884 	addi	r5,r5,32738
 8007980:	dc402a15 	stw	r17,168(sp)
 8007984:	d9402c15 	stw	r5,176(sp)
 8007988:	b023883a 	mov	r17,r22
 800798c:	04c001c4 	movi	r19,7
 8007990:	a82d883a 	mov	r22,r21
 8007994:	902b883a 	mov	r21,r18
 8007998:	8025883a 	mov	r18,r16
 800799c:	dc002d17 	ldw	r16,180(sp)
 80079a0:	00000306 	br	80079b0 <___vfprintf_internal_r+0x960>
 80079a4:	8c7ffc04 	addi	r17,r17,-16
 80079a8:	42000204 	addi	r8,r8,8
 80079ac:	e440110e 	bge	fp,r17,80079f4 <___vfprintf_internal_r+0x9a4>
 80079b0:	18c00404 	addi	r3,r3,16
 80079b4:	10800044 	addi	r2,r2,1
 80079b8:	45000015 	stw	r20,0(r8)
 80079bc:	47000115 	stw	fp,4(r8)
 80079c0:	d8c02015 	stw	r3,128(sp)
 80079c4:	d8801f15 	stw	r2,124(sp)
 80079c8:	98bff60e 	bge	r19,r2,80079a4 <__alt_data_end+0xfc0079a4>
 80079cc:	d9801e04 	addi	r6,sp,120
 80079d0:	b80b883a 	mov	r5,r23
 80079d4:	8009883a 	mov	r4,r16
 80079d8:	800fda00 	call	800fda0 <__sprint_r>
 80079dc:	103ea01e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 80079e0:	8c7ffc04 	addi	r17,r17,-16
 80079e4:	d8c02017 	ldw	r3,128(sp)
 80079e8:	d8801f17 	ldw	r2,124(sp)
 80079ec:	da000404 	addi	r8,sp,16
 80079f0:	e47fef16 	blt	fp,r17,80079b0 <__alt_data_end+0xfc0079b0>
 80079f4:	9021883a 	mov	r16,r18
 80079f8:	a825883a 	mov	r18,r21
 80079fc:	b02b883a 	mov	r21,r22
 8007a00:	882d883a 	mov	r22,r17
 8007a04:	dc402a17 	ldw	r17,168(sp)
 8007a08:	d9002c17 	ldw	r4,176(sp)
 8007a0c:	1d87883a 	add	r3,r3,r22
 8007a10:	10800044 	addi	r2,r2,1
 8007a14:	41000015 	stw	r4,0(r8)
 8007a18:	45800115 	stw	r22,4(r8)
 8007a1c:	d8c02015 	stw	r3,128(sp)
 8007a20:	d8801f15 	stw	r2,124(sp)
 8007a24:	010001c4 	movi	r4,7
 8007a28:	20821016 	blt	r4,r2,800826c <___vfprintf_internal_r+0x121c>
 8007a2c:	42000204 	addi	r8,r8,8
 8007a30:	9080400c 	andi	r2,r18,256
 8007a34:	10013a1e 	bne	r2,zero,8007f20 <___vfprintf_internal_r+0xed0>
 8007a38:	d9402b17 	ldw	r5,172(sp)
 8007a3c:	d8801f17 	ldw	r2,124(sp)
 8007a40:	44000015 	stw	r16,0(r8)
 8007a44:	1947883a 	add	r3,r3,r5
 8007a48:	10800044 	addi	r2,r2,1
 8007a4c:	41400115 	stw	r5,4(r8)
 8007a50:	d8c02015 	stw	r3,128(sp)
 8007a54:	d8801f15 	stw	r2,124(sp)
 8007a58:	010001c4 	movi	r4,7
 8007a5c:	2081f516 	blt	r4,r2,8008234 <___vfprintf_internal_r+0x11e4>
 8007a60:	42000204 	addi	r8,r8,8
 8007a64:	9480010c 	andi	r18,r18,4
 8007a68:	90003226 	beq	r18,zero,8007b34 <___vfprintf_internal_r+0xae4>
 8007a6c:	d9403117 	ldw	r5,196(sp)
 8007a70:	d8802917 	ldw	r2,164(sp)
 8007a74:	28a1c83a 	sub	r16,r5,r2
 8007a78:	04002e0e 	bge	zero,r16,8007b34 <___vfprintf_internal_r+0xae4>
 8007a7c:	04400404 	movi	r17,16
 8007a80:	d8801f17 	ldw	r2,124(sp)
 8007a84:	8c04c40e 	bge	r17,r16,8008d98 <___vfprintf_internal_r+0x1d48>
 8007a88:	01420074 	movhi	r5,2049
 8007a8c:	295ffc84 	addi	r5,r5,32754
 8007a90:	d9403515 	stw	r5,212(sp)
 8007a94:	048001c4 	movi	r18,7
 8007a98:	dcc02d17 	ldw	r19,180(sp)
 8007a9c:	00000306 	br	8007aac <___vfprintf_internal_r+0xa5c>
 8007aa0:	843ffc04 	addi	r16,r16,-16
 8007aa4:	42000204 	addi	r8,r8,8
 8007aa8:	8c00130e 	bge	r17,r16,8007af8 <___vfprintf_internal_r+0xaa8>
 8007aac:	01020074 	movhi	r4,2049
 8007ab0:	18c00404 	addi	r3,r3,16
 8007ab4:	10800044 	addi	r2,r2,1
 8007ab8:	211ffc84 	addi	r4,r4,32754
 8007abc:	41000015 	stw	r4,0(r8)
 8007ac0:	44400115 	stw	r17,4(r8)
 8007ac4:	d8c02015 	stw	r3,128(sp)
 8007ac8:	d8801f15 	stw	r2,124(sp)
 8007acc:	90bff40e 	bge	r18,r2,8007aa0 <__alt_data_end+0xfc007aa0>
 8007ad0:	d9801e04 	addi	r6,sp,120
 8007ad4:	b80b883a 	mov	r5,r23
 8007ad8:	9809883a 	mov	r4,r19
 8007adc:	800fda00 	call	800fda0 <__sprint_r>
 8007ae0:	103e5f1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8007ae4:	843ffc04 	addi	r16,r16,-16
 8007ae8:	d8c02017 	ldw	r3,128(sp)
 8007aec:	d8801f17 	ldw	r2,124(sp)
 8007af0:	da000404 	addi	r8,sp,16
 8007af4:	8c3fed16 	blt	r17,r16,8007aac <__alt_data_end+0xfc007aac>
 8007af8:	d9403517 	ldw	r5,212(sp)
 8007afc:	1c07883a 	add	r3,r3,r16
 8007b00:	10800044 	addi	r2,r2,1
 8007b04:	41400015 	stw	r5,0(r8)
 8007b08:	44000115 	stw	r16,4(r8)
 8007b0c:	d8c02015 	stw	r3,128(sp)
 8007b10:	d8801f15 	stw	r2,124(sp)
 8007b14:	010001c4 	movi	r4,7
 8007b18:	2080060e 	bge	r4,r2,8007b34 <___vfprintf_internal_r+0xae4>
 8007b1c:	d9002d17 	ldw	r4,180(sp)
 8007b20:	d9801e04 	addi	r6,sp,120
 8007b24:	b80b883a 	mov	r5,r23
 8007b28:	800fda00 	call	800fda0 <__sprint_r>
 8007b2c:	103e4c1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8007b30:	d8c02017 	ldw	r3,128(sp)
 8007b34:	d8803117 	ldw	r2,196(sp)
 8007b38:	d9002917 	ldw	r4,164(sp)
 8007b3c:	1100010e 	bge	r2,r4,8007b44 <___vfprintf_internal_r+0xaf4>
 8007b40:	2005883a 	mov	r2,r4
 8007b44:	d9402f17 	ldw	r5,188(sp)
 8007b48:	288b883a 	add	r5,r5,r2
 8007b4c:	d9402f15 	stw	r5,188(sp)
 8007b50:	1801c01e 	bne	r3,zero,8008254 <___vfprintf_internal_r+0x1204>
 8007b54:	a8800007 	ldb	r2,0(r21)
 8007b58:	d8001f15 	stw	zero,124(sp)
 8007b5c:	da000404 	addi	r8,sp,16
 8007b60:	103d751e 	bne	r2,zero,8007138 <__alt_data_end+0xfc007138>
 8007b64:	a823883a 	mov	r17,r21
 8007b68:	003d8b06 	br	8007198 <__alt_data_end+0xfc007198>
 8007b6c:	8025883a 	mov	r18,r16
 8007b70:	dc002903 	ldbu	r16,164(sp)
 8007b74:	e011883a 	mov	r8,fp
 8007b78:	84003fcc 	andi	r16,r16,255
 8007b7c:	8005e51e 	bne	r16,zero,8009314 <___vfprintf_internal_r+0x22c4>
 8007b80:	94800414 	ori	r18,r18,16
 8007b84:	9080080c 	andi	r2,r18,32
 8007b88:	10022b26 	beq	r2,zero,8008438 <___vfprintf_internal_r+0x13e8>
 8007b8c:	d9002e17 	ldw	r4,184(sp)
 8007b90:	d9402a17 	ldw	r5,168(sp)
 8007b94:	d8002785 	stb	zero,158(sp)
 8007b98:	20c00204 	addi	r3,r4,8
 8007b9c:	24c00017 	ldw	r19,0(r4)
 8007ba0:	25800117 	ldw	r22,4(r4)
 8007ba4:	28042e16 	blt	r5,zero,8008c60 <___vfprintf_internal_r+0x1c10>
 8007ba8:	013fdfc4 	movi	r4,-129
 8007bac:	9d84b03a 	or	r2,r19,r22
 8007bb0:	d8c02e15 	stw	r3,184(sp)
 8007bb4:	9124703a 	and	r18,r18,r4
 8007bb8:	0039883a 	mov	fp,zero
 8007bbc:	103e801e 	bne	r2,zero,80075c0 <__alt_data_end+0xfc0075c0>
 8007bc0:	d9002a17 	ldw	r4,168(sp)
 8007bc4:	2002e01e 	bne	r4,zero,8008748 <___vfprintf_internal_r+0x16f8>
 8007bc8:	d8002a15 	stw	zero,168(sp)
 8007bcc:	d8002b15 	stw	zero,172(sp)
 8007bd0:	dc001e04 	addi	r16,sp,120
 8007bd4:	003ef506 	br	80077ac <__alt_data_end+0xfc0077ac>
 8007bd8:	8025883a 	mov	r18,r16
 8007bdc:	dc002903 	ldbu	r16,164(sp)
 8007be0:	e011883a 	mov	r8,fp
 8007be4:	84003fcc 	andi	r16,r16,255
 8007be8:	8005ba1e 	bne	r16,zero,80092d4 <___vfprintf_internal_r+0x2284>
 8007bec:	01020074 	movhi	r4,2049
 8007bf0:	211fe404 	addi	r4,r4,32656
 8007bf4:	d9003915 	stw	r4,228(sp)
 8007bf8:	9080080c 	andi	r2,r18,32
 8007bfc:	10006126 	beq	r2,zero,8007d84 <___vfprintf_internal_r+0xd34>
 8007c00:	d9402e17 	ldw	r5,184(sp)
 8007c04:	2cc00017 	ldw	r19,0(r5)
 8007c08:	2d800117 	ldw	r22,4(r5)
 8007c0c:	29400204 	addi	r5,r5,8
 8007c10:	d9402e15 	stw	r5,184(sp)
 8007c14:	9080004c 	andi	r2,r18,1
 8007c18:	1001ac26 	beq	r2,zero,80082cc <___vfprintf_internal_r+0x127c>
 8007c1c:	9d84b03a 	or	r2,r19,r22
 8007c20:	10038526 	beq	r2,zero,8008a38 <___vfprintf_internal_r+0x19e8>
 8007c24:	d8c02a17 	ldw	r3,168(sp)
 8007c28:	00800c04 	movi	r2,48
 8007c2c:	d8802705 	stb	r2,156(sp)
 8007c30:	dc402745 	stb	r17,157(sp)
 8007c34:	d8002785 	stb	zero,158(sp)
 8007c38:	90800094 	ori	r2,r18,2
 8007c3c:	18047916 	blt	r3,zero,8008e24 <___vfprintf_internal_r+0x1dd4>
 8007c40:	00bfdfc4 	movi	r2,-129
 8007c44:	90a4703a 	and	r18,r18,r2
 8007c48:	94800094 	ori	r18,r18,2
 8007c4c:	0039883a 	mov	fp,zero
 8007c50:	d9003917 	ldw	r4,228(sp)
 8007c54:	dc001e04 	addi	r16,sp,120
 8007c58:	988003cc 	andi	r2,r19,15
 8007c5c:	b006973a 	slli	r3,r22,28
 8007c60:	2085883a 	add	r2,r4,r2
 8007c64:	9826d13a 	srli	r19,r19,4
 8007c68:	10800003 	ldbu	r2,0(r2)
 8007c6c:	b02cd13a 	srli	r22,r22,4
 8007c70:	843fffc4 	addi	r16,r16,-1
 8007c74:	1ce6b03a 	or	r19,r3,r19
 8007c78:	80800005 	stb	r2,0(r16)
 8007c7c:	9d84b03a 	or	r2,r19,r22
 8007c80:	103ff51e 	bne	r2,zero,8007c58 <__alt_data_end+0xfc007c58>
 8007c84:	d8c02817 	ldw	r3,160(sp)
 8007c88:	1c07c83a 	sub	r3,r3,r16
 8007c8c:	d8c02b15 	stw	r3,172(sp)
 8007c90:	003ec606 	br	80077ac <__alt_data_end+0xfc0077ac>
 8007c94:	8025883a 	mov	r18,r16
 8007c98:	dc002903 	ldbu	r16,164(sp)
 8007c9c:	e011883a 	mov	r8,fp
 8007ca0:	84003fcc 	andi	r16,r16,255
 8007ca4:	803e9626 	beq	r16,zero,8007700 <__alt_data_end+0xfc007700>
 8007ca8:	d8c02b03 	ldbu	r3,172(sp)
 8007cac:	d8c02785 	stb	r3,158(sp)
 8007cb0:	003e9306 	br	8007700 <__alt_data_end+0xfc007700>
 8007cb4:	00c00044 	movi	r3,1
 8007cb8:	d8c02905 	stb	r3,164(sp)
 8007cbc:	00c00ac4 	movi	r3,43
 8007cc0:	d8c02b05 	stb	r3,172(sp)
 8007cc4:	ac400007 	ldb	r17,0(r21)
 8007cc8:	003d4306 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007ccc:	84000814 	ori	r16,r16,32
 8007cd0:	ac400007 	ldb	r17,0(r21)
 8007cd4:	003d4006 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007cd8:	d8802e17 	ldw	r2,184(sp)
 8007cdc:	8025883a 	mov	r18,r16
 8007ce0:	d8002785 	stb	zero,158(sp)
 8007ce4:	14000017 	ldw	r16,0(r2)
 8007ce8:	e011883a 	mov	r8,fp
 8007cec:	14c00104 	addi	r19,r2,4
 8007cf0:	80042d26 	beq	r16,zero,8008da8 <___vfprintf_internal_r+0x1d58>
 8007cf4:	d8c02a17 	ldw	r3,168(sp)
 8007cf8:	1803e416 	blt	r3,zero,8008c8c <___vfprintf_internal_r+0x1c3c>
 8007cfc:	180d883a 	mov	r6,r3
 8007d00:	000b883a 	mov	r5,zero
 8007d04:	8009883a 	mov	r4,r16
 8007d08:	df003d15 	stw	fp,244(sp)
 8007d0c:	800c9880 	call	800c988 <memchr>
 8007d10:	da003d17 	ldw	r8,244(sp)
 8007d14:	10046826 	beq	r2,zero,8008eb8 <___vfprintf_internal_r+0x1e68>
 8007d18:	1405c83a 	sub	r2,r2,r16
 8007d1c:	d8802b15 	stw	r2,172(sp)
 8007d20:	1003e016 	blt	r2,zero,8008ca4 <___vfprintf_internal_r+0x1c54>
 8007d24:	df002783 	ldbu	fp,158(sp)
 8007d28:	d8802915 	stw	r2,164(sp)
 8007d2c:	dcc02e15 	stw	r19,184(sp)
 8007d30:	d8002a15 	stw	zero,168(sp)
 8007d34:	d8003215 	stw	zero,200(sp)
 8007d38:	003ea206 	br	80077c4 <__alt_data_end+0xfc0077c4>
 8007d3c:	8025883a 	mov	r18,r16
 8007d40:	dc002903 	ldbu	r16,164(sp)
 8007d44:	e011883a 	mov	r8,fp
 8007d48:	84003fcc 	andi	r16,r16,255
 8007d4c:	803f8d26 	beq	r16,zero,8007b84 <__alt_data_end+0xfc007b84>
 8007d50:	d8c02b03 	ldbu	r3,172(sp)
 8007d54:	d8c02785 	stb	r3,158(sp)
 8007d58:	003f8a06 	br	8007b84 <__alt_data_end+0xfc007b84>
 8007d5c:	8025883a 	mov	r18,r16
 8007d60:	dc002903 	ldbu	r16,164(sp)
 8007d64:	e011883a 	mov	r8,fp
 8007d68:	84003fcc 	andi	r16,r16,255
 8007d6c:	8005661e 	bne	r16,zero,8009308 <___vfprintf_internal_r+0x22b8>
 8007d70:	01020074 	movhi	r4,2049
 8007d74:	211fe904 	addi	r4,r4,32676
 8007d78:	d9003915 	stw	r4,228(sp)
 8007d7c:	9080080c 	andi	r2,r18,32
 8007d80:	103f9f1e 	bne	r2,zero,8007c00 <__alt_data_end+0xfc007c00>
 8007d84:	9080040c 	andi	r2,r18,16
 8007d88:	1002eb26 	beq	r2,zero,8008938 <___vfprintf_internal_r+0x18e8>
 8007d8c:	d8802e17 	ldw	r2,184(sp)
 8007d90:	002d883a 	mov	r22,zero
 8007d94:	14c00017 	ldw	r19,0(r2)
 8007d98:	10800104 	addi	r2,r2,4
 8007d9c:	d8802e15 	stw	r2,184(sp)
 8007da0:	003f9c06 	br	8007c14 <__alt_data_end+0xfc007c14>
 8007da4:	d8802b07 	ldb	r2,172(sp)
 8007da8:	1002e11e 	bne	r2,zero,8008930 <___vfprintf_internal_r+0x18e0>
 8007dac:	00c00044 	movi	r3,1
 8007db0:	d8c02905 	stb	r3,164(sp)
 8007db4:	00c00804 	movi	r3,32
 8007db8:	d8c02b05 	stb	r3,172(sp)
 8007dbc:	ac400007 	ldb	r17,0(r21)
 8007dc0:	003d0506 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007dc4:	84000054 	ori	r16,r16,1
 8007dc8:	ac400007 	ldb	r17,0(r21)
 8007dcc:	003d0206 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007dd0:	8025883a 	mov	r18,r16
 8007dd4:	dc002903 	ldbu	r16,164(sp)
 8007dd8:	e011883a 	mov	r8,fp
 8007ddc:	84003fcc 	andi	r16,r16,255
 8007de0:	803de726 	beq	r16,zero,8007580 <__alt_data_end+0xfc007580>
 8007de4:	d8c02b03 	ldbu	r3,172(sp)
 8007de8:	d8c02785 	stb	r3,158(sp)
 8007dec:	003de406 	br	8007580 <__alt_data_end+0xfc007580>
 8007df0:	84001014 	ori	r16,r16,64
 8007df4:	ac400007 	ldb	r17,0(r21)
 8007df8:	003cf706 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007dfc:	ac400007 	ldb	r17,0(r21)
 8007e00:	00801b04 	movi	r2,108
 8007e04:	88838f26 	beq	r17,r2,8008c44 <___vfprintf_internal_r+0x1bf4>
 8007e08:	84000414 	ori	r16,r16,16
 8007e0c:	003cf206 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007e10:	8025883a 	mov	r18,r16
 8007e14:	dc002903 	ldbu	r16,164(sp)
 8007e18:	e011883a 	mov	r8,fp
 8007e1c:	84003fcc 	andi	r16,r16,255
 8007e20:	80053f1e 	bne	r16,zero,8009320 <___vfprintf_internal_r+0x22d0>
 8007e24:	9080080c 	andi	r2,r18,32
 8007e28:	1002d226 	beq	r2,zero,8008974 <___vfprintf_internal_r+0x1924>
 8007e2c:	d9002e17 	ldw	r4,184(sp)
 8007e30:	d9402f17 	ldw	r5,188(sp)
 8007e34:	20800017 	ldw	r2,0(r4)
 8007e38:	2807d7fa 	srai	r3,r5,31
 8007e3c:	21000104 	addi	r4,r4,4
 8007e40:	d9002e15 	stw	r4,184(sp)
 8007e44:	11400015 	stw	r5,0(r2)
 8007e48:	10c00115 	stw	r3,4(r2)
 8007e4c:	003cb806 	br	8007130 <__alt_data_end+0xfc007130>
 8007e50:	d8c02e17 	ldw	r3,184(sp)
 8007e54:	d9002e17 	ldw	r4,184(sp)
 8007e58:	8025883a 	mov	r18,r16
 8007e5c:	18800017 	ldw	r2,0(r3)
 8007e60:	21000104 	addi	r4,r4,4
 8007e64:	00c00044 	movi	r3,1
 8007e68:	e011883a 	mov	r8,fp
 8007e6c:	d8c02915 	stw	r3,164(sp)
 8007e70:	d8002785 	stb	zero,158(sp)
 8007e74:	d8801405 	stb	r2,80(sp)
 8007e78:	d9002e15 	stw	r4,184(sp)
 8007e7c:	d8c02b15 	stw	r3,172(sp)
 8007e80:	d8002a15 	stw	zero,168(sp)
 8007e84:	d8003215 	stw	zero,200(sp)
 8007e88:	dc001404 	addi	r16,sp,80
 8007e8c:	0039883a 	mov	fp,zero
 8007e90:	003e5306 	br	80077e0 <__alt_data_end+0xfc0077e0>
 8007e94:	01020074 	movhi	r4,2049
 8007e98:	211fe904 	addi	r4,r4,32676
 8007e9c:	0039883a 	mov	fp,zero
 8007ea0:	d9003915 	stw	r4,228(sp)
 8007ea4:	04401e04 	movi	r17,120
 8007ea8:	003f6906 	br	8007c50 <__alt_data_end+0xfc007c50>
 8007eac:	8025883a 	mov	r18,r16
 8007eb0:	dc002903 	ldbu	r16,164(sp)
 8007eb4:	e011883a 	mov	r8,fp
 8007eb8:	84003fcc 	andi	r16,r16,255
 8007ebc:	8005081e 	bne	r16,zero,80092e0 <___vfprintf_internal_r+0x2290>
 8007ec0:	883d6126 	beq	r17,zero,8007448 <__alt_data_end+0xfc007448>
 8007ec4:	00c00044 	movi	r3,1
 8007ec8:	d8c02915 	stw	r3,164(sp)
 8007ecc:	dc401405 	stb	r17,80(sp)
 8007ed0:	d8002785 	stb	zero,158(sp)
 8007ed4:	003fe906 	br	8007e7c <__alt_data_end+0xfc007e7c>
 8007ed8:	01420074 	movhi	r5,2049
 8007edc:	295fe904 	addi	r5,r5,32676
 8007ee0:	d9403915 	stw	r5,228(sp)
 8007ee4:	d8c02e15 	stw	r3,184(sp)
 8007ee8:	1025883a 	mov	r18,r2
 8007eec:	04401e04 	movi	r17,120
 8007ef0:	9d84b03a 	or	r2,r19,r22
 8007ef4:	1000fc1e 	bne	r2,zero,80082e8 <___vfprintf_internal_r+0x1298>
 8007ef8:	0039883a 	mov	fp,zero
 8007efc:	00800084 	movi	r2,2
 8007f00:	10803fcc 	andi	r2,r2,255
 8007f04:	00c00044 	movi	r3,1
 8007f08:	10c20f26 	beq	r2,r3,8008748 <___vfprintf_internal_r+0x16f8>
 8007f0c:	00c00084 	movi	r3,2
 8007f10:	10fd3326 	beq	r2,r3,80073e0 <__alt_data_end+0xfc0073e0>
 8007f14:	003e0b06 	br	8007744 <__alt_data_end+0xfc007744>
 8007f18:	d8c02017 	ldw	r3,128(sp)
 8007f1c:	003e7106 	br	80078e4 <__alt_data_end+0xfc0078e4>
 8007f20:	00801944 	movi	r2,101
 8007f24:	14407e0e 	bge	r2,r17,8008120 <___vfprintf_internal_r+0x10d0>
 8007f28:	d9003617 	ldw	r4,216(sp)
 8007f2c:	d9403817 	ldw	r5,224(sp)
 8007f30:	000d883a 	mov	r6,zero
 8007f34:	000f883a 	mov	r7,zero
 8007f38:	d8c03c15 	stw	r3,240(sp)
 8007f3c:	da003d15 	stw	r8,244(sp)
 8007f40:	8013c300 	call	8013c30 <__eqdf2>
 8007f44:	d8c03c17 	ldw	r3,240(sp)
 8007f48:	da003d17 	ldw	r8,244(sp)
 8007f4c:	1000f71e 	bne	r2,zero,800832c <___vfprintf_internal_r+0x12dc>
 8007f50:	d8801f17 	ldw	r2,124(sp)
 8007f54:	01020074 	movhi	r4,2049
 8007f58:	211ff004 	addi	r4,r4,32704
 8007f5c:	18c00044 	addi	r3,r3,1
 8007f60:	10800044 	addi	r2,r2,1
 8007f64:	41000015 	stw	r4,0(r8)
 8007f68:	01000044 	movi	r4,1
 8007f6c:	41000115 	stw	r4,4(r8)
 8007f70:	d8c02015 	stw	r3,128(sp)
 8007f74:	d8801f15 	stw	r2,124(sp)
 8007f78:	010001c4 	movi	r4,7
 8007f7c:	2082b816 	blt	r4,r2,8008a60 <___vfprintf_internal_r+0x1a10>
 8007f80:	42000204 	addi	r8,r8,8
 8007f84:	d8802617 	ldw	r2,152(sp)
 8007f88:	d9403317 	ldw	r5,204(sp)
 8007f8c:	11400216 	blt	r2,r5,8007f98 <___vfprintf_internal_r+0xf48>
 8007f90:	9080004c 	andi	r2,r18,1
 8007f94:	103eb326 	beq	r2,zero,8007a64 <__alt_data_end+0xfc007a64>
 8007f98:	d8803717 	ldw	r2,220(sp)
 8007f9c:	d9003417 	ldw	r4,208(sp)
 8007fa0:	d9403717 	ldw	r5,220(sp)
 8007fa4:	1887883a 	add	r3,r3,r2
 8007fa8:	d8801f17 	ldw	r2,124(sp)
 8007fac:	41000015 	stw	r4,0(r8)
 8007fb0:	41400115 	stw	r5,4(r8)
 8007fb4:	10800044 	addi	r2,r2,1
 8007fb8:	d8c02015 	stw	r3,128(sp)
 8007fbc:	d8801f15 	stw	r2,124(sp)
 8007fc0:	010001c4 	movi	r4,7
 8007fc4:	20832916 	blt	r4,r2,8008c6c <___vfprintf_internal_r+0x1c1c>
 8007fc8:	42000204 	addi	r8,r8,8
 8007fcc:	d8803317 	ldw	r2,204(sp)
 8007fd0:	143fffc4 	addi	r16,r2,-1
 8007fd4:	043ea30e 	bge	zero,r16,8007a64 <__alt_data_end+0xfc007a64>
 8007fd8:	04400404 	movi	r17,16
 8007fdc:	d8801f17 	ldw	r2,124(sp)
 8007fe0:	8c00880e 	bge	r17,r16,8008204 <___vfprintf_internal_r+0x11b4>
 8007fe4:	01420074 	movhi	r5,2049
 8007fe8:	295ff884 	addi	r5,r5,32738
 8007fec:	d9402c15 	stw	r5,176(sp)
 8007ff0:	058001c4 	movi	r22,7
 8007ff4:	dcc02d17 	ldw	r19,180(sp)
 8007ff8:	00000306 	br	8008008 <___vfprintf_internal_r+0xfb8>
 8007ffc:	42000204 	addi	r8,r8,8
 8008000:	843ffc04 	addi	r16,r16,-16
 8008004:	8c00820e 	bge	r17,r16,8008210 <___vfprintf_internal_r+0x11c0>
 8008008:	18c00404 	addi	r3,r3,16
 800800c:	10800044 	addi	r2,r2,1
 8008010:	45000015 	stw	r20,0(r8)
 8008014:	44400115 	stw	r17,4(r8)
 8008018:	d8c02015 	stw	r3,128(sp)
 800801c:	d8801f15 	stw	r2,124(sp)
 8008020:	b0bff60e 	bge	r22,r2,8007ffc <__alt_data_end+0xfc007ffc>
 8008024:	d9801e04 	addi	r6,sp,120
 8008028:	b80b883a 	mov	r5,r23
 800802c:	9809883a 	mov	r4,r19
 8008030:	800fda00 	call	800fda0 <__sprint_r>
 8008034:	103d0a1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008038:	d8c02017 	ldw	r3,128(sp)
 800803c:	d8801f17 	ldw	r2,124(sp)
 8008040:	da000404 	addi	r8,sp,16
 8008044:	003fee06 	br	8008000 <__alt_data_end+0xfc008000>
 8008048:	d9403117 	ldw	r5,196(sp)
 800804c:	d8802917 	ldw	r2,164(sp)
 8008050:	28adc83a 	sub	r22,r5,r2
 8008054:	05be410e 	bge	zero,r22,800795c <__alt_data_end+0xfc00795c>
 8008058:	07000404 	movi	fp,16
 800805c:	d8801f17 	ldw	r2,124(sp)
 8008060:	e5838f0e 	bge	fp,r22,8008ea0 <___vfprintf_internal_r+0x1e50>
 8008064:	01420074 	movhi	r5,2049
 8008068:	295ff884 	addi	r5,r5,32738
 800806c:	dc403015 	stw	r17,192(sp)
 8008070:	d9402c15 	stw	r5,176(sp)
 8008074:	b023883a 	mov	r17,r22
 8008078:	04c001c4 	movi	r19,7
 800807c:	a82d883a 	mov	r22,r21
 8008080:	902b883a 	mov	r21,r18
 8008084:	8025883a 	mov	r18,r16
 8008088:	dc002d17 	ldw	r16,180(sp)
 800808c:	00000306 	br	800809c <___vfprintf_internal_r+0x104c>
 8008090:	8c7ffc04 	addi	r17,r17,-16
 8008094:	42000204 	addi	r8,r8,8
 8008098:	e440110e 	bge	fp,r17,80080e0 <___vfprintf_internal_r+0x1090>
 800809c:	18c00404 	addi	r3,r3,16
 80080a0:	10800044 	addi	r2,r2,1
 80080a4:	45000015 	stw	r20,0(r8)
 80080a8:	47000115 	stw	fp,4(r8)
 80080ac:	d8c02015 	stw	r3,128(sp)
 80080b0:	d8801f15 	stw	r2,124(sp)
 80080b4:	98bff60e 	bge	r19,r2,8008090 <__alt_data_end+0xfc008090>
 80080b8:	d9801e04 	addi	r6,sp,120
 80080bc:	b80b883a 	mov	r5,r23
 80080c0:	8009883a 	mov	r4,r16
 80080c4:	800fda00 	call	800fda0 <__sprint_r>
 80080c8:	103ce51e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 80080cc:	8c7ffc04 	addi	r17,r17,-16
 80080d0:	d8c02017 	ldw	r3,128(sp)
 80080d4:	d8801f17 	ldw	r2,124(sp)
 80080d8:	da000404 	addi	r8,sp,16
 80080dc:	e47fef16 	blt	fp,r17,800809c <__alt_data_end+0xfc00809c>
 80080e0:	9021883a 	mov	r16,r18
 80080e4:	a825883a 	mov	r18,r21
 80080e8:	b02b883a 	mov	r21,r22
 80080ec:	882d883a 	mov	r22,r17
 80080f0:	dc403017 	ldw	r17,192(sp)
 80080f4:	d9002c17 	ldw	r4,176(sp)
 80080f8:	1d87883a 	add	r3,r3,r22
 80080fc:	10800044 	addi	r2,r2,1
 8008100:	41000015 	stw	r4,0(r8)
 8008104:	45800115 	stw	r22,4(r8)
 8008108:	d8c02015 	stw	r3,128(sp)
 800810c:	d8801f15 	stw	r2,124(sp)
 8008110:	010001c4 	movi	r4,7
 8008114:	20818e16 	blt	r4,r2,8008750 <___vfprintf_internal_r+0x1700>
 8008118:	42000204 	addi	r8,r8,8
 800811c:	003e0f06 	br	800795c <__alt_data_end+0xfc00795c>
 8008120:	d9403317 	ldw	r5,204(sp)
 8008124:	00800044 	movi	r2,1
 8008128:	18c00044 	addi	r3,r3,1
 800812c:	1141530e 	bge	r2,r5,800867c <___vfprintf_internal_r+0x162c>
 8008130:	dc401f17 	ldw	r17,124(sp)
 8008134:	00800044 	movi	r2,1
 8008138:	40800115 	stw	r2,4(r8)
 800813c:	8c400044 	addi	r17,r17,1
 8008140:	44000015 	stw	r16,0(r8)
 8008144:	d8c02015 	stw	r3,128(sp)
 8008148:	dc401f15 	stw	r17,124(sp)
 800814c:	008001c4 	movi	r2,7
 8008150:	14416b16 	blt	r2,r17,8008700 <___vfprintf_internal_r+0x16b0>
 8008154:	42000204 	addi	r8,r8,8
 8008158:	d8803717 	ldw	r2,220(sp)
 800815c:	d9003417 	ldw	r4,208(sp)
 8008160:	8c400044 	addi	r17,r17,1
 8008164:	10c7883a 	add	r3,r2,r3
 8008168:	40800115 	stw	r2,4(r8)
 800816c:	41000015 	stw	r4,0(r8)
 8008170:	d8c02015 	stw	r3,128(sp)
 8008174:	dc401f15 	stw	r17,124(sp)
 8008178:	008001c4 	movi	r2,7
 800817c:	14416916 	blt	r2,r17,8008724 <___vfprintf_internal_r+0x16d4>
 8008180:	45800204 	addi	r22,r8,8
 8008184:	d9003617 	ldw	r4,216(sp)
 8008188:	d9403817 	ldw	r5,224(sp)
 800818c:	000d883a 	mov	r6,zero
 8008190:	000f883a 	mov	r7,zero
 8008194:	d8c03c15 	stw	r3,240(sp)
 8008198:	8013c300 	call	8013c30 <__eqdf2>
 800819c:	d8c03c17 	ldw	r3,240(sp)
 80081a0:	1000bc26 	beq	r2,zero,8008494 <___vfprintf_internal_r+0x1444>
 80081a4:	d9403317 	ldw	r5,204(sp)
 80081a8:	84000044 	addi	r16,r16,1
 80081ac:	8c400044 	addi	r17,r17,1
 80081b0:	28bfffc4 	addi	r2,r5,-1
 80081b4:	1887883a 	add	r3,r3,r2
 80081b8:	b0800115 	stw	r2,4(r22)
 80081bc:	b4000015 	stw	r16,0(r22)
 80081c0:	d8c02015 	stw	r3,128(sp)
 80081c4:	dc401f15 	stw	r17,124(sp)
 80081c8:	008001c4 	movi	r2,7
 80081cc:	14414316 	blt	r2,r17,80086dc <___vfprintf_internal_r+0x168c>
 80081d0:	b5800204 	addi	r22,r22,8
 80081d4:	d9003a17 	ldw	r4,232(sp)
 80081d8:	df0022c4 	addi	fp,sp,139
 80081dc:	8c400044 	addi	r17,r17,1
 80081e0:	20c7883a 	add	r3,r4,r3
 80081e4:	b7000015 	stw	fp,0(r22)
 80081e8:	b1000115 	stw	r4,4(r22)
 80081ec:	d8c02015 	stw	r3,128(sp)
 80081f0:	dc401f15 	stw	r17,124(sp)
 80081f4:	008001c4 	movi	r2,7
 80081f8:	14400e16 	blt	r2,r17,8008234 <___vfprintf_internal_r+0x11e4>
 80081fc:	b2000204 	addi	r8,r22,8
 8008200:	003e1806 	br	8007a64 <__alt_data_end+0xfc007a64>
 8008204:	01020074 	movhi	r4,2049
 8008208:	211ff884 	addi	r4,r4,32738
 800820c:	d9002c15 	stw	r4,176(sp)
 8008210:	d9002c17 	ldw	r4,176(sp)
 8008214:	1c07883a 	add	r3,r3,r16
 8008218:	44000115 	stw	r16,4(r8)
 800821c:	41000015 	stw	r4,0(r8)
 8008220:	10800044 	addi	r2,r2,1
 8008224:	d8c02015 	stw	r3,128(sp)
 8008228:	d8801f15 	stw	r2,124(sp)
 800822c:	010001c4 	movi	r4,7
 8008230:	20be0b0e 	bge	r4,r2,8007a60 <__alt_data_end+0xfc007a60>
 8008234:	d9002d17 	ldw	r4,180(sp)
 8008238:	d9801e04 	addi	r6,sp,120
 800823c:	b80b883a 	mov	r5,r23
 8008240:	800fda00 	call	800fda0 <__sprint_r>
 8008244:	103c861e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008248:	d8c02017 	ldw	r3,128(sp)
 800824c:	da000404 	addi	r8,sp,16
 8008250:	003e0406 	br	8007a64 <__alt_data_end+0xfc007a64>
 8008254:	d9002d17 	ldw	r4,180(sp)
 8008258:	d9801e04 	addi	r6,sp,120
 800825c:	b80b883a 	mov	r5,r23
 8008260:	800fda00 	call	800fda0 <__sprint_r>
 8008264:	103e3b26 	beq	r2,zero,8007b54 <__alt_data_end+0xfc007b54>
 8008268:	003c7d06 	br	8007460 <__alt_data_end+0xfc007460>
 800826c:	d9002d17 	ldw	r4,180(sp)
 8008270:	d9801e04 	addi	r6,sp,120
 8008274:	b80b883a 	mov	r5,r23
 8008278:	800fda00 	call	800fda0 <__sprint_r>
 800827c:	103c781e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008280:	d8c02017 	ldw	r3,128(sp)
 8008284:	da000404 	addi	r8,sp,16
 8008288:	003de906 	br	8007a30 <__alt_data_end+0xfc007a30>
 800828c:	d9002d17 	ldw	r4,180(sp)
 8008290:	d9801e04 	addi	r6,sp,120
 8008294:	b80b883a 	mov	r5,r23
 8008298:	800fda00 	call	800fda0 <__sprint_r>
 800829c:	103c701e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 80082a0:	d8c02017 	ldw	r3,128(sp)
 80082a4:	da000404 	addi	r8,sp,16
 80082a8:	003d9b06 	br	8007918 <__alt_data_end+0xfc007918>
 80082ac:	d9002d17 	ldw	r4,180(sp)
 80082b0:	d9801e04 	addi	r6,sp,120
 80082b4:	b80b883a 	mov	r5,r23
 80082b8:	800fda00 	call	800fda0 <__sprint_r>
 80082bc:	103c681e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 80082c0:	d8c02017 	ldw	r3,128(sp)
 80082c4:	da000404 	addi	r8,sp,16
 80082c8:	003da106 	br	8007950 <__alt_data_end+0xfc007950>
 80082cc:	d9402a17 	ldw	r5,168(sp)
 80082d0:	d8002785 	stb	zero,158(sp)
 80082d4:	283f0616 	blt	r5,zero,8007ef0 <__alt_data_end+0xfc007ef0>
 80082d8:	00ffdfc4 	movi	r3,-129
 80082dc:	9d84b03a 	or	r2,r19,r22
 80082e0:	90e4703a 	and	r18,r18,r3
 80082e4:	103c3b26 	beq	r2,zero,80073d4 <__alt_data_end+0xfc0073d4>
 80082e8:	0039883a 	mov	fp,zero
 80082ec:	003e5806 	br	8007c50 <__alt_data_end+0xfc007c50>
 80082f0:	9080040c 	andi	r2,r18,16
 80082f4:	1001b326 	beq	r2,zero,80089c4 <___vfprintf_internal_r+0x1974>
 80082f8:	d8c02e17 	ldw	r3,184(sp)
 80082fc:	d9002a17 	ldw	r4,168(sp)
 8008300:	d8002785 	stb	zero,158(sp)
 8008304:	18800104 	addi	r2,r3,4
 8008308:	1cc00017 	ldw	r19,0(r3)
 800830c:	002d883a 	mov	r22,zero
 8008310:	2001b516 	blt	r4,zero,80089e8 <___vfprintf_internal_r+0x1998>
 8008314:	00ffdfc4 	movi	r3,-129
 8008318:	d8802e15 	stw	r2,184(sp)
 800831c:	90e4703a 	and	r18,r18,r3
 8008320:	983d0526 	beq	r19,zero,8007738 <__alt_data_end+0xfc007738>
 8008324:	0039883a 	mov	fp,zero
 8008328:	003d0806 	br	800774c <__alt_data_end+0xfc00774c>
 800832c:	dc402617 	ldw	r17,152(sp)
 8008330:	0441d30e 	bge	zero,r17,8008a80 <___vfprintf_internal_r+0x1a30>
 8008334:	dc403217 	ldw	r17,200(sp)
 8008338:	d8803317 	ldw	r2,204(sp)
 800833c:	1440010e 	bge	r2,r17,8008344 <___vfprintf_internal_r+0x12f4>
 8008340:	1023883a 	mov	r17,r2
 8008344:	04400a0e 	bge	zero,r17,8008370 <___vfprintf_internal_r+0x1320>
 8008348:	d8801f17 	ldw	r2,124(sp)
 800834c:	1c47883a 	add	r3,r3,r17
 8008350:	44000015 	stw	r16,0(r8)
 8008354:	10800044 	addi	r2,r2,1
 8008358:	44400115 	stw	r17,4(r8)
 800835c:	d8c02015 	stw	r3,128(sp)
 8008360:	d8801f15 	stw	r2,124(sp)
 8008364:	010001c4 	movi	r4,7
 8008368:	20826516 	blt	r4,r2,8008d00 <___vfprintf_internal_r+0x1cb0>
 800836c:	42000204 	addi	r8,r8,8
 8008370:	88026116 	blt	r17,zero,8008cf8 <___vfprintf_internal_r+0x1ca8>
 8008374:	d9003217 	ldw	r4,200(sp)
 8008378:	2463c83a 	sub	r17,r4,r17
 800837c:	04407b0e 	bge	zero,r17,800856c <___vfprintf_internal_r+0x151c>
 8008380:	05800404 	movi	r22,16
 8008384:	d8801f17 	ldw	r2,124(sp)
 8008388:	b4419d0e 	bge	r22,r17,8008a00 <___vfprintf_internal_r+0x19b0>
 800838c:	01020074 	movhi	r4,2049
 8008390:	211ff884 	addi	r4,r4,32738
 8008394:	d9002c15 	stw	r4,176(sp)
 8008398:	070001c4 	movi	fp,7
 800839c:	dcc02d17 	ldw	r19,180(sp)
 80083a0:	00000306 	br	80083b0 <___vfprintf_internal_r+0x1360>
 80083a4:	42000204 	addi	r8,r8,8
 80083a8:	8c7ffc04 	addi	r17,r17,-16
 80083ac:	b441970e 	bge	r22,r17,8008a0c <___vfprintf_internal_r+0x19bc>
 80083b0:	18c00404 	addi	r3,r3,16
 80083b4:	10800044 	addi	r2,r2,1
 80083b8:	45000015 	stw	r20,0(r8)
 80083bc:	45800115 	stw	r22,4(r8)
 80083c0:	d8c02015 	stw	r3,128(sp)
 80083c4:	d8801f15 	stw	r2,124(sp)
 80083c8:	e0bff60e 	bge	fp,r2,80083a4 <__alt_data_end+0xfc0083a4>
 80083cc:	d9801e04 	addi	r6,sp,120
 80083d0:	b80b883a 	mov	r5,r23
 80083d4:	9809883a 	mov	r4,r19
 80083d8:	800fda00 	call	800fda0 <__sprint_r>
 80083dc:	103c201e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 80083e0:	d8c02017 	ldw	r3,128(sp)
 80083e4:	d8801f17 	ldw	r2,124(sp)
 80083e8:	da000404 	addi	r8,sp,16
 80083ec:	003fee06 	br	80083a8 <__alt_data_end+0xfc0083a8>
 80083f0:	d9002d17 	ldw	r4,180(sp)
 80083f4:	d9801e04 	addi	r6,sp,120
 80083f8:	b80b883a 	mov	r5,r23
 80083fc:	800fda00 	call	800fda0 <__sprint_r>
 8008400:	103c171e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008404:	d8c02017 	ldw	r3,128(sp)
 8008408:	df002787 	ldb	fp,158(sp)
 800840c:	da000404 	addi	r8,sp,16
 8008410:	003d3406 	br	80078e4 <__alt_data_end+0xfc0078e4>
 8008414:	9080040c 	andi	r2,r18,16
 8008418:	10016126 	beq	r2,zero,80089a0 <___vfprintf_internal_r+0x1950>
 800841c:	d9402e17 	ldw	r5,184(sp)
 8008420:	2cc00017 	ldw	r19,0(r5)
 8008424:	29400104 	addi	r5,r5,4
 8008428:	d9402e15 	stw	r5,184(sp)
 800842c:	982dd7fa 	srai	r22,r19,31
 8008430:	b005883a 	mov	r2,r22
 8008434:	003c5a06 	br	80075a0 <__alt_data_end+0xfc0075a0>
 8008438:	9080040c 	andi	r2,r18,16
 800843c:	10003526 	beq	r2,zero,8008514 <___vfprintf_internal_r+0x14c4>
 8008440:	d8c02e17 	ldw	r3,184(sp)
 8008444:	d9002a17 	ldw	r4,168(sp)
 8008448:	d8002785 	stb	zero,158(sp)
 800844c:	18800104 	addi	r2,r3,4
 8008450:	1cc00017 	ldw	r19,0(r3)
 8008454:	002d883a 	mov	r22,zero
 8008458:	20003716 	blt	r4,zero,8008538 <___vfprintf_internal_r+0x14e8>
 800845c:	00ffdfc4 	movi	r3,-129
 8008460:	d8802e15 	stw	r2,184(sp)
 8008464:	90e4703a 	and	r18,r18,r3
 8008468:	0039883a 	mov	fp,zero
 800846c:	983dd426 	beq	r19,zero,8007bc0 <__alt_data_end+0xfc007bc0>
 8008470:	00800244 	movi	r2,9
 8008474:	14fc5336 	bltu	r2,r19,80075c4 <__alt_data_end+0xfc0075c4>
 8008478:	d8c02817 	ldw	r3,160(sp)
 800847c:	dc001dc4 	addi	r16,sp,119
 8008480:	9cc00c04 	addi	r19,r19,48
 8008484:	1c07c83a 	sub	r3,r3,r16
 8008488:	dcc01dc5 	stb	r19,119(sp)
 800848c:	d8c02b15 	stw	r3,172(sp)
 8008490:	003cc606 	br	80077ac <__alt_data_end+0xfc0077ac>
 8008494:	d8803317 	ldw	r2,204(sp)
 8008498:	143fffc4 	addi	r16,r2,-1
 800849c:	043f4d0e 	bge	zero,r16,80081d4 <__alt_data_end+0xfc0081d4>
 80084a0:	07000404 	movi	fp,16
 80084a4:	e400810e 	bge	fp,r16,80086ac <___vfprintf_internal_r+0x165c>
 80084a8:	01420074 	movhi	r5,2049
 80084ac:	295ff884 	addi	r5,r5,32738
 80084b0:	d9402c15 	stw	r5,176(sp)
 80084b4:	01c001c4 	movi	r7,7
 80084b8:	dcc02d17 	ldw	r19,180(sp)
 80084bc:	00000306 	br	80084cc <___vfprintf_internal_r+0x147c>
 80084c0:	b5800204 	addi	r22,r22,8
 80084c4:	843ffc04 	addi	r16,r16,-16
 80084c8:	e4007b0e 	bge	fp,r16,80086b8 <___vfprintf_internal_r+0x1668>
 80084cc:	18c00404 	addi	r3,r3,16
 80084d0:	8c400044 	addi	r17,r17,1
 80084d4:	b5000015 	stw	r20,0(r22)
 80084d8:	b7000115 	stw	fp,4(r22)
 80084dc:	d8c02015 	stw	r3,128(sp)
 80084e0:	dc401f15 	stw	r17,124(sp)
 80084e4:	3c7ff60e 	bge	r7,r17,80084c0 <__alt_data_end+0xfc0084c0>
 80084e8:	d9801e04 	addi	r6,sp,120
 80084ec:	b80b883a 	mov	r5,r23
 80084f0:	9809883a 	mov	r4,r19
 80084f4:	d9c03c15 	stw	r7,240(sp)
 80084f8:	800fda00 	call	800fda0 <__sprint_r>
 80084fc:	d9c03c17 	ldw	r7,240(sp)
 8008500:	103bd71e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008504:	d8c02017 	ldw	r3,128(sp)
 8008508:	dc401f17 	ldw	r17,124(sp)
 800850c:	dd800404 	addi	r22,sp,16
 8008510:	003fec06 	br	80084c4 <__alt_data_end+0xfc0084c4>
 8008514:	9080100c 	andi	r2,r18,64
 8008518:	d8002785 	stb	zero,158(sp)
 800851c:	10010e26 	beq	r2,zero,8008958 <___vfprintf_internal_r+0x1908>
 8008520:	d9402e17 	ldw	r5,184(sp)
 8008524:	d8c02a17 	ldw	r3,168(sp)
 8008528:	002d883a 	mov	r22,zero
 800852c:	28800104 	addi	r2,r5,4
 8008530:	2cc0000b 	ldhu	r19,0(r5)
 8008534:	183fc90e 	bge	r3,zero,800845c <__alt_data_end+0xfc00845c>
 8008538:	d8802e15 	stw	r2,184(sp)
 800853c:	0039883a 	mov	fp,zero
 8008540:	9d84b03a 	or	r2,r19,r22
 8008544:	103c1e1e 	bne	r2,zero,80075c0 <__alt_data_end+0xfc0075c0>
 8008548:	00800044 	movi	r2,1
 800854c:	003e6c06 	br	8007f00 <__alt_data_end+0xfc007f00>
 8008550:	d9002d17 	ldw	r4,180(sp)
 8008554:	d9801e04 	addi	r6,sp,120
 8008558:	b80b883a 	mov	r5,r23
 800855c:	800fda00 	call	800fda0 <__sprint_r>
 8008560:	103bbf1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008564:	d8c02017 	ldw	r3,128(sp)
 8008568:	da000404 	addi	r8,sp,16
 800856c:	d9003217 	ldw	r4,200(sp)
 8008570:	d8802617 	ldw	r2,152(sp)
 8008574:	d9403317 	ldw	r5,204(sp)
 8008578:	8123883a 	add	r17,r16,r4
 800857c:	11400216 	blt	r2,r5,8008588 <___vfprintf_internal_r+0x1538>
 8008580:	9100004c 	andi	r4,r18,1
 8008584:	20000d26 	beq	r4,zero,80085bc <___vfprintf_internal_r+0x156c>
 8008588:	d9003717 	ldw	r4,220(sp)
 800858c:	d9403417 	ldw	r5,208(sp)
 8008590:	1907883a 	add	r3,r3,r4
 8008594:	d9001f17 	ldw	r4,124(sp)
 8008598:	41400015 	stw	r5,0(r8)
 800859c:	d9403717 	ldw	r5,220(sp)
 80085a0:	21000044 	addi	r4,r4,1
 80085a4:	d8c02015 	stw	r3,128(sp)
 80085a8:	41400115 	stw	r5,4(r8)
 80085ac:	d9001f15 	stw	r4,124(sp)
 80085b0:	014001c4 	movi	r5,7
 80085b4:	2901e816 	blt	r5,r4,8008d58 <___vfprintf_internal_r+0x1d08>
 80085b8:	42000204 	addi	r8,r8,8
 80085bc:	d9003317 	ldw	r4,204(sp)
 80085c0:	8121883a 	add	r16,r16,r4
 80085c4:	2085c83a 	sub	r2,r4,r2
 80085c8:	8461c83a 	sub	r16,r16,r17
 80085cc:	1400010e 	bge	r2,r16,80085d4 <___vfprintf_internal_r+0x1584>
 80085d0:	1021883a 	mov	r16,r2
 80085d4:	04000a0e 	bge	zero,r16,8008600 <___vfprintf_internal_r+0x15b0>
 80085d8:	d9001f17 	ldw	r4,124(sp)
 80085dc:	1c07883a 	add	r3,r3,r16
 80085e0:	44400015 	stw	r17,0(r8)
 80085e4:	21000044 	addi	r4,r4,1
 80085e8:	44000115 	stw	r16,4(r8)
 80085ec:	d8c02015 	stw	r3,128(sp)
 80085f0:	d9001f15 	stw	r4,124(sp)
 80085f4:	014001c4 	movi	r5,7
 80085f8:	2901fb16 	blt	r5,r4,8008de8 <___vfprintf_internal_r+0x1d98>
 80085fc:	42000204 	addi	r8,r8,8
 8008600:	8001f716 	blt	r16,zero,8008de0 <___vfprintf_internal_r+0x1d90>
 8008604:	1421c83a 	sub	r16,r2,r16
 8008608:	043d160e 	bge	zero,r16,8007a64 <__alt_data_end+0xfc007a64>
 800860c:	04400404 	movi	r17,16
 8008610:	d8801f17 	ldw	r2,124(sp)
 8008614:	8c3efb0e 	bge	r17,r16,8008204 <__alt_data_end+0xfc008204>
 8008618:	01420074 	movhi	r5,2049
 800861c:	295ff884 	addi	r5,r5,32738
 8008620:	d9402c15 	stw	r5,176(sp)
 8008624:	058001c4 	movi	r22,7
 8008628:	dcc02d17 	ldw	r19,180(sp)
 800862c:	00000306 	br	800863c <___vfprintf_internal_r+0x15ec>
 8008630:	42000204 	addi	r8,r8,8
 8008634:	843ffc04 	addi	r16,r16,-16
 8008638:	8c3ef50e 	bge	r17,r16,8008210 <__alt_data_end+0xfc008210>
 800863c:	18c00404 	addi	r3,r3,16
 8008640:	10800044 	addi	r2,r2,1
 8008644:	45000015 	stw	r20,0(r8)
 8008648:	44400115 	stw	r17,4(r8)
 800864c:	d8c02015 	stw	r3,128(sp)
 8008650:	d8801f15 	stw	r2,124(sp)
 8008654:	b0bff60e 	bge	r22,r2,8008630 <__alt_data_end+0xfc008630>
 8008658:	d9801e04 	addi	r6,sp,120
 800865c:	b80b883a 	mov	r5,r23
 8008660:	9809883a 	mov	r4,r19
 8008664:	800fda00 	call	800fda0 <__sprint_r>
 8008668:	103b7d1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 800866c:	d8c02017 	ldw	r3,128(sp)
 8008670:	d8801f17 	ldw	r2,124(sp)
 8008674:	da000404 	addi	r8,sp,16
 8008678:	003fee06 	br	8008634 <__alt_data_end+0xfc008634>
 800867c:	9088703a 	and	r4,r18,r2
 8008680:	203eab1e 	bne	r4,zero,8008130 <__alt_data_end+0xfc008130>
 8008684:	dc401f17 	ldw	r17,124(sp)
 8008688:	40800115 	stw	r2,4(r8)
 800868c:	44000015 	stw	r16,0(r8)
 8008690:	8c400044 	addi	r17,r17,1
 8008694:	d8c02015 	stw	r3,128(sp)
 8008698:	dc401f15 	stw	r17,124(sp)
 800869c:	008001c4 	movi	r2,7
 80086a0:	14400e16 	blt	r2,r17,80086dc <___vfprintf_internal_r+0x168c>
 80086a4:	45800204 	addi	r22,r8,8
 80086a8:	003eca06 	br	80081d4 <__alt_data_end+0xfc0081d4>
 80086ac:	01020074 	movhi	r4,2049
 80086b0:	211ff884 	addi	r4,r4,32738
 80086b4:	d9002c15 	stw	r4,176(sp)
 80086b8:	d8802c17 	ldw	r2,176(sp)
 80086bc:	1c07883a 	add	r3,r3,r16
 80086c0:	8c400044 	addi	r17,r17,1
 80086c4:	b0800015 	stw	r2,0(r22)
 80086c8:	b4000115 	stw	r16,4(r22)
 80086cc:	d8c02015 	stw	r3,128(sp)
 80086d0:	dc401f15 	stw	r17,124(sp)
 80086d4:	008001c4 	movi	r2,7
 80086d8:	147ebd0e 	bge	r2,r17,80081d0 <__alt_data_end+0xfc0081d0>
 80086dc:	d9002d17 	ldw	r4,180(sp)
 80086e0:	d9801e04 	addi	r6,sp,120
 80086e4:	b80b883a 	mov	r5,r23
 80086e8:	800fda00 	call	800fda0 <__sprint_r>
 80086ec:	103b5c1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 80086f0:	d8c02017 	ldw	r3,128(sp)
 80086f4:	dc401f17 	ldw	r17,124(sp)
 80086f8:	dd800404 	addi	r22,sp,16
 80086fc:	003eb506 	br	80081d4 <__alt_data_end+0xfc0081d4>
 8008700:	d9002d17 	ldw	r4,180(sp)
 8008704:	d9801e04 	addi	r6,sp,120
 8008708:	b80b883a 	mov	r5,r23
 800870c:	800fda00 	call	800fda0 <__sprint_r>
 8008710:	103b531e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008714:	d8c02017 	ldw	r3,128(sp)
 8008718:	dc401f17 	ldw	r17,124(sp)
 800871c:	da000404 	addi	r8,sp,16
 8008720:	003e8d06 	br	8008158 <__alt_data_end+0xfc008158>
 8008724:	d9002d17 	ldw	r4,180(sp)
 8008728:	d9801e04 	addi	r6,sp,120
 800872c:	b80b883a 	mov	r5,r23
 8008730:	800fda00 	call	800fda0 <__sprint_r>
 8008734:	103b4a1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008738:	d8c02017 	ldw	r3,128(sp)
 800873c:	dc401f17 	ldw	r17,124(sp)
 8008740:	dd800404 	addi	r22,sp,16
 8008744:	003e8f06 	br	8008184 <__alt_data_end+0xfc008184>
 8008748:	0027883a 	mov	r19,zero
 800874c:	003f4a06 	br	8008478 <__alt_data_end+0xfc008478>
 8008750:	d9002d17 	ldw	r4,180(sp)
 8008754:	d9801e04 	addi	r6,sp,120
 8008758:	b80b883a 	mov	r5,r23
 800875c:	800fda00 	call	800fda0 <__sprint_r>
 8008760:	103b3f1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008764:	d8c02017 	ldw	r3,128(sp)
 8008768:	da000404 	addi	r8,sp,16
 800876c:	003c7b06 	br	800795c <__alt_data_end+0xfc00795c>
 8008770:	d9402a17 	ldw	r5,168(sp)
 8008774:	04e7c83a 	sub	r19,zero,r19
 8008778:	07000b44 	movi	fp,45
 800877c:	9804c03a 	cmpne	r2,r19,zero
 8008780:	05adc83a 	sub	r22,zero,r22
 8008784:	df002785 	stb	fp,158(sp)
 8008788:	b0adc83a 	sub	r22,r22,r2
 800878c:	28017b16 	blt	r5,zero,8008d7c <___vfprintf_internal_r+0x1d2c>
 8008790:	00bfdfc4 	movi	r2,-129
 8008794:	90a4703a 	and	r18,r18,r2
 8008798:	003b8906 	br	80075c0 <__alt_data_end+0xfc0075c0>
 800879c:	d9003617 	ldw	r4,216(sp)
 80087a0:	d9403817 	ldw	r5,224(sp)
 80087a4:	da003d15 	stw	r8,244(sp)
 80087a8:	800e4540 	call	800e454 <__fpclassifyd>
 80087ac:	da003d17 	ldw	r8,244(sp)
 80087b0:	1000f026 	beq	r2,zero,8008b74 <___vfprintf_internal_r+0x1b24>
 80087b4:	d9002a17 	ldw	r4,168(sp)
 80087b8:	05bff7c4 	movi	r22,-33
 80087bc:	00bfffc4 	movi	r2,-1
 80087c0:	8dac703a 	and	r22,r17,r22
 80087c4:	20820026 	beq	r4,r2,8008fc8 <___vfprintf_internal_r+0x1f78>
 80087c8:	008011c4 	movi	r2,71
 80087cc:	b081f726 	beq	r22,r2,8008fac <___vfprintf_internal_r+0x1f5c>
 80087d0:	d9003817 	ldw	r4,224(sp)
 80087d4:	90c04014 	ori	r3,r18,256
 80087d8:	d8c02c15 	stw	r3,176(sp)
 80087dc:	20021516 	blt	r4,zero,8009034 <___vfprintf_internal_r+0x1fe4>
 80087e0:	dcc03817 	ldw	r19,224(sp)
 80087e4:	d8002905 	stb	zero,164(sp)
 80087e8:	00801984 	movi	r2,102
 80087ec:	8881f926 	beq	r17,r2,8008fd4 <___vfprintf_internal_r+0x1f84>
 80087f0:	00801184 	movi	r2,70
 80087f4:	88821c26 	beq	r17,r2,8009068 <___vfprintf_internal_r+0x2018>
 80087f8:	00801144 	movi	r2,69
 80087fc:	b081ef26 	beq	r22,r2,8008fbc <___vfprintf_internal_r+0x1f6c>
 8008800:	d8c02a17 	ldw	r3,168(sp)
 8008804:	d8802104 	addi	r2,sp,132
 8008808:	d8800315 	stw	r2,12(sp)
 800880c:	d9403617 	ldw	r5,216(sp)
 8008810:	d8802504 	addi	r2,sp,148
 8008814:	d9002d17 	ldw	r4,180(sp)
 8008818:	d8800215 	stw	r2,8(sp)
 800881c:	d8802604 	addi	r2,sp,152
 8008820:	d8c00015 	stw	r3,0(sp)
 8008824:	d8800115 	stw	r2,4(sp)
 8008828:	01c00084 	movi	r7,2
 800882c:	980d883a 	mov	r6,r19
 8008830:	d8c03c15 	stw	r3,240(sp)
 8008834:	da003d15 	stw	r8,244(sp)
 8008838:	80097800 	call	8009780 <_dtoa_r>
 800883c:	1021883a 	mov	r16,r2
 8008840:	008019c4 	movi	r2,103
 8008844:	d8c03c17 	ldw	r3,240(sp)
 8008848:	da003d17 	ldw	r8,244(sp)
 800884c:	88817126 	beq	r17,r2,8008e14 <___vfprintf_internal_r+0x1dc4>
 8008850:	008011c4 	movi	r2,71
 8008854:	88829126 	beq	r17,r2,800929c <___vfprintf_internal_r+0x224c>
 8008858:	80f9883a 	add	fp,r16,r3
 800885c:	d9003617 	ldw	r4,216(sp)
 8008860:	000d883a 	mov	r6,zero
 8008864:	000f883a 	mov	r7,zero
 8008868:	980b883a 	mov	r5,r19
 800886c:	da003d15 	stw	r8,244(sp)
 8008870:	8013c300 	call	8013c30 <__eqdf2>
 8008874:	da003d17 	ldw	r8,244(sp)
 8008878:	10018d26 	beq	r2,zero,8008eb0 <___vfprintf_internal_r+0x1e60>
 800887c:	d8802117 	ldw	r2,132(sp)
 8008880:	1700062e 	bgeu	r2,fp,800889c <___vfprintf_internal_r+0x184c>
 8008884:	01000c04 	movi	r4,48
 8008888:	10c00044 	addi	r3,r2,1
 800888c:	d8c02115 	stw	r3,132(sp)
 8008890:	11000005 	stb	r4,0(r2)
 8008894:	d8802117 	ldw	r2,132(sp)
 8008898:	173ffb36 	bltu	r2,fp,8008888 <__alt_data_end+0xfc008888>
 800889c:	1405c83a 	sub	r2,r2,r16
 80088a0:	d8803315 	stw	r2,204(sp)
 80088a4:	008011c4 	movi	r2,71
 80088a8:	b0817626 	beq	r22,r2,8008e84 <___vfprintf_internal_r+0x1e34>
 80088ac:	00801944 	movi	r2,101
 80088b0:	1442800e 	bge	r2,r17,80092b4 <___vfprintf_internal_r+0x2264>
 80088b4:	d8c02617 	ldw	r3,152(sp)
 80088b8:	00801984 	movi	r2,102
 80088bc:	d8c03215 	stw	r3,200(sp)
 80088c0:	8881fe26 	beq	r17,r2,80090bc <___vfprintf_internal_r+0x206c>
 80088c4:	d8c03217 	ldw	r3,200(sp)
 80088c8:	d9003317 	ldw	r4,204(sp)
 80088cc:	1901dd16 	blt	r3,r4,8009044 <___vfprintf_internal_r+0x1ff4>
 80088d0:	9480004c 	andi	r18,r18,1
 80088d4:	90022b1e 	bne	r18,zero,8009184 <___vfprintf_internal_r+0x2134>
 80088d8:	1805883a 	mov	r2,r3
 80088dc:	18028316 	blt	r3,zero,80092ec <___vfprintf_internal_r+0x229c>
 80088e0:	d8c03217 	ldw	r3,200(sp)
 80088e4:	044019c4 	movi	r17,103
 80088e8:	d8c02b15 	stw	r3,172(sp)
 80088ec:	df002907 	ldb	fp,164(sp)
 80088f0:	e001531e 	bne	fp,zero,8008e40 <___vfprintf_internal_r+0x1df0>
 80088f4:	df002783 	ldbu	fp,158(sp)
 80088f8:	d8802915 	stw	r2,164(sp)
 80088fc:	dc802c17 	ldw	r18,176(sp)
 8008900:	d8002a15 	stw	zero,168(sp)
 8008904:	003baf06 	br	80077c4 <__alt_data_end+0xfc0077c4>
 8008908:	d8c02e17 	ldw	r3,184(sp)
 800890c:	d9002e17 	ldw	r4,184(sp)
 8008910:	d9402e17 	ldw	r5,184(sp)
 8008914:	18c00017 	ldw	r3,0(r3)
 8008918:	21000117 	ldw	r4,4(r4)
 800891c:	29400204 	addi	r5,r5,8
 8008920:	d8c03615 	stw	r3,216(sp)
 8008924:	d9003815 	stw	r4,224(sp)
 8008928:	d9402e15 	stw	r5,184(sp)
 800892c:	003b5006 	br	8007670 <__alt_data_end+0xfc007670>
 8008930:	ac400007 	ldb	r17,0(r21)
 8008934:	003a2806 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8008938:	9080100c 	andi	r2,r18,64
 800893c:	1000a826 	beq	r2,zero,8008be0 <___vfprintf_internal_r+0x1b90>
 8008940:	d8c02e17 	ldw	r3,184(sp)
 8008944:	002d883a 	mov	r22,zero
 8008948:	1cc0000b 	ldhu	r19,0(r3)
 800894c:	18c00104 	addi	r3,r3,4
 8008950:	d8c02e15 	stw	r3,184(sp)
 8008954:	003caf06 	br	8007c14 <__alt_data_end+0xfc007c14>
 8008958:	d9002e17 	ldw	r4,184(sp)
 800895c:	d9402a17 	ldw	r5,168(sp)
 8008960:	002d883a 	mov	r22,zero
 8008964:	20800104 	addi	r2,r4,4
 8008968:	24c00017 	ldw	r19,0(r4)
 800896c:	283ebb0e 	bge	r5,zero,800845c <__alt_data_end+0xfc00845c>
 8008970:	003ef106 	br	8008538 <__alt_data_end+0xfc008538>
 8008974:	9080040c 	andi	r2,r18,16
 8008978:	1000921e 	bne	r2,zero,8008bc4 <___vfprintf_internal_r+0x1b74>
 800897c:	9480100c 	andi	r18,r18,64
 8008980:	90013926 	beq	r18,zero,8008e68 <___vfprintf_internal_r+0x1e18>
 8008984:	d9402e17 	ldw	r5,184(sp)
 8008988:	d8c02f17 	ldw	r3,188(sp)
 800898c:	28800017 	ldw	r2,0(r5)
 8008990:	29400104 	addi	r5,r5,4
 8008994:	d9402e15 	stw	r5,184(sp)
 8008998:	10c0000d 	sth	r3,0(r2)
 800899c:	0039e406 	br	8007130 <__alt_data_end+0xfc007130>
 80089a0:	9080100c 	andi	r2,r18,64
 80089a4:	10008026 	beq	r2,zero,8008ba8 <___vfprintf_internal_r+0x1b58>
 80089a8:	d8802e17 	ldw	r2,184(sp)
 80089ac:	14c0000f 	ldh	r19,0(r2)
 80089b0:	10800104 	addi	r2,r2,4
 80089b4:	d8802e15 	stw	r2,184(sp)
 80089b8:	982dd7fa 	srai	r22,r19,31
 80089bc:	b005883a 	mov	r2,r22
 80089c0:	003af706 	br	80075a0 <__alt_data_end+0xfc0075a0>
 80089c4:	9080100c 	andi	r2,r18,64
 80089c8:	d8002785 	stb	zero,158(sp)
 80089cc:	10008a1e 	bne	r2,zero,8008bf8 <___vfprintf_internal_r+0x1ba8>
 80089d0:	d9002e17 	ldw	r4,184(sp)
 80089d4:	d9402a17 	ldw	r5,168(sp)
 80089d8:	002d883a 	mov	r22,zero
 80089dc:	20800104 	addi	r2,r4,4
 80089e0:	24c00017 	ldw	r19,0(r4)
 80089e4:	283e4b0e 	bge	r5,zero,8008314 <__alt_data_end+0xfc008314>
 80089e8:	9d86b03a 	or	r3,r19,r22
 80089ec:	d8802e15 	stw	r2,184(sp)
 80089f0:	183e4c1e 	bne	r3,zero,8008324 <__alt_data_end+0xfc008324>
 80089f4:	0039883a 	mov	fp,zero
 80089f8:	0005883a 	mov	r2,zero
 80089fc:	003d4006 	br	8007f00 <__alt_data_end+0xfc007f00>
 8008a00:	01420074 	movhi	r5,2049
 8008a04:	295ff884 	addi	r5,r5,32738
 8008a08:	d9402c15 	stw	r5,176(sp)
 8008a0c:	d9402c17 	ldw	r5,176(sp)
 8008a10:	1c47883a 	add	r3,r3,r17
 8008a14:	10800044 	addi	r2,r2,1
 8008a18:	41400015 	stw	r5,0(r8)
 8008a1c:	44400115 	stw	r17,4(r8)
 8008a20:	d8c02015 	stw	r3,128(sp)
 8008a24:	d8801f15 	stw	r2,124(sp)
 8008a28:	010001c4 	movi	r4,7
 8008a2c:	20bec816 	blt	r4,r2,8008550 <__alt_data_end+0xfc008550>
 8008a30:	42000204 	addi	r8,r8,8
 8008a34:	003ecd06 	br	800856c <__alt_data_end+0xfc00856c>
 8008a38:	d9002a17 	ldw	r4,168(sp)
 8008a3c:	d8002785 	stb	zero,158(sp)
 8008a40:	203d2d16 	blt	r4,zero,8007ef8 <__alt_data_end+0xfc007ef8>
 8008a44:	00bfdfc4 	movi	r2,-129
 8008a48:	90a4703a 	and	r18,r18,r2
 8008a4c:	003a6106 	br	80073d4 <__alt_data_end+0xfc0073d4>
 8008a50:	01020074 	movhi	r4,2049
 8008a54:	211ff884 	addi	r4,r4,32738
 8008a58:	d9002c15 	stw	r4,176(sp)
 8008a5c:	003bea06 	br	8007a08 <__alt_data_end+0xfc007a08>
 8008a60:	d9002d17 	ldw	r4,180(sp)
 8008a64:	d9801e04 	addi	r6,sp,120
 8008a68:	b80b883a 	mov	r5,r23
 8008a6c:	800fda00 	call	800fda0 <__sprint_r>
 8008a70:	103a7b1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008a74:	d8c02017 	ldw	r3,128(sp)
 8008a78:	da000404 	addi	r8,sp,16
 8008a7c:	003d4106 	br	8007f84 <__alt_data_end+0xfc007f84>
 8008a80:	d8801f17 	ldw	r2,124(sp)
 8008a84:	01420074 	movhi	r5,2049
 8008a88:	01000044 	movi	r4,1
 8008a8c:	18c00044 	addi	r3,r3,1
 8008a90:	10800044 	addi	r2,r2,1
 8008a94:	295ff004 	addi	r5,r5,32704
 8008a98:	41000115 	stw	r4,4(r8)
 8008a9c:	41400015 	stw	r5,0(r8)
 8008aa0:	d8c02015 	stw	r3,128(sp)
 8008aa4:	d8801f15 	stw	r2,124(sp)
 8008aa8:	010001c4 	movi	r4,7
 8008aac:	20805c16 	blt	r4,r2,8008c20 <___vfprintf_internal_r+0x1bd0>
 8008ab0:	42000204 	addi	r8,r8,8
 8008ab4:	8800041e 	bne	r17,zero,8008ac8 <___vfprintf_internal_r+0x1a78>
 8008ab8:	d8803317 	ldw	r2,204(sp)
 8008abc:	1000021e 	bne	r2,zero,8008ac8 <___vfprintf_internal_r+0x1a78>
 8008ac0:	9080004c 	andi	r2,r18,1
 8008ac4:	103be726 	beq	r2,zero,8007a64 <__alt_data_end+0xfc007a64>
 8008ac8:	d9003717 	ldw	r4,220(sp)
 8008acc:	d8801f17 	ldw	r2,124(sp)
 8008ad0:	d9403417 	ldw	r5,208(sp)
 8008ad4:	20c7883a 	add	r3,r4,r3
 8008ad8:	10800044 	addi	r2,r2,1
 8008adc:	41000115 	stw	r4,4(r8)
 8008ae0:	41400015 	stw	r5,0(r8)
 8008ae4:	d8c02015 	stw	r3,128(sp)
 8008ae8:	d8801f15 	stw	r2,124(sp)
 8008aec:	010001c4 	movi	r4,7
 8008af0:	20812116 	blt	r4,r2,8008f78 <___vfprintf_internal_r+0x1f28>
 8008af4:	42000204 	addi	r8,r8,8
 8008af8:	0463c83a 	sub	r17,zero,r17
 8008afc:	0440730e 	bge	zero,r17,8008ccc <___vfprintf_internal_r+0x1c7c>
 8008b00:	05800404 	movi	r22,16
 8008b04:	b440860e 	bge	r22,r17,8008d20 <___vfprintf_internal_r+0x1cd0>
 8008b08:	01420074 	movhi	r5,2049
 8008b0c:	295ff884 	addi	r5,r5,32738
 8008b10:	d9402c15 	stw	r5,176(sp)
 8008b14:	070001c4 	movi	fp,7
 8008b18:	dcc02d17 	ldw	r19,180(sp)
 8008b1c:	00000306 	br	8008b2c <___vfprintf_internal_r+0x1adc>
 8008b20:	42000204 	addi	r8,r8,8
 8008b24:	8c7ffc04 	addi	r17,r17,-16
 8008b28:	b440800e 	bge	r22,r17,8008d2c <___vfprintf_internal_r+0x1cdc>
 8008b2c:	18c00404 	addi	r3,r3,16
 8008b30:	10800044 	addi	r2,r2,1
 8008b34:	45000015 	stw	r20,0(r8)
 8008b38:	45800115 	stw	r22,4(r8)
 8008b3c:	d8c02015 	stw	r3,128(sp)
 8008b40:	d8801f15 	stw	r2,124(sp)
 8008b44:	e0bff60e 	bge	fp,r2,8008b20 <__alt_data_end+0xfc008b20>
 8008b48:	d9801e04 	addi	r6,sp,120
 8008b4c:	b80b883a 	mov	r5,r23
 8008b50:	9809883a 	mov	r4,r19
 8008b54:	800fda00 	call	800fda0 <__sprint_r>
 8008b58:	103a411e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008b5c:	d8c02017 	ldw	r3,128(sp)
 8008b60:	d8801f17 	ldw	r2,124(sp)
 8008b64:	da000404 	addi	r8,sp,16
 8008b68:	003fee06 	br	8008b24 <__alt_data_end+0xfc008b24>
 8008b6c:	00bfffc4 	movi	r2,-1
 8008b70:	003a3f06 	br	8007470 <__alt_data_end+0xfc007470>
 8008b74:	008011c4 	movi	r2,71
 8008b78:	1440b816 	blt	r2,r17,8008e5c <___vfprintf_internal_r+0x1e0c>
 8008b7c:	04020074 	movhi	r16,2049
 8008b80:	841fe204 	addi	r16,r16,32648
 8008b84:	00c000c4 	movi	r3,3
 8008b88:	00bfdfc4 	movi	r2,-129
 8008b8c:	d8c02915 	stw	r3,164(sp)
 8008b90:	90a4703a 	and	r18,r18,r2
 8008b94:	df002783 	ldbu	fp,158(sp)
 8008b98:	d8c02b15 	stw	r3,172(sp)
 8008b9c:	d8002a15 	stw	zero,168(sp)
 8008ba0:	d8003215 	stw	zero,200(sp)
 8008ba4:	003b0706 	br	80077c4 <__alt_data_end+0xfc0077c4>
 8008ba8:	d8c02e17 	ldw	r3,184(sp)
 8008bac:	1cc00017 	ldw	r19,0(r3)
 8008bb0:	18c00104 	addi	r3,r3,4
 8008bb4:	d8c02e15 	stw	r3,184(sp)
 8008bb8:	982dd7fa 	srai	r22,r19,31
 8008bbc:	b005883a 	mov	r2,r22
 8008bc0:	003a7706 	br	80075a0 <__alt_data_end+0xfc0075a0>
 8008bc4:	d8c02e17 	ldw	r3,184(sp)
 8008bc8:	d9002f17 	ldw	r4,188(sp)
 8008bcc:	18800017 	ldw	r2,0(r3)
 8008bd0:	18c00104 	addi	r3,r3,4
 8008bd4:	d8c02e15 	stw	r3,184(sp)
 8008bd8:	11000015 	stw	r4,0(r2)
 8008bdc:	00395406 	br	8007130 <__alt_data_end+0xfc007130>
 8008be0:	d9002e17 	ldw	r4,184(sp)
 8008be4:	002d883a 	mov	r22,zero
 8008be8:	24c00017 	ldw	r19,0(r4)
 8008bec:	21000104 	addi	r4,r4,4
 8008bf0:	d9002e15 	stw	r4,184(sp)
 8008bf4:	003c0706 	br	8007c14 <__alt_data_end+0xfc007c14>
 8008bf8:	d9402e17 	ldw	r5,184(sp)
 8008bfc:	d8c02a17 	ldw	r3,168(sp)
 8008c00:	002d883a 	mov	r22,zero
 8008c04:	28800104 	addi	r2,r5,4
 8008c08:	2cc0000b 	ldhu	r19,0(r5)
 8008c0c:	183dc10e 	bge	r3,zero,8008314 <__alt_data_end+0xfc008314>
 8008c10:	003f7506 	br	80089e8 <__alt_data_end+0xfc0089e8>
 8008c14:	04020074 	movhi	r16,2049
 8008c18:	841fe004 	addi	r16,r16,32640
 8008c1c:	003aa706 	br	80076bc <__alt_data_end+0xfc0076bc>
 8008c20:	d9002d17 	ldw	r4,180(sp)
 8008c24:	d9801e04 	addi	r6,sp,120
 8008c28:	b80b883a 	mov	r5,r23
 8008c2c:	800fda00 	call	800fda0 <__sprint_r>
 8008c30:	103a0b1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008c34:	dc402617 	ldw	r17,152(sp)
 8008c38:	d8c02017 	ldw	r3,128(sp)
 8008c3c:	da000404 	addi	r8,sp,16
 8008c40:	003f9c06 	br	8008ab4 <__alt_data_end+0xfc008ab4>
 8008c44:	ac400043 	ldbu	r17,1(r21)
 8008c48:	84000814 	ori	r16,r16,32
 8008c4c:	ad400044 	addi	r21,r21,1
 8008c50:	8c403fcc 	andi	r17,r17,255
 8008c54:	8c40201c 	xori	r17,r17,128
 8008c58:	8c7fe004 	addi	r17,r17,-128
 8008c5c:	00395e06 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8008c60:	d8c02e15 	stw	r3,184(sp)
 8008c64:	0039883a 	mov	fp,zero
 8008c68:	003e3506 	br	8008540 <__alt_data_end+0xfc008540>
 8008c6c:	d9002d17 	ldw	r4,180(sp)
 8008c70:	d9801e04 	addi	r6,sp,120
 8008c74:	b80b883a 	mov	r5,r23
 8008c78:	800fda00 	call	800fda0 <__sprint_r>
 8008c7c:	1039f81e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008c80:	d8c02017 	ldw	r3,128(sp)
 8008c84:	da000404 	addi	r8,sp,16
 8008c88:	003cd006 	br	8007fcc <__alt_data_end+0xfc007fcc>
 8008c8c:	8009883a 	mov	r4,r16
 8008c90:	df003d15 	stw	fp,244(sp)
 8008c94:	8004cfc0 	call	8004cfc <strlen>
 8008c98:	d8802b15 	stw	r2,172(sp)
 8008c9c:	da003d17 	ldw	r8,244(sp)
 8008ca0:	103c200e 	bge	r2,zero,8007d24 <__alt_data_end+0xfc007d24>
 8008ca4:	0005883a 	mov	r2,zero
 8008ca8:	003c1e06 	br	8007d24 <__alt_data_end+0xfc007d24>
 8008cac:	d9002d17 	ldw	r4,180(sp)
 8008cb0:	d9801e04 	addi	r6,sp,120
 8008cb4:	b80b883a 	mov	r5,r23
 8008cb8:	800fda00 	call	800fda0 <__sprint_r>
 8008cbc:	1039e81e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008cc0:	d8c02017 	ldw	r3,128(sp)
 8008cc4:	d8801f17 	ldw	r2,124(sp)
 8008cc8:	da000404 	addi	r8,sp,16
 8008ccc:	d9403317 	ldw	r5,204(sp)
 8008cd0:	10800044 	addi	r2,r2,1
 8008cd4:	44000015 	stw	r16,0(r8)
 8008cd8:	28c7883a 	add	r3,r5,r3
 8008cdc:	003b5b06 	br	8007a4c <__alt_data_end+0xfc007a4c>
 8008ce0:	01020074 	movhi	r4,2049
 8008ce4:	211ffc84 	addi	r4,r4,32754
 8008ce8:	d9003515 	stw	r4,212(sp)
 8008cec:	003af206 	br	80078b8 <__alt_data_end+0xfc0078b8>
 8008cf0:	013fffc4 	movi	r4,-1
 8008cf4:	003a0806 	br	8007518 <__alt_data_end+0xfc007518>
 8008cf8:	0023883a 	mov	r17,zero
 8008cfc:	003d9d06 	br	8008374 <__alt_data_end+0xfc008374>
 8008d00:	d9002d17 	ldw	r4,180(sp)
 8008d04:	d9801e04 	addi	r6,sp,120
 8008d08:	b80b883a 	mov	r5,r23
 8008d0c:	800fda00 	call	800fda0 <__sprint_r>
 8008d10:	1039d31e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008d14:	d8c02017 	ldw	r3,128(sp)
 8008d18:	da000404 	addi	r8,sp,16
 8008d1c:	003d9406 	br	8008370 <__alt_data_end+0xfc008370>
 8008d20:	01020074 	movhi	r4,2049
 8008d24:	211ff884 	addi	r4,r4,32738
 8008d28:	d9002c15 	stw	r4,176(sp)
 8008d2c:	d9002c17 	ldw	r4,176(sp)
 8008d30:	1c47883a 	add	r3,r3,r17
 8008d34:	10800044 	addi	r2,r2,1
 8008d38:	41000015 	stw	r4,0(r8)
 8008d3c:	44400115 	stw	r17,4(r8)
 8008d40:	d8c02015 	stw	r3,128(sp)
 8008d44:	d8801f15 	stw	r2,124(sp)
 8008d48:	010001c4 	movi	r4,7
 8008d4c:	20bfd716 	blt	r4,r2,8008cac <__alt_data_end+0xfc008cac>
 8008d50:	42000204 	addi	r8,r8,8
 8008d54:	003fdd06 	br	8008ccc <__alt_data_end+0xfc008ccc>
 8008d58:	d9002d17 	ldw	r4,180(sp)
 8008d5c:	d9801e04 	addi	r6,sp,120
 8008d60:	b80b883a 	mov	r5,r23
 8008d64:	800fda00 	call	800fda0 <__sprint_r>
 8008d68:	1039bd1e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008d6c:	d8802617 	ldw	r2,152(sp)
 8008d70:	d8c02017 	ldw	r3,128(sp)
 8008d74:	da000404 	addi	r8,sp,16
 8008d78:	003e1006 	br	80085bc <__alt_data_end+0xfc0085bc>
 8008d7c:	00800044 	movi	r2,1
 8008d80:	10803fcc 	andi	r2,r2,255
 8008d84:	00c00044 	movi	r3,1
 8008d88:	10fa0d26 	beq	r2,r3,80075c0 <__alt_data_end+0xfc0075c0>
 8008d8c:	00c00084 	movi	r3,2
 8008d90:	10fbaf26 	beq	r2,r3,8007c50 <__alt_data_end+0xfc007c50>
 8008d94:	003a6d06 	br	800774c <__alt_data_end+0xfc00774c>
 8008d98:	01020074 	movhi	r4,2049
 8008d9c:	211ffc84 	addi	r4,r4,32754
 8008da0:	d9003515 	stw	r4,212(sp)
 8008da4:	003b5406 	br	8007af8 <__alt_data_end+0xfc007af8>
 8008da8:	d8802a17 	ldw	r2,168(sp)
 8008dac:	00c00184 	movi	r3,6
 8008db0:	1880012e 	bgeu	r3,r2,8008db8 <___vfprintf_internal_r+0x1d68>
 8008db4:	1805883a 	mov	r2,r3
 8008db8:	d8802b15 	stw	r2,172(sp)
 8008dbc:	1000ef16 	blt	r2,zero,800917c <___vfprintf_internal_r+0x212c>
 8008dc0:	04020074 	movhi	r16,2049
 8008dc4:	d8802915 	stw	r2,164(sp)
 8008dc8:	dcc02e15 	stw	r19,184(sp)
 8008dcc:	d8002a15 	stw	zero,168(sp)
 8008dd0:	d8003215 	stw	zero,200(sp)
 8008dd4:	841fee04 	addi	r16,r16,32696
 8008dd8:	0039883a 	mov	fp,zero
 8008ddc:	003a8006 	br	80077e0 <__alt_data_end+0xfc0077e0>
 8008de0:	0021883a 	mov	r16,zero
 8008de4:	003e0706 	br	8008604 <__alt_data_end+0xfc008604>
 8008de8:	d9002d17 	ldw	r4,180(sp)
 8008dec:	d9801e04 	addi	r6,sp,120
 8008df0:	b80b883a 	mov	r5,r23
 8008df4:	800fda00 	call	800fda0 <__sprint_r>
 8008df8:	1039991e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008dfc:	d8802617 	ldw	r2,152(sp)
 8008e00:	d9403317 	ldw	r5,204(sp)
 8008e04:	d8c02017 	ldw	r3,128(sp)
 8008e08:	da000404 	addi	r8,sp,16
 8008e0c:	2885c83a 	sub	r2,r5,r2
 8008e10:	003dfb06 	br	8008600 <__alt_data_end+0xfc008600>
 8008e14:	9080004c 	andi	r2,r18,1
 8008e18:	103e8f1e 	bne	r2,zero,8008858 <__alt_data_end+0xfc008858>
 8008e1c:	d8802117 	ldw	r2,132(sp)
 8008e20:	003e9e06 	br	800889c <__alt_data_end+0xfc00889c>
 8008e24:	1025883a 	mov	r18,r2
 8008e28:	0039883a 	mov	fp,zero
 8008e2c:	00800084 	movi	r2,2
 8008e30:	003fd306 	br	8008d80 <__alt_data_end+0xfc008d80>
 8008e34:	07000b44 	movi	fp,45
 8008e38:	df002785 	stb	fp,158(sp)
 8008e3c:	003a1b06 	br	80076ac <__alt_data_end+0xfc0076ac>
 8008e40:	00c00b44 	movi	r3,45
 8008e44:	d8c02785 	stb	r3,158(sp)
 8008e48:	d8802915 	stw	r2,164(sp)
 8008e4c:	dc802c17 	ldw	r18,176(sp)
 8008e50:	d8002a15 	stw	zero,168(sp)
 8008e54:	07000b44 	movi	fp,45
 8008e58:	003a5e06 	br	80077d4 <__alt_data_end+0xfc0077d4>
 8008e5c:	04020074 	movhi	r16,2049
 8008e60:	841fe304 	addi	r16,r16,32652
 8008e64:	003f4706 	br	8008b84 <__alt_data_end+0xfc008b84>
 8008e68:	d9002e17 	ldw	r4,184(sp)
 8008e6c:	d9402f17 	ldw	r5,188(sp)
 8008e70:	20800017 	ldw	r2,0(r4)
 8008e74:	21000104 	addi	r4,r4,4
 8008e78:	d9002e15 	stw	r4,184(sp)
 8008e7c:	11400015 	stw	r5,0(r2)
 8008e80:	0038ab06 	br	8007130 <__alt_data_end+0xfc007130>
 8008e84:	dd802617 	ldw	r22,152(sp)
 8008e88:	00bfff44 	movi	r2,-3
 8008e8c:	b0801c16 	blt	r22,r2,8008f00 <___vfprintf_internal_r+0x1eb0>
 8008e90:	d9402a17 	ldw	r5,168(sp)
 8008e94:	2d801a16 	blt	r5,r22,8008f00 <___vfprintf_internal_r+0x1eb0>
 8008e98:	dd803215 	stw	r22,200(sp)
 8008e9c:	003e8906 	br	80088c4 <__alt_data_end+0xfc0088c4>
 8008ea0:	01020074 	movhi	r4,2049
 8008ea4:	211ff884 	addi	r4,r4,32738
 8008ea8:	d9002c15 	stw	r4,176(sp)
 8008eac:	003c9106 	br	80080f4 <__alt_data_end+0xfc0080f4>
 8008eb0:	e005883a 	mov	r2,fp
 8008eb4:	003e7906 	br	800889c <__alt_data_end+0xfc00889c>
 8008eb8:	d9002a17 	ldw	r4,168(sp)
 8008ebc:	df002783 	ldbu	fp,158(sp)
 8008ec0:	dcc02e15 	stw	r19,184(sp)
 8008ec4:	d9002915 	stw	r4,164(sp)
 8008ec8:	d9002b15 	stw	r4,172(sp)
 8008ecc:	d8002a15 	stw	zero,168(sp)
 8008ed0:	d8003215 	stw	zero,200(sp)
 8008ed4:	003a3b06 	br	80077c4 <__alt_data_end+0xfc0077c4>
 8008ed8:	9080004c 	andi	r2,r18,1
 8008edc:	0039883a 	mov	fp,zero
 8008ee0:	10000426 	beq	r2,zero,8008ef4 <___vfprintf_internal_r+0x1ea4>
 8008ee4:	00800c04 	movi	r2,48
 8008ee8:	dc001dc4 	addi	r16,sp,119
 8008eec:	d8801dc5 	stb	r2,119(sp)
 8008ef0:	003b6406 	br	8007c84 <__alt_data_end+0xfc007c84>
 8008ef4:	d8002b15 	stw	zero,172(sp)
 8008ef8:	dc001e04 	addi	r16,sp,120
 8008efc:	003a2b06 	br	80077ac <__alt_data_end+0xfc0077ac>
 8008f00:	8c7fff84 	addi	r17,r17,-2
 8008f04:	b5bfffc4 	addi	r22,r22,-1
 8008f08:	dd802615 	stw	r22,152(sp)
 8008f0c:	dc4022c5 	stb	r17,139(sp)
 8008f10:	b000bf16 	blt	r22,zero,8009210 <___vfprintf_internal_r+0x21c0>
 8008f14:	00800ac4 	movi	r2,43
 8008f18:	d8802305 	stb	r2,140(sp)
 8008f1c:	00800244 	movi	r2,9
 8008f20:	15807016 	blt	r2,r22,80090e4 <___vfprintf_internal_r+0x2094>
 8008f24:	00800c04 	movi	r2,48
 8008f28:	b5800c04 	addi	r22,r22,48
 8008f2c:	d8802345 	stb	r2,141(sp)
 8008f30:	dd802385 	stb	r22,142(sp)
 8008f34:	d88023c4 	addi	r2,sp,143
 8008f38:	df0022c4 	addi	fp,sp,139
 8008f3c:	d8c03317 	ldw	r3,204(sp)
 8008f40:	1739c83a 	sub	fp,r2,fp
 8008f44:	d9003317 	ldw	r4,204(sp)
 8008f48:	e0c7883a 	add	r3,fp,r3
 8008f4c:	df003a15 	stw	fp,232(sp)
 8008f50:	d8c02b15 	stw	r3,172(sp)
 8008f54:	00800044 	movi	r2,1
 8008f58:	1100b30e 	bge	r2,r4,8009228 <___vfprintf_internal_r+0x21d8>
 8008f5c:	d8c02b17 	ldw	r3,172(sp)
 8008f60:	18c00044 	addi	r3,r3,1
 8008f64:	d8c02b15 	stw	r3,172(sp)
 8008f68:	1805883a 	mov	r2,r3
 8008f6c:	1800ac16 	blt	r3,zero,8009220 <___vfprintf_internal_r+0x21d0>
 8008f70:	d8003215 	stw	zero,200(sp)
 8008f74:	003e5d06 	br	80088ec <__alt_data_end+0xfc0088ec>
 8008f78:	d9002d17 	ldw	r4,180(sp)
 8008f7c:	d9801e04 	addi	r6,sp,120
 8008f80:	b80b883a 	mov	r5,r23
 8008f84:	800fda00 	call	800fda0 <__sprint_r>
 8008f88:	1039351e 	bne	r2,zero,8007460 <__alt_data_end+0xfc007460>
 8008f8c:	dc402617 	ldw	r17,152(sp)
 8008f90:	d8c02017 	ldw	r3,128(sp)
 8008f94:	d8801f17 	ldw	r2,124(sp)
 8008f98:	da000404 	addi	r8,sp,16
 8008f9c:	003ed606 	br	8008af8 <__alt_data_end+0xfc008af8>
 8008fa0:	182b883a 	mov	r21,r3
 8008fa4:	d8002a15 	stw	zero,168(sp)
 8008fa8:	00388c06 	br	80071dc <__alt_data_end+0xfc0071dc>
 8008fac:	d8802a17 	ldw	r2,168(sp)
 8008fb0:	103e071e 	bne	r2,zero,80087d0 <__alt_data_end+0xfc0087d0>
 8008fb4:	dc002a15 	stw	r16,168(sp)
 8008fb8:	003e0506 	br	80087d0 <__alt_data_end+0xfc0087d0>
 8008fbc:	d9002a17 	ldw	r4,168(sp)
 8008fc0:	20c00044 	addi	r3,r4,1
 8008fc4:	003e0f06 	br	8008804 <__alt_data_end+0xfc008804>
 8008fc8:	01400184 	movi	r5,6
 8008fcc:	d9402a15 	stw	r5,168(sp)
 8008fd0:	003dff06 	br	80087d0 <__alt_data_end+0xfc0087d0>
 8008fd4:	d8802104 	addi	r2,sp,132
 8008fd8:	d8800315 	stw	r2,12(sp)
 8008fdc:	d8802504 	addi	r2,sp,148
 8008fe0:	d8800215 	stw	r2,8(sp)
 8008fe4:	d8802604 	addi	r2,sp,152
 8008fe8:	d8800115 	stw	r2,4(sp)
 8008fec:	d8802a17 	ldw	r2,168(sp)
 8008ff0:	d9403617 	ldw	r5,216(sp)
 8008ff4:	d9002d17 	ldw	r4,180(sp)
 8008ff8:	d8800015 	stw	r2,0(sp)
 8008ffc:	01c000c4 	movi	r7,3
 8009000:	980d883a 	mov	r6,r19
 8009004:	da003d15 	stw	r8,244(sp)
 8009008:	80097800 	call	8009780 <_dtoa_r>
 800900c:	d8c02a17 	ldw	r3,168(sp)
 8009010:	da003d17 	ldw	r8,244(sp)
 8009014:	1021883a 	mov	r16,r2
 8009018:	10f9883a 	add	fp,r2,r3
 800901c:	81000007 	ldb	r4,0(r16)
 8009020:	00800c04 	movi	r2,48
 8009024:	20805e26 	beq	r4,r2,80091a0 <___vfprintf_internal_r+0x2150>
 8009028:	d8c02617 	ldw	r3,152(sp)
 800902c:	e0f9883a 	add	fp,fp,r3
 8009030:	003e0a06 	br	800885c <__alt_data_end+0xfc00885c>
 8009034:	00c00b44 	movi	r3,45
 8009038:	24e0003c 	xorhi	r19,r4,32768
 800903c:	d8c02905 	stb	r3,164(sp)
 8009040:	003de906 	br	80087e8 <__alt_data_end+0xfc0087e8>
 8009044:	d8c03217 	ldw	r3,200(sp)
 8009048:	00c07a0e 	bge	zero,r3,8009234 <___vfprintf_internal_r+0x21e4>
 800904c:	00800044 	movi	r2,1
 8009050:	d9003317 	ldw	r4,204(sp)
 8009054:	1105883a 	add	r2,r2,r4
 8009058:	d8802b15 	stw	r2,172(sp)
 800905c:	10004e16 	blt	r2,zero,8009198 <___vfprintf_internal_r+0x2148>
 8009060:	044019c4 	movi	r17,103
 8009064:	003e2106 	br	80088ec <__alt_data_end+0xfc0088ec>
 8009068:	d9002a17 	ldw	r4,168(sp)
 800906c:	d8802104 	addi	r2,sp,132
 8009070:	d8800315 	stw	r2,12(sp)
 8009074:	d9000015 	stw	r4,0(sp)
 8009078:	d8802504 	addi	r2,sp,148
 800907c:	d9403617 	ldw	r5,216(sp)
 8009080:	d9002d17 	ldw	r4,180(sp)
 8009084:	d8800215 	stw	r2,8(sp)
 8009088:	d8802604 	addi	r2,sp,152
 800908c:	d8800115 	stw	r2,4(sp)
 8009090:	01c000c4 	movi	r7,3
 8009094:	980d883a 	mov	r6,r19
 8009098:	da003d15 	stw	r8,244(sp)
 800909c:	80097800 	call	8009780 <_dtoa_r>
 80090a0:	d8c02a17 	ldw	r3,168(sp)
 80090a4:	da003d17 	ldw	r8,244(sp)
 80090a8:	1021883a 	mov	r16,r2
 80090ac:	00801184 	movi	r2,70
 80090b0:	80f9883a 	add	fp,r16,r3
 80090b4:	88bfd926 	beq	r17,r2,800901c <__alt_data_end+0xfc00901c>
 80090b8:	003de806 	br	800885c <__alt_data_end+0xfc00885c>
 80090bc:	d9002a17 	ldw	r4,168(sp)
 80090c0:	00c04d0e 	bge	zero,r3,80091f8 <___vfprintf_internal_r+0x21a8>
 80090c4:	2000441e 	bne	r4,zero,80091d8 <___vfprintf_internal_r+0x2188>
 80090c8:	9480004c 	andi	r18,r18,1
 80090cc:	9000421e 	bne	r18,zero,80091d8 <___vfprintf_internal_r+0x2188>
 80090d0:	1805883a 	mov	r2,r3
 80090d4:	18006f16 	blt	r3,zero,8009294 <___vfprintf_internal_r+0x2244>
 80090d8:	d8c03217 	ldw	r3,200(sp)
 80090dc:	d8c02b15 	stw	r3,172(sp)
 80090e0:	003e0206 	br	80088ec <__alt_data_end+0xfc0088ec>
 80090e4:	df0022c4 	addi	fp,sp,139
 80090e8:	dc002a15 	stw	r16,168(sp)
 80090ec:	4027883a 	mov	r19,r8
 80090f0:	e021883a 	mov	r16,fp
 80090f4:	b009883a 	mov	r4,r22
 80090f8:	01400284 	movi	r5,10
 80090fc:	80049240 	call	8004924 <__modsi3>
 8009100:	10800c04 	addi	r2,r2,48
 8009104:	843fffc4 	addi	r16,r16,-1
 8009108:	b009883a 	mov	r4,r22
 800910c:	01400284 	movi	r5,10
 8009110:	80800005 	stb	r2,0(r16)
 8009114:	80048a00 	call	80048a0 <__divsi3>
 8009118:	102d883a 	mov	r22,r2
 800911c:	00800244 	movi	r2,9
 8009120:	15bff416 	blt	r2,r22,80090f4 <__alt_data_end+0xfc0090f4>
 8009124:	9811883a 	mov	r8,r19
 8009128:	b0800c04 	addi	r2,r22,48
 800912c:	8027883a 	mov	r19,r16
 8009130:	997fffc4 	addi	r5,r19,-1
 8009134:	98bfffc5 	stb	r2,-1(r19)
 8009138:	dc002a17 	ldw	r16,168(sp)
 800913c:	2f006d2e 	bgeu	r5,fp,80092f4 <___vfprintf_internal_r+0x22a4>
 8009140:	d9c02384 	addi	r7,sp,142
 8009144:	3ccfc83a 	sub	r7,r7,r19
 8009148:	d9002344 	addi	r4,sp,141
 800914c:	e1cf883a 	add	r7,fp,r7
 8009150:	00000106 	br	8009158 <___vfprintf_internal_r+0x2108>
 8009154:	28800003 	ldbu	r2,0(r5)
 8009158:	20800005 	stb	r2,0(r4)
 800915c:	21000044 	addi	r4,r4,1
 8009160:	29400044 	addi	r5,r5,1
 8009164:	393ffb1e 	bne	r7,r4,8009154 <__alt_data_end+0xfc009154>
 8009168:	d8802304 	addi	r2,sp,140
 800916c:	14c5c83a 	sub	r2,r2,r19
 8009170:	d8c02344 	addi	r3,sp,141
 8009174:	1885883a 	add	r2,r3,r2
 8009178:	003f7006 	br	8008f3c <__alt_data_end+0xfc008f3c>
 800917c:	0005883a 	mov	r2,zero
 8009180:	003f0f06 	br	8008dc0 <__alt_data_end+0xfc008dc0>
 8009184:	d8c03217 	ldw	r3,200(sp)
 8009188:	18c00044 	addi	r3,r3,1
 800918c:	d8c02b15 	stw	r3,172(sp)
 8009190:	1805883a 	mov	r2,r3
 8009194:	183fb20e 	bge	r3,zero,8009060 <__alt_data_end+0xfc009060>
 8009198:	0005883a 	mov	r2,zero
 800919c:	003fb006 	br	8009060 <__alt_data_end+0xfc009060>
 80091a0:	d9003617 	ldw	r4,216(sp)
 80091a4:	000d883a 	mov	r6,zero
 80091a8:	000f883a 	mov	r7,zero
 80091ac:	980b883a 	mov	r5,r19
 80091b0:	d8c03c15 	stw	r3,240(sp)
 80091b4:	da003d15 	stw	r8,244(sp)
 80091b8:	8013c300 	call	8013c30 <__eqdf2>
 80091bc:	d8c03c17 	ldw	r3,240(sp)
 80091c0:	da003d17 	ldw	r8,244(sp)
 80091c4:	103f9826 	beq	r2,zero,8009028 <__alt_data_end+0xfc009028>
 80091c8:	00800044 	movi	r2,1
 80091cc:	10c7c83a 	sub	r3,r2,r3
 80091d0:	d8c02615 	stw	r3,152(sp)
 80091d4:	003f9506 	br	800902c <__alt_data_end+0xfc00902c>
 80091d8:	d9002a17 	ldw	r4,168(sp)
 80091dc:	d8c03217 	ldw	r3,200(sp)
 80091e0:	20800044 	addi	r2,r4,1
 80091e4:	1885883a 	add	r2,r3,r2
 80091e8:	d8802b15 	stw	r2,172(sp)
 80091ec:	103dbf0e 	bge	r2,zero,80088ec <__alt_data_end+0xfc0088ec>
 80091f0:	0005883a 	mov	r2,zero
 80091f4:	003dbd06 	br	80088ec <__alt_data_end+0xfc0088ec>
 80091f8:	2000201e 	bne	r4,zero,800927c <___vfprintf_internal_r+0x222c>
 80091fc:	9480004c 	andi	r18,r18,1
 8009200:	90001e1e 	bne	r18,zero,800927c <___vfprintf_internal_r+0x222c>
 8009204:	00800044 	movi	r2,1
 8009208:	d8802b15 	stw	r2,172(sp)
 800920c:	003db706 	br	80088ec <__alt_data_end+0xfc0088ec>
 8009210:	00800b44 	movi	r2,45
 8009214:	05adc83a 	sub	r22,zero,r22
 8009218:	d8802305 	stb	r2,140(sp)
 800921c:	003f3f06 	br	8008f1c <__alt_data_end+0xfc008f1c>
 8009220:	0005883a 	mov	r2,zero
 8009224:	003f5206 	br	8008f70 <__alt_data_end+0xfc008f70>
 8009228:	90a4703a 	and	r18,r18,r2
 800922c:	903f4e26 	beq	r18,zero,8008f68 <__alt_data_end+0xfc008f68>
 8009230:	003f4a06 	br	8008f5c <__alt_data_end+0xfc008f5c>
 8009234:	00800084 	movi	r2,2
 8009238:	10c5c83a 	sub	r2,r2,r3
 800923c:	003f8406 	br	8009050 <__alt_data_end+0xfc009050>
 8009240:	d9402e17 	ldw	r5,184(sp)
 8009244:	d9002e17 	ldw	r4,184(sp)
 8009248:	ac400043 	ldbu	r17,1(r21)
 800924c:	29400017 	ldw	r5,0(r5)
 8009250:	20800104 	addi	r2,r4,4
 8009254:	d8802e15 	stw	r2,184(sp)
 8009258:	d9402a15 	stw	r5,168(sp)
 800925c:	182b883a 	mov	r21,r3
 8009260:	283e7b0e 	bge	r5,zero,8008c50 <__alt_data_end+0xfc008c50>
 8009264:	8c403fcc 	andi	r17,r17,255
 8009268:	017fffc4 	movi	r5,-1
 800926c:	8c40201c 	xori	r17,r17,128
 8009270:	d9402a15 	stw	r5,168(sp)
 8009274:	8c7fe004 	addi	r17,r17,-128
 8009278:	0037d706 	br	80071d8 <__alt_data_end+0xfc0071d8>
 800927c:	d8c02a17 	ldw	r3,168(sp)
 8009280:	18c00084 	addi	r3,r3,2
 8009284:	d8c02b15 	stw	r3,172(sp)
 8009288:	1805883a 	mov	r2,r3
 800928c:	183d970e 	bge	r3,zero,80088ec <__alt_data_end+0xfc0088ec>
 8009290:	003fd706 	br	80091f0 <__alt_data_end+0xfc0091f0>
 8009294:	0005883a 	mov	r2,zero
 8009298:	003f8f06 	br	80090d8 <__alt_data_end+0xfc0090d8>
 800929c:	9080004c 	andi	r2,r18,1
 80092a0:	103f821e 	bne	r2,zero,80090ac <__alt_data_end+0xfc0090ac>
 80092a4:	d8802117 	ldw	r2,132(sp)
 80092a8:	1405c83a 	sub	r2,r2,r16
 80092ac:	d8803315 	stw	r2,204(sp)
 80092b0:	b47ef426 	beq	r22,r17,8008e84 <__alt_data_end+0xfc008e84>
 80092b4:	dd802617 	ldw	r22,152(sp)
 80092b8:	003f1206 	br	8008f04 <__alt_data_end+0xfc008f04>
 80092bc:	d8c02b03 	ldbu	r3,172(sp)
 80092c0:	d8c02785 	stb	r3,158(sp)
 80092c4:	0038df06 	br	8007644 <__alt_data_end+0xfc007644>
 80092c8:	d8c02b03 	ldbu	r3,172(sp)
 80092cc:	d8c02785 	stb	r3,158(sp)
 80092d0:	0038aa06 	br	800757c <__alt_data_end+0xfc00757c>
 80092d4:	d8c02b03 	ldbu	r3,172(sp)
 80092d8:	d8c02785 	stb	r3,158(sp)
 80092dc:	003a4306 	br	8007bec <__alt_data_end+0xfc007bec>
 80092e0:	d8c02b03 	ldbu	r3,172(sp)
 80092e4:	d8c02785 	stb	r3,158(sp)
 80092e8:	003af506 	br	8007ec0 <__alt_data_end+0xfc007ec0>
 80092ec:	0005883a 	mov	r2,zero
 80092f0:	003d7b06 	br	80088e0 <__alt_data_end+0xfc0088e0>
 80092f4:	d8802344 	addi	r2,sp,141
 80092f8:	003f1006 	br	8008f3c <__alt_data_end+0xfc008f3c>
 80092fc:	d8c02b03 	ldbu	r3,172(sp)
 8009300:	d8c02785 	stb	r3,158(sp)
 8009304:	0038fd06 	br	80076fc <__alt_data_end+0xfc0076fc>
 8009308:	d8c02b03 	ldbu	r3,172(sp)
 800930c:	d8c02785 	stb	r3,158(sp)
 8009310:	003a9706 	br	8007d70 <__alt_data_end+0xfc007d70>
 8009314:	d8c02b03 	ldbu	r3,172(sp)
 8009318:	d8c02785 	stb	r3,158(sp)
 800931c:	003a1806 	br	8007b80 <__alt_data_end+0xfc007b80>
 8009320:	d8c02b03 	ldbu	r3,172(sp)
 8009324:	d8c02785 	stb	r3,158(sp)
 8009328:	003abe06 	br	8007e24 <__alt_data_end+0xfc007e24>

0800932c <__vfprintf_internal>:
 800932c:	008200b4 	movhi	r2,2050
 8009330:	10a80004 	addi	r2,r2,-24576
 8009334:	300f883a 	mov	r7,r6
 8009338:	280d883a 	mov	r6,r5
 800933c:	200b883a 	mov	r5,r4
 8009340:	11000017 	ldw	r4,0(r2)
 8009344:	80070501 	jmpi	8007050 <___vfprintf_internal_r>

08009348 <__sbprintf>:
 8009348:	2880030b 	ldhu	r2,12(r5)
 800934c:	2ac01917 	ldw	r11,100(r5)
 8009350:	2a80038b 	ldhu	r10,14(r5)
 8009354:	2a400717 	ldw	r9,28(r5)
 8009358:	2a000917 	ldw	r8,36(r5)
 800935c:	defee204 	addi	sp,sp,-1144
 8009360:	00c10004 	movi	r3,1024
 8009364:	dc011a15 	stw	r16,1128(sp)
 8009368:	10bfff4c 	andi	r2,r2,65533
 800936c:	2821883a 	mov	r16,r5
 8009370:	d8cb883a 	add	r5,sp,r3
 8009374:	dc811c15 	stw	r18,1136(sp)
 8009378:	dc411b15 	stw	r17,1132(sp)
 800937c:	dfc11d15 	stw	ra,1140(sp)
 8009380:	2025883a 	mov	r18,r4
 8009384:	d881030d 	sth	r2,1036(sp)
 8009388:	dac11915 	stw	r11,1124(sp)
 800938c:	da81038d 	sth	r10,1038(sp)
 8009390:	da410715 	stw	r9,1052(sp)
 8009394:	da010915 	stw	r8,1060(sp)
 8009398:	dec10015 	stw	sp,1024(sp)
 800939c:	dec10415 	stw	sp,1040(sp)
 80093a0:	d8c10215 	stw	r3,1032(sp)
 80093a4:	d8c10515 	stw	r3,1044(sp)
 80093a8:	d8010615 	stw	zero,1048(sp)
 80093ac:	80070500 	call	8007050 <___vfprintf_internal_r>
 80093b0:	1023883a 	mov	r17,r2
 80093b4:	10000416 	blt	r2,zero,80093c8 <__sbprintf+0x80>
 80093b8:	d9410004 	addi	r5,sp,1024
 80093bc:	9009883a 	mov	r4,r18
 80093c0:	800b0240 	call	800b024 <_fflush_r>
 80093c4:	10000d1e 	bne	r2,zero,80093fc <__sbprintf+0xb4>
 80093c8:	d881030b 	ldhu	r2,1036(sp)
 80093cc:	1080100c 	andi	r2,r2,64
 80093d0:	10000326 	beq	r2,zero,80093e0 <__sbprintf+0x98>
 80093d4:	8080030b 	ldhu	r2,12(r16)
 80093d8:	10801014 	ori	r2,r2,64
 80093dc:	8080030d 	sth	r2,12(r16)
 80093e0:	8805883a 	mov	r2,r17
 80093e4:	dfc11d17 	ldw	ra,1140(sp)
 80093e8:	dc811c17 	ldw	r18,1136(sp)
 80093ec:	dc411b17 	ldw	r17,1132(sp)
 80093f0:	dc011a17 	ldw	r16,1128(sp)
 80093f4:	dec11e04 	addi	sp,sp,1144
 80093f8:	f800283a 	ret
 80093fc:	047fffc4 	movi	r17,-1
 8009400:	003ff106 	br	80093c8 <__alt_data_end+0xfc0093c8>

08009404 <__swsetup_r>:
 8009404:	008200b4 	movhi	r2,2050
 8009408:	defffd04 	addi	sp,sp,-12
 800940c:	10a80004 	addi	r2,r2,-24576
 8009410:	dc400115 	stw	r17,4(sp)
 8009414:	2023883a 	mov	r17,r4
 8009418:	11000017 	ldw	r4,0(r2)
 800941c:	dc000015 	stw	r16,0(sp)
 8009420:	dfc00215 	stw	ra,8(sp)
 8009424:	2821883a 	mov	r16,r5
 8009428:	20000226 	beq	r4,zero,8009434 <__swsetup_r+0x30>
 800942c:	20800e17 	ldw	r2,56(r4)
 8009430:	10003126 	beq	r2,zero,80094f8 <__swsetup_r+0xf4>
 8009434:	8080030b 	ldhu	r2,12(r16)
 8009438:	10c0020c 	andi	r3,r2,8
 800943c:	1009883a 	mov	r4,r2
 8009440:	18000f26 	beq	r3,zero,8009480 <__swsetup_r+0x7c>
 8009444:	80c00417 	ldw	r3,16(r16)
 8009448:	18001526 	beq	r3,zero,80094a0 <__swsetup_r+0x9c>
 800944c:	1100004c 	andi	r4,r2,1
 8009450:	20001c1e 	bne	r4,zero,80094c4 <__swsetup_r+0xc0>
 8009454:	1080008c 	andi	r2,r2,2
 8009458:	1000291e 	bne	r2,zero,8009500 <__swsetup_r+0xfc>
 800945c:	80800517 	ldw	r2,20(r16)
 8009460:	80800215 	stw	r2,8(r16)
 8009464:	18001c26 	beq	r3,zero,80094d8 <__swsetup_r+0xd4>
 8009468:	0005883a 	mov	r2,zero
 800946c:	dfc00217 	ldw	ra,8(sp)
 8009470:	dc400117 	ldw	r17,4(sp)
 8009474:	dc000017 	ldw	r16,0(sp)
 8009478:	dec00304 	addi	sp,sp,12
 800947c:	f800283a 	ret
 8009480:	2080040c 	andi	r2,r4,16
 8009484:	10002e26 	beq	r2,zero,8009540 <__swsetup_r+0x13c>
 8009488:	2080010c 	andi	r2,r4,4
 800948c:	10001e1e 	bne	r2,zero,8009508 <__swsetup_r+0x104>
 8009490:	80c00417 	ldw	r3,16(r16)
 8009494:	20800214 	ori	r2,r4,8
 8009498:	8080030d 	sth	r2,12(r16)
 800949c:	183feb1e 	bne	r3,zero,800944c <__alt_data_end+0xfc00944c>
 80094a0:	1100a00c 	andi	r4,r2,640
 80094a4:	01408004 	movi	r5,512
 80094a8:	217fe826 	beq	r4,r5,800944c <__alt_data_end+0xfc00944c>
 80094ac:	800b883a 	mov	r5,r16
 80094b0:	8809883a 	mov	r4,r17
 80094b4:	800bfc00 	call	800bfc0 <__smakebuf_r>
 80094b8:	8080030b 	ldhu	r2,12(r16)
 80094bc:	80c00417 	ldw	r3,16(r16)
 80094c0:	003fe206 	br	800944c <__alt_data_end+0xfc00944c>
 80094c4:	80800517 	ldw	r2,20(r16)
 80094c8:	80000215 	stw	zero,8(r16)
 80094cc:	0085c83a 	sub	r2,zero,r2
 80094d0:	80800615 	stw	r2,24(r16)
 80094d4:	183fe41e 	bne	r3,zero,8009468 <__alt_data_end+0xfc009468>
 80094d8:	80c0030b 	ldhu	r3,12(r16)
 80094dc:	0005883a 	mov	r2,zero
 80094e0:	1900200c 	andi	r4,r3,128
 80094e4:	203fe126 	beq	r4,zero,800946c <__alt_data_end+0xfc00946c>
 80094e8:	18c01014 	ori	r3,r3,64
 80094ec:	80c0030d 	sth	r3,12(r16)
 80094f0:	00bfffc4 	movi	r2,-1
 80094f4:	003fdd06 	br	800946c <__alt_data_end+0xfc00946c>
 80094f8:	800b4100 	call	800b410 <__sinit>
 80094fc:	003fcd06 	br	8009434 <__alt_data_end+0xfc009434>
 8009500:	0005883a 	mov	r2,zero
 8009504:	003fd606 	br	8009460 <__alt_data_end+0xfc009460>
 8009508:	81400c17 	ldw	r5,48(r16)
 800950c:	28000626 	beq	r5,zero,8009528 <__swsetup_r+0x124>
 8009510:	80801004 	addi	r2,r16,64
 8009514:	28800326 	beq	r5,r2,8009524 <__swsetup_r+0x120>
 8009518:	8809883a 	mov	r4,r17
 800951c:	800b5840 	call	800b584 <_free_r>
 8009520:	8100030b 	ldhu	r4,12(r16)
 8009524:	80000c15 	stw	zero,48(r16)
 8009528:	80c00417 	ldw	r3,16(r16)
 800952c:	00bff6c4 	movi	r2,-37
 8009530:	1108703a 	and	r4,r2,r4
 8009534:	80000115 	stw	zero,4(r16)
 8009538:	80c00015 	stw	r3,0(r16)
 800953c:	003fd506 	br	8009494 <__alt_data_end+0xfc009494>
 8009540:	00800244 	movi	r2,9
 8009544:	88800015 	stw	r2,0(r17)
 8009548:	20801014 	ori	r2,r4,64
 800954c:	8080030d 	sth	r2,12(r16)
 8009550:	00bfffc4 	movi	r2,-1
 8009554:	003fc506 	br	800946c <__alt_data_end+0xfc00946c>

08009558 <quorem>:
 8009558:	defff204 	addi	sp,sp,-56
 800955c:	ddc00b15 	stw	r23,44(sp)
 8009560:	20800417 	ldw	r2,16(r4)
 8009564:	2dc00417 	ldw	r23,16(r5)
 8009568:	dfc00d15 	stw	ra,52(sp)
 800956c:	df000c15 	stw	fp,48(sp)
 8009570:	dd800a15 	stw	r22,40(sp)
 8009574:	dd400915 	stw	r21,36(sp)
 8009578:	dd000815 	stw	r20,32(sp)
 800957c:	dcc00715 	stw	r19,28(sp)
 8009580:	dc800615 	stw	r18,24(sp)
 8009584:	dc400515 	stw	r17,20(sp)
 8009588:	dc000415 	stw	r16,16(sp)
 800958c:	15c07a16 	blt	r2,r23,8009778 <quorem+0x220>
 8009590:	bdffffc4 	addi	r23,r23,-1
 8009594:	bde9883a 	add	r20,r23,r23
 8009598:	28c00504 	addi	r3,r5,20
 800959c:	a529883a 	add	r20,r20,r20
 80095a0:	1d39883a 	add	fp,r3,r20
 80095a4:	24c00504 	addi	r19,r4,20
 80095a8:	d9400215 	stw	r5,8(sp)
 80095ac:	9d29883a 	add	r20,r19,r20
 80095b0:	e1400017 	ldw	r5,0(fp)
 80095b4:	d9000015 	stw	r4,0(sp)
 80095b8:	a1000017 	ldw	r4,0(r20)
 80095bc:	29400044 	addi	r5,r5,1
 80095c0:	d8c00115 	stw	r3,4(sp)
 80095c4:	dd000315 	stw	r20,12(sp)
 80095c8:	80049980 	call	8004998 <__udivsi3>
 80095cc:	1025883a 	mov	r18,r2
 80095d0:	10003026 	beq	r2,zero,8009694 <quorem+0x13c>
 80095d4:	dc400117 	ldw	r17,4(sp)
 80095d8:	9829883a 	mov	r20,r19
 80095dc:	002d883a 	mov	r22,zero
 80095e0:	0021883a 	mov	r16,zero
 80095e4:	8d400017 	ldw	r21,0(r17)
 80095e8:	900b883a 	mov	r5,r18
 80095ec:	8c400104 	addi	r17,r17,4
 80095f0:	a93fffcc 	andi	r4,r21,65535
 80095f4:	8004a540 	call	8004a54 <__mulsi3>
 80095f8:	a808d43a 	srli	r4,r21,16
 80095fc:	900b883a 	mov	r5,r18
 8009600:	15ad883a 	add	r22,r2,r22
 8009604:	8004a540 	call	8004a54 <__mulsi3>
 8009608:	a1000017 	ldw	r4,0(r20)
 800960c:	b00cd43a 	srli	r6,r22,16
 8009610:	b0ffffcc 	andi	r3,r22,65535
 8009614:	217fffcc 	andi	r5,r4,65535
 8009618:	2c21883a 	add	r16,r5,r16
 800961c:	80c7c83a 	sub	r3,r16,r3
 8009620:	2008d43a 	srli	r4,r4,16
 8009624:	1185883a 	add	r2,r2,r6
 8009628:	1821d43a 	srai	r16,r3,16
 800962c:	117fffcc 	andi	r5,r2,65535
 8009630:	2149c83a 	sub	r4,r4,r5
 8009634:	2421883a 	add	r16,r4,r16
 8009638:	8008943a 	slli	r4,r16,16
 800963c:	18ffffcc 	andi	r3,r3,65535
 8009640:	102cd43a 	srli	r22,r2,16
 8009644:	20c8b03a 	or	r4,r4,r3
 8009648:	a1000015 	stw	r4,0(r20)
 800964c:	8021d43a 	srai	r16,r16,16
 8009650:	a5000104 	addi	r20,r20,4
 8009654:	e47fe32e 	bgeu	fp,r17,80095e4 <__alt_data_end+0xfc0095e4>
 8009658:	d8c00317 	ldw	r3,12(sp)
 800965c:	18800017 	ldw	r2,0(r3)
 8009660:	10000c1e 	bne	r2,zero,8009694 <quorem+0x13c>
 8009664:	18bfff04 	addi	r2,r3,-4
 8009668:	9880082e 	bgeu	r19,r2,800968c <quorem+0x134>
 800966c:	18ffff17 	ldw	r3,-4(r3)
 8009670:	18000326 	beq	r3,zero,8009680 <quorem+0x128>
 8009674:	00000506 	br	800968c <quorem+0x134>
 8009678:	10c00017 	ldw	r3,0(r2)
 800967c:	1800031e 	bne	r3,zero,800968c <quorem+0x134>
 8009680:	10bfff04 	addi	r2,r2,-4
 8009684:	bdffffc4 	addi	r23,r23,-1
 8009688:	98bffb36 	bltu	r19,r2,8009678 <__alt_data_end+0xfc009678>
 800968c:	d8c00017 	ldw	r3,0(sp)
 8009690:	1dc00415 	stw	r23,16(r3)
 8009694:	d9400217 	ldw	r5,8(sp)
 8009698:	d9000017 	ldw	r4,0(sp)
 800969c:	800d7bc0 	call	800d7bc <__mcmp>
 80096a0:	10002816 	blt	r2,zero,8009744 <quorem+0x1ec>
 80096a4:	dc400117 	ldw	r17,4(sp)
 80096a8:	94800044 	addi	r18,r18,1
 80096ac:	980d883a 	mov	r6,r19
 80096b0:	0007883a 	mov	r3,zero
 80096b4:	31000017 	ldw	r4,0(r6)
 80096b8:	89400017 	ldw	r5,0(r17)
 80096bc:	31800104 	addi	r6,r6,4
 80096c0:	20bfffcc 	andi	r2,r4,65535
 80096c4:	10c7883a 	add	r3,r2,r3
 80096c8:	28bfffcc 	andi	r2,r5,65535
 80096cc:	1885c83a 	sub	r2,r3,r2
 80096d0:	280ad43a 	srli	r5,r5,16
 80096d4:	2008d43a 	srli	r4,r4,16
 80096d8:	1007d43a 	srai	r3,r2,16
 80096dc:	10bfffcc 	andi	r2,r2,65535
 80096e0:	2149c83a 	sub	r4,r4,r5
 80096e4:	20c9883a 	add	r4,r4,r3
 80096e8:	200a943a 	slli	r5,r4,16
 80096ec:	8c400104 	addi	r17,r17,4
 80096f0:	2007d43a 	srai	r3,r4,16
 80096f4:	2884b03a 	or	r2,r5,r2
 80096f8:	30bfff15 	stw	r2,-4(r6)
 80096fc:	e47fed2e 	bgeu	fp,r17,80096b4 <__alt_data_end+0xfc0096b4>
 8009700:	bdc5883a 	add	r2,r23,r23
 8009704:	1085883a 	add	r2,r2,r2
 8009708:	9887883a 	add	r3,r19,r2
 800970c:	18800017 	ldw	r2,0(r3)
 8009710:	10000c1e 	bne	r2,zero,8009744 <quorem+0x1ec>
 8009714:	18bfff04 	addi	r2,r3,-4
 8009718:	9880082e 	bgeu	r19,r2,800973c <quorem+0x1e4>
 800971c:	18ffff17 	ldw	r3,-4(r3)
 8009720:	18000326 	beq	r3,zero,8009730 <quorem+0x1d8>
 8009724:	00000506 	br	800973c <quorem+0x1e4>
 8009728:	10c00017 	ldw	r3,0(r2)
 800972c:	1800031e 	bne	r3,zero,800973c <quorem+0x1e4>
 8009730:	10bfff04 	addi	r2,r2,-4
 8009734:	bdffffc4 	addi	r23,r23,-1
 8009738:	98bffb36 	bltu	r19,r2,8009728 <__alt_data_end+0xfc009728>
 800973c:	d8c00017 	ldw	r3,0(sp)
 8009740:	1dc00415 	stw	r23,16(r3)
 8009744:	9005883a 	mov	r2,r18
 8009748:	dfc00d17 	ldw	ra,52(sp)
 800974c:	df000c17 	ldw	fp,48(sp)
 8009750:	ddc00b17 	ldw	r23,44(sp)
 8009754:	dd800a17 	ldw	r22,40(sp)
 8009758:	dd400917 	ldw	r21,36(sp)
 800975c:	dd000817 	ldw	r20,32(sp)
 8009760:	dcc00717 	ldw	r19,28(sp)
 8009764:	dc800617 	ldw	r18,24(sp)
 8009768:	dc400517 	ldw	r17,20(sp)
 800976c:	dc000417 	ldw	r16,16(sp)
 8009770:	dec00e04 	addi	sp,sp,56
 8009774:	f800283a 	ret
 8009778:	0005883a 	mov	r2,zero
 800977c:	003ff206 	br	8009748 <__alt_data_end+0xfc009748>

08009780 <_dtoa_r>:
 8009780:	20801017 	ldw	r2,64(r4)
 8009784:	deffde04 	addi	sp,sp,-136
 8009788:	df002015 	stw	fp,128(sp)
 800978c:	dcc01b15 	stw	r19,108(sp)
 8009790:	dc801a15 	stw	r18,104(sp)
 8009794:	dc401915 	stw	r17,100(sp)
 8009798:	dc001815 	stw	r16,96(sp)
 800979c:	dfc02115 	stw	ra,132(sp)
 80097a0:	ddc01f15 	stw	r23,124(sp)
 80097a4:	dd801e15 	stw	r22,120(sp)
 80097a8:	dd401d15 	stw	r21,116(sp)
 80097ac:	dd001c15 	stw	r20,112(sp)
 80097b0:	d9c00315 	stw	r7,12(sp)
 80097b4:	2039883a 	mov	fp,r4
 80097b8:	3023883a 	mov	r17,r6
 80097bc:	2825883a 	mov	r18,r5
 80097c0:	dc002417 	ldw	r16,144(sp)
 80097c4:	3027883a 	mov	r19,r6
 80097c8:	10000826 	beq	r2,zero,80097ec <_dtoa_r+0x6c>
 80097cc:	21801117 	ldw	r6,68(r4)
 80097d0:	00c00044 	movi	r3,1
 80097d4:	100b883a 	mov	r5,r2
 80097d8:	1986983a 	sll	r3,r3,r6
 80097dc:	11800115 	stw	r6,4(r2)
 80097e0:	10c00215 	stw	r3,8(r2)
 80097e4:	800cee00 	call	800cee0 <_Bfree>
 80097e8:	e0001015 	stw	zero,64(fp)
 80097ec:	88002e16 	blt	r17,zero,80098a8 <_dtoa_r+0x128>
 80097f0:	80000015 	stw	zero,0(r16)
 80097f4:	889ffc2c 	andhi	r2,r17,32752
 80097f8:	00dffc34 	movhi	r3,32752
 80097fc:	10c01c26 	beq	r2,r3,8009870 <_dtoa_r+0xf0>
 8009800:	000d883a 	mov	r6,zero
 8009804:	000f883a 	mov	r7,zero
 8009808:	9009883a 	mov	r4,r18
 800980c:	980b883a 	mov	r5,r19
 8009810:	8013c300 	call	8013c30 <__eqdf2>
 8009814:	10002b1e 	bne	r2,zero,80098c4 <_dtoa_r+0x144>
 8009818:	d9c02317 	ldw	r7,140(sp)
 800981c:	00800044 	movi	r2,1
 8009820:	38800015 	stw	r2,0(r7)
 8009824:	d8802517 	ldw	r2,148(sp)
 8009828:	10019e26 	beq	r2,zero,8009ea4 <_dtoa_r+0x724>
 800982c:	d8c02517 	ldw	r3,148(sp)
 8009830:	00820074 	movhi	r2,2049
 8009834:	109ff044 	addi	r2,r2,32705
 8009838:	18800015 	stw	r2,0(r3)
 800983c:	10bfffc4 	addi	r2,r2,-1
 8009840:	dfc02117 	ldw	ra,132(sp)
 8009844:	df002017 	ldw	fp,128(sp)
 8009848:	ddc01f17 	ldw	r23,124(sp)
 800984c:	dd801e17 	ldw	r22,120(sp)
 8009850:	dd401d17 	ldw	r21,116(sp)
 8009854:	dd001c17 	ldw	r20,112(sp)
 8009858:	dcc01b17 	ldw	r19,108(sp)
 800985c:	dc801a17 	ldw	r18,104(sp)
 8009860:	dc401917 	ldw	r17,100(sp)
 8009864:	dc001817 	ldw	r16,96(sp)
 8009868:	dec02204 	addi	sp,sp,136
 800986c:	f800283a 	ret
 8009870:	d8c02317 	ldw	r3,140(sp)
 8009874:	0089c3c4 	movi	r2,9999
 8009878:	18800015 	stw	r2,0(r3)
 800987c:	90017726 	beq	r18,zero,8009e5c <_dtoa_r+0x6dc>
 8009880:	008200b4 	movhi	r2,2050
 8009884:	10a00404 	addi	r2,r2,-32752
 8009888:	d9002517 	ldw	r4,148(sp)
 800988c:	203fec26 	beq	r4,zero,8009840 <__alt_data_end+0xfc009840>
 8009890:	10c000c7 	ldb	r3,3(r2)
 8009894:	1801781e 	bne	r3,zero,8009e78 <_dtoa_r+0x6f8>
 8009898:	10c000c4 	addi	r3,r2,3
 800989c:	d9802517 	ldw	r6,148(sp)
 80098a0:	30c00015 	stw	r3,0(r6)
 80098a4:	003fe606 	br	8009840 <__alt_data_end+0xfc009840>
 80098a8:	04e00034 	movhi	r19,32768
 80098ac:	9cffffc4 	addi	r19,r19,-1
 80098b0:	00800044 	movi	r2,1
 80098b4:	8ce6703a 	and	r19,r17,r19
 80098b8:	80800015 	stw	r2,0(r16)
 80098bc:	9823883a 	mov	r17,r19
 80098c0:	003fcc06 	br	80097f4 <__alt_data_end+0xfc0097f4>
 80098c4:	d8800204 	addi	r2,sp,8
 80098c8:	d8800015 	stw	r2,0(sp)
 80098cc:	d9c00104 	addi	r7,sp,4
 80098d0:	900b883a 	mov	r5,r18
 80098d4:	980d883a 	mov	r6,r19
 80098d8:	e009883a 	mov	r4,fp
 80098dc:	8820d53a 	srli	r16,r17,20
 80098e0:	800db880 	call	800db88 <__d2b>
 80098e4:	d8800915 	stw	r2,36(sp)
 80098e8:	8001651e 	bne	r16,zero,8009e80 <_dtoa_r+0x700>
 80098ec:	dd800217 	ldw	r22,8(sp)
 80098f0:	dc000117 	ldw	r16,4(sp)
 80098f4:	00800804 	movi	r2,32
 80098f8:	b421883a 	add	r16,r22,r16
 80098fc:	80c10c84 	addi	r3,r16,1074
 8009900:	10c2d10e 	bge	r2,r3,800a448 <_dtoa_r+0xcc8>
 8009904:	00801004 	movi	r2,64
 8009908:	81010484 	addi	r4,r16,1042
 800990c:	10c7c83a 	sub	r3,r2,r3
 8009910:	9108d83a 	srl	r4,r18,r4
 8009914:	88e2983a 	sll	r17,r17,r3
 8009918:	2448b03a 	or	r4,r4,r17
 800991c:	801514c0 	call	801514c <__floatunsidf>
 8009920:	017f8434 	movhi	r5,65040
 8009924:	01800044 	movi	r6,1
 8009928:	1009883a 	mov	r4,r2
 800992c:	194b883a 	add	r5,r3,r5
 8009930:	843fffc4 	addi	r16,r16,-1
 8009934:	d9801115 	stw	r6,68(sp)
 8009938:	000d883a 	mov	r6,zero
 800993c:	01cffe34 	movhi	r7,16376
 8009940:	80146f40 	call	80146f4 <__subdf3>
 8009944:	0198dbf4 	movhi	r6,25455
 8009948:	01cff4f4 	movhi	r7,16339
 800994c:	3190d844 	addi	r6,r6,17249
 8009950:	39e1e9c4 	addi	r7,r7,-30809
 8009954:	1009883a 	mov	r4,r2
 8009958:	180b883a 	mov	r5,r3
 800995c:	8013e880 	call	8013e88 <__muldf3>
 8009960:	01a2d874 	movhi	r6,35681
 8009964:	01cff1f4 	movhi	r7,16327
 8009968:	31b22cc4 	addi	r6,r6,-14157
 800996c:	39e28a04 	addi	r7,r7,-30168
 8009970:	180b883a 	mov	r5,r3
 8009974:	1009883a 	mov	r4,r2
 8009978:	80129b40 	call	80129b4 <__adddf3>
 800997c:	8009883a 	mov	r4,r16
 8009980:	1029883a 	mov	r20,r2
 8009984:	1823883a 	mov	r17,r3
 8009988:	80150700 	call	8015070 <__floatsidf>
 800998c:	019427f4 	movhi	r6,20639
 8009990:	01cff4f4 	movhi	r7,16339
 8009994:	319e7ec4 	addi	r6,r6,31227
 8009998:	39d104c4 	addi	r7,r7,17427
 800999c:	1009883a 	mov	r4,r2
 80099a0:	180b883a 	mov	r5,r3
 80099a4:	8013e880 	call	8013e88 <__muldf3>
 80099a8:	100d883a 	mov	r6,r2
 80099ac:	180f883a 	mov	r7,r3
 80099b0:	a009883a 	mov	r4,r20
 80099b4:	880b883a 	mov	r5,r17
 80099b8:	80129b40 	call	80129b4 <__adddf3>
 80099bc:	1009883a 	mov	r4,r2
 80099c0:	180b883a 	mov	r5,r3
 80099c4:	1029883a 	mov	r20,r2
 80099c8:	1823883a 	mov	r17,r3
 80099cc:	8014ff00 	call	8014ff0 <__fixdfsi>
 80099d0:	000d883a 	mov	r6,zero
 80099d4:	000f883a 	mov	r7,zero
 80099d8:	a009883a 	mov	r4,r20
 80099dc:	880b883a 	mov	r5,r17
 80099e0:	d8800515 	stw	r2,20(sp)
 80099e4:	8013d940 	call	8013d94 <__ledf2>
 80099e8:	10028716 	blt	r2,zero,800a408 <_dtoa_r+0xc88>
 80099ec:	d8c00517 	ldw	r3,20(sp)
 80099f0:	00800584 	movi	r2,22
 80099f4:	10c27536 	bltu	r2,r3,800a3cc <_dtoa_r+0xc4c>
 80099f8:	180490fa 	slli	r2,r3,3
 80099fc:	00c200b4 	movhi	r3,2050
 8009a00:	18e02004 	addi	r3,r3,-32640
 8009a04:	1885883a 	add	r2,r3,r2
 8009a08:	11000017 	ldw	r4,0(r2)
 8009a0c:	11400117 	ldw	r5,4(r2)
 8009a10:	900d883a 	mov	r6,r18
 8009a14:	980f883a 	mov	r7,r19
 8009a18:	8013cb80 	call	8013cb8 <__gedf2>
 8009a1c:	00828d0e 	bge	zero,r2,800a454 <_dtoa_r+0xcd4>
 8009a20:	d9000517 	ldw	r4,20(sp)
 8009a24:	d8000e15 	stw	zero,56(sp)
 8009a28:	213fffc4 	addi	r4,r4,-1
 8009a2c:	d9000515 	stw	r4,20(sp)
 8009a30:	b42dc83a 	sub	r22,r22,r16
 8009a34:	b5bfffc4 	addi	r22,r22,-1
 8009a38:	b0026f16 	blt	r22,zero,800a3f8 <_dtoa_r+0xc78>
 8009a3c:	d8000815 	stw	zero,32(sp)
 8009a40:	d9c00517 	ldw	r7,20(sp)
 8009a44:	38026416 	blt	r7,zero,800a3d8 <_dtoa_r+0xc58>
 8009a48:	b1ed883a 	add	r22,r22,r7
 8009a4c:	d9c00d15 	stw	r7,52(sp)
 8009a50:	d8000a15 	stw	zero,40(sp)
 8009a54:	d9800317 	ldw	r6,12(sp)
 8009a58:	00800244 	movi	r2,9
 8009a5c:	11811436 	bltu	r2,r6,8009eb0 <_dtoa_r+0x730>
 8009a60:	00800144 	movi	r2,5
 8009a64:	1184e10e 	bge	r2,r6,800adec <_dtoa_r+0x166c>
 8009a68:	31bfff04 	addi	r6,r6,-4
 8009a6c:	d9800315 	stw	r6,12(sp)
 8009a70:	0023883a 	mov	r17,zero
 8009a74:	d9800317 	ldw	r6,12(sp)
 8009a78:	008000c4 	movi	r2,3
 8009a7c:	30836726 	beq	r6,r2,800a81c <_dtoa_r+0x109c>
 8009a80:	1183410e 	bge	r2,r6,800a788 <_dtoa_r+0x1008>
 8009a84:	d9c00317 	ldw	r7,12(sp)
 8009a88:	00800104 	movi	r2,4
 8009a8c:	38827c26 	beq	r7,r2,800a480 <_dtoa_r+0xd00>
 8009a90:	00800144 	movi	r2,5
 8009a94:	3884c41e 	bne	r7,r2,800ada8 <_dtoa_r+0x1628>
 8009a98:	00800044 	movi	r2,1
 8009a9c:	d8800b15 	stw	r2,44(sp)
 8009aa0:	d8c00517 	ldw	r3,20(sp)
 8009aa4:	d9002217 	ldw	r4,136(sp)
 8009aa8:	1907883a 	add	r3,r3,r4
 8009aac:	19800044 	addi	r6,r3,1
 8009ab0:	d8c00c15 	stw	r3,48(sp)
 8009ab4:	d9800615 	stw	r6,24(sp)
 8009ab8:	0183a40e 	bge	zero,r6,800a94c <_dtoa_r+0x11cc>
 8009abc:	d9800617 	ldw	r6,24(sp)
 8009ac0:	3021883a 	mov	r16,r6
 8009ac4:	e0001115 	stw	zero,68(fp)
 8009ac8:	008005c4 	movi	r2,23
 8009acc:	1184c92e 	bgeu	r2,r6,800adf4 <_dtoa_r+0x1674>
 8009ad0:	00c00044 	movi	r3,1
 8009ad4:	00800104 	movi	r2,4
 8009ad8:	1085883a 	add	r2,r2,r2
 8009adc:	11000504 	addi	r4,r2,20
 8009ae0:	180b883a 	mov	r5,r3
 8009ae4:	18c00044 	addi	r3,r3,1
 8009ae8:	313ffb2e 	bgeu	r6,r4,8009ad8 <__alt_data_end+0xfc009ad8>
 8009aec:	e1401115 	stw	r5,68(fp)
 8009af0:	e009883a 	mov	r4,fp
 8009af4:	800ce380 	call	800ce38 <_Balloc>
 8009af8:	d8800715 	stw	r2,28(sp)
 8009afc:	e0801015 	stw	r2,64(fp)
 8009b00:	00800384 	movi	r2,14
 8009b04:	1400f736 	bltu	r2,r16,8009ee4 <_dtoa_r+0x764>
 8009b08:	8800f626 	beq	r17,zero,8009ee4 <_dtoa_r+0x764>
 8009b0c:	d9c00517 	ldw	r7,20(sp)
 8009b10:	01c39a0e 	bge	zero,r7,800a97c <_dtoa_r+0x11fc>
 8009b14:	388003cc 	andi	r2,r7,15
 8009b18:	100490fa 	slli	r2,r2,3
 8009b1c:	382bd13a 	srai	r21,r7,4
 8009b20:	00c200b4 	movhi	r3,2050
 8009b24:	18e02004 	addi	r3,r3,-32640
 8009b28:	1885883a 	add	r2,r3,r2
 8009b2c:	a8c0040c 	andi	r3,r21,16
 8009b30:	12400017 	ldw	r9,0(r2)
 8009b34:	12000117 	ldw	r8,4(r2)
 8009b38:	18037926 	beq	r3,zero,800a920 <_dtoa_r+0x11a0>
 8009b3c:	008200b4 	movhi	r2,2050
 8009b40:	10a01604 	addi	r2,r2,-32680
 8009b44:	11800817 	ldw	r6,32(r2)
 8009b48:	11c00917 	ldw	r7,36(r2)
 8009b4c:	9009883a 	mov	r4,r18
 8009b50:	980b883a 	mov	r5,r19
 8009b54:	da001715 	stw	r8,92(sp)
 8009b58:	da401615 	stw	r9,88(sp)
 8009b5c:	80132600 	call	8013260 <__divdf3>
 8009b60:	da001717 	ldw	r8,92(sp)
 8009b64:	da401617 	ldw	r9,88(sp)
 8009b68:	ad4003cc 	andi	r21,r21,15
 8009b6c:	040000c4 	movi	r16,3
 8009b70:	1023883a 	mov	r17,r2
 8009b74:	1829883a 	mov	r20,r3
 8009b78:	a8001126 	beq	r21,zero,8009bc0 <_dtoa_r+0x440>
 8009b7c:	05c200b4 	movhi	r23,2050
 8009b80:	bde01604 	addi	r23,r23,-32680
 8009b84:	4805883a 	mov	r2,r9
 8009b88:	4007883a 	mov	r3,r8
 8009b8c:	a980004c 	andi	r6,r21,1
 8009b90:	1009883a 	mov	r4,r2
 8009b94:	a82bd07a 	srai	r21,r21,1
 8009b98:	180b883a 	mov	r5,r3
 8009b9c:	30000426 	beq	r6,zero,8009bb0 <_dtoa_r+0x430>
 8009ba0:	b9800017 	ldw	r6,0(r23)
 8009ba4:	b9c00117 	ldw	r7,4(r23)
 8009ba8:	84000044 	addi	r16,r16,1
 8009bac:	8013e880 	call	8013e88 <__muldf3>
 8009bb0:	bdc00204 	addi	r23,r23,8
 8009bb4:	a83ff51e 	bne	r21,zero,8009b8c <__alt_data_end+0xfc009b8c>
 8009bb8:	1013883a 	mov	r9,r2
 8009bbc:	1811883a 	mov	r8,r3
 8009bc0:	480d883a 	mov	r6,r9
 8009bc4:	400f883a 	mov	r7,r8
 8009bc8:	8809883a 	mov	r4,r17
 8009bcc:	a00b883a 	mov	r5,r20
 8009bd0:	80132600 	call	8013260 <__divdf3>
 8009bd4:	d8800f15 	stw	r2,60(sp)
 8009bd8:	d8c01015 	stw	r3,64(sp)
 8009bdc:	d8c00e17 	ldw	r3,56(sp)
 8009be0:	18000626 	beq	r3,zero,8009bfc <_dtoa_r+0x47c>
 8009be4:	d9000f17 	ldw	r4,60(sp)
 8009be8:	d9401017 	ldw	r5,64(sp)
 8009bec:	000d883a 	mov	r6,zero
 8009bf0:	01cffc34 	movhi	r7,16368
 8009bf4:	8013d940 	call	8013d94 <__ledf2>
 8009bf8:	10040b16 	blt	r2,zero,800ac28 <_dtoa_r+0x14a8>
 8009bfc:	8009883a 	mov	r4,r16
 8009c00:	80150700 	call	8015070 <__floatsidf>
 8009c04:	d9800f17 	ldw	r6,60(sp)
 8009c08:	d9c01017 	ldw	r7,64(sp)
 8009c0c:	1009883a 	mov	r4,r2
 8009c10:	180b883a 	mov	r5,r3
 8009c14:	8013e880 	call	8013e88 <__muldf3>
 8009c18:	000d883a 	mov	r6,zero
 8009c1c:	01d00734 	movhi	r7,16412
 8009c20:	1009883a 	mov	r4,r2
 8009c24:	180b883a 	mov	r5,r3
 8009c28:	80129b40 	call	80129b4 <__adddf3>
 8009c2c:	1021883a 	mov	r16,r2
 8009c30:	d8800617 	ldw	r2,24(sp)
 8009c34:	047f3034 	movhi	r17,64704
 8009c38:	1c63883a 	add	r17,r3,r17
 8009c3c:	10031826 	beq	r2,zero,800a8a0 <_dtoa_r+0x1120>
 8009c40:	d8c00517 	ldw	r3,20(sp)
 8009c44:	db000617 	ldw	r12,24(sp)
 8009c48:	d8c01315 	stw	r3,76(sp)
 8009c4c:	d9000b17 	ldw	r4,44(sp)
 8009c50:	20038f26 	beq	r4,zero,800aa90 <_dtoa_r+0x1310>
 8009c54:	60bfffc4 	addi	r2,r12,-1
 8009c58:	100490fa 	slli	r2,r2,3
 8009c5c:	00c200b4 	movhi	r3,2050
 8009c60:	18e02004 	addi	r3,r3,-32640
 8009c64:	1885883a 	add	r2,r3,r2
 8009c68:	11800017 	ldw	r6,0(r2)
 8009c6c:	11c00117 	ldw	r7,4(r2)
 8009c70:	d8800717 	ldw	r2,28(sp)
 8009c74:	0009883a 	mov	r4,zero
 8009c78:	014ff834 	movhi	r5,16352
 8009c7c:	db001615 	stw	r12,88(sp)
 8009c80:	15c00044 	addi	r23,r2,1
 8009c84:	80132600 	call	8013260 <__divdf3>
 8009c88:	800d883a 	mov	r6,r16
 8009c8c:	880f883a 	mov	r7,r17
 8009c90:	1009883a 	mov	r4,r2
 8009c94:	180b883a 	mov	r5,r3
 8009c98:	80146f40 	call	80146f4 <__subdf3>
 8009c9c:	d9401017 	ldw	r5,64(sp)
 8009ca0:	d9000f17 	ldw	r4,60(sp)
 8009ca4:	102b883a 	mov	r21,r2
 8009ca8:	d8c01215 	stw	r3,72(sp)
 8009cac:	8014ff00 	call	8014ff0 <__fixdfsi>
 8009cb0:	1009883a 	mov	r4,r2
 8009cb4:	1029883a 	mov	r20,r2
 8009cb8:	80150700 	call	8015070 <__floatsidf>
 8009cbc:	d9000f17 	ldw	r4,60(sp)
 8009cc0:	d9401017 	ldw	r5,64(sp)
 8009cc4:	100d883a 	mov	r6,r2
 8009cc8:	180f883a 	mov	r7,r3
 8009ccc:	80146f40 	call	80146f4 <__subdf3>
 8009cd0:	1823883a 	mov	r17,r3
 8009cd4:	d8c00717 	ldw	r3,28(sp)
 8009cd8:	d9401217 	ldw	r5,72(sp)
 8009cdc:	a2000c04 	addi	r8,r20,48
 8009ce0:	1021883a 	mov	r16,r2
 8009ce4:	1a000005 	stb	r8,0(r3)
 8009ce8:	800d883a 	mov	r6,r16
 8009cec:	880f883a 	mov	r7,r17
 8009cf0:	a809883a 	mov	r4,r21
 8009cf4:	4029883a 	mov	r20,r8
 8009cf8:	8013cb80 	call	8013cb8 <__gedf2>
 8009cfc:	00841d16 	blt	zero,r2,800ad74 <_dtoa_r+0x15f4>
 8009d00:	800d883a 	mov	r6,r16
 8009d04:	880f883a 	mov	r7,r17
 8009d08:	0009883a 	mov	r4,zero
 8009d0c:	014ffc34 	movhi	r5,16368
 8009d10:	80146f40 	call	80146f4 <__subdf3>
 8009d14:	d9401217 	ldw	r5,72(sp)
 8009d18:	100d883a 	mov	r6,r2
 8009d1c:	180f883a 	mov	r7,r3
 8009d20:	a809883a 	mov	r4,r21
 8009d24:	8013cb80 	call	8013cb8 <__gedf2>
 8009d28:	db001617 	ldw	r12,88(sp)
 8009d2c:	00840e16 	blt	zero,r2,800ad68 <_dtoa_r+0x15e8>
 8009d30:	00800044 	movi	r2,1
 8009d34:	13006b0e 	bge	r2,r12,8009ee4 <_dtoa_r+0x764>
 8009d38:	d9000717 	ldw	r4,28(sp)
 8009d3c:	dd800f15 	stw	r22,60(sp)
 8009d40:	dcc01015 	stw	r19,64(sp)
 8009d44:	2319883a 	add	r12,r4,r12
 8009d48:	dcc01217 	ldw	r19,72(sp)
 8009d4c:	602d883a 	mov	r22,r12
 8009d50:	dc801215 	stw	r18,72(sp)
 8009d54:	b825883a 	mov	r18,r23
 8009d58:	00000906 	br	8009d80 <_dtoa_r+0x600>
 8009d5c:	80146f40 	call	80146f4 <__subdf3>
 8009d60:	a80d883a 	mov	r6,r21
 8009d64:	980f883a 	mov	r7,r19
 8009d68:	1009883a 	mov	r4,r2
 8009d6c:	180b883a 	mov	r5,r3
 8009d70:	8013d940 	call	8013d94 <__ledf2>
 8009d74:	1003e816 	blt	r2,zero,800ad18 <_dtoa_r+0x1598>
 8009d78:	b825883a 	mov	r18,r23
 8009d7c:	bd83e926 	beq	r23,r22,800ad24 <_dtoa_r+0x15a4>
 8009d80:	a809883a 	mov	r4,r21
 8009d84:	980b883a 	mov	r5,r19
 8009d88:	000d883a 	mov	r6,zero
 8009d8c:	01d00934 	movhi	r7,16420
 8009d90:	8013e880 	call	8013e88 <__muldf3>
 8009d94:	000d883a 	mov	r6,zero
 8009d98:	01d00934 	movhi	r7,16420
 8009d9c:	8009883a 	mov	r4,r16
 8009da0:	880b883a 	mov	r5,r17
 8009da4:	102b883a 	mov	r21,r2
 8009da8:	1827883a 	mov	r19,r3
 8009dac:	8013e880 	call	8013e88 <__muldf3>
 8009db0:	180b883a 	mov	r5,r3
 8009db4:	1009883a 	mov	r4,r2
 8009db8:	1821883a 	mov	r16,r3
 8009dbc:	1023883a 	mov	r17,r2
 8009dc0:	8014ff00 	call	8014ff0 <__fixdfsi>
 8009dc4:	1009883a 	mov	r4,r2
 8009dc8:	1029883a 	mov	r20,r2
 8009dcc:	80150700 	call	8015070 <__floatsidf>
 8009dd0:	8809883a 	mov	r4,r17
 8009dd4:	800b883a 	mov	r5,r16
 8009dd8:	100d883a 	mov	r6,r2
 8009ddc:	180f883a 	mov	r7,r3
 8009de0:	80146f40 	call	80146f4 <__subdf3>
 8009de4:	a5000c04 	addi	r20,r20,48
 8009de8:	a80d883a 	mov	r6,r21
 8009dec:	980f883a 	mov	r7,r19
 8009df0:	1009883a 	mov	r4,r2
 8009df4:	180b883a 	mov	r5,r3
 8009df8:	95000005 	stb	r20,0(r18)
 8009dfc:	1021883a 	mov	r16,r2
 8009e00:	1823883a 	mov	r17,r3
 8009e04:	8013d940 	call	8013d94 <__ledf2>
 8009e08:	bdc00044 	addi	r23,r23,1
 8009e0c:	800d883a 	mov	r6,r16
 8009e10:	880f883a 	mov	r7,r17
 8009e14:	0009883a 	mov	r4,zero
 8009e18:	014ffc34 	movhi	r5,16368
 8009e1c:	103fcf0e 	bge	r2,zero,8009d5c <__alt_data_end+0xfc009d5c>
 8009e20:	d8c01317 	ldw	r3,76(sp)
 8009e24:	d8c00515 	stw	r3,20(sp)
 8009e28:	d9400917 	ldw	r5,36(sp)
 8009e2c:	e009883a 	mov	r4,fp
 8009e30:	800cee00 	call	800cee0 <_Bfree>
 8009e34:	d9000517 	ldw	r4,20(sp)
 8009e38:	d9802317 	ldw	r6,140(sp)
 8009e3c:	d9c02517 	ldw	r7,148(sp)
 8009e40:	b8000005 	stb	zero,0(r23)
 8009e44:	20800044 	addi	r2,r4,1
 8009e48:	30800015 	stw	r2,0(r6)
 8009e4c:	3802aa26 	beq	r7,zero,800a8f8 <_dtoa_r+0x1178>
 8009e50:	3dc00015 	stw	r23,0(r7)
 8009e54:	d8800717 	ldw	r2,28(sp)
 8009e58:	003e7906 	br	8009840 <__alt_data_end+0xfc009840>
 8009e5c:	00800434 	movhi	r2,16
 8009e60:	10bfffc4 	addi	r2,r2,-1
 8009e64:	88a2703a 	and	r17,r17,r2
 8009e68:	883e851e 	bne	r17,zero,8009880 <__alt_data_end+0xfc009880>
 8009e6c:	008200b4 	movhi	r2,2050
 8009e70:	10a00104 	addi	r2,r2,-32764
 8009e74:	003e8406 	br	8009888 <__alt_data_end+0xfc009888>
 8009e78:	10c00204 	addi	r3,r2,8
 8009e7c:	003e8706 	br	800989c <__alt_data_end+0xfc00989c>
 8009e80:	01400434 	movhi	r5,16
 8009e84:	297fffc4 	addi	r5,r5,-1
 8009e88:	994a703a 	and	r5,r19,r5
 8009e8c:	9009883a 	mov	r4,r18
 8009e90:	843f0044 	addi	r16,r16,-1023
 8009e94:	294ffc34 	orhi	r5,r5,16368
 8009e98:	dd800217 	ldw	r22,8(sp)
 8009e9c:	d8001115 	stw	zero,68(sp)
 8009ea0:	003ea506 	br	8009938 <__alt_data_end+0xfc009938>
 8009ea4:	00820074 	movhi	r2,2049
 8009ea8:	109ff004 	addi	r2,r2,32704
 8009eac:	003e6406 	br	8009840 <__alt_data_end+0xfc009840>
 8009eb0:	e0001115 	stw	zero,68(fp)
 8009eb4:	000b883a 	mov	r5,zero
 8009eb8:	e009883a 	mov	r4,fp
 8009ebc:	800ce380 	call	800ce38 <_Balloc>
 8009ec0:	01bfffc4 	movi	r6,-1
 8009ec4:	01c00044 	movi	r7,1
 8009ec8:	d8800715 	stw	r2,28(sp)
 8009ecc:	d9800c15 	stw	r6,48(sp)
 8009ed0:	e0801015 	stw	r2,64(fp)
 8009ed4:	d8000315 	stw	zero,12(sp)
 8009ed8:	d9c00b15 	stw	r7,44(sp)
 8009edc:	d9800615 	stw	r6,24(sp)
 8009ee0:	d8002215 	stw	zero,136(sp)
 8009ee4:	d8800117 	ldw	r2,4(sp)
 8009ee8:	10008916 	blt	r2,zero,800a110 <_dtoa_r+0x990>
 8009eec:	d9000517 	ldw	r4,20(sp)
 8009ef0:	00c00384 	movi	r3,14
 8009ef4:	19008616 	blt	r3,r4,800a110 <_dtoa_r+0x990>
 8009ef8:	200490fa 	slli	r2,r4,3
 8009efc:	00c200b4 	movhi	r3,2050
 8009f00:	d9802217 	ldw	r6,136(sp)
 8009f04:	18e02004 	addi	r3,r3,-32640
 8009f08:	1885883a 	add	r2,r3,r2
 8009f0c:	14000017 	ldw	r16,0(r2)
 8009f10:	14400117 	ldw	r17,4(r2)
 8009f14:	30016316 	blt	r6,zero,800a4a4 <_dtoa_r+0xd24>
 8009f18:	800d883a 	mov	r6,r16
 8009f1c:	880f883a 	mov	r7,r17
 8009f20:	9009883a 	mov	r4,r18
 8009f24:	980b883a 	mov	r5,r19
 8009f28:	80132600 	call	8013260 <__divdf3>
 8009f2c:	180b883a 	mov	r5,r3
 8009f30:	1009883a 	mov	r4,r2
 8009f34:	8014ff00 	call	8014ff0 <__fixdfsi>
 8009f38:	1009883a 	mov	r4,r2
 8009f3c:	102b883a 	mov	r21,r2
 8009f40:	80150700 	call	8015070 <__floatsidf>
 8009f44:	800d883a 	mov	r6,r16
 8009f48:	880f883a 	mov	r7,r17
 8009f4c:	1009883a 	mov	r4,r2
 8009f50:	180b883a 	mov	r5,r3
 8009f54:	8013e880 	call	8013e88 <__muldf3>
 8009f58:	100d883a 	mov	r6,r2
 8009f5c:	180f883a 	mov	r7,r3
 8009f60:	9009883a 	mov	r4,r18
 8009f64:	980b883a 	mov	r5,r19
 8009f68:	80146f40 	call	80146f4 <__subdf3>
 8009f6c:	d9c00717 	ldw	r7,28(sp)
 8009f70:	1009883a 	mov	r4,r2
 8009f74:	a8800c04 	addi	r2,r21,48
 8009f78:	38800005 	stb	r2,0(r7)
 8009f7c:	3dc00044 	addi	r23,r7,1
 8009f80:	d9c00617 	ldw	r7,24(sp)
 8009f84:	01800044 	movi	r6,1
 8009f88:	180b883a 	mov	r5,r3
 8009f8c:	2005883a 	mov	r2,r4
 8009f90:	39803826 	beq	r7,r6,800a074 <_dtoa_r+0x8f4>
 8009f94:	000d883a 	mov	r6,zero
 8009f98:	01d00934 	movhi	r7,16420
 8009f9c:	8013e880 	call	8013e88 <__muldf3>
 8009fa0:	000d883a 	mov	r6,zero
 8009fa4:	000f883a 	mov	r7,zero
 8009fa8:	1009883a 	mov	r4,r2
 8009fac:	180b883a 	mov	r5,r3
 8009fb0:	1025883a 	mov	r18,r2
 8009fb4:	1827883a 	mov	r19,r3
 8009fb8:	8013c300 	call	8013c30 <__eqdf2>
 8009fbc:	103f9a26 	beq	r2,zero,8009e28 <__alt_data_end+0xfc009e28>
 8009fc0:	d9c00617 	ldw	r7,24(sp)
 8009fc4:	d8c00717 	ldw	r3,28(sp)
 8009fc8:	b829883a 	mov	r20,r23
 8009fcc:	38bfffc4 	addi	r2,r7,-1
 8009fd0:	18ad883a 	add	r22,r3,r2
 8009fd4:	00000a06 	br	800a000 <_dtoa_r+0x880>
 8009fd8:	8013e880 	call	8013e88 <__muldf3>
 8009fdc:	000d883a 	mov	r6,zero
 8009fe0:	000f883a 	mov	r7,zero
 8009fe4:	1009883a 	mov	r4,r2
 8009fe8:	180b883a 	mov	r5,r3
 8009fec:	1025883a 	mov	r18,r2
 8009ff0:	1827883a 	mov	r19,r3
 8009ff4:	b829883a 	mov	r20,r23
 8009ff8:	8013c300 	call	8013c30 <__eqdf2>
 8009ffc:	103f8a26 	beq	r2,zero,8009e28 <__alt_data_end+0xfc009e28>
 800a000:	800d883a 	mov	r6,r16
 800a004:	880f883a 	mov	r7,r17
 800a008:	9009883a 	mov	r4,r18
 800a00c:	980b883a 	mov	r5,r19
 800a010:	80132600 	call	8013260 <__divdf3>
 800a014:	180b883a 	mov	r5,r3
 800a018:	1009883a 	mov	r4,r2
 800a01c:	8014ff00 	call	8014ff0 <__fixdfsi>
 800a020:	1009883a 	mov	r4,r2
 800a024:	102b883a 	mov	r21,r2
 800a028:	80150700 	call	8015070 <__floatsidf>
 800a02c:	800d883a 	mov	r6,r16
 800a030:	880f883a 	mov	r7,r17
 800a034:	1009883a 	mov	r4,r2
 800a038:	180b883a 	mov	r5,r3
 800a03c:	8013e880 	call	8013e88 <__muldf3>
 800a040:	100d883a 	mov	r6,r2
 800a044:	180f883a 	mov	r7,r3
 800a048:	9009883a 	mov	r4,r18
 800a04c:	980b883a 	mov	r5,r19
 800a050:	80146f40 	call	80146f4 <__subdf3>
 800a054:	aa000c04 	addi	r8,r21,48
 800a058:	a2000005 	stb	r8,0(r20)
 800a05c:	000d883a 	mov	r6,zero
 800a060:	01d00934 	movhi	r7,16420
 800a064:	1009883a 	mov	r4,r2
 800a068:	180b883a 	mov	r5,r3
 800a06c:	a5c00044 	addi	r23,r20,1
 800a070:	b53fd91e 	bne	r22,r20,8009fd8 <__alt_data_end+0xfc009fd8>
 800a074:	100d883a 	mov	r6,r2
 800a078:	180f883a 	mov	r7,r3
 800a07c:	1009883a 	mov	r4,r2
 800a080:	180b883a 	mov	r5,r3
 800a084:	80129b40 	call	80129b4 <__adddf3>
 800a088:	100d883a 	mov	r6,r2
 800a08c:	180f883a 	mov	r7,r3
 800a090:	8009883a 	mov	r4,r16
 800a094:	880b883a 	mov	r5,r17
 800a098:	1027883a 	mov	r19,r2
 800a09c:	1825883a 	mov	r18,r3
 800a0a0:	8013d940 	call	8013d94 <__ledf2>
 800a0a4:	10000816 	blt	r2,zero,800a0c8 <_dtoa_r+0x948>
 800a0a8:	980d883a 	mov	r6,r19
 800a0ac:	900f883a 	mov	r7,r18
 800a0b0:	8009883a 	mov	r4,r16
 800a0b4:	880b883a 	mov	r5,r17
 800a0b8:	8013c300 	call	8013c30 <__eqdf2>
 800a0bc:	103f5a1e 	bne	r2,zero,8009e28 <__alt_data_end+0xfc009e28>
 800a0c0:	ad40004c 	andi	r21,r21,1
 800a0c4:	a83f5826 	beq	r21,zero,8009e28 <__alt_data_end+0xfc009e28>
 800a0c8:	bd3fffc3 	ldbu	r20,-1(r23)
 800a0cc:	b8bfffc4 	addi	r2,r23,-1
 800a0d0:	1007883a 	mov	r3,r2
 800a0d4:	01400e44 	movi	r5,57
 800a0d8:	d9800717 	ldw	r6,28(sp)
 800a0dc:	00000506 	br	800a0f4 <_dtoa_r+0x974>
 800a0e0:	18ffffc4 	addi	r3,r3,-1
 800a0e4:	11824726 	beq	r2,r6,800aa04 <_dtoa_r+0x1284>
 800a0e8:	1d000003 	ldbu	r20,0(r3)
 800a0ec:	102f883a 	mov	r23,r2
 800a0f0:	10bfffc4 	addi	r2,r2,-1
 800a0f4:	a1003fcc 	andi	r4,r20,255
 800a0f8:	2100201c 	xori	r4,r4,128
 800a0fc:	213fe004 	addi	r4,r4,-128
 800a100:	217ff726 	beq	r4,r5,800a0e0 <__alt_data_end+0xfc00a0e0>
 800a104:	a2000044 	addi	r8,r20,1
 800a108:	12000005 	stb	r8,0(r2)
 800a10c:	003f4606 	br	8009e28 <__alt_data_end+0xfc009e28>
 800a110:	d9000b17 	ldw	r4,44(sp)
 800a114:	2000c826 	beq	r4,zero,800a438 <_dtoa_r+0xcb8>
 800a118:	d9800317 	ldw	r6,12(sp)
 800a11c:	00c00044 	movi	r3,1
 800a120:	1980f90e 	bge	r3,r6,800a508 <_dtoa_r+0xd88>
 800a124:	d8800617 	ldw	r2,24(sp)
 800a128:	d8c00a17 	ldw	r3,40(sp)
 800a12c:	157fffc4 	addi	r21,r2,-1
 800a130:	1d41f316 	blt	r3,r21,800a900 <_dtoa_r+0x1180>
 800a134:	1d6bc83a 	sub	r21,r3,r21
 800a138:	d9c00617 	ldw	r7,24(sp)
 800a13c:	3802aa16 	blt	r7,zero,800abe8 <_dtoa_r+0x1468>
 800a140:	dd000817 	ldw	r20,32(sp)
 800a144:	d8800617 	ldw	r2,24(sp)
 800a148:	d8c00817 	ldw	r3,32(sp)
 800a14c:	01400044 	movi	r5,1
 800a150:	e009883a 	mov	r4,fp
 800a154:	1887883a 	add	r3,r3,r2
 800a158:	d8c00815 	stw	r3,32(sp)
 800a15c:	b0ad883a 	add	r22,r22,r2
 800a160:	800d26c0 	call	800d26c <__i2b>
 800a164:	1023883a 	mov	r17,r2
 800a168:	a0000826 	beq	r20,zero,800a18c <_dtoa_r+0xa0c>
 800a16c:	0580070e 	bge	zero,r22,800a18c <_dtoa_r+0xa0c>
 800a170:	a005883a 	mov	r2,r20
 800a174:	b500b916 	blt	r22,r20,800a45c <_dtoa_r+0xcdc>
 800a178:	d9000817 	ldw	r4,32(sp)
 800a17c:	a0a9c83a 	sub	r20,r20,r2
 800a180:	b0adc83a 	sub	r22,r22,r2
 800a184:	2089c83a 	sub	r4,r4,r2
 800a188:	d9000815 	stw	r4,32(sp)
 800a18c:	d9800a17 	ldw	r6,40(sp)
 800a190:	0181810e 	bge	zero,r6,800a798 <_dtoa_r+0x1018>
 800a194:	d9c00b17 	ldw	r7,44(sp)
 800a198:	3800b326 	beq	r7,zero,800a468 <_dtoa_r+0xce8>
 800a19c:	a800b226 	beq	r21,zero,800a468 <_dtoa_r+0xce8>
 800a1a0:	880b883a 	mov	r5,r17
 800a1a4:	a80d883a 	mov	r6,r21
 800a1a8:	e009883a 	mov	r4,fp
 800a1ac:	800d5340 	call	800d534 <__pow5mult>
 800a1b0:	d9800917 	ldw	r6,36(sp)
 800a1b4:	100b883a 	mov	r5,r2
 800a1b8:	e009883a 	mov	r4,fp
 800a1bc:	1023883a 	mov	r17,r2
 800a1c0:	800d2a80 	call	800d2a8 <__multiply>
 800a1c4:	1021883a 	mov	r16,r2
 800a1c8:	d8800a17 	ldw	r2,40(sp)
 800a1cc:	d9400917 	ldw	r5,36(sp)
 800a1d0:	e009883a 	mov	r4,fp
 800a1d4:	1545c83a 	sub	r2,r2,r21
 800a1d8:	d8800a15 	stw	r2,40(sp)
 800a1dc:	800cee00 	call	800cee0 <_Bfree>
 800a1e0:	d8c00a17 	ldw	r3,40(sp)
 800a1e4:	18009f1e 	bne	r3,zero,800a464 <_dtoa_r+0xce4>
 800a1e8:	05c00044 	movi	r23,1
 800a1ec:	e009883a 	mov	r4,fp
 800a1f0:	b80b883a 	mov	r5,r23
 800a1f4:	800d26c0 	call	800d26c <__i2b>
 800a1f8:	d9000d17 	ldw	r4,52(sp)
 800a1fc:	102b883a 	mov	r21,r2
 800a200:	2000ce26 	beq	r4,zero,800a53c <_dtoa_r+0xdbc>
 800a204:	200d883a 	mov	r6,r4
 800a208:	100b883a 	mov	r5,r2
 800a20c:	e009883a 	mov	r4,fp
 800a210:	800d5340 	call	800d534 <__pow5mult>
 800a214:	d9800317 	ldw	r6,12(sp)
 800a218:	102b883a 	mov	r21,r2
 800a21c:	b981810e 	bge	r23,r6,800a824 <_dtoa_r+0x10a4>
 800a220:	0027883a 	mov	r19,zero
 800a224:	a8800417 	ldw	r2,16(r21)
 800a228:	05c00804 	movi	r23,32
 800a22c:	10800104 	addi	r2,r2,4
 800a230:	1085883a 	add	r2,r2,r2
 800a234:	1085883a 	add	r2,r2,r2
 800a238:	a885883a 	add	r2,r21,r2
 800a23c:	11000017 	ldw	r4,0(r2)
 800a240:	800d1540 	call	800d154 <__hi0bits>
 800a244:	b885c83a 	sub	r2,r23,r2
 800a248:	1585883a 	add	r2,r2,r22
 800a24c:	108007cc 	andi	r2,r2,31
 800a250:	1000b326 	beq	r2,zero,800a520 <_dtoa_r+0xda0>
 800a254:	00c00804 	movi	r3,32
 800a258:	1887c83a 	sub	r3,r3,r2
 800a25c:	01000104 	movi	r4,4
 800a260:	20c2cd0e 	bge	r4,r3,800ad98 <_dtoa_r+0x1618>
 800a264:	00c00704 	movi	r3,28
 800a268:	1885c83a 	sub	r2,r3,r2
 800a26c:	d8c00817 	ldw	r3,32(sp)
 800a270:	a0a9883a 	add	r20,r20,r2
 800a274:	b0ad883a 	add	r22,r22,r2
 800a278:	1887883a 	add	r3,r3,r2
 800a27c:	d8c00815 	stw	r3,32(sp)
 800a280:	d9800817 	ldw	r6,32(sp)
 800a284:	0180040e 	bge	zero,r6,800a298 <_dtoa_r+0xb18>
 800a288:	800b883a 	mov	r5,r16
 800a28c:	e009883a 	mov	r4,fp
 800a290:	800d6740 	call	800d674 <__lshift>
 800a294:	1021883a 	mov	r16,r2
 800a298:	0580050e 	bge	zero,r22,800a2b0 <_dtoa_r+0xb30>
 800a29c:	a80b883a 	mov	r5,r21
 800a2a0:	b00d883a 	mov	r6,r22
 800a2a4:	e009883a 	mov	r4,fp
 800a2a8:	800d6740 	call	800d674 <__lshift>
 800a2ac:	102b883a 	mov	r21,r2
 800a2b0:	d9c00e17 	ldw	r7,56(sp)
 800a2b4:	3801211e 	bne	r7,zero,800a73c <_dtoa_r+0xfbc>
 800a2b8:	d9800617 	ldw	r6,24(sp)
 800a2bc:	0181380e 	bge	zero,r6,800a7a0 <_dtoa_r+0x1020>
 800a2c0:	d8c00b17 	ldw	r3,44(sp)
 800a2c4:	1800ab1e 	bne	r3,zero,800a574 <_dtoa_r+0xdf4>
 800a2c8:	dc800717 	ldw	r18,28(sp)
 800a2cc:	dcc00617 	ldw	r19,24(sp)
 800a2d0:	9029883a 	mov	r20,r18
 800a2d4:	00000206 	br	800a2e0 <_dtoa_r+0xb60>
 800a2d8:	800cf080 	call	800cf08 <__multadd>
 800a2dc:	1021883a 	mov	r16,r2
 800a2e0:	a80b883a 	mov	r5,r21
 800a2e4:	8009883a 	mov	r4,r16
 800a2e8:	80095580 	call	8009558 <quorem>
 800a2ec:	10800c04 	addi	r2,r2,48
 800a2f0:	90800005 	stb	r2,0(r18)
 800a2f4:	94800044 	addi	r18,r18,1
 800a2f8:	9507c83a 	sub	r3,r18,r20
 800a2fc:	000f883a 	mov	r7,zero
 800a300:	01800284 	movi	r6,10
 800a304:	800b883a 	mov	r5,r16
 800a308:	e009883a 	mov	r4,fp
 800a30c:	1cfff216 	blt	r3,r19,800a2d8 <__alt_data_end+0xfc00a2d8>
 800a310:	1011883a 	mov	r8,r2
 800a314:	d8800617 	ldw	r2,24(sp)
 800a318:	0082370e 	bge	zero,r2,800abf8 <_dtoa_r+0x1478>
 800a31c:	d9000717 	ldw	r4,28(sp)
 800a320:	0025883a 	mov	r18,zero
 800a324:	20af883a 	add	r23,r4,r2
 800a328:	01800044 	movi	r6,1
 800a32c:	800b883a 	mov	r5,r16
 800a330:	e009883a 	mov	r4,fp
 800a334:	da001715 	stw	r8,92(sp)
 800a338:	800d6740 	call	800d674 <__lshift>
 800a33c:	a80b883a 	mov	r5,r21
 800a340:	1009883a 	mov	r4,r2
 800a344:	d8800915 	stw	r2,36(sp)
 800a348:	800d7bc0 	call	800d7bc <__mcmp>
 800a34c:	da001717 	ldw	r8,92(sp)
 800a350:	0081800e 	bge	zero,r2,800a954 <_dtoa_r+0x11d4>
 800a354:	b93fffc3 	ldbu	r4,-1(r23)
 800a358:	b8bfffc4 	addi	r2,r23,-1
 800a35c:	1007883a 	mov	r3,r2
 800a360:	01800e44 	movi	r6,57
 800a364:	d9c00717 	ldw	r7,28(sp)
 800a368:	00000506 	br	800a380 <_dtoa_r+0xc00>
 800a36c:	18ffffc4 	addi	r3,r3,-1
 800a370:	11c12326 	beq	r2,r7,800a800 <_dtoa_r+0x1080>
 800a374:	19000003 	ldbu	r4,0(r3)
 800a378:	102f883a 	mov	r23,r2
 800a37c:	10bfffc4 	addi	r2,r2,-1
 800a380:	21403fcc 	andi	r5,r4,255
 800a384:	2940201c 	xori	r5,r5,128
 800a388:	297fe004 	addi	r5,r5,-128
 800a38c:	29bff726 	beq	r5,r6,800a36c <__alt_data_end+0xfc00a36c>
 800a390:	21000044 	addi	r4,r4,1
 800a394:	11000005 	stb	r4,0(r2)
 800a398:	a80b883a 	mov	r5,r21
 800a39c:	e009883a 	mov	r4,fp
 800a3a0:	800cee00 	call	800cee0 <_Bfree>
 800a3a4:	883ea026 	beq	r17,zero,8009e28 <__alt_data_end+0xfc009e28>
 800a3a8:	90000426 	beq	r18,zero,800a3bc <_dtoa_r+0xc3c>
 800a3ac:	94400326 	beq	r18,r17,800a3bc <_dtoa_r+0xc3c>
 800a3b0:	900b883a 	mov	r5,r18
 800a3b4:	e009883a 	mov	r4,fp
 800a3b8:	800cee00 	call	800cee0 <_Bfree>
 800a3bc:	880b883a 	mov	r5,r17
 800a3c0:	e009883a 	mov	r4,fp
 800a3c4:	800cee00 	call	800cee0 <_Bfree>
 800a3c8:	003e9706 	br	8009e28 <__alt_data_end+0xfc009e28>
 800a3cc:	01800044 	movi	r6,1
 800a3d0:	d9800e15 	stw	r6,56(sp)
 800a3d4:	003d9606 	br	8009a30 <__alt_data_end+0xfc009a30>
 800a3d8:	d8800817 	ldw	r2,32(sp)
 800a3dc:	d8c00517 	ldw	r3,20(sp)
 800a3e0:	d8000d15 	stw	zero,52(sp)
 800a3e4:	10c5c83a 	sub	r2,r2,r3
 800a3e8:	00c9c83a 	sub	r4,zero,r3
 800a3ec:	d8800815 	stw	r2,32(sp)
 800a3f0:	d9000a15 	stw	r4,40(sp)
 800a3f4:	003d9706 	br	8009a54 <__alt_data_end+0xfc009a54>
 800a3f8:	05adc83a 	sub	r22,zero,r22
 800a3fc:	dd800815 	stw	r22,32(sp)
 800a400:	002d883a 	mov	r22,zero
 800a404:	003d8e06 	br	8009a40 <__alt_data_end+0xfc009a40>
 800a408:	d9000517 	ldw	r4,20(sp)
 800a40c:	80150700 	call	8015070 <__floatsidf>
 800a410:	100d883a 	mov	r6,r2
 800a414:	180f883a 	mov	r7,r3
 800a418:	a009883a 	mov	r4,r20
 800a41c:	880b883a 	mov	r5,r17
 800a420:	8013c300 	call	8013c30 <__eqdf2>
 800a424:	103d7126 	beq	r2,zero,80099ec <__alt_data_end+0xfc0099ec>
 800a428:	d9c00517 	ldw	r7,20(sp)
 800a42c:	39ffffc4 	addi	r7,r7,-1
 800a430:	d9c00515 	stw	r7,20(sp)
 800a434:	003d6d06 	br	80099ec <__alt_data_end+0xfc0099ec>
 800a438:	dd400a17 	ldw	r21,40(sp)
 800a43c:	dd000817 	ldw	r20,32(sp)
 800a440:	0023883a 	mov	r17,zero
 800a444:	003f4806 	br	800a168 <__alt_data_end+0xfc00a168>
 800a448:	10e3c83a 	sub	r17,r2,r3
 800a44c:	9448983a 	sll	r4,r18,r17
 800a450:	003d3206 	br	800991c <__alt_data_end+0xfc00991c>
 800a454:	d8000e15 	stw	zero,56(sp)
 800a458:	003d7506 	br	8009a30 <__alt_data_end+0xfc009a30>
 800a45c:	b005883a 	mov	r2,r22
 800a460:	003f4506 	br	800a178 <__alt_data_end+0xfc00a178>
 800a464:	dc000915 	stw	r16,36(sp)
 800a468:	d9800a17 	ldw	r6,40(sp)
 800a46c:	d9400917 	ldw	r5,36(sp)
 800a470:	e009883a 	mov	r4,fp
 800a474:	800d5340 	call	800d534 <__pow5mult>
 800a478:	1021883a 	mov	r16,r2
 800a47c:	003f5a06 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a480:	01c00044 	movi	r7,1
 800a484:	d9c00b15 	stw	r7,44(sp)
 800a488:	d8802217 	ldw	r2,136(sp)
 800a48c:	0081280e 	bge	zero,r2,800a930 <_dtoa_r+0x11b0>
 800a490:	100d883a 	mov	r6,r2
 800a494:	1021883a 	mov	r16,r2
 800a498:	d8800c15 	stw	r2,48(sp)
 800a49c:	d8800615 	stw	r2,24(sp)
 800a4a0:	003d8806 	br	8009ac4 <__alt_data_end+0xfc009ac4>
 800a4a4:	d8800617 	ldw	r2,24(sp)
 800a4a8:	00be9b16 	blt	zero,r2,8009f18 <__alt_data_end+0xfc009f18>
 800a4ac:	10010f1e 	bne	r2,zero,800a8ec <_dtoa_r+0x116c>
 800a4b0:	880b883a 	mov	r5,r17
 800a4b4:	000d883a 	mov	r6,zero
 800a4b8:	01d00534 	movhi	r7,16404
 800a4bc:	8009883a 	mov	r4,r16
 800a4c0:	8013e880 	call	8013e88 <__muldf3>
 800a4c4:	900d883a 	mov	r6,r18
 800a4c8:	980f883a 	mov	r7,r19
 800a4cc:	1009883a 	mov	r4,r2
 800a4d0:	180b883a 	mov	r5,r3
 800a4d4:	8013cb80 	call	8013cb8 <__gedf2>
 800a4d8:	002b883a 	mov	r21,zero
 800a4dc:	0023883a 	mov	r17,zero
 800a4e0:	1000bf16 	blt	r2,zero,800a7e0 <_dtoa_r+0x1060>
 800a4e4:	d9802217 	ldw	r6,136(sp)
 800a4e8:	ddc00717 	ldw	r23,28(sp)
 800a4ec:	018c303a 	nor	r6,zero,r6
 800a4f0:	d9800515 	stw	r6,20(sp)
 800a4f4:	a80b883a 	mov	r5,r21
 800a4f8:	e009883a 	mov	r4,fp
 800a4fc:	800cee00 	call	800cee0 <_Bfree>
 800a500:	883e4926 	beq	r17,zero,8009e28 <__alt_data_end+0xfc009e28>
 800a504:	003fad06 	br	800a3bc <__alt_data_end+0xfc00a3bc>
 800a508:	d9c01117 	ldw	r7,68(sp)
 800a50c:	3801bc26 	beq	r7,zero,800ac00 <_dtoa_r+0x1480>
 800a510:	10810cc4 	addi	r2,r2,1075
 800a514:	dd400a17 	ldw	r21,40(sp)
 800a518:	dd000817 	ldw	r20,32(sp)
 800a51c:	003f0a06 	br	800a148 <__alt_data_end+0xfc00a148>
 800a520:	00800704 	movi	r2,28
 800a524:	d9000817 	ldw	r4,32(sp)
 800a528:	a0a9883a 	add	r20,r20,r2
 800a52c:	b0ad883a 	add	r22,r22,r2
 800a530:	2089883a 	add	r4,r4,r2
 800a534:	d9000815 	stw	r4,32(sp)
 800a538:	003f5106 	br	800a280 <__alt_data_end+0xfc00a280>
 800a53c:	d8c00317 	ldw	r3,12(sp)
 800a540:	b8c1fc0e 	bge	r23,r3,800ad34 <_dtoa_r+0x15b4>
 800a544:	0027883a 	mov	r19,zero
 800a548:	b805883a 	mov	r2,r23
 800a54c:	003f3e06 	br	800a248 <__alt_data_end+0xfc00a248>
 800a550:	880b883a 	mov	r5,r17
 800a554:	e009883a 	mov	r4,fp
 800a558:	000f883a 	mov	r7,zero
 800a55c:	01800284 	movi	r6,10
 800a560:	800cf080 	call	800cf08 <__multadd>
 800a564:	d9000c17 	ldw	r4,48(sp)
 800a568:	1023883a 	mov	r17,r2
 800a56c:	0102040e 	bge	zero,r4,800ad80 <_dtoa_r+0x1600>
 800a570:	d9000615 	stw	r4,24(sp)
 800a574:	0500050e 	bge	zero,r20,800a58c <_dtoa_r+0xe0c>
 800a578:	880b883a 	mov	r5,r17
 800a57c:	a00d883a 	mov	r6,r20
 800a580:	e009883a 	mov	r4,fp
 800a584:	800d6740 	call	800d674 <__lshift>
 800a588:	1023883a 	mov	r17,r2
 800a58c:	9801241e 	bne	r19,zero,800aa20 <_dtoa_r+0x12a0>
 800a590:	8829883a 	mov	r20,r17
 800a594:	d9000617 	ldw	r4,24(sp)
 800a598:	dcc00717 	ldw	r19,28(sp)
 800a59c:	9480004c 	andi	r18,r18,1
 800a5a0:	20bfffc4 	addi	r2,r4,-1
 800a5a4:	9885883a 	add	r2,r19,r2
 800a5a8:	d8800415 	stw	r2,16(sp)
 800a5ac:	dc800615 	stw	r18,24(sp)
 800a5b0:	a80b883a 	mov	r5,r21
 800a5b4:	8009883a 	mov	r4,r16
 800a5b8:	80095580 	call	8009558 <quorem>
 800a5bc:	880b883a 	mov	r5,r17
 800a5c0:	8009883a 	mov	r4,r16
 800a5c4:	102f883a 	mov	r23,r2
 800a5c8:	800d7bc0 	call	800d7bc <__mcmp>
 800a5cc:	a80b883a 	mov	r5,r21
 800a5d0:	a00d883a 	mov	r6,r20
 800a5d4:	e009883a 	mov	r4,fp
 800a5d8:	102d883a 	mov	r22,r2
 800a5dc:	800d81c0 	call	800d81c <__mdiff>
 800a5e0:	1007883a 	mov	r3,r2
 800a5e4:	10800317 	ldw	r2,12(r2)
 800a5e8:	bc800c04 	addi	r18,r23,48
 800a5ec:	180b883a 	mov	r5,r3
 800a5f0:	10004e1e 	bne	r2,zero,800a72c <_dtoa_r+0xfac>
 800a5f4:	8009883a 	mov	r4,r16
 800a5f8:	d8c01615 	stw	r3,88(sp)
 800a5fc:	800d7bc0 	call	800d7bc <__mcmp>
 800a600:	d8c01617 	ldw	r3,88(sp)
 800a604:	e009883a 	mov	r4,fp
 800a608:	d8801615 	stw	r2,88(sp)
 800a60c:	180b883a 	mov	r5,r3
 800a610:	800cee00 	call	800cee0 <_Bfree>
 800a614:	d8801617 	ldw	r2,88(sp)
 800a618:	1000041e 	bne	r2,zero,800a62c <_dtoa_r+0xeac>
 800a61c:	d9800317 	ldw	r6,12(sp)
 800a620:	3000021e 	bne	r6,zero,800a62c <_dtoa_r+0xeac>
 800a624:	d8c00617 	ldw	r3,24(sp)
 800a628:	18003726 	beq	r3,zero,800a708 <_dtoa_r+0xf88>
 800a62c:	b0002016 	blt	r22,zero,800a6b0 <_dtoa_r+0xf30>
 800a630:	b000041e 	bne	r22,zero,800a644 <_dtoa_r+0xec4>
 800a634:	d9000317 	ldw	r4,12(sp)
 800a638:	2000021e 	bne	r4,zero,800a644 <_dtoa_r+0xec4>
 800a63c:	d8c00617 	ldw	r3,24(sp)
 800a640:	18001b26 	beq	r3,zero,800a6b0 <_dtoa_r+0xf30>
 800a644:	00810716 	blt	zero,r2,800aa64 <_dtoa_r+0x12e4>
 800a648:	d8c00417 	ldw	r3,16(sp)
 800a64c:	9d800044 	addi	r22,r19,1
 800a650:	9c800005 	stb	r18,0(r19)
 800a654:	b02f883a 	mov	r23,r22
 800a658:	98c10626 	beq	r19,r3,800aa74 <_dtoa_r+0x12f4>
 800a65c:	800b883a 	mov	r5,r16
 800a660:	000f883a 	mov	r7,zero
 800a664:	01800284 	movi	r6,10
 800a668:	e009883a 	mov	r4,fp
 800a66c:	800cf080 	call	800cf08 <__multadd>
 800a670:	1021883a 	mov	r16,r2
 800a674:	000f883a 	mov	r7,zero
 800a678:	01800284 	movi	r6,10
 800a67c:	880b883a 	mov	r5,r17
 800a680:	e009883a 	mov	r4,fp
 800a684:	8d002526 	beq	r17,r20,800a71c <_dtoa_r+0xf9c>
 800a688:	800cf080 	call	800cf08 <__multadd>
 800a68c:	a00b883a 	mov	r5,r20
 800a690:	000f883a 	mov	r7,zero
 800a694:	01800284 	movi	r6,10
 800a698:	e009883a 	mov	r4,fp
 800a69c:	1023883a 	mov	r17,r2
 800a6a0:	800cf080 	call	800cf08 <__multadd>
 800a6a4:	1029883a 	mov	r20,r2
 800a6a8:	b027883a 	mov	r19,r22
 800a6ac:	003fc006 	br	800a5b0 <__alt_data_end+0xfc00a5b0>
 800a6b0:	9011883a 	mov	r8,r18
 800a6b4:	00800e0e 	bge	zero,r2,800a6f0 <_dtoa_r+0xf70>
 800a6b8:	800b883a 	mov	r5,r16
 800a6bc:	01800044 	movi	r6,1
 800a6c0:	e009883a 	mov	r4,fp
 800a6c4:	da001715 	stw	r8,92(sp)
 800a6c8:	800d6740 	call	800d674 <__lshift>
 800a6cc:	a80b883a 	mov	r5,r21
 800a6d0:	1009883a 	mov	r4,r2
 800a6d4:	1021883a 	mov	r16,r2
 800a6d8:	800d7bc0 	call	800d7bc <__mcmp>
 800a6dc:	da001717 	ldw	r8,92(sp)
 800a6e0:	0081960e 	bge	zero,r2,800ad3c <_dtoa_r+0x15bc>
 800a6e4:	00800e44 	movi	r2,57
 800a6e8:	40817026 	beq	r8,r2,800acac <_dtoa_r+0x152c>
 800a6ec:	ba000c44 	addi	r8,r23,49
 800a6f0:	8825883a 	mov	r18,r17
 800a6f4:	9dc00044 	addi	r23,r19,1
 800a6f8:	9a000005 	stb	r8,0(r19)
 800a6fc:	a023883a 	mov	r17,r20
 800a700:	dc000915 	stw	r16,36(sp)
 800a704:	003f2406 	br	800a398 <__alt_data_end+0xfc00a398>
 800a708:	00800e44 	movi	r2,57
 800a70c:	9011883a 	mov	r8,r18
 800a710:	90816626 	beq	r18,r2,800acac <_dtoa_r+0x152c>
 800a714:	05bff516 	blt	zero,r22,800a6ec <__alt_data_end+0xfc00a6ec>
 800a718:	003ff506 	br	800a6f0 <__alt_data_end+0xfc00a6f0>
 800a71c:	800cf080 	call	800cf08 <__multadd>
 800a720:	1023883a 	mov	r17,r2
 800a724:	1029883a 	mov	r20,r2
 800a728:	003fdf06 	br	800a6a8 <__alt_data_end+0xfc00a6a8>
 800a72c:	e009883a 	mov	r4,fp
 800a730:	800cee00 	call	800cee0 <_Bfree>
 800a734:	00800044 	movi	r2,1
 800a738:	003fbc06 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a73c:	a80b883a 	mov	r5,r21
 800a740:	8009883a 	mov	r4,r16
 800a744:	800d7bc0 	call	800d7bc <__mcmp>
 800a748:	103edb0e 	bge	r2,zero,800a2b8 <__alt_data_end+0xfc00a2b8>
 800a74c:	800b883a 	mov	r5,r16
 800a750:	000f883a 	mov	r7,zero
 800a754:	01800284 	movi	r6,10
 800a758:	e009883a 	mov	r4,fp
 800a75c:	800cf080 	call	800cf08 <__multadd>
 800a760:	1021883a 	mov	r16,r2
 800a764:	d8800517 	ldw	r2,20(sp)
 800a768:	d8c00b17 	ldw	r3,44(sp)
 800a76c:	10bfffc4 	addi	r2,r2,-1
 800a770:	d8800515 	stw	r2,20(sp)
 800a774:	183f761e 	bne	r3,zero,800a550 <__alt_data_end+0xfc00a550>
 800a778:	d9000c17 	ldw	r4,48(sp)
 800a77c:	0101730e 	bge	zero,r4,800ad4c <_dtoa_r+0x15cc>
 800a780:	d9000615 	stw	r4,24(sp)
 800a784:	003ed006 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800a788:	00800084 	movi	r2,2
 800a78c:	3081861e 	bne	r6,r2,800ada8 <_dtoa_r+0x1628>
 800a790:	d8000b15 	stw	zero,44(sp)
 800a794:	003f3c06 	br	800a488 <__alt_data_end+0xfc00a488>
 800a798:	dc000917 	ldw	r16,36(sp)
 800a79c:	003e9206 	br	800a1e8 <__alt_data_end+0xfc00a1e8>
 800a7a0:	d9c00317 	ldw	r7,12(sp)
 800a7a4:	00800084 	movi	r2,2
 800a7a8:	11fec50e 	bge	r2,r7,800a2c0 <__alt_data_end+0xfc00a2c0>
 800a7ac:	d9000617 	ldw	r4,24(sp)
 800a7b0:	20013c1e 	bne	r4,zero,800aca4 <_dtoa_r+0x1524>
 800a7b4:	a80b883a 	mov	r5,r21
 800a7b8:	000f883a 	mov	r7,zero
 800a7bc:	01800144 	movi	r6,5
 800a7c0:	e009883a 	mov	r4,fp
 800a7c4:	800cf080 	call	800cf08 <__multadd>
 800a7c8:	100b883a 	mov	r5,r2
 800a7cc:	8009883a 	mov	r4,r16
 800a7d0:	102b883a 	mov	r21,r2
 800a7d4:	800d7bc0 	call	800d7bc <__mcmp>
 800a7d8:	dc000915 	stw	r16,36(sp)
 800a7dc:	00bf410e 	bge	zero,r2,800a4e4 <__alt_data_end+0xfc00a4e4>
 800a7e0:	d9c00717 	ldw	r7,28(sp)
 800a7e4:	00800c44 	movi	r2,49
 800a7e8:	38800005 	stb	r2,0(r7)
 800a7ec:	d8800517 	ldw	r2,20(sp)
 800a7f0:	3dc00044 	addi	r23,r7,1
 800a7f4:	10800044 	addi	r2,r2,1
 800a7f8:	d8800515 	stw	r2,20(sp)
 800a7fc:	003f3d06 	br	800a4f4 <__alt_data_end+0xfc00a4f4>
 800a800:	d9800517 	ldw	r6,20(sp)
 800a804:	d9c00717 	ldw	r7,28(sp)
 800a808:	00800c44 	movi	r2,49
 800a80c:	31800044 	addi	r6,r6,1
 800a810:	d9800515 	stw	r6,20(sp)
 800a814:	38800005 	stb	r2,0(r7)
 800a818:	003edf06 	br	800a398 <__alt_data_end+0xfc00a398>
 800a81c:	d8000b15 	stw	zero,44(sp)
 800a820:	003c9f06 	br	8009aa0 <__alt_data_end+0xfc009aa0>
 800a824:	903e7e1e 	bne	r18,zero,800a220 <__alt_data_end+0xfc00a220>
 800a828:	00800434 	movhi	r2,16
 800a82c:	10bfffc4 	addi	r2,r2,-1
 800a830:	9884703a 	and	r2,r19,r2
 800a834:	1000ea1e 	bne	r2,zero,800abe0 <_dtoa_r+0x1460>
 800a838:	9cdffc2c 	andhi	r19,r19,32752
 800a83c:	9800e826 	beq	r19,zero,800abe0 <_dtoa_r+0x1460>
 800a840:	d9c00817 	ldw	r7,32(sp)
 800a844:	b5800044 	addi	r22,r22,1
 800a848:	04c00044 	movi	r19,1
 800a84c:	39c00044 	addi	r7,r7,1
 800a850:	d9c00815 	stw	r7,32(sp)
 800a854:	d8800d17 	ldw	r2,52(sp)
 800a858:	103e721e 	bne	r2,zero,800a224 <__alt_data_end+0xfc00a224>
 800a85c:	00800044 	movi	r2,1
 800a860:	003e7906 	br	800a248 <__alt_data_end+0xfc00a248>
 800a864:	8009883a 	mov	r4,r16
 800a868:	80150700 	call	8015070 <__floatsidf>
 800a86c:	d9800f17 	ldw	r6,60(sp)
 800a870:	d9c01017 	ldw	r7,64(sp)
 800a874:	1009883a 	mov	r4,r2
 800a878:	180b883a 	mov	r5,r3
 800a87c:	8013e880 	call	8013e88 <__muldf3>
 800a880:	000d883a 	mov	r6,zero
 800a884:	01d00734 	movhi	r7,16412
 800a888:	1009883a 	mov	r4,r2
 800a88c:	180b883a 	mov	r5,r3
 800a890:	80129b40 	call	80129b4 <__adddf3>
 800a894:	047f3034 	movhi	r17,64704
 800a898:	1021883a 	mov	r16,r2
 800a89c:	1c63883a 	add	r17,r3,r17
 800a8a0:	d9000f17 	ldw	r4,60(sp)
 800a8a4:	d9401017 	ldw	r5,64(sp)
 800a8a8:	000d883a 	mov	r6,zero
 800a8ac:	01d00534 	movhi	r7,16404
 800a8b0:	80146f40 	call	80146f4 <__subdf3>
 800a8b4:	800d883a 	mov	r6,r16
 800a8b8:	880f883a 	mov	r7,r17
 800a8bc:	1009883a 	mov	r4,r2
 800a8c0:	180b883a 	mov	r5,r3
 800a8c4:	102b883a 	mov	r21,r2
 800a8c8:	1829883a 	mov	r20,r3
 800a8cc:	8013cb80 	call	8013cb8 <__gedf2>
 800a8d0:	00806c16 	blt	zero,r2,800aa84 <_dtoa_r+0x1304>
 800a8d4:	89e0003c 	xorhi	r7,r17,32768
 800a8d8:	800d883a 	mov	r6,r16
 800a8dc:	a809883a 	mov	r4,r21
 800a8e0:	a00b883a 	mov	r5,r20
 800a8e4:	8013d940 	call	8013d94 <__ledf2>
 800a8e8:	103d7e0e 	bge	r2,zero,8009ee4 <__alt_data_end+0xfc009ee4>
 800a8ec:	002b883a 	mov	r21,zero
 800a8f0:	0023883a 	mov	r17,zero
 800a8f4:	003efb06 	br	800a4e4 <__alt_data_end+0xfc00a4e4>
 800a8f8:	d8800717 	ldw	r2,28(sp)
 800a8fc:	003bd006 	br	8009840 <__alt_data_end+0xfc009840>
 800a900:	d9000a17 	ldw	r4,40(sp)
 800a904:	d9800d17 	ldw	r6,52(sp)
 800a908:	dd400a15 	stw	r21,40(sp)
 800a90c:	a905c83a 	sub	r2,r21,r4
 800a910:	308d883a 	add	r6,r6,r2
 800a914:	d9800d15 	stw	r6,52(sp)
 800a918:	002b883a 	mov	r21,zero
 800a91c:	003e0606 	br	800a138 <__alt_data_end+0xfc00a138>
 800a920:	9023883a 	mov	r17,r18
 800a924:	9829883a 	mov	r20,r19
 800a928:	04000084 	movi	r16,2
 800a92c:	003c9206 	br	8009b78 <__alt_data_end+0xfc009b78>
 800a930:	04000044 	movi	r16,1
 800a934:	dc000c15 	stw	r16,48(sp)
 800a938:	dc000615 	stw	r16,24(sp)
 800a93c:	dc002215 	stw	r16,136(sp)
 800a940:	e0001115 	stw	zero,68(fp)
 800a944:	000b883a 	mov	r5,zero
 800a948:	003c6906 	br	8009af0 <__alt_data_end+0xfc009af0>
 800a94c:	3021883a 	mov	r16,r6
 800a950:	003ffb06 	br	800a940 <__alt_data_end+0xfc00a940>
 800a954:	1000021e 	bne	r2,zero,800a960 <_dtoa_r+0x11e0>
 800a958:	4200004c 	andi	r8,r8,1
 800a95c:	403e7d1e 	bne	r8,zero,800a354 <__alt_data_end+0xfc00a354>
 800a960:	01000c04 	movi	r4,48
 800a964:	00000106 	br	800a96c <_dtoa_r+0x11ec>
 800a968:	102f883a 	mov	r23,r2
 800a96c:	b8bfffc4 	addi	r2,r23,-1
 800a970:	10c00007 	ldb	r3,0(r2)
 800a974:	193ffc26 	beq	r3,r4,800a968 <__alt_data_end+0xfc00a968>
 800a978:	003e8706 	br	800a398 <__alt_data_end+0xfc00a398>
 800a97c:	d8800517 	ldw	r2,20(sp)
 800a980:	00a3c83a 	sub	r17,zero,r2
 800a984:	8800a426 	beq	r17,zero,800ac18 <_dtoa_r+0x1498>
 800a988:	888003cc 	andi	r2,r17,15
 800a98c:	100490fa 	slli	r2,r2,3
 800a990:	00c200b4 	movhi	r3,2050
 800a994:	18e02004 	addi	r3,r3,-32640
 800a998:	1885883a 	add	r2,r3,r2
 800a99c:	11800017 	ldw	r6,0(r2)
 800a9a0:	11c00117 	ldw	r7,4(r2)
 800a9a4:	9009883a 	mov	r4,r18
 800a9a8:	980b883a 	mov	r5,r19
 800a9ac:	8823d13a 	srai	r17,r17,4
 800a9b0:	8013e880 	call	8013e88 <__muldf3>
 800a9b4:	d8800f15 	stw	r2,60(sp)
 800a9b8:	d8c01015 	stw	r3,64(sp)
 800a9bc:	8800e826 	beq	r17,zero,800ad60 <_dtoa_r+0x15e0>
 800a9c0:	050200b4 	movhi	r20,2050
 800a9c4:	a5201604 	addi	r20,r20,-32680
 800a9c8:	04000084 	movi	r16,2
 800a9cc:	8980004c 	andi	r6,r17,1
 800a9d0:	1009883a 	mov	r4,r2
 800a9d4:	8823d07a 	srai	r17,r17,1
 800a9d8:	180b883a 	mov	r5,r3
 800a9dc:	30000426 	beq	r6,zero,800a9f0 <_dtoa_r+0x1270>
 800a9e0:	a1800017 	ldw	r6,0(r20)
 800a9e4:	a1c00117 	ldw	r7,4(r20)
 800a9e8:	84000044 	addi	r16,r16,1
 800a9ec:	8013e880 	call	8013e88 <__muldf3>
 800a9f0:	a5000204 	addi	r20,r20,8
 800a9f4:	883ff51e 	bne	r17,zero,800a9cc <__alt_data_end+0xfc00a9cc>
 800a9f8:	d8800f15 	stw	r2,60(sp)
 800a9fc:	d8c01015 	stw	r3,64(sp)
 800aa00:	003c7606 	br	8009bdc <__alt_data_end+0xfc009bdc>
 800aa04:	00c00c04 	movi	r3,48
 800aa08:	10c00005 	stb	r3,0(r2)
 800aa0c:	d8c00517 	ldw	r3,20(sp)
 800aa10:	bd3fffc3 	ldbu	r20,-1(r23)
 800aa14:	18c00044 	addi	r3,r3,1
 800aa18:	d8c00515 	stw	r3,20(sp)
 800aa1c:	003db906 	br	800a104 <__alt_data_end+0xfc00a104>
 800aa20:	89400117 	ldw	r5,4(r17)
 800aa24:	e009883a 	mov	r4,fp
 800aa28:	800ce380 	call	800ce38 <_Balloc>
 800aa2c:	89800417 	ldw	r6,16(r17)
 800aa30:	89400304 	addi	r5,r17,12
 800aa34:	11000304 	addi	r4,r2,12
 800aa38:	31800084 	addi	r6,r6,2
 800aa3c:	318d883a 	add	r6,r6,r6
 800aa40:	318d883a 	add	r6,r6,r6
 800aa44:	1027883a 	mov	r19,r2
 800aa48:	800ca6c0 	call	800ca6c <memcpy>
 800aa4c:	01800044 	movi	r6,1
 800aa50:	980b883a 	mov	r5,r19
 800aa54:	e009883a 	mov	r4,fp
 800aa58:	800d6740 	call	800d674 <__lshift>
 800aa5c:	1029883a 	mov	r20,r2
 800aa60:	003ecc06 	br	800a594 <__alt_data_end+0xfc00a594>
 800aa64:	00800e44 	movi	r2,57
 800aa68:	90809026 	beq	r18,r2,800acac <_dtoa_r+0x152c>
 800aa6c:	92000044 	addi	r8,r18,1
 800aa70:	003f1f06 	br	800a6f0 <__alt_data_end+0xfc00a6f0>
 800aa74:	9011883a 	mov	r8,r18
 800aa78:	8825883a 	mov	r18,r17
 800aa7c:	a023883a 	mov	r17,r20
 800aa80:	003e2906 	br	800a328 <__alt_data_end+0xfc00a328>
 800aa84:	002b883a 	mov	r21,zero
 800aa88:	0023883a 	mov	r17,zero
 800aa8c:	003f5406 	br	800a7e0 <__alt_data_end+0xfc00a7e0>
 800aa90:	61bfffc4 	addi	r6,r12,-1
 800aa94:	300490fa 	slli	r2,r6,3
 800aa98:	00c200b4 	movhi	r3,2050
 800aa9c:	18e02004 	addi	r3,r3,-32640
 800aaa0:	1885883a 	add	r2,r3,r2
 800aaa4:	11000017 	ldw	r4,0(r2)
 800aaa8:	11400117 	ldw	r5,4(r2)
 800aaac:	d8800717 	ldw	r2,28(sp)
 800aab0:	880f883a 	mov	r7,r17
 800aab4:	d9801215 	stw	r6,72(sp)
 800aab8:	800d883a 	mov	r6,r16
 800aabc:	db001615 	stw	r12,88(sp)
 800aac0:	15c00044 	addi	r23,r2,1
 800aac4:	8013e880 	call	8013e88 <__muldf3>
 800aac8:	d9401017 	ldw	r5,64(sp)
 800aacc:	d9000f17 	ldw	r4,60(sp)
 800aad0:	d8c01515 	stw	r3,84(sp)
 800aad4:	d8801415 	stw	r2,80(sp)
 800aad8:	8014ff00 	call	8014ff0 <__fixdfsi>
 800aadc:	1009883a 	mov	r4,r2
 800aae0:	1021883a 	mov	r16,r2
 800aae4:	80150700 	call	8015070 <__floatsidf>
 800aae8:	d9000f17 	ldw	r4,60(sp)
 800aaec:	d9401017 	ldw	r5,64(sp)
 800aaf0:	100d883a 	mov	r6,r2
 800aaf4:	180f883a 	mov	r7,r3
 800aaf8:	80146f40 	call	80146f4 <__subdf3>
 800aafc:	1829883a 	mov	r20,r3
 800ab00:	d8c00717 	ldw	r3,28(sp)
 800ab04:	84000c04 	addi	r16,r16,48
 800ab08:	1023883a 	mov	r17,r2
 800ab0c:	1c000005 	stb	r16,0(r3)
 800ab10:	db001617 	ldw	r12,88(sp)
 800ab14:	00800044 	movi	r2,1
 800ab18:	60802226 	beq	r12,r2,800aba4 <_dtoa_r+0x1424>
 800ab1c:	d9c00717 	ldw	r7,28(sp)
 800ab20:	8805883a 	mov	r2,r17
 800ab24:	b82b883a 	mov	r21,r23
 800ab28:	3b19883a 	add	r12,r7,r12
 800ab2c:	6023883a 	mov	r17,r12
 800ab30:	a007883a 	mov	r3,r20
 800ab34:	dc800f15 	stw	r18,60(sp)
 800ab38:	000d883a 	mov	r6,zero
 800ab3c:	01d00934 	movhi	r7,16420
 800ab40:	1009883a 	mov	r4,r2
 800ab44:	180b883a 	mov	r5,r3
 800ab48:	8013e880 	call	8013e88 <__muldf3>
 800ab4c:	180b883a 	mov	r5,r3
 800ab50:	1009883a 	mov	r4,r2
 800ab54:	1829883a 	mov	r20,r3
 800ab58:	1025883a 	mov	r18,r2
 800ab5c:	8014ff00 	call	8014ff0 <__fixdfsi>
 800ab60:	1009883a 	mov	r4,r2
 800ab64:	1021883a 	mov	r16,r2
 800ab68:	80150700 	call	8015070 <__floatsidf>
 800ab6c:	100d883a 	mov	r6,r2
 800ab70:	180f883a 	mov	r7,r3
 800ab74:	9009883a 	mov	r4,r18
 800ab78:	a00b883a 	mov	r5,r20
 800ab7c:	84000c04 	addi	r16,r16,48
 800ab80:	80146f40 	call	80146f4 <__subdf3>
 800ab84:	ad400044 	addi	r21,r21,1
 800ab88:	ac3fffc5 	stb	r16,-1(r21)
 800ab8c:	ac7fea1e 	bne	r21,r17,800ab38 <__alt_data_end+0xfc00ab38>
 800ab90:	1023883a 	mov	r17,r2
 800ab94:	d8801217 	ldw	r2,72(sp)
 800ab98:	dc800f17 	ldw	r18,60(sp)
 800ab9c:	1829883a 	mov	r20,r3
 800aba0:	b8af883a 	add	r23,r23,r2
 800aba4:	d9001417 	ldw	r4,80(sp)
 800aba8:	d9401517 	ldw	r5,84(sp)
 800abac:	000d883a 	mov	r6,zero
 800abb0:	01cff834 	movhi	r7,16352
 800abb4:	80129b40 	call	80129b4 <__adddf3>
 800abb8:	880d883a 	mov	r6,r17
 800abbc:	a00f883a 	mov	r7,r20
 800abc0:	1009883a 	mov	r4,r2
 800abc4:	180b883a 	mov	r5,r3
 800abc8:	8013d940 	call	8013d94 <__ledf2>
 800abcc:	10003e0e 	bge	r2,zero,800acc8 <_dtoa_r+0x1548>
 800abd0:	d9001317 	ldw	r4,76(sp)
 800abd4:	bd3fffc3 	ldbu	r20,-1(r23)
 800abd8:	d9000515 	stw	r4,20(sp)
 800abdc:	003d3b06 	br	800a0cc <__alt_data_end+0xfc00a0cc>
 800abe0:	0027883a 	mov	r19,zero
 800abe4:	003f1b06 	br	800a854 <__alt_data_end+0xfc00a854>
 800abe8:	d8800817 	ldw	r2,32(sp)
 800abec:	11e9c83a 	sub	r20,r2,r7
 800abf0:	0005883a 	mov	r2,zero
 800abf4:	003d5406 	br	800a148 <__alt_data_end+0xfc00a148>
 800abf8:	00800044 	movi	r2,1
 800abfc:	003dc706 	br	800a31c <__alt_data_end+0xfc00a31c>
 800ac00:	d8c00217 	ldw	r3,8(sp)
 800ac04:	00800d84 	movi	r2,54
 800ac08:	dd400a17 	ldw	r21,40(sp)
 800ac0c:	10c5c83a 	sub	r2,r2,r3
 800ac10:	dd000817 	ldw	r20,32(sp)
 800ac14:	003d4c06 	br	800a148 <__alt_data_end+0xfc00a148>
 800ac18:	dc800f15 	stw	r18,60(sp)
 800ac1c:	dcc01015 	stw	r19,64(sp)
 800ac20:	04000084 	movi	r16,2
 800ac24:	003bed06 	br	8009bdc <__alt_data_end+0xfc009bdc>
 800ac28:	d9000617 	ldw	r4,24(sp)
 800ac2c:	203f0d26 	beq	r4,zero,800a864 <__alt_data_end+0xfc00a864>
 800ac30:	d9800c17 	ldw	r6,48(sp)
 800ac34:	01bcab0e 	bge	zero,r6,8009ee4 <__alt_data_end+0xfc009ee4>
 800ac38:	d9401017 	ldw	r5,64(sp)
 800ac3c:	d9000f17 	ldw	r4,60(sp)
 800ac40:	000d883a 	mov	r6,zero
 800ac44:	01d00934 	movhi	r7,16420
 800ac48:	8013e880 	call	8013e88 <__muldf3>
 800ac4c:	81000044 	addi	r4,r16,1
 800ac50:	d8800f15 	stw	r2,60(sp)
 800ac54:	d8c01015 	stw	r3,64(sp)
 800ac58:	80150700 	call	8015070 <__floatsidf>
 800ac5c:	d9800f17 	ldw	r6,60(sp)
 800ac60:	d9c01017 	ldw	r7,64(sp)
 800ac64:	1009883a 	mov	r4,r2
 800ac68:	180b883a 	mov	r5,r3
 800ac6c:	8013e880 	call	8013e88 <__muldf3>
 800ac70:	01d00734 	movhi	r7,16412
 800ac74:	000d883a 	mov	r6,zero
 800ac78:	1009883a 	mov	r4,r2
 800ac7c:	180b883a 	mov	r5,r3
 800ac80:	80129b40 	call	80129b4 <__adddf3>
 800ac84:	d9c00517 	ldw	r7,20(sp)
 800ac88:	047f3034 	movhi	r17,64704
 800ac8c:	1021883a 	mov	r16,r2
 800ac90:	39ffffc4 	addi	r7,r7,-1
 800ac94:	d9c01315 	stw	r7,76(sp)
 800ac98:	1c63883a 	add	r17,r3,r17
 800ac9c:	db000c17 	ldw	r12,48(sp)
 800aca0:	003bea06 	br	8009c4c <__alt_data_end+0xfc009c4c>
 800aca4:	dc000915 	stw	r16,36(sp)
 800aca8:	003e0e06 	br	800a4e4 <__alt_data_end+0xfc00a4e4>
 800acac:	01000e44 	movi	r4,57
 800acb0:	8825883a 	mov	r18,r17
 800acb4:	9dc00044 	addi	r23,r19,1
 800acb8:	99000005 	stb	r4,0(r19)
 800acbc:	a023883a 	mov	r17,r20
 800acc0:	dc000915 	stw	r16,36(sp)
 800acc4:	003da406 	br	800a358 <__alt_data_end+0xfc00a358>
 800acc8:	d9801417 	ldw	r6,80(sp)
 800accc:	d9c01517 	ldw	r7,84(sp)
 800acd0:	0009883a 	mov	r4,zero
 800acd4:	014ff834 	movhi	r5,16352
 800acd8:	80146f40 	call	80146f4 <__subdf3>
 800acdc:	880d883a 	mov	r6,r17
 800ace0:	a00f883a 	mov	r7,r20
 800ace4:	1009883a 	mov	r4,r2
 800ace8:	180b883a 	mov	r5,r3
 800acec:	8013cb80 	call	8013cb8 <__gedf2>
 800acf0:	00bc7c0e 	bge	zero,r2,8009ee4 <__alt_data_end+0xfc009ee4>
 800acf4:	01000c04 	movi	r4,48
 800acf8:	00000106 	br	800ad00 <_dtoa_r+0x1580>
 800acfc:	102f883a 	mov	r23,r2
 800ad00:	b8bfffc4 	addi	r2,r23,-1
 800ad04:	10c00007 	ldb	r3,0(r2)
 800ad08:	193ffc26 	beq	r3,r4,800acfc <__alt_data_end+0xfc00acfc>
 800ad0c:	d9801317 	ldw	r6,76(sp)
 800ad10:	d9800515 	stw	r6,20(sp)
 800ad14:	003c4406 	br	8009e28 <__alt_data_end+0xfc009e28>
 800ad18:	d9801317 	ldw	r6,76(sp)
 800ad1c:	d9800515 	stw	r6,20(sp)
 800ad20:	003cea06 	br	800a0cc <__alt_data_end+0xfc00a0cc>
 800ad24:	dd800f17 	ldw	r22,60(sp)
 800ad28:	dcc01017 	ldw	r19,64(sp)
 800ad2c:	dc801217 	ldw	r18,72(sp)
 800ad30:	003c6c06 	br	8009ee4 <__alt_data_end+0xfc009ee4>
 800ad34:	903e031e 	bne	r18,zero,800a544 <__alt_data_end+0xfc00a544>
 800ad38:	003ebb06 	br	800a828 <__alt_data_end+0xfc00a828>
 800ad3c:	103e6c1e 	bne	r2,zero,800a6f0 <__alt_data_end+0xfc00a6f0>
 800ad40:	4080004c 	andi	r2,r8,1
 800ad44:	103e6a26 	beq	r2,zero,800a6f0 <__alt_data_end+0xfc00a6f0>
 800ad48:	003e6606 	br	800a6e4 <__alt_data_end+0xfc00a6e4>
 800ad4c:	d8c00317 	ldw	r3,12(sp)
 800ad50:	00800084 	movi	r2,2
 800ad54:	10c02916 	blt	r2,r3,800adfc <_dtoa_r+0x167c>
 800ad58:	d9000c17 	ldw	r4,48(sp)
 800ad5c:	003e8806 	br	800a780 <__alt_data_end+0xfc00a780>
 800ad60:	04000084 	movi	r16,2
 800ad64:	003b9d06 	br	8009bdc <__alt_data_end+0xfc009bdc>
 800ad68:	d9001317 	ldw	r4,76(sp)
 800ad6c:	d9000515 	stw	r4,20(sp)
 800ad70:	003cd606 	br	800a0cc <__alt_data_end+0xfc00a0cc>
 800ad74:	d8801317 	ldw	r2,76(sp)
 800ad78:	d8800515 	stw	r2,20(sp)
 800ad7c:	003c2a06 	br	8009e28 <__alt_data_end+0xfc009e28>
 800ad80:	d9800317 	ldw	r6,12(sp)
 800ad84:	00800084 	movi	r2,2
 800ad88:	11801516 	blt	r2,r6,800ade0 <_dtoa_r+0x1660>
 800ad8c:	d9c00c17 	ldw	r7,48(sp)
 800ad90:	d9c00615 	stw	r7,24(sp)
 800ad94:	003df706 	br	800a574 <__alt_data_end+0xfc00a574>
 800ad98:	193d3926 	beq	r3,r4,800a280 <__alt_data_end+0xfc00a280>
 800ad9c:	00c00f04 	movi	r3,60
 800ada0:	1885c83a 	sub	r2,r3,r2
 800ada4:	003ddf06 	br	800a524 <__alt_data_end+0xfc00a524>
 800ada8:	e009883a 	mov	r4,fp
 800adac:	e0001115 	stw	zero,68(fp)
 800adb0:	000b883a 	mov	r5,zero
 800adb4:	800ce380 	call	800ce38 <_Balloc>
 800adb8:	d8800715 	stw	r2,28(sp)
 800adbc:	d8c00717 	ldw	r3,28(sp)
 800adc0:	00bfffc4 	movi	r2,-1
 800adc4:	01000044 	movi	r4,1
 800adc8:	d8800c15 	stw	r2,48(sp)
 800adcc:	e0c01015 	stw	r3,64(fp)
 800add0:	d9000b15 	stw	r4,44(sp)
 800add4:	d8800615 	stw	r2,24(sp)
 800add8:	d8002215 	stw	zero,136(sp)
 800addc:	003c4106 	br	8009ee4 <__alt_data_end+0xfc009ee4>
 800ade0:	d8c00c17 	ldw	r3,48(sp)
 800ade4:	d8c00615 	stw	r3,24(sp)
 800ade8:	003e7006 	br	800a7ac <__alt_data_end+0xfc00a7ac>
 800adec:	04400044 	movi	r17,1
 800adf0:	003b2006 	br	8009a74 <__alt_data_end+0xfc009a74>
 800adf4:	000b883a 	mov	r5,zero
 800adf8:	003b3d06 	br	8009af0 <__alt_data_end+0xfc009af0>
 800adfc:	d8800c17 	ldw	r2,48(sp)
 800ae00:	d8800615 	stw	r2,24(sp)
 800ae04:	003e6906 	br	800a7ac <__alt_data_end+0xfc00a7ac>

0800ae08 <__sflush_r>:
 800ae08:	2880030b 	ldhu	r2,12(r5)
 800ae0c:	defffb04 	addi	sp,sp,-20
 800ae10:	dcc00315 	stw	r19,12(sp)
 800ae14:	dc400115 	stw	r17,4(sp)
 800ae18:	dfc00415 	stw	ra,16(sp)
 800ae1c:	dc800215 	stw	r18,8(sp)
 800ae20:	dc000015 	stw	r16,0(sp)
 800ae24:	10c0020c 	andi	r3,r2,8
 800ae28:	2823883a 	mov	r17,r5
 800ae2c:	2027883a 	mov	r19,r4
 800ae30:	1800311e 	bne	r3,zero,800aef8 <__sflush_r+0xf0>
 800ae34:	28c00117 	ldw	r3,4(r5)
 800ae38:	10820014 	ori	r2,r2,2048
 800ae3c:	2880030d 	sth	r2,12(r5)
 800ae40:	00c04b0e 	bge	zero,r3,800af70 <__sflush_r+0x168>
 800ae44:	8a000a17 	ldw	r8,40(r17)
 800ae48:	40002326 	beq	r8,zero,800aed8 <__sflush_r+0xd0>
 800ae4c:	9c000017 	ldw	r16,0(r19)
 800ae50:	10c4000c 	andi	r3,r2,4096
 800ae54:	98000015 	stw	zero,0(r19)
 800ae58:	18004826 	beq	r3,zero,800af7c <__sflush_r+0x174>
 800ae5c:	89801417 	ldw	r6,80(r17)
 800ae60:	10c0010c 	andi	r3,r2,4
 800ae64:	18000626 	beq	r3,zero,800ae80 <__sflush_r+0x78>
 800ae68:	88c00117 	ldw	r3,4(r17)
 800ae6c:	88800c17 	ldw	r2,48(r17)
 800ae70:	30cdc83a 	sub	r6,r6,r3
 800ae74:	10000226 	beq	r2,zero,800ae80 <__sflush_r+0x78>
 800ae78:	88800f17 	ldw	r2,60(r17)
 800ae7c:	308dc83a 	sub	r6,r6,r2
 800ae80:	89400717 	ldw	r5,28(r17)
 800ae84:	000f883a 	mov	r7,zero
 800ae88:	9809883a 	mov	r4,r19
 800ae8c:	403ee83a 	callr	r8
 800ae90:	00ffffc4 	movi	r3,-1
 800ae94:	10c04426 	beq	r2,r3,800afa8 <__sflush_r+0x1a0>
 800ae98:	88c0030b 	ldhu	r3,12(r17)
 800ae9c:	89000417 	ldw	r4,16(r17)
 800aea0:	88000115 	stw	zero,4(r17)
 800aea4:	197dffcc 	andi	r5,r3,63487
 800aea8:	8940030d 	sth	r5,12(r17)
 800aeac:	89000015 	stw	r4,0(r17)
 800aeb0:	18c4000c 	andi	r3,r3,4096
 800aeb4:	18002c1e 	bne	r3,zero,800af68 <__sflush_r+0x160>
 800aeb8:	89400c17 	ldw	r5,48(r17)
 800aebc:	9c000015 	stw	r16,0(r19)
 800aec0:	28000526 	beq	r5,zero,800aed8 <__sflush_r+0xd0>
 800aec4:	88801004 	addi	r2,r17,64
 800aec8:	28800226 	beq	r5,r2,800aed4 <__sflush_r+0xcc>
 800aecc:	9809883a 	mov	r4,r19
 800aed0:	800b5840 	call	800b584 <_free_r>
 800aed4:	88000c15 	stw	zero,48(r17)
 800aed8:	0005883a 	mov	r2,zero
 800aedc:	dfc00417 	ldw	ra,16(sp)
 800aee0:	dcc00317 	ldw	r19,12(sp)
 800aee4:	dc800217 	ldw	r18,8(sp)
 800aee8:	dc400117 	ldw	r17,4(sp)
 800aeec:	dc000017 	ldw	r16,0(sp)
 800aef0:	dec00504 	addi	sp,sp,20
 800aef4:	f800283a 	ret
 800aef8:	2c800417 	ldw	r18,16(r5)
 800aefc:	903ff626 	beq	r18,zero,800aed8 <__alt_data_end+0xfc00aed8>
 800af00:	2c000017 	ldw	r16,0(r5)
 800af04:	108000cc 	andi	r2,r2,3
 800af08:	2c800015 	stw	r18,0(r5)
 800af0c:	84a1c83a 	sub	r16,r16,r18
 800af10:	1000131e 	bne	r2,zero,800af60 <__sflush_r+0x158>
 800af14:	28800517 	ldw	r2,20(r5)
 800af18:	88800215 	stw	r2,8(r17)
 800af1c:	04000316 	blt	zero,r16,800af2c <__sflush_r+0x124>
 800af20:	003fed06 	br	800aed8 <__alt_data_end+0xfc00aed8>
 800af24:	90a5883a 	add	r18,r18,r2
 800af28:	043feb0e 	bge	zero,r16,800aed8 <__alt_data_end+0xfc00aed8>
 800af2c:	88800917 	ldw	r2,36(r17)
 800af30:	89400717 	ldw	r5,28(r17)
 800af34:	800f883a 	mov	r7,r16
 800af38:	900d883a 	mov	r6,r18
 800af3c:	9809883a 	mov	r4,r19
 800af40:	103ee83a 	callr	r2
 800af44:	80a1c83a 	sub	r16,r16,r2
 800af48:	00bff616 	blt	zero,r2,800af24 <__alt_data_end+0xfc00af24>
 800af4c:	88c0030b 	ldhu	r3,12(r17)
 800af50:	00bfffc4 	movi	r2,-1
 800af54:	18c01014 	ori	r3,r3,64
 800af58:	88c0030d 	sth	r3,12(r17)
 800af5c:	003fdf06 	br	800aedc <__alt_data_end+0xfc00aedc>
 800af60:	0005883a 	mov	r2,zero
 800af64:	003fec06 	br	800af18 <__alt_data_end+0xfc00af18>
 800af68:	88801415 	stw	r2,80(r17)
 800af6c:	003fd206 	br	800aeb8 <__alt_data_end+0xfc00aeb8>
 800af70:	28c00f17 	ldw	r3,60(r5)
 800af74:	00ffb316 	blt	zero,r3,800ae44 <__alt_data_end+0xfc00ae44>
 800af78:	003fd706 	br	800aed8 <__alt_data_end+0xfc00aed8>
 800af7c:	89400717 	ldw	r5,28(r17)
 800af80:	000d883a 	mov	r6,zero
 800af84:	01c00044 	movi	r7,1
 800af88:	9809883a 	mov	r4,r19
 800af8c:	403ee83a 	callr	r8
 800af90:	100d883a 	mov	r6,r2
 800af94:	00bfffc4 	movi	r2,-1
 800af98:	30801426 	beq	r6,r2,800afec <__sflush_r+0x1e4>
 800af9c:	8880030b 	ldhu	r2,12(r17)
 800afa0:	8a000a17 	ldw	r8,40(r17)
 800afa4:	003fae06 	br	800ae60 <__alt_data_end+0xfc00ae60>
 800afa8:	98c00017 	ldw	r3,0(r19)
 800afac:	183fba26 	beq	r3,zero,800ae98 <__alt_data_end+0xfc00ae98>
 800afb0:	01000744 	movi	r4,29
 800afb4:	19000626 	beq	r3,r4,800afd0 <__sflush_r+0x1c8>
 800afb8:	01000584 	movi	r4,22
 800afbc:	19000426 	beq	r3,r4,800afd0 <__sflush_r+0x1c8>
 800afc0:	88c0030b 	ldhu	r3,12(r17)
 800afc4:	18c01014 	ori	r3,r3,64
 800afc8:	88c0030d 	sth	r3,12(r17)
 800afcc:	003fc306 	br	800aedc <__alt_data_end+0xfc00aedc>
 800afd0:	8880030b 	ldhu	r2,12(r17)
 800afd4:	88c00417 	ldw	r3,16(r17)
 800afd8:	88000115 	stw	zero,4(r17)
 800afdc:	10bdffcc 	andi	r2,r2,63487
 800afe0:	8880030d 	sth	r2,12(r17)
 800afe4:	88c00015 	stw	r3,0(r17)
 800afe8:	003fb306 	br	800aeb8 <__alt_data_end+0xfc00aeb8>
 800afec:	98800017 	ldw	r2,0(r19)
 800aff0:	103fea26 	beq	r2,zero,800af9c <__alt_data_end+0xfc00af9c>
 800aff4:	00c00744 	movi	r3,29
 800aff8:	10c00226 	beq	r2,r3,800b004 <__sflush_r+0x1fc>
 800affc:	00c00584 	movi	r3,22
 800b000:	10c0031e 	bne	r2,r3,800b010 <__sflush_r+0x208>
 800b004:	9c000015 	stw	r16,0(r19)
 800b008:	0005883a 	mov	r2,zero
 800b00c:	003fb306 	br	800aedc <__alt_data_end+0xfc00aedc>
 800b010:	88c0030b 	ldhu	r3,12(r17)
 800b014:	3005883a 	mov	r2,r6
 800b018:	18c01014 	ori	r3,r3,64
 800b01c:	88c0030d 	sth	r3,12(r17)
 800b020:	003fae06 	br	800aedc <__alt_data_end+0xfc00aedc>

0800b024 <_fflush_r>:
 800b024:	defffd04 	addi	sp,sp,-12
 800b028:	dc000115 	stw	r16,4(sp)
 800b02c:	dfc00215 	stw	ra,8(sp)
 800b030:	2021883a 	mov	r16,r4
 800b034:	20000226 	beq	r4,zero,800b040 <_fflush_r+0x1c>
 800b038:	20800e17 	ldw	r2,56(r4)
 800b03c:	10000c26 	beq	r2,zero,800b070 <_fflush_r+0x4c>
 800b040:	2880030f 	ldh	r2,12(r5)
 800b044:	1000051e 	bne	r2,zero,800b05c <_fflush_r+0x38>
 800b048:	0005883a 	mov	r2,zero
 800b04c:	dfc00217 	ldw	ra,8(sp)
 800b050:	dc000117 	ldw	r16,4(sp)
 800b054:	dec00304 	addi	sp,sp,12
 800b058:	f800283a 	ret
 800b05c:	8009883a 	mov	r4,r16
 800b060:	dfc00217 	ldw	ra,8(sp)
 800b064:	dc000117 	ldw	r16,4(sp)
 800b068:	dec00304 	addi	sp,sp,12
 800b06c:	800ae081 	jmpi	800ae08 <__sflush_r>
 800b070:	d9400015 	stw	r5,0(sp)
 800b074:	800b4100 	call	800b410 <__sinit>
 800b078:	d9400017 	ldw	r5,0(sp)
 800b07c:	003ff006 	br	800b040 <__alt_data_end+0xfc00b040>

0800b080 <fflush>:
 800b080:	20000526 	beq	r4,zero,800b098 <fflush+0x18>
 800b084:	008200b4 	movhi	r2,2050
 800b088:	10a80004 	addi	r2,r2,-24576
 800b08c:	200b883a 	mov	r5,r4
 800b090:	11000017 	ldw	r4,0(r2)
 800b094:	800b0241 	jmpi	800b024 <_fflush_r>
 800b098:	008200b4 	movhi	r2,2050
 800b09c:	10a7ff04 	addi	r2,r2,-24580
 800b0a0:	11000017 	ldw	r4,0(r2)
 800b0a4:	01420074 	movhi	r5,2049
 800b0a8:	296c0904 	addi	r5,r5,-20444
 800b0ac:	800be201 	jmpi	800be20 <_fwalk_reent>

0800b0b0 <__fp_unlock>:
 800b0b0:	0005883a 	mov	r2,zero
 800b0b4:	f800283a 	ret

0800b0b8 <_cleanup_r>:
 800b0b8:	01420074 	movhi	r5,2049
 800b0bc:	29454b04 	addi	r5,r5,5420
 800b0c0:	800be201 	jmpi	800be20 <_fwalk_reent>

0800b0c4 <__sinit.part.1>:
 800b0c4:	defff704 	addi	sp,sp,-36
 800b0c8:	00c20074 	movhi	r3,2049
 800b0cc:	dfc00815 	stw	ra,32(sp)
 800b0d0:	ddc00715 	stw	r23,28(sp)
 800b0d4:	dd800615 	stw	r22,24(sp)
 800b0d8:	dd400515 	stw	r21,20(sp)
 800b0dc:	dd000415 	stw	r20,16(sp)
 800b0e0:	dcc00315 	stw	r19,12(sp)
 800b0e4:	dc800215 	stw	r18,8(sp)
 800b0e8:	dc400115 	stw	r17,4(sp)
 800b0ec:	dc000015 	stw	r16,0(sp)
 800b0f0:	18ec2e04 	addi	r3,r3,-20296
 800b0f4:	24000117 	ldw	r16,4(r4)
 800b0f8:	20c00f15 	stw	r3,60(r4)
 800b0fc:	2080bb04 	addi	r2,r4,748
 800b100:	00c000c4 	movi	r3,3
 800b104:	20c0b915 	stw	r3,740(r4)
 800b108:	2080ba15 	stw	r2,744(r4)
 800b10c:	2000b815 	stw	zero,736(r4)
 800b110:	05c00204 	movi	r23,8
 800b114:	00800104 	movi	r2,4
 800b118:	2025883a 	mov	r18,r4
 800b11c:	b80d883a 	mov	r6,r23
 800b120:	81001704 	addi	r4,r16,92
 800b124:	000b883a 	mov	r5,zero
 800b128:	80000015 	stw	zero,0(r16)
 800b12c:	80000115 	stw	zero,4(r16)
 800b130:	80000215 	stw	zero,8(r16)
 800b134:	8080030d 	sth	r2,12(r16)
 800b138:	80001915 	stw	zero,100(r16)
 800b13c:	8000038d 	sth	zero,14(r16)
 800b140:	80000415 	stw	zero,16(r16)
 800b144:	80000515 	stw	zero,20(r16)
 800b148:	80000615 	stw	zero,24(r16)
 800b14c:	800cd100 	call	800cd10 <memset>
 800b150:	05820074 	movhi	r22,2049
 800b154:	94400217 	ldw	r17,8(r18)
 800b158:	05420074 	movhi	r21,2049
 800b15c:	05020074 	movhi	r20,2049
 800b160:	04c20074 	movhi	r19,2049
 800b164:	b5b94704 	addi	r22,r22,-6884
 800b168:	ad795e04 	addi	r21,r21,-6792
 800b16c:	a5397d04 	addi	r20,r20,-6668
 800b170:	9cf99404 	addi	r19,r19,-6576
 800b174:	85800815 	stw	r22,32(r16)
 800b178:	85400915 	stw	r21,36(r16)
 800b17c:	85000a15 	stw	r20,40(r16)
 800b180:	84c00b15 	stw	r19,44(r16)
 800b184:	84000715 	stw	r16,28(r16)
 800b188:	00800284 	movi	r2,10
 800b18c:	8880030d 	sth	r2,12(r17)
 800b190:	00800044 	movi	r2,1
 800b194:	b80d883a 	mov	r6,r23
 800b198:	89001704 	addi	r4,r17,92
 800b19c:	000b883a 	mov	r5,zero
 800b1a0:	88000015 	stw	zero,0(r17)
 800b1a4:	88000115 	stw	zero,4(r17)
 800b1a8:	88000215 	stw	zero,8(r17)
 800b1ac:	88001915 	stw	zero,100(r17)
 800b1b0:	8880038d 	sth	r2,14(r17)
 800b1b4:	88000415 	stw	zero,16(r17)
 800b1b8:	88000515 	stw	zero,20(r17)
 800b1bc:	88000615 	stw	zero,24(r17)
 800b1c0:	800cd100 	call	800cd10 <memset>
 800b1c4:	94000317 	ldw	r16,12(r18)
 800b1c8:	00800484 	movi	r2,18
 800b1cc:	8c400715 	stw	r17,28(r17)
 800b1d0:	8d800815 	stw	r22,32(r17)
 800b1d4:	8d400915 	stw	r21,36(r17)
 800b1d8:	8d000a15 	stw	r20,40(r17)
 800b1dc:	8cc00b15 	stw	r19,44(r17)
 800b1e0:	8080030d 	sth	r2,12(r16)
 800b1e4:	00800084 	movi	r2,2
 800b1e8:	80000015 	stw	zero,0(r16)
 800b1ec:	80000115 	stw	zero,4(r16)
 800b1f0:	80000215 	stw	zero,8(r16)
 800b1f4:	80001915 	stw	zero,100(r16)
 800b1f8:	8080038d 	sth	r2,14(r16)
 800b1fc:	80000415 	stw	zero,16(r16)
 800b200:	80000515 	stw	zero,20(r16)
 800b204:	80000615 	stw	zero,24(r16)
 800b208:	b80d883a 	mov	r6,r23
 800b20c:	000b883a 	mov	r5,zero
 800b210:	81001704 	addi	r4,r16,92
 800b214:	800cd100 	call	800cd10 <memset>
 800b218:	00800044 	movi	r2,1
 800b21c:	84000715 	stw	r16,28(r16)
 800b220:	85800815 	stw	r22,32(r16)
 800b224:	85400915 	stw	r21,36(r16)
 800b228:	85000a15 	stw	r20,40(r16)
 800b22c:	84c00b15 	stw	r19,44(r16)
 800b230:	90800e15 	stw	r2,56(r18)
 800b234:	dfc00817 	ldw	ra,32(sp)
 800b238:	ddc00717 	ldw	r23,28(sp)
 800b23c:	dd800617 	ldw	r22,24(sp)
 800b240:	dd400517 	ldw	r21,20(sp)
 800b244:	dd000417 	ldw	r20,16(sp)
 800b248:	dcc00317 	ldw	r19,12(sp)
 800b24c:	dc800217 	ldw	r18,8(sp)
 800b250:	dc400117 	ldw	r17,4(sp)
 800b254:	dc000017 	ldw	r16,0(sp)
 800b258:	dec00904 	addi	sp,sp,36
 800b25c:	f800283a 	ret

0800b260 <__fp_lock>:
 800b260:	0005883a 	mov	r2,zero
 800b264:	f800283a 	ret

0800b268 <__sfmoreglue>:
 800b268:	defffc04 	addi	sp,sp,-16
 800b26c:	dc800215 	stw	r18,8(sp)
 800b270:	2825883a 	mov	r18,r5
 800b274:	dc000015 	stw	r16,0(sp)
 800b278:	01401a04 	movi	r5,104
 800b27c:	2021883a 	mov	r16,r4
 800b280:	913fffc4 	addi	r4,r18,-1
 800b284:	dfc00315 	stw	ra,12(sp)
 800b288:	dc400115 	stw	r17,4(sp)
 800b28c:	8004a540 	call	8004a54 <__mulsi3>
 800b290:	8009883a 	mov	r4,r16
 800b294:	11401d04 	addi	r5,r2,116
 800b298:	1023883a 	mov	r17,r2
 800b29c:	800c17c0 	call	800c17c <_malloc_r>
 800b2a0:	1021883a 	mov	r16,r2
 800b2a4:	10000726 	beq	r2,zero,800b2c4 <__sfmoreglue+0x5c>
 800b2a8:	11000304 	addi	r4,r2,12
 800b2ac:	10000015 	stw	zero,0(r2)
 800b2b0:	14800115 	stw	r18,4(r2)
 800b2b4:	11000215 	stw	r4,8(r2)
 800b2b8:	89801a04 	addi	r6,r17,104
 800b2bc:	000b883a 	mov	r5,zero
 800b2c0:	800cd100 	call	800cd10 <memset>
 800b2c4:	8005883a 	mov	r2,r16
 800b2c8:	dfc00317 	ldw	ra,12(sp)
 800b2cc:	dc800217 	ldw	r18,8(sp)
 800b2d0:	dc400117 	ldw	r17,4(sp)
 800b2d4:	dc000017 	ldw	r16,0(sp)
 800b2d8:	dec00404 	addi	sp,sp,16
 800b2dc:	f800283a 	ret

0800b2e0 <__sfp>:
 800b2e0:	defffb04 	addi	sp,sp,-20
 800b2e4:	dc000015 	stw	r16,0(sp)
 800b2e8:	040200b4 	movhi	r16,2050
 800b2ec:	8427ff04 	addi	r16,r16,-24580
 800b2f0:	dcc00315 	stw	r19,12(sp)
 800b2f4:	2027883a 	mov	r19,r4
 800b2f8:	81000017 	ldw	r4,0(r16)
 800b2fc:	dfc00415 	stw	ra,16(sp)
 800b300:	dc800215 	stw	r18,8(sp)
 800b304:	20800e17 	ldw	r2,56(r4)
 800b308:	dc400115 	stw	r17,4(sp)
 800b30c:	1000021e 	bne	r2,zero,800b318 <__sfp+0x38>
 800b310:	800b0c40 	call	800b0c4 <__sinit.part.1>
 800b314:	81000017 	ldw	r4,0(r16)
 800b318:	2480b804 	addi	r18,r4,736
 800b31c:	047fffc4 	movi	r17,-1
 800b320:	91000117 	ldw	r4,4(r18)
 800b324:	94000217 	ldw	r16,8(r18)
 800b328:	213fffc4 	addi	r4,r4,-1
 800b32c:	20000a16 	blt	r4,zero,800b358 <__sfp+0x78>
 800b330:	8080030f 	ldh	r2,12(r16)
 800b334:	10000c26 	beq	r2,zero,800b368 <__sfp+0x88>
 800b338:	80c01d04 	addi	r3,r16,116
 800b33c:	00000206 	br	800b348 <__sfp+0x68>
 800b340:	18bfe60f 	ldh	r2,-104(r3)
 800b344:	10000826 	beq	r2,zero,800b368 <__sfp+0x88>
 800b348:	213fffc4 	addi	r4,r4,-1
 800b34c:	1c3ffd04 	addi	r16,r3,-12
 800b350:	18c01a04 	addi	r3,r3,104
 800b354:	247ffa1e 	bne	r4,r17,800b340 <__alt_data_end+0xfc00b340>
 800b358:	90800017 	ldw	r2,0(r18)
 800b35c:	10001d26 	beq	r2,zero,800b3d4 <__sfp+0xf4>
 800b360:	1025883a 	mov	r18,r2
 800b364:	003fee06 	br	800b320 <__alt_data_end+0xfc00b320>
 800b368:	00bfffc4 	movi	r2,-1
 800b36c:	8080038d 	sth	r2,14(r16)
 800b370:	00800044 	movi	r2,1
 800b374:	8080030d 	sth	r2,12(r16)
 800b378:	80001915 	stw	zero,100(r16)
 800b37c:	80000015 	stw	zero,0(r16)
 800b380:	80000215 	stw	zero,8(r16)
 800b384:	80000115 	stw	zero,4(r16)
 800b388:	80000415 	stw	zero,16(r16)
 800b38c:	80000515 	stw	zero,20(r16)
 800b390:	80000615 	stw	zero,24(r16)
 800b394:	01800204 	movi	r6,8
 800b398:	000b883a 	mov	r5,zero
 800b39c:	81001704 	addi	r4,r16,92
 800b3a0:	800cd100 	call	800cd10 <memset>
 800b3a4:	8005883a 	mov	r2,r16
 800b3a8:	80000c15 	stw	zero,48(r16)
 800b3ac:	80000d15 	stw	zero,52(r16)
 800b3b0:	80001115 	stw	zero,68(r16)
 800b3b4:	80001215 	stw	zero,72(r16)
 800b3b8:	dfc00417 	ldw	ra,16(sp)
 800b3bc:	dcc00317 	ldw	r19,12(sp)
 800b3c0:	dc800217 	ldw	r18,8(sp)
 800b3c4:	dc400117 	ldw	r17,4(sp)
 800b3c8:	dc000017 	ldw	r16,0(sp)
 800b3cc:	dec00504 	addi	sp,sp,20
 800b3d0:	f800283a 	ret
 800b3d4:	01400104 	movi	r5,4
 800b3d8:	9809883a 	mov	r4,r19
 800b3dc:	800b2680 	call	800b268 <__sfmoreglue>
 800b3e0:	90800015 	stw	r2,0(r18)
 800b3e4:	103fde1e 	bne	r2,zero,800b360 <__alt_data_end+0xfc00b360>
 800b3e8:	00800304 	movi	r2,12
 800b3ec:	98800015 	stw	r2,0(r19)
 800b3f0:	0005883a 	mov	r2,zero
 800b3f4:	003ff006 	br	800b3b8 <__alt_data_end+0xfc00b3b8>

0800b3f8 <_cleanup>:
 800b3f8:	008200b4 	movhi	r2,2050
 800b3fc:	10a7ff04 	addi	r2,r2,-24580
 800b400:	11000017 	ldw	r4,0(r2)
 800b404:	01420074 	movhi	r5,2049
 800b408:	29454b04 	addi	r5,r5,5420
 800b40c:	800be201 	jmpi	800be20 <_fwalk_reent>

0800b410 <__sinit>:
 800b410:	20800e17 	ldw	r2,56(r4)
 800b414:	10000126 	beq	r2,zero,800b41c <__sinit+0xc>
 800b418:	f800283a 	ret
 800b41c:	800b0c41 	jmpi	800b0c4 <__sinit.part.1>

0800b420 <__sfp_lock_acquire>:
 800b420:	f800283a 	ret

0800b424 <__sfp_lock_release>:
 800b424:	f800283a 	ret

0800b428 <__sinit_lock_acquire>:
 800b428:	f800283a 	ret

0800b42c <__sinit_lock_release>:
 800b42c:	f800283a 	ret

0800b430 <__fp_lock_all>:
 800b430:	008200b4 	movhi	r2,2050
 800b434:	10a80004 	addi	r2,r2,-24576
 800b438:	11000017 	ldw	r4,0(r2)
 800b43c:	01420074 	movhi	r5,2049
 800b440:	296c9804 	addi	r5,r5,-19872
 800b444:	800bd5c1 	jmpi	800bd5c <_fwalk>

0800b448 <__fp_unlock_all>:
 800b448:	008200b4 	movhi	r2,2050
 800b44c:	10a80004 	addi	r2,r2,-24576
 800b450:	11000017 	ldw	r4,0(r2)
 800b454:	01420074 	movhi	r5,2049
 800b458:	296c2c04 	addi	r5,r5,-20304
 800b45c:	800bd5c1 	jmpi	800bd5c <_fwalk>

0800b460 <_malloc_trim_r>:
 800b460:	defffb04 	addi	sp,sp,-20
 800b464:	dcc00315 	stw	r19,12(sp)
 800b468:	04c200b4 	movhi	r19,2050
 800b46c:	dc800215 	stw	r18,8(sp)
 800b470:	dc400115 	stw	r17,4(sp)
 800b474:	dc000015 	stw	r16,0(sp)
 800b478:	dfc00415 	stw	ra,16(sp)
 800b47c:	2821883a 	mov	r16,r5
 800b480:	9ce27604 	addi	r19,r19,-30248
 800b484:	2025883a 	mov	r18,r4
 800b488:	80157f40 	call	80157f4 <__malloc_lock>
 800b48c:	98800217 	ldw	r2,8(r19)
 800b490:	14400117 	ldw	r17,4(r2)
 800b494:	00bfff04 	movi	r2,-4
 800b498:	88a2703a 	and	r17,r17,r2
 800b49c:	8c21c83a 	sub	r16,r17,r16
 800b4a0:	8403fbc4 	addi	r16,r16,4079
 800b4a4:	8020d33a 	srli	r16,r16,12
 800b4a8:	0083ffc4 	movi	r2,4095
 800b4ac:	843fffc4 	addi	r16,r16,-1
 800b4b0:	8020933a 	slli	r16,r16,12
 800b4b4:	1400060e 	bge	r2,r16,800b4d0 <_malloc_trim_r+0x70>
 800b4b8:	000b883a 	mov	r5,zero
 800b4bc:	9009883a 	mov	r4,r18
 800b4c0:	800e4c80 	call	800e4c8 <_sbrk_r>
 800b4c4:	98c00217 	ldw	r3,8(r19)
 800b4c8:	1c47883a 	add	r3,r3,r17
 800b4cc:	10c00a26 	beq	r2,r3,800b4f8 <_malloc_trim_r+0x98>
 800b4d0:	9009883a 	mov	r4,r18
 800b4d4:	80158180 	call	8015818 <__malloc_unlock>
 800b4d8:	0005883a 	mov	r2,zero
 800b4dc:	dfc00417 	ldw	ra,16(sp)
 800b4e0:	dcc00317 	ldw	r19,12(sp)
 800b4e4:	dc800217 	ldw	r18,8(sp)
 800b4e8:	dc400117 	ldw	r17,4(sp)
 800b4ec:	dc000017 	ldw	r16,0(sp)
 800b4f0:	dec00504 	addi	sp,sp,20
 800b4f4:	f800283a 	ret
 800b4f8:	040bc83a 	sub	r5,zero,r16
 800b4fc:	9009883a 	mov	r4,r18
 800b500:	800e4c80 	call	800e4c8 <_sbrk_r>
 800b504:	00ffffc4 	movi	r3,-1
 800b508:	10c00d26 	beq	r2,r3,800b540 <_malloc_trim_r+0xe0>
 800b50c:	00c200b4 	movhi	r3,2050
 800b510:	18ef9004 	addi	r3,r3,-16832
 800b514:	18800017 	ldw	r2,0(r3)
 800b518:	99000217 	ldw	r4,8(r19)
 800b51c:	8c23c83a 	sub	r17,r17,r16
 800b520:	8c400054 	ori	r17,r17,1
 800b524:	1421c83a 	sub	r16,r2,r16
 800b528:	24400115 	stw	r17,4(r4)
 800b52c:	9009883a 	mov	r4,r18
 800b530:	1c000015 	stw	r16,0(r3)
 800b534:	80158180 	call	8015818 <__malloc_unlock>
 800b538:	00800044 	movi	r2,1
 800b53c:	003fe706 	br	800b4dc <__alt_data_end+0xfc00b4dc>
 800b540:	000b883a 	mov	r5,zero
 800b544:	9009883a 	mov	r4,r18
 800b548:	800e4c80 	call	800e4c8 <_sbrk_r>
 800b54c:	99000217 	ldw	r4,8(r19)
 800b550:	014003c4 	movi	r5,15
 800b554:	1107c83a 	sub	r3,r2,r4
 800b558:	28ffdd0e 	bge	r5,r3,800b4d0 <__alt_data_end+0xfc00b4d0>
 800b55c:	014200b4 	movhi	r5,2050
 800b560:	29680204 	addi	r5,r5,-24568
 800b564:	29400017 	ldw	r5,0(r5)
 800b568:	18c00054 	ori	r3,r3,1
 800b56c:	20c00115 	stw	r3,4(r4)
 800b570:	00c200b4 	movhi	r3,2050
 800b574:	1145c83a 	sub	r2,r2,r5
 800b578:	18ef9004 	addi	r3,r3,-16832
 800b57c:	18800015 	stw	r2,0(r3)
 800b580:	003fd306 	br	800b4d0 <__alt_data_end+0xfc00b4d0>

0800b584 <_free_r>:
 800b584:	28004126 	beq	r5,zero,800b68c <_free_r+0x108>
 800b588:	defffd04 	addi	sp,sp,-12
 800b58c:	dc400115 	stw	r17,4(sp)
 800b590:	dc000015 	stw	r16,0(sp)
 800b594:	2023883a 	mov	r17,r4
 800b598:	2821883a 	mov	r16,r5
 800b59c:	dfc00215 	stw	ra,8(sp)
 800b5a0:	80157f40 	call	80157f4 <__malloc_lock>
 800b5a4:	81ffff17 	ldw	r7,-4(r16)
 800b5a8:	00bfff84 	movi	r2,-2
 800b5ac:	010200b4 	movhi	r4,2050
 800b5b0:	81bffe04 	addi	r6,r16,-8
 800b5b4:	3884703a 	and	r2,r7,r2
 800b5b8:	21227604 	addi	r4,r4,-30248
 800b5bc:	308b883a 	add	r5,r6,r2
 800b5c0:	2a400117 	ldw	r9,4(r5)
 800b5c4:	22000217 	ldw	r8,8(r4)
 800b5c8:	00ffff04 	movi	r3,-4
 800b5cc:	48c6703a 	and	r3,r9,r3
 800b5d0:	2a005726 	beq	r5,r8,800b730 <_free_r+0x1ac>
 800b5d4:	28c00115 	stw	r3,4(r5)
 800b5d8:	39c0004c 	andi	r7,r7,1
 800b5dc:	3800091e 	bne	r7,zero,800b604 <_free_r+0x80>
 800b5e0:	823ffe17 	ldw	r8,-8(r16)
 800b5e4:	22400204 	addi	r9,r4,8
 800b5e8:	320dc83a 	sub	r6,r6,r8
 800b5ec:	31c00217 	ldw	r7,8(r6)
 800b5f0:	1205883a 	add	r2,r2,r8
 800b5f4:	3a406526 	beq	r7,r9,800b78c <_free_r+0x208>
 800b5f8:	32000317 	ldw	r8,12(r6)
 800b5fc:	3a000315 	stw	r8,12(r7)
 800b600:	41c00215 	stw	r7,8(r8)
 800b604:	28cf883a 	add	r7,r5,r3
 800b608:	39c00117 	ldw	r7,4(r7)
 800b60c:	39c0004c 	andi	r7,r7,1
 800b610:	38003a26 	beq	r7,zero,800b6fc <_free_r+0x178>
 800b614:	10c00054 	ori	r3,r2,1
 800b618:	30c00115 	stw	r3,4(r6)
 800b61c:	3087883a 	add	r3,r6,r2
 800b620:	18800015 	stw	r2,0(r3)
 800b624:	00c07fc4 	movi	r3,511
 800b628:	18801936 	bltu	r3,r2,800b690 <_free_r+0x10c>
 800b62c:	1004d0fa 	srli	r2,r2,3
 800b630:	01c00044 	movi	r7,1
 800b634:	21400117 	ldw	r5,4(r4)
 800b638:	10c00044 	addi	r3,r2,1
 800b63c:	18c7883a 	add	r3,r3,r3
 800b640:	1005d0ba 	srai	r2,r2,2
 800b644:	18c7883a 	add	r3,r3,r3
 800b648:	18c7883a 	add	r3,r3,r3
 800b64c:	1907883a 	add	r3,r3,r4
 800b650:	3884983a 	sll	r2,r7,r2
 800b654:	19c00017 	ldw	r7,0(r3)
 800b658:	1a3ffe04 	addi	r8,r3,-8
 800b65c:	1144b03a 	or	r2,r2,r5
 800b660:	32000315 	stw	r8,12(r6)
 800b664:	31c00215 	stw	r7,8(r6)
 800b668:	20800115 	stw	r2,4(r4)
 800b66c:	19800015 	stw	r6,0(r3)
 800b670:	39800315 	stw	r6,12(r7)
 800b674:	8809883a 	mov	r4,r17
 800b678:	dfc00217 	ldw	ra,8(sp)
 800b67c:	dc400117 	ldw	r17,4(sp)
 800b680:	dc000017 	ldw	r16,0(sp)
 800b684:	dec00304 	addi	sp,sp,12
 800b688:	80158181 	jmpi	8015818 <__malloc_unlock>
 800b68c:	f800283a 	ret
 800b690:	100ad27a 	srli	r5,r2,9
 800b694:	00c00104 	movi	r3,4
 800b698:	19404a36 	bltu	r3,r5,800b7c4 <_free_r+0x240>
 800b69c:	100ad1ba 	srli	r5,r2,6
 800b6a0:	28c00e44 	addi	r3,r5,57
 800b6a4:	18c7883a 	add	r3,r3,r3
 800b6a8:	29400e04 	addi	r5,r5,56
 800b6ac:	18c7883a 	add	r3,r3,r3
 800b6b0:	18c7883a 	add	r3,r3,r3
 800b6b4:	1909883a 	add	r4,r3,r4
 800b6b8:	20c00017 	ldw	r3,0(r4)
 800b6bc:	01c200b4 	movhi	r7,2050
 800b6c0:	213ffe04 	addi	r4,r4,-8
 800b6c4:	39e27604 	addi	r7,r7,-30248
 800b6c8:	20c04426 	beq	r4,r3,800b7dc <_free_r+0x258>
 800b6cc:	01ffff04 	movi	r7,-4
 800b6d0:	19400117 	ldw	r5,4(r3)
 800b6d4:	29ca703a 	and	r5,r5,r7
 800b6d8:	1140022e 	bgeu	r2,r5,800b6e4 <_free_r+0x160>
 800b6dc:	18c00217 	ldw	r3,8(r3)
 800b6e0:	20fffb1e 	bne	r4,r3,800b6d0 <__alt_data_end+0xfc00b6d0>
 800b6e4:	19000317 	ldw	r4,12(r3)
 800b6e8:	31000315 	stw	r4,12(r6)
 800b6ec:	30c00215 	stw	r3,8(r6)
 800b6f0:	21800215 	stw	r6,8(r4)
 800b6f4:	19800315 	stw	r6,12(r3)
 800b6f8:	003fde06 	br	800b674 <__alt_data_end+0xfc00b674>
 800b6fc:	29c00217 	ldw	r7,8(r5)
 800b700:	10c5883a 	add	r2,r2,r3
 800b704:	00c200b4 	movhi	r3,2050
 800b708:	18e27804 	addi	r3,r3,-30240
 800b70c:	38c03b26 	beq	r7,r3,800b7fc <_free_r+0x278>
 800b710:	2a000317 	ldw	r8,12(r5)
 800b714:	11400054 	ori	r5,r2,1
 800b718:	3087883a 	add	r3,r6,r2
 800b71c:	3a000315 	stw	r8,12(r7)
 800b720:	41c00215 	stw	r7,8(r8)
 800b724:	31400115 	stw	r5,4(r6)
 800b728:	18800015 	stw	r2,0(r3)
 800b72c:	003fbd06 	br	800b624 <__alt_data_end+0xfc00b624>
 800b730:	39c0004c 	andi	r7,r7,1
 800b734:	10c5883a 	add	r2,r2,r3
 800b738:	3800071e 	bne	r7,zero,800b758 <_free_r+0x1d4>
 800b73c:	81fffe17 	ldw	r7,-8(r16)
 800b740:	31cdc83a 	sub	r6,r6,r7
 800b744:	30c00317 	ldw	r3,12(r6)
 800b748:	31400217 	ldw	r5,8(r6)
 800b74c:	11c5883a 	add	r2,r2,r7
 800b750:	28c00315 	stw	r3,12(r5)
 800b754:	19400215 	stw	r5,8(r3)
 800b758:	10c00054 	ori	r3,r2,1
 800b75c:	30c00115 	stw	r3,4(r6)
 800b760:	00c200b4 	movhi	r3,2050
 800b764:	18e80304 	addi	r3,r3,-24564
 800b768:	18c00017 	ldw	r3,0(r3)
 800b76c:	21800215 	stw	r6,8(r4)
 800b770:	10ffc036 	bltu	r2,r3,800b674 <__alt_data_end+0xfc00b674>
 800b774:	008200b4 	movhi	r2,2050
 800b778:	10af7d04 	addi	r2,r2,-16908
 800b77c:	11400017 	ldw	r5,0(r2)
 800b780:	8809883a 	mov	r4,r17
 800b784:	800b4600 	call	800b460 <_malloc_trim_r>
 800b788:	003fba06 	br	800b674 <__alt_data_end+0xfc00b674>
 800b78c:	28c9883a 	add	r4,r5,r3
 800b790:	21000117 	ldw	r4,4(r4)
 800b794:	2100004c 	andi	r4,r4,1
 800b798:	2000391e 	bne	r4,zero,800b880 <_free_r+0x2fc>
 800b79c:	29c00217 	ldw	r7,8(r5)
 800b7a0:	29000317 	ldw	r4,12(r5)
 800b7a4:	1885883a 	add	r2,r3,r2
 800b7a8:	10c00054 	ori	r3,r2,1
 800b7ac:	39000315 	stw	r4,12(r7)
 800b7b0:	21c00215 	stw	r7,8(r4)
 800b7b4:	30c00115 	stw	r3,4(r6)
 800b7b8:	308d883a 	add	r6,r6,r2
 800b7bc:	30800015 	stw	r2,0(r6)
 800b7c0:	003fac06 	br	800b674 <__alt_data_end+0xfc00b674>
 800b7c4:	00c00504 	movi	r3,20
 800b7c8:	19401536 	bltu	r3,r5,800b820 <_free_r+0x29c>
 800b7cc:	28c01704 	addi	r3,r5,92
 800b7d0:	18c7883a 	add	r3,r3,r3
 800b7d4:	294016c4 	addi	r5,r5,91
 800b7d8:	003fb406 	br	800b6ac <__alt_data_end+0xfc00b6ac>
 800b7dc:	280bd0ba 	srai	r5,r5,2
 800b7e0:	00c00044 	movi	r3,1
 800b7e4:	38800117 	ldw	r2,4(r7)
 800b7e8:	194a983a 	sll	r5,r3,r5
 800b7ec:	2007883a 	mov	r3,r4
 800b7f0:	2884b03a 	or	r2,r5,r2
 800b7f4:	38800115 	stw	r2,4(r7)
 800b7f8:	003fbb06 	br	800b6e8 <__alt_data_end+0xfc00b6e8>
 800b7fc:	21800515 	stw	r6,20(r4)
 800b800:	21800415 	stw	r6,16(r4)
 800b804:	10c00054 	ori	r3,r2,1
 800b808:	31c00315 	stw	r7,12(r6)
 800b80c:	31c00215 	stw	r7,8(r6)
 800b810:	30c00115 	stw	r3,4(r6)
 800b814:	308d883a 	add	r6,r6,r2
 800b818:	30800015 	stw	r2,0(r6)
 800b81c:	003f9506 	br	800b674 <__alt_data_end+0xfc00b674>
 800b820:	00c01504 	movi	r3,84
 800b824:	19400536 	bltu	r3,r5,800b83c <_free_r+0x2b8>
 800b828:	100ad33a 	srli	r5,r2,12
 800b82c:	28c01bc4 	addi	r3,r5,111
 800b830:	18c7883a 	add	r3,r3,r3
 800b834:	29401b84 	addi	r5,r5,110
 800b838:	003f9c06 	br	800b6ac <__alt_data_end+0xfc00b6ac>
 800b83c:	00c05504 	movi	r3,340
 800b840:	19400536 	bltu	r3,r5,800b858 <_free_r+0x2d4>
 800b844:	100ad3fa 	srli	r5,r2,15
 800b848:	28c01e04 	addi	r3,r5,120
 800b84c:	18c7883a 	add	r3,r3,r3
 800b850:	29401dc4 	addi	r5,r5,119
 800b854:	003f9506 	br	800b6ac <__alt_data_end+0xfc00b6ac>
 800b858:	00c15504 	movi	r3,1364
 800b85c:	19400536 	bltu	r3,r5,800b874 <_free_r+0x2f0>
 800b860:	100ad4ba 	srli	r5,r2,18
 800b864:	28c01f44 	addi	r3,r5,125
 800b868:	18c7883a 	add	r3,r3,r3
 800b86c:	29401f04 	addi	r5,r5,124
 800b870:	003f8e06 	br	800b6ac <__alt_data_end+0xfc00b6ac>
 800b874:	00c03f84 	movi	r3,254
 800b878:	01401f84 	movi	r5,126
 800b87c:	003f8b06 	br	800b6ac <__alt_data_end+0xfc00b6ac>
 800b880:	10c00054 	ori	r3,r2,1
 800b884:	30c00115 	stw	r3,4(r6)
 800b888:	308d883a 	add	r6,r6,r2
 800b88c:	30800015 	stw	r2,0(r6)
 800b890:	003f7806 	br	800b674 <__alt_data_end+0xfc00b674>

0800b894 <__sfvwrite_r>:
 800b894:	30800217 	ldw	r2,8(r6)
 800b898:	10006726 	beq	r2,zero,800ba38 <__sfvwrite_r+0x1a4>
 800b89c:	28c0030b 	ldhu	r3,12(r5)
 800b8a0:	defff404 	addi	sp,sp,-48
 800b8a4:	dd400715 	stw	r21,28(sp)
 800b8a8:	dd000615 	stw	r20,24(sp)
 800b8ac:	dc000215 	stw	r16,8(sp)
 800b8b0:	dfc00b15 	stw	ra,44(sp)
 800b8b4:	df000a15 	stw	fp,40(sp)
 800b8b8:	ddc00915 	stw	r23,36(sp)
 800b8bc:	dd800815 	stw	r22,32(sp)
 800b8c0:	dcc00515 	stw	r19,20(sp)
 800b8c4:	dc800415 	stw	r18,16(sp)
 800b8c8:	dc400315 	stw	r17,12(sp)
 800b8cc:	1880020c 	andi	r2,r3,8
 800b8d0:	2821883a 	mov	r16,r5
 800b8d4:	202b883a 	mov	r21,r4
 800b8d8:	3029883a 	mov	r20,r6
 800b8dc:	10002726 	beq	r2,zero,800b97c <__sfvwrite_r+0xe8>
 800b8e0:	28800417 	ldw	r2,16(r5)
 800b8e4:	10002526 	beq	r2,zero,800b97c <__sfvwrite_r+0xe8>
 800b8e8:	1880008c 	andi	r2,r3,2
 800b8ec:	a4400017 	ldw	r17,0(r20)
 800b8f0:	10002a26 	beq	r2,zero,800b99c <__sfvwrite_r+0x108>
 800b8f4:	05a00034 	movhi	r22,32768
 800b8f8:	0027883a 	mov	r19,zero
 800b8fc:	0025883a 	mov	r18,zero
 800b900:	b5bf0004 	addi	r22,r22,-1024
 800b904:	980d883a 	mov	r6,r19
 800b908:	a809883a 	mov	r4,r21
 800b90c:	90004626 	beq	r18,zero,800ba28 <__sfvwrite_r+0x194>
 800b910:	900f883a 	mov	r7,r18
 800b914:	b480022e 	bgeu	r22,r18,800b920 <__sfvwrite_r+0x8c>
 800b918:	01e00034 	movhi	r7,32768
 800b91c:	39ff0004 	addi	r7,r7,-1024
 800b920:	80800917 	ldw	r2,36(r16)
 800b924:	81400717 	ldw	r5,28(r16)
 800b928:	103ee83a 	callr	r2
 800b92c:	00805a0e 	bge	zero,r2,800ba98 <__sfvwrite_r+0x204>
 800b930:	a0c00217 	ldw	r3,8(r20)
 800b934:	98a7883a 	add	r19,r19,r2
 800b938:	90a5c83a 	sub	r18,r18,r2
 800b93c:	1885c83a 	sub	r2,r3,r2
 800b940:	a0800215 	stw	r2,8(r20)
 800b944:	103fef1e 	bne	r2,zero,800b904 <__alt_data_end+0xfc00b904>
 800b948:	0005883a 	mov	r2,zero
 800b94c:	dfc00b17 	ldw	ra,44(sp)
 800b950:	df000a17 	ldw	fp,40(sp)
 800b954:	ddc00917 	ldw	r23,36(sp)
 800b958:	dd800817 	ldw	r22,32(sp)
 800b95c:	dd400717 	ldw	r21,28(sp)
 800b960:	dd000617 	ldw	r20,24(sp)
 800b964:	dcc00517 	ldw	r19,20(sp)
 800b968:	dc800417 	ldw	r18,16(sp)
 800b96c:	dc400317 	ldw	r17,12(sp)
 800b970:	dc000217 	ldw	r16,8(sp)
 800b974:	dec00c04 	addi	sp,sp,48
 800b978:	f800283a 	ret
 800b97c:	800b883a 	mov	r5,r16
 800b980:	a809883a 	mov	r4,r21
 800b984:	80094040 	call	8009404 <__swsetup_r>
 800b988:	1000ee1e 	bne	r2,zero,800bd44 <__sfvwrite_r+0x4b0>
 800b98c:	80c0030b 	ldhu	r3,12(r16)
 800b990:	a4400017 	ldw	r17,0(r20)
 800b994:	1880008c 	andi	r2,r3,2
 800b998:	103fd61e 	bne	r2,zero,800b8f4 <__alt_data_end+0xfc00b8f4>
 800b99c:	1880004c 	andi	r2,r3,1
 800b9a0:	1000421e 	bne	r2,zero,800baac <__sfvwrite_r+0x218>
 800b9a4:	0039883a 	mov	fp,zero
 800b9a8:	0025883a 	mov	r18,zero
 800b9ac:	90001a26 	beq	r18,zero,800ba18 <__sfvwrite_r+0x184>
 800b9b0:	1880800c 	andi	r2,r3,512
 800b9b4:	84c00217 	ldw	r19,8(r16)
 800b9b8:	10002126 	beq	r2,zero,800ba40 <__sfvwrite_r+0x1ac>
 800b9bc:	982f883a 	mov	r23,r19
 800b9c0:	94c09636 	bltu	r18,r19,800bc1c <__sfvwrite_r+0x388>
 800b9c4:	1881200c 	andi	r2,r3,1152
 800b9c8:	1000a11e 	bne	r2,zero,800bc50 <__sfvwrite_r+0x3bc>
 800b9cc:	81000017 	ldw	r4,0(r16)
 800b9d0:	b80d883a 	mov	r6,r23
 800b9d4:	e00b883a 	mov	r5,fp
 800b9d8:	800cbb40 	call	800cbb4 <memmove>
 800b9dc:	80c00217 	ldw	r3,8(r16)
 800b9e0:	81000017 	ldw	r4,0(r16)
 800b9e4:	9005883a 	mov	r2,r18
 800b9e8:	1ce7c83a 	sub	r19,r3,r19
 800b9ec:	25cf883a 	add	r7,r4,r23
 800b9f0:	84c00215 	stw	r19,8(r16)
 800b9f4:	81c00015 	stw	r7,0(r16)
 800b9f8:	a0c00217 	ldw	r3,8(r20)
 800b9fc:	e0b9883a 	add	fp,fp,r2
 800ba00:	90a5c83a 	sub	r18,r18,r2
 800ba04:	18a7c83a 	sub	r19,r3,r2
 800ba08:	a4c00215 	stw	r19,8(r20)
 800ba0c:	983fce26 	beq	r19,zero,800b948 <__alt_data_end+0xfc00b948>
 800ba10:	80c0030b 	ldhu	r3,12(r16)
 800ba14:	903fe61e 	bne	r18,zero,800b9b0 <__alt_data_end+0xfc00b9b0>
 800ba18:	8f000017 	ldw	fp,0(r17)
 800ba1c:	8c800117 	ldw	r18,4(r17)
 800ba20:	8c400204 	addi	r17,r17,8
 800ba24:	003fe106 	br	800b9ac <__alt_data_end+0xfc00b9ac>
 800ba28:	8cc00017 	ldw	r19,0(r17)
 800ba2c:	8c800117 	ldw	r18,4(r17)
 800ba30:	8c400204 	addi	r17,r17,8
 800ba34:	003fb306 	br	800b904 <__alt_data_end+0xfc00b904>
 800ba38:	0005883a 	mov	r2,zero
 800ba3c:	f800283a 	ret
 800ba40:	81000017 	ldw	r4,0(r16)
 800ba44:	80800417 	ldw	r2,16(r16)
 800ba48:	11005a36 	bltu	r2,r4,800bbb4 <__sfvwrite_r+0x320>
 800ba4c:	85c00517 	ldw	r23,20(r16)
 800ba50:	95c05836 	bltu	r18,r23,800bbb4 <__sfvwrite_r+0x320>
 800ba54:	00a00034 	movhi	r2,32768
 800ba58:	10bfffc4 	addi	r2,r2,-1
 800ba5c:	9009883a 	mov	r4,r18
 800ba60:	1480012e 	bgeu	r2,r18,800ba68 <__sfvwrite_r+0x1d4>
 800ba64:	1009883a 	mov	r4,r2
 800ba68:	b80b883a 	mov	r5,r23
 800ba6c:	80048a00 	call	80048a0 <__divsi3>
 800ba70:	b80b883a 	mov	r5,r23
 800ba74:	1009883a 	mov	r4,r2
 800ba78:	8004a540 	call	8004a54 <__mulsi3>
 800ba7c:	81400717 	ldw	r5,28(r16)
 800ba80:	80c00917 	ldw	r3,36(r16)
 800ba84:	100f883a 	mov	r7,r2
 800ba88:	e00d883a 	mov	r6,fp
 800ba8c:	a809883a 	mov	r4,r21
 800ba90:	183ee83a 	callr	r3
 800ba94:	00bfd816 	blt	zero,r2,800b9f8 <__alt_data_end+0xfc00b9f8>
 800ba98:	8080030b 	ldhu	r2,12(r16)
 800ba9c:	10801014 	ori	r2,r2,64
 800baa0:	8080030d 	sth	r2,12(r16)
 800baa4:	00bfffc4 	movi	r2,-1
 800baa8:	003fa806 	br	800b94c <__alt_data_end+0xfc00b94c>
 800baac:	0027883a 	mov	r19,zero
 800bab0:	0011883a 	mov	r8,zero
 800bab4:	0039883a 	mov	fp,zero
 800bab8:	0025883a 	mov	r18,zero
 800babc:	90001f26 	beq	r18,zero,800bb3c <__sfvwrite_r+0x2a8>
 800bac0:	40005a26 	beq	r8,zero,800bc2c <__sfvwrite_r+0x398>
 800bac4:	982d883a 	mov	r22,r19
 800bac8:	94c0012e 	bgeu	r18,r19,800bad0 <__sfvwrite_r+0x23c>
 800bacc:	902d883a 	mov	r22,r18
 800bad0:	81000017 	ldw	r4,0(r16)
 800bad4:	80800417 	ldw	r2,16(r16)
 800bad8:	b02f883a 	mov	r23,r22
 800badc:	81c00517 	ldw	r7,20(r16)
 800bae0:	1100032e 	bgeu	r2,r4,800baf0 <__sfvwrite_r+0x25c>
 800bae4:	80c00217 	ldw	r3,8(r16)
 800bae8:	38c7883a 	add	r3,r7,r3
 800baec:	1d801816 	blt	r3,r22,800bb50 <__sfvwrite_r+0x2bc>
 800baf0:	b1c03e16 	blt	r22,r7,800bbec <__sfvwrite_r+0x358>
 800baf4:	80800917 	ldw	r2,36(r16)
 800baf8:	81400717 	ldw	r5,28(r16)
 800bafc:	e00d883a 	mov	r6,fp
 800bb00:	da000115 	stw	r8,4(sp)
 800bb04:	a809883a 	mov	r4,r21
 800bb08:	103ee83a 	callr	r2
 800bb0c:	102f883a 	mov	r23,r2
 800bb10:	da000117 	ldw	r8,4(sp)
 800bb14:	00bfe00e 	bge	zero,r2,800ba98 <__alt_data_end+0xfc00ba98>
 800bb18:	9de7c83a 	sub	r19,r19,r23
 800bb1c:	98001f26 	beq	r19,zero,800bb9c <__sfvwrite_r+0x308>
 800bb20:	a0800217 	ldw	r2,8(r20)
 800bb24:	e5f9883a 	add	fp,fp,r23
 800bb28:	95e5c83a 	sub	r18,r18,r23
 800bb2c:	15efc83a 	sub	r23,r2,r23
 800bb30:	a5c00215 	stw	r23,8(r20)
 800bb34:	b83f8426 	beq	r23,zero,800b948 <__alt_data_end+0xfc00b948>
 800bb38:	903fe11e 	bne	r18,zero,800bac0 <__alt_data_end+0xfc00bac0>
 800bb3c:	8f000017 	ldw	fp,0(r17)
 800bb40:	8c800117 	ldw	r18,4(r17)
 800bb44:	0011883a 	mov	r8,zero
 800bb48:	8c400204 	addi	r17,r17,8
 800bb4c:	003fdb06 	br	800babc <__alt_data_end+0xfc00babc>
 800bb50:	180d883a 	mov	r6,r3
 800bb54:	e00b883a 	mov	r5,fp
 800bb58:	da000115 	stw	r8,4(sp)
 800bb5c:	d8c00015 	stw	r3,0(sp)
 800bb60:	800cbb40 	call	800cbb4 <memmove>
 800bb64:	d8c00017 	ldw	r3,0(sp)
 800bb68:	80800017 	ldw	r2,0(r16)
 800bb6c:	800b883a 	mov	r5,r16
 800bb70:	a809883a 	mov	r4,r21
 800bb74:	10c5883a 	add	r2,r2,r3
 800bb78:	80800015 	stw	r2,0(r16)
 800bb7c:	d8c00015 	stw	r3,0(sp)
 800bb80:	800b0240 	call	800b024 <_fflush_r>
 800bb84:	d8c00017 	ldw	r3,0(sp)
 800bb88:	da000117 	ldw	r8,4(sp)
 800bb8c:	103fc21e 	bne	r2,zero,800ba98 <__alt_data_end+0xfc00ba98>
 800bb90:	182f883a 	mov	r23,r3
 800bb94:	9de7c83a 	sub	r19,r19,r23
 800bb98:	983fe11e 	bne	r19,zero,800bb20 <__alt_data_end+0xfc00bb20>
 800bb9c:	800b883a 	mov	r5,r16
 800bba0:	a809883a 	mov	r4,r21
 800bba4:	800b0240 	call	800b024 <_fflush_r>
 800bba8:	103fbb1e 	bne	r2,zero,800ba98 <__alt_data_end+0xfc00ba98>
 800bbac:	0011883a 	mov	r8,zero
 800bbb0:	003fdb06 	br	800bb20 <__alt_data_end+0xfc00bb20>
 800bbb4:	94c0012e 	bgeu	r18,r19,800bbbc <__sfvwrite_r+0x328>
 800bbb8:	9027883a 	mov	r19,r18
 800bbbc:	980d883a 	mov	r6,r19
 800bbc0:	e00b883a 	mov	r5,fp
 800bbc4:	800cbb40 	call	800cbb4 <memmove>
 800bbc8:	80800217 	ldw	r2,8(r16)
 800bbcc:	80c00017 	ldw	r3,0(r16)
 800bbd0:	14c5c83a 	sub	r2,r2,r19
 800bbd4:	1cc7883a 	add	r3,r3,r19
 800bbd8:	80800215 	stw	r2,8(r16)
 800bbdc:	80c00015 	stw	r3,0(r16)
 800bbe0:	10004326 	beq	r2,zero,800bcf0 <__sfvwrite_r+0x45c>
 800bbe4:	9805883a 	mov	r2,r19
 800bbe8:	003f8306 	br	800b9f8 <__alt_data_end+0xfc00b9f8>
 800bbec:	b00d883a 	mov	r6,r22
 800bbf0:	e00b883a 	mov	r5,fp
 800bbf4:	da000115 	stw	r8,4(sp)
 800bbf8:	800cbb40 	call	800cbb4 <memmove>
 800bbfc:	80800217 	ldw	r2,8(r16)
 800bc00:	80c00017 	ldw	r3,0(r16)
 800bc04:	da000117 	ldw	r8,4(sp)
 800bc08:	1585c83a 	sub	r2,r2,r22
 800bc0c:	1dad883a 	add	r22,r3,r22
 800bc10:	80800215 	stw	r2,8(r16)
 800bc14:	85800015 	stw	r22,0(r16)
 800bc18:	003fbf06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bc1c:	81000017 	ldw	r4,0(r16)
 800bc20:	9027883a 	mov	r19,r18
 800bc24:	902f883a 	mov	r23,r18
 800bc28:	003f6906 	br	800b9d0 <__alt_data_end+0xfc00b9d0>
 800bc2c:	900d883a 	mov	r6,r18
 800bc30:	01400284 	movi	r5,10
 800bc34:	e009883a 	mov	r4,fp
 800bc38:	800c9880 	call	800c988 <memchr>
 800bc3c:	10003e26 	beq	r2,zero,800bd38 <__sfvwrite_r+0x4a4>
 800bc40:	10800044 	addi	r2,r2,1
 800bc44:	1727c83a 	sub	r19,r2,fp
 800bc48:	02000044 	movi	r8,1
 800bc4c:	003f9d06 	br	800bac4 <__alt_data_end+0xfc00bac4>
 800bc50:	80800517 	ldw	r2,20(r16)
 800bc54:	81400417 	ldw	r5,16(r16)
 800bc58:	81c00017 	ldw	r7,0(r16)
 800bc5c:	10a7883a 	add	r19,r2,r2
 800bc60:	9885883a 	add	r2,r19,r2
 800bc64:	1026d7fa 	srli	r19,r2,31
 800bc68:	396dc83a 	sub	r22,r7,r5
 800bc6c:	b1000044 	addi	r4,r22,1
 800bc70:	9885883a 	add	r2,r19,r2
 800bc74:	1027d07a 	srai	r19,r2,1
 800bc78:	2485883a 	add	r2,r4,r18
 800bc7c:	980d883a 	mov	r6,r19
 800bc80:	9880022e 	bgeu	r19,r2,800bc8c <__sfvwrite_r+0x3f8>
 800bc84:	1027883a 	mov	r19,r2
 800bc88:	100d883a 	mov	r6,r2
 800bc8c:	18c1000c 	andi	r3,r3,1024
 800bc90:	18001c26 	beq	r3,zero,800bd04 <__sfvwrite_r+0x470>
 800bc94:	300b883a 	mov	r5,r6
 800bc98:	a809883a 	mov	r4,r21
 800bc9c:	800c17c0 	call	800c17c <_malloc_r>
 800bca0:	102f883a 	mov	r23,r2
 800bca4:	10002926 	beq	r2,zero,800bd4c <__sfvwrite_r+0x4b8>
 800bca8:	81400417 	ldw	r5,16(r16)
 800bcac:	b00d883a 	mov	r6,r22
 800bcb0:	1009883a 	mov	r4,r2
 800bcb4:	800ca6c0 	call	800ca6c <memcpy>
 800bcb8:	8080030b 	ldhu	r2,12(r16)
 800bcbc:	00fedfc4 	movi	r3,-1153
 800bcc0:	10c4703a 	and	r2,r2,r3
 800bcc4:	10802014 	ori	r2,r2,128
 800bcc8:	8080030d 	sth	r2,12(r16)
 800bccc:	bd89883a 	add	r4,r23,r22
 800bcd0:	9d8fc83a 	sub	r7,r19,r22
 800bcd4:	85c00415 	stw	r23,16(r16)
 800bcd8:	84c00515 	stw	r19,20(r16)
 800bcdc:	81000015 	stw	r4,0(r16)
 800bce0:	9027883a 	mov	r19,r18
 800bce4:	81c00215 	stw	r7,8(r16)
 800bce8:	902f883a 	mov	r23,r18
 800bcec:	003f3806 	br	800b9d0 <__alt_data_end+0xfc00b9d0>
 800bcf0:	800b883a 	mov	r5,r16
 800bcf4:	a809883a 	mov	r4,r21
 800bcf8:	800b0240 	call	800b024 <_fflush_r>
 800bcfc:	103fb926 	beq	r2,zero,800bbe4 <__alt_data_end+0xfc00bbe4>
 800bd00:	003f6506 	br	800ba98 <__alt_data_end+0xfc00ba98>
 800bd04:	a809883a 	mov	r4,r21
 800bd08:	800def00 	call	800def0 <_realloc_r>
 800bd0c:	102f883a 	mov	r23,r2
 800bd10:	103fee1e 	bne	r2,zero,800bccc <__alt_data_end+0xfc00bccc>
 800bd14:	81400417 	ldw	r5,16(r16)
 800bd18:	a809883a 	mov	r4,r21
 800bd1c:	800b5840 	call	800b584 <_free_r>
 800bd20:	8080030b 	ldhu	r2,12(r16)
 800bd24:	00ffdfc4 	movi	r3,-129
 800bd28:	1884703a 	and	r2,r3,r2
 800bd2c:	00c00304 	movi	r3,12
 800bd30:	a8c00015 	stw	r3,0(r21)
 800bd34:	003f5906 	br	800ba9c <__alt_data_end+0xfc00ba9c>
 800bd38:	94c00044 	addi	r19,r18,1
 800bd3c:	02000044 	movi	r8,1
 800bd40:	003f6006 	br	800bac4 <__alt_data_end+0xfc00bac4>
 800bd44:	00bfffc4 	movi	r2,-1
 800bd48:	003f0006 	br	800b94c <__alt_data_end+0xfc00b94c>
 800bd4c:	00800304 	movi	r2,12
 800bd50:	a8800015 	stw	r2,0(r21)
 800bd54:	8080030b 	ldhu	r2,12(r16)
 800bd58:	003f5006 	br	800ba9c <__alt_data_end+0xfc00ba9c>

0800bd5c <_fwalk>:
 800bd5c:	defff704 	addi	sp,sp,-36
 800bd60:	dd000415 	stw	r20,16(sp)
 800bd64:	dfc00815 	stw	ra,32(sp)
 800bd68:	ddc00715 	stw	r23,28(sp)
 800bd6c:	dd800615 	stw	r22,24(sp)
 800bd70:	dd400515 	stw	r21,20(sp)
 800bd74:	dcc00315 	stw	r19,12(sp)
 800bd78:	dc800215 	stw	r18,8(sp)
 800bd7c:	dc400115 	stw	r17,4(sp)
 800bd80:	dc000015 	stw	r16,0(sp)
 800bd84:	2500b804 	addi	r20,r4,736
 800bd88:	a0002326 	beq	r20,zero,800be18 <_fwalk+0xbc>
 800bd8c:	282b883a 	mov	r21,r5
 800bd90:	002f883a 	mov	r23,zero
 800bd94:	05800044 	movi	r22,1
 800bd98:	04ffffc4 	movi	r19,-1
 800bd9c:	a4400117 	ldw	r17,4(r20)
 800bda0:	a4800217 	ldw	r18,8(r20)
 800bda4:	8c7fffc4 	addi	r17,r17,-1
 800bda8:	88000d16 	blt	r17,zero,800bde0 <_fwalk+0x84>
 800bdac:	94000304 	addi	r16,r18,12
 800bdb0:	94800384 	addi	r18,r18,14
 800bdb4:	8080000b 	ldhu	r2,0(r16)
 800bdb8:	8c7fffc4 	addi	r17,r17,-1
 800bdbc:	813ffd04 	addi	r4,r16,-12
 800bdc0:	b080042e 	bgeu	r22,r2,800bdd4 <_fwalk+0x78>
 800bdc4:	9080000f 	ldh	r2,0(r18)
 800bdc8:	14c00226 	beq	r2,r19,800bdd4 <_fwalk+0x78>
 800bdcc:	a83ee83a 	callr	r21
 800bdd0:	b8aeb03a 	or	r23,r23,r2
 800bdd4:	84001a04 	addi	r16,r16,104
 800bdd8:	94801a04 	addi	r18,r18,104
 800bddc:	8cfff51e 	bne	r17,r19,800bdb4 <__alt_data_end+0xfc00bdb4>
 800bde0:	a5000017 	ldw	r20,0(r20)
 800bde4:	a03fed1e 	bne	r20,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800bde8:	b805883a 	mov	r2,r23
 800bdec:	dfc00817 	ldw	ra,32(sp)
 800bdf0:	ddc00717 	ldw	r23,28(sp)
 800bdf4:	dd800617 	ldw	r22,24(sp)
 800bdf8:	dd400517 	ldw	r21,20(sp)
 800bdfc:	dd000417 	ldw	r20,16(sp)
 800be00:	dcc00317 	ldw	r19,12(sp)
 800be04:	dc800217 	ldw	r18,8(sp)
 800be08:	dc400117 	ldw	r17,4(sp)
 800be0c:	dc000017 	ldw	r16,0(sp)
 800be10:	dec00904 	addi	sp,sp,36
 800be14:	f800283a 	ret
 800be18:	002f883a 	mov	r23,zero
 800be1c:	003ff206 	br	800bde8 <__alt_data_end+0xfc00bde8>

0800be20 <_fwalk_reent>:
 800be20:	defff704 	addi	sp,sp,-36
 800be24:	dd000415 	stw	r20,16(sp)
 800be28:	dfc00815 	stw	ra,32(sp)
 800be2c:	ddc00715 	stw	r23,28(sp)
 800be30:	dd800615 	stw	r22,24(sp)
 800be34:	dd400515 	stw	r21,20(sp)
 800be38:	dcc00315 	stw	r19,12(sp)
 800be3c:	dc800215 	stw	r18,8(sp)
 800be40:	dc400115 	stw	r17,4(sp)
 800be44:	dc000015 	stw	r16,0(sp)
 800be48:	2500b804 	addi	r20,r4,736
 800be4c:	a0002326 	beq	r20,zero,800bedc <_fwalk_reent+0xbc>
 800be50:	282b883a 	mov	r21,r5
 800be54:	2027883a 	mov	r19,r4
 800be58:	002f883a 	mov	r23,zero
 800be5c:	05800044 	movi	r22,1
 800be60:	04bfffc4 	movi	r18,-1
 800be64:	a4400117 	ldw	r17,4(r20)
 800be68:	a4000217 	ldw	r16,8(r20)
 800be6c:	8c7fffc4 	addi	r17,r17,-1
 800be70:	88000c16 	blt	r17,zero,800bea4 <_fwalk_reent+0x84>
 800be74:	84000304 	addi	r16,r16,12
 800be78:	8080000b 	ldhu	r2,0(r16)
 800be7c:	8c7fffc4 	addi	r17,r17,-1
 800be80:	817ffd04 	addi	r5,r16,-12
 800be84:	b080052e 	bgeu	r22,r2,800be9c <_fwalk_reent+0x7c>
 800be88:	8080008f 	ldh	r2,2(r16)
 800be8c:	9809883a 	mov	r4,r19
 800be90:	14800226 	beq	r2,r18,800be9c <_fwalk_reent+0x7c>
 800be94:	a83ee83a 	callr	r21
 800be98:	b8aeb03a 	or	r23,r23,r2
 800be9c:	84001a04 	addi	r16,r16,104
 800bea0:	8cbff51e 	bne	r17,r18,800be78 <__alt_data_end+0xfc00be78>
 800bea4:	a5000017 	ldw	r20,0(r20)
 800bea8:	a03fee1e 	bne	r20,zero,800be64 <__alt_data_end+0xfc00be64>
 800beac:	b805883a 	mov	r2,r23
 800beb0:	dfc00817 	ldw	ra,32(sp)
 800beb4:	ddc00717 	ldw	r23,28(sp)
 800beb8:	dd800617 	ldw	r22,24(sp)
 800bebc:	dd400517 	ldw	r21,20(sp)
 800bec0:	dd000417 	ldw	r20,16(sp)
 800bec4:	dcc00317 	ldw	r19,12(sp)
 800bec8:	dc800217 	ldw	r18,8(sp)
 800becc:	dc400117 	ldw	r17,4(sp)
 800bed0:	dc000017 	ldw	r16,0(sp)
 800bed4:	dec00904 	addi	sp,sp,36
 800bed8:	f800283a 	ret
 800bedc:	002f883a 	mov	r23,zero
 800bee0:	003ff206 	br	800beac <__alt_data_end+0xfc00beac>

0800bee4 <_setlocale_r>:
 800bee4:	30001b26 	beq	r6,zero,800bf54 <_setlocale_r+0x70>
 800bee8:	014200b4 	movhi	r5,2050
 800beec:	defffe04 	addi	sp,sp,-8
 800bef0:	29600604 	addi	r5,r5,-32744
 800bef4:	3009883a 	mov	r4,r6
 800bef8:	dc000015 	stw	r16,0(sp)
 800befc:	dfc00115 	stw	ra,4(sp)
 800bf00:	3021883a 	mov	r16,r6
 800bf04:	800e6580 	call	800e658 <strcmp>
 800bf08:	1000061e 	bne	r2,zero,800bf24 <_setlocale_r+0x40>
 800bf0c:	008200b4 	movhi	r2,2050
 800bf10:	10a00504 	addi	r2,r2,-32748
 800bf14:	dfc00117 	ldw	ra,4(sp)
 800bf18:	dc000017 	ldw	r16,0(sp)
 800bf1c:	dec00204 	addi	sp,sp,8
 800bf20:	f800283a 	ret
 800bf24:	014200b4 	movhi	r5,2050
 800bf28:	29600504 	addi	r5,r5,-32748
 800bf2c:	8009883a 	mov	r4,r16
 800bf30:	800e6580 	call	800e658 <strcmp>
 800bf34:	103ff526 	beq	r2,zero,800bf0c <__alt_data_end+0xfc00bf0c>
 800bf38:	01420074 	movhi	r5,2049
 800bf3c:	295fe804 	addi	r5,r5,32672
 800bf40:	8009883a 	mov	r4,r16
 800bf44:	800e6580 	call	800e658 <strcmp>
 800bf48:	103ff026 	beq	r2,zero,800bf0c <__alt_data_end+0xfc00bf0c>
 800bf4c:	0005883a 	mov	r2,zero
 800bf50:	003ff006 	br	800bf14 <__alt_data_end+0xfc00bf14>
 800bf54:	008200b4 	movhi	r2,2050
 800bf58:	10a00504 	addi	r2,r2,-32748
 800bf5c:	f800283a 	ret

0800bf60 <__locale_charset>:
 800bf60:	008200b4 	movhi	r2,2050
 800bf64:	10a26004 	addi	r2,r2,-30336
 800bf68:	f800283a 	ret

0800bf6c <__locale_mb_cur_max>:
 800bf6c:	008200b4 	movhi	r2,2050
 800bf70:	10a80104 	addi	r2,r2,-24572
 800bf74:	10800017 	ldw	r2,0(r2)
 800bf78:	f800283a 	ret

0800bf7c <__locale_msgcharset>:
 800bf7c:	008200b4 	movhi	r2,2050
 800bf80:	10a25804 	addi	r2,r2,-30368
 800bf84:	f800283a 	ret

0800bf88 <__locale_cjk_lang>:
 800bf88:	0005883a 	mov	r2,zero
 800bf8c:	f800283a 	ret

0800bf90 <_localeconv_r>:
 800bf90:	008200b4 	movhi	r2,2050
 800bf94:	10a26804 	addi	r2,r2,-30304
 800bf98:	f800283a 	ret

0800bf9c <setlocale>:
 800bf9c:	008200b4 	movhi	r2,2050
 800bfa0:	10a80004 	addi	r2,r2,-24576
 800bfa4:	280d883a 	mov	r6,r5
 800bfa8:	200b883a 	mov	r5,r4
 800bfac:	11000017 	ldw	r4,0(r2)
 800bfb0:	800bee41 	jmpi	800bee4 <_setlocale_r>

0800bfb4 <localeconv>:
 800bfb4:	008200b4 	movhi	r2,2050
 800bfb8:	10a26804 	addi	r2,r2,-30304
 800bfbc:	f800283a 	ret

0800bfc0 <__smakebuf_r>:
 800bfc0:	2880030b 	ldhu	r2,12(r5)
 800bfc4:	10c0008c 	andi	r3,r2,2
 800bfc8:	1800411e 	bne	r3,zero,800c0d0 <__smakebuf_r+0x110>
 800bfcc:	deffec04 	addi	sp,sp,-80
 800bfd0:	dc000f15 	stw	r16,60(sp)
 800bfd4:	2821883a 	mov	r16,r5
 800bfd8:	2940038f 	ldh	r5,14(r5)
 800bfdc:	dc401015 	stw	r17,64(sp)
 800bfe0:	dfc01315 	stw	ra,76(sp)
 800bfe4:	dcc01215 	stw	r19,72(sp)
 800bfe8:	dc801115 	stw	r18,68(sp)
 800bfec:	2023883a 	mov	r17,r4
 800bff0:	28001c16 	blt	r5,zero,800c064 <__smakebuf_r+0xa4>
 800bff4:	d80d883a 	mov	r6,sp
 800bff8:	80118380 	call	8011838 <_fstat_r>
 800bffc:	10001816 	blt	r2,zero,800c060 <__smakebuf_r+0xa0>
 800c000:	d8800117 	ldw	r2,4(sp)
 800c004:	00e00014 	movui	r3,32768
 800c008:	10bc000c 	andi	r2,r2,61440
 800c00c:	14c80020 	cmpeqi	r19,r2,8192
 800c010:	10c03726 	beq	r2,r3,800c0f0 <__smakebuf_r+0x130>
 800c014:	80c0030b 	ldhu	r3,12(r16)
 800c018:	18c20014 	ori	r3,r3,2048
 800c01c:	80c0030d 	sth	r3,12(r16)
 800c020:	00c80004 	movi	r3,8192
 800c024:	10c0521e 	bne	r2,r3,800c170 <__smakebuf_r+0x1b0>
 800c028:	8140038f 	ldh	r5,14(r16)
 800c02c:	8809883a 	mov	r4,r17
 800c030:	80118940 	call	8011894 <_isatty_r>
 800c034:	10004c26 	beq	r2,zero,800c168 <__smakebuf_r+0x1a8>
 800c038:	8080030b 	ldhu	r2,12(r16)
 800c03c:	80c010c4 	addi	r3,r16,67
 800c040:	80c00015 	stw	r3,0(r16)
 800c044:	10800054 	ori	r2,r2,1
 800c048:	8080030d 	sth	r2,12(r16)
 800c04c:	00800044 	movi	r2,1
 800c050:	80c00415 	stw	r3,16(r16)
 800c054:	80800515 	stw	r2,20(r16)
 800c058:	04810004 	movi	r18,1024
 800c05c:	00000706 	br	800c07c <__smakebuf_r+0xbc>
 800c060:	8080030b 	ldhu	r2,12(r16)
 800c064:	10c0200c 	andi	r3,r2,128
 800c068:	18001f1e 	bne	r3,zero,800c0e8 <__smakebuf_r+0x128>
 800c06c:	04810004 	movi	r18,1024
 800c070:	10820014 	ori	r2,r2,2048
 800c074:	8080030d 	sth	r2,12(r16)
 800c078:	0027883a 	mov	r19,zero
 800c07c:	900b883a 	mov	r5,r18
 800c080:	8809883a 	mov	r4,r17
 800c084:	800c17c0 	call	800c17c <_malloc_r>
 800c088:	10002c26 	beq	r2,zero,800c13c <__smakebuf_r+0x17c>
 800c08c:	80c0030b 	ldhu	r3,12(r16)
 800c090:	01020074 	movhi	r4,2049
 800c094:	212c2e04 	addi	r4,r4,-20296
 800c098:	89000f15 	stw	r4,60(r17)
 800c09c:	18c02014 	ori	r3,r3,128
 800c0a0:	80c0030d 	sth	r3,12(r16)
 800c0a4:	80800015 	stw	r2,0(r16)
 800c0a8:	80800415 	stw	r2,16(r16)
 800c0ac:	84800515 	stw	r18,20(r16)
 800c0b0:	98001a1e 	bne	r19,zero,800c11c <__smakebuf_r+0x15c>
 800c0b4:	dfc01317 	ldw	ra,76(sp)
 800c0b8:	dcc01217 	ldw	r19,72(sp)
 800c0bc:	dc801117 	ldw	r18,68(sp)
 800c0c0:	dc401017 	ldw	r17,64(sp)
 800c0c4:	dc000f17 	ldw	r16,60(sp)
 800c0c8:	dec01404 	addi	sp,sp,80
 800c0cc:	f800283a 	ret
 800c0d0:	288010c4 	addi	r2,r5,67
 800c0d4:	28800015 	stw	r2,0(r5)
 800c0d8:	28800415 	stw	r2,16(r5)
 800c0dc:	00800044 	movi	r2,1
 800c0e0:	28800515 	stw	r2,20(r5)
 800c0e4:	f800283a 	ret
 800c0e8:	04801004 	movi	r18,64
 800c0ec:	003fe006 	br	800c070 <__alt_data_end+0xfc00c070>
 800c0f0:	81000a17 	ldw	r4,40(r16)
 800c0f4:	00c20074 	movhi	r3,2049
 800c0f8:	18f97d04 	addi	r3,r3,-6668
 800c0fc:	20ffc51e 	bne	r4,r3,800c014 <__alt_data_end+0xfc00c014>
 800c100:	8080030b 	ldhu	r2,12(r16)
 800c104:	04810004 	movi	r18,1024
 800c108:	84801315 	stw	r18,76(r16)
 800c10c:	1484b03a 	or	r2,r2,r18
 800c110:	8080030d 	sth	r2,12(r16)
 800c114:	0027883a 	mov	r19,zero
 800c118:	003fd806 	br	800c07c <__alt_data_end+0xfc00c07c>
 800c11c:	8140038f 	ldh	r5,14(r16)
 800c120:	8809883a 	mov	r4,r17
 800c124:	80118940 	call	8011894 <_isatty_r>
 800c128:	103fe226 	beq	r2,zero,800c0b4 <__alt_data_end+0xfc00c0b4>
 800c12c:	8080030b 	ldhu	r2,12(r16)
 800c130:	10800054 	ori	r2,r2,1
 800c134:	8080030d 	sth	r2,12(r16)
 800c138:	003fde06 	br	800c0b4 <__alt_data_end+0xfc00c0b4>
 800c13c:	8080030b 	ldhu	r2,12(r16)
 800c140:	10c0800c 	andi	r3,r2,512
 800c144:	183fdb1e 	bne	r3,zero,800c0b4 <__alt_data_end+0xfc00c0b4>
 800c148:	10800094 	ori	r2,r2,2
 800c14c:	80c010c4 	addi	r3,r16,67
 800c150:	8080030d 	sth	r2,12(r16)
 800c154:	00800044 	movi	r2,1
 800c158:	80c00015 	stw	r3,0(r16)
 800c15c:	80c00415 	stw	r3,16(r16)
 800c160:	80800515 	stw	r2,20(r16)
 800c164:	003fd306 	br	800c0b4 <__alt_data_end+0xfc00c0b4>
 800c168:	04810004 	movi	r18,1024
 800c16c:	003fc306 	br	800c07c <__alt_data_end+0xfc00c07c>
 800c170:	0027883a 	mov	r19,zero
 800c174:	04810004 	movi	r18,1024
 800c178:	003fc006 	br	800c07c <__alt_data_end+0xfc00c07c>

0800c17c <_malloc_r>:
 800c17c:	defff504 	addi	sp,sp,-44
 800c180:	dc800315 	stw	r18,12(sp)
 800c184:	dfc00a15 	stw	ra,40(sp)
 800c188:	df000915 	stw	fp,36(sp)
 800c18c:	ddc00815 	stw	r23,32(sp)
 800c190:	dd800715 	stw	r22,28(sp)
 800c194:	dd400615 	stw	r21,24(sp)
 800c198:	dd000515 	stw	r20,20(sp)
 800c19c:	dcc00415 	stw	r19,16(sp)
 800c1a0:	dc400215 	stw	r17,8(sp)
 800c1a4:	dc000115 	stw	r16,4(sp)
 800c1a8:	288002c4 	addi	r2,r5,11
 800c1ac:	00c00584 	movi	r3,22
 800c1b0:	2025883a 	mov	r18,r4
 800c1b4:	18807f2e 	bgeu	r3,r2,800c3b4 <_malloc_r+0x238>
 800c1b8:	047ffe04 	movi	r17,-8
 800c1bc:	1462703a 	and	r17,r2,r17
 800c1c0:	8800a316 	blt	r17,zero,800c450 <_malloc_r+0x2d4>
 800c1c4:	8940a236 	bltu	r17,r5,800c450 <_malloc_r+0x2d4>
 800c1c8:	80157f40 	call	80157f4 <__malloc_lock>
 800c1cc:	00807dc4 	movi	r2,503
 800c1d0:	1441e92e 	bgeu	r2,r17,800c978 <_malloc_r+0x7fc>
 800c1d4:	8804d27a 	srli	r2,r17,9
 800c1d8:	1000a126 	beq	r2,zero,800c460 <_malloc_r+0x2e4>
 800c1dc:	00c00104 	movi	r3,4
 800c1e0:	18811e36 	bltu	r3,r2,800c65c <_malloc_r+0x4e0>
 800c1e4:	8804d1ba 	srli	r2,r17,6
 800c1e8:	12000e44 	addi	r8,r2,57
 800c1ec:	11c00e04 	addi	r7,r2,56
 800c1f0:	4209883a 	add	r4,r8,r8
 800c1f4:	04c200b4 	movhi	r19,2050
 800c1f8:	2109883a 	add	r4,r4,r4
 800c1fc:	9ce27604 	addi	r19,r19,-30248
 800c200:	2109883a 	add	r4,r4,r4
 800c204:	9909883a 	add	r4,r19,r4
 800c208:	24000117 	ldw	r16,4(r4)
 800c20c:	213ffe04 	addi	r4,r4,-8
 800c210:	24009726 	beq	r4,r16,800c470 <_malloc_r+0x2f4>
 800c214:	80800117 	ldw	r2,4(r16)
 800c218:	01bfff04 	movi	r6,-4
 800c21c:	014003c4 	movi	r5,15
 800c220:	1184703a 	and	r2,r2,r6
 800c224:	1447c83a 	sub	r3,r2,r17
 800c228:	28c00716 	blt	r5,r3,800c248 <_malloc_r+0xcc>
 800c22c:	1800920e 	bge	r3,zero,800c478 <_malloc_r+0x2fc>
 800c230:	84000317 	ldw	r16,12(r16)
 800c234:	24008e26 	beq	r4,r16,800c470 <_malloc_r+0x2f4>
 800c238:	80800117 	ldw	r2,4(r16)
 800c23c:	1184703a 	and	r2,r2,r6
 800c240:	1447c83a 	sub	r3,r2,r17
 800c244:	28fff90e 	bge	r5,r3,800c22c <__alt_data_end+0xfc00c22c>
 800c248:	3809883a 	mov	r4,r7
 800c24c:	018200b4 	movhi	r6,2050
 800c250:	9c000417 	ldw	r16,16(r19)
 800c254:	31a27604 	addi	r6,r6,-30248
 800c258:	32000204 	addi	r8,r6,8
 800c25c:	82013426 	beq	r16,r8,800c730 <_malloc_r+0x5b4>
 800c260:	80c00117 	ldw	r3,4(r16)
 800c264:	00bfff04 	movi	r2,-4
 800c268:	188e703a 	and	r7,r3,r2
 800c26c:	3c45c83a 	sub	r2,r7,r17
 800c270:	00c003c4 	movi	r3,15
 800c274:	18811f16 	blt	r3,r2,800c6f4 <_malloc_r+0x578>
 800c278:	32000515 	stw	r8,20(r6)
 800c27c:	32000415 	stw	r8,16(r6)
 800c280:	10007f0e 	bge	r2,zero,800c480 <_malloc_r+0x304>
 800c284:	00807fc4 	movi	r2,511
 800c288:	11c0fd36 	bltu	r2,r7,800c680 <_malloc_r+0x504>
 800c28c:	3806d0fa 	srli	r3,r7,3
 800c290:	01c00044 	movi	r7,1
 800c294:	30800117 	ldw	r2,4(r6)
 800c298:	19400044 	addi	r5,r3,1
 800c29c:	294b883a 	add	r5,r5,r5
 800c2a0:	1807d0ba 	srai	r3,r3,2
 800c2a4:	294b883a 	add	r5,r5,r5
 800c2a8:	294b883a 	add	r5,r5,r5
 800c2ac:	298b883a 	add	r5,r5,r6
 800c2b0:	38c6983a 	sll	r3,r7,r3
 800c2b4:	29c00017 	ldw	r7,0(r5)
 800c2b8:	2a7ffe04 	addi	r9,r5,-8
 800c2bc:	1886b03a 	or	r3,r3,r2
 800c2c0:	82400315 	stw	r9,12(r16)
 800c2c4:	81c00215 	stw	r7,8(r16)
 800c2c8:	30c00115 	stw	r3,4(r6)
 800c2cc:	2c000015 	stw	r16,0(r5)
 800c2d0:	3c000315 	stw	r16,12(r7)
 800c2d4:	2005d0ba 	srai	r2,r4,2
 800c2d8:	01400044 	movi	r5,1
 800c2dc:	288a983a 	sll	r5,r5,r2
 800c2e0:	19406f36 	bltu	r3,r5,800c4a0 <_malloc_r+0x324>
 800c2e4:	28c4703a 	and	r2,r5,r3
 800c2e8:	10000a1e 	bne	r2,zero,800c314 <_malloc_r+0x198>
 800c2ec:	00bfff04 	movi	r2,-4
 800c2f0:	294b883a 	add	r5,r5,r5
 800c2f4:	2088703a 	and	r4,r4,r2
 800c2f8:	28c4703a 	and	r2,r5,r3
 800c2fc:	21000104 	addi	r4,r4,4
 800c300:	1000041e 	bne	r2,zero,800c314 <_malloc_r+0x198>
 800c304:	294b883a 	add	r5,r5,r5
 800c308:	28c4703a 	and	r2,r5,r3
 800c30c:	21000104 	addi	r4,r4,4
 800c310:	103ffc26 	beq	r2,zero,800c304 <__alt_data_end+0xfc00c304>
 800c314:	02bfff04 	movi	r10,-4
 800c318:	024003c4 	movi	r9,15
 800c31c:	21800044 	addi	r6,r4,1
 800c320:	318d883a 	add	r6,r6,r6
 800c324:	318d883a 	add	r6,r6,r6
 800c328:	318d883a 	add	r6,r6,r6
 800c32c:	998d883a 	add	r6,r19,r6
 800c330:	333ffe04 	addi	r12,r6,-8
 800c334:	2017883a 	mov	r11,r4
 800c338:	31800104 	addi	r6,r6,4
 800c33c:	34000017 	ldw	r16,0(r6)
 800c340:	31fffd04 	addi	r7,r6,-12
 800c344:	81c0041e 	bne	r16,r7,800c358 <_malloc_r+0x1dc>
 800c348:	0000fb06 	br	800c738 <_malloc_r+0x5bc>
 800c34c:	1801030e 	bge	r3,zero,800c75c <_malloc_r+0x5e0>
 800c350:	84000317 	ldw	r16,12(r16)
 800c354:	81c0f826 	beq	r16,r7,800c738 <_malloc_r+0x5bc>
 800c358:	80800117 	ldw	r2,4(r16)
 800c35c:	1284703a 	and	r2,r2,r10
 800c360:	1447c83a 	sub	r3,r2,r17
 800c364:	48fff90e 	bge	r9,r3,800c34c <__alt_data_end+0xfc00c34c>
 800c368:	80800317 	ldw	r2,12(r16)
 800c36c:	81000217 	ldw	r4,8(r16)
 800c370:	89400054 	ori	r5,r17,1
 800c374:	81400115 	stw	r5,4(r16)
 800c378:	20800315 	stw	r2,12(r4)
 800c37c:	11000215 	stw	r4,8(r2)
 800c380:	8463883a 	add	r17,r16,r17
 800c384:	9c400515 	stw	r17,20(r19)
 800c388:	9c400415 	stw	r17,16(r19)
 800c38c:	18800054 	ori	r2,r3,1
 800c390:	88800115 	stw	r2,4(r17)
 800c394:	8a000315 	stw	r8,12(r17)
 800c398:	8a000215 	stw	r8,8(r17)
 800c39c:	88e3883a 	add	r17,r17,r3
 800c3a0:	88c00015 	stw	r3,0(r17)
 800c3a4:	9009883a 	mov	r4,r18
 800c3a8:	80158180 	call	8015818 <__malloc_unlock>
 800c3ac:	80800204 	addi	r2,r16,8
 800c3b0:	00001b06 	br	800c420 <_malloc_r+0x2a4>
 800c3b4:	04400404 	movi	r17,16
 800c3b8:	89402536 	bltu	r17,r5,800c450 <_malloc_r+0x2d4>
 800c3bc:	80157f40 	call	80157f4 <__malloc_lock>
 800c3c0:	00800184 	movi	r2,6
 800c3c4:	01000084 	movi	r4,2
 800c3c8:	04c200b4 	movhi	r19,2050
 800c3cc:	1085883a 	add	r2,r2,r2
 800c3d0:	9ce27604 	addi	r19,r19,-30248
 800c3d4:	1085883a 	add	r2,r2,r2
 800c3d8:	9885883a 	add	r2,r19,r2
 800c3dc:	14000117 	ldw	r16,4(r2)
 800c3e0:	10fffe04 	addi	r3,r2,-8
 800c3e4:	80c0d926 	beq	r16,r3,800c74c <_malloc_r+0x5d0>
 800c3e8:	80c00117 	ldw	r3,4(r16)
 800c3ec:	81000317 	ldw	r4,12(r16)
 800c3f0:	00bfff04 	movi	r2,-4
 800c3f4:	1884703a 	and	r2,r3,r2
 800c3f8:	81400217 	ldw	r5,8(r16)
 800c3fc:	8085883a 	add	r2,r16,r2
 800c400:	10c00117 	ldw	r3,4(r2)
 800c404:	29000315 	stw	r4,12(r5)
 800c408:	21400215 	stw	r5,8(r4)
 800c40c:	18c00054 	ori	r3,r3,1
 800c410:	10c00115 	stw	r3,4(r2)
 800c414:	9009883a 	mov	r4,r18
 800c418:	80158180 	call	8015818 <__malloc_unlock>
 800c41c:	80800204 	addi	r2,r16,8
 800c420:	dfc00a17 	ldw	ra,40(sp)
 800c424:	df000917 	ldw	fp,36(sp)
 800c428:	ddc00817 	ldw	r23,32(sp)
 800c42c:	dd800717 	ldw	r22,28(sp)
 800c430:	dd400617 	ldw	r21,24(sp)
 800c434:	dd000517 	ldw	r20,20(sp)
 800c438:	dcc00417 	ldw	r19,16(sp)
 800c43c:	dc800317 	ldw	r18,12(sp)
 800c440:	dc400217 	ldw	r17,8(sp)
 800c444:	dc000117 	ldw	r16,4(sp)
 800c448:	dec00b04 	addi	sp,sp,44
 800c44c:	f800283a 	ret
 800c450:	00800304 	movi	r2,12
 800c454:	90800015 	stw	r2,0(r18)
 800c458:	0005883a 	mov	r2,zero
 800c45c:	003ff006 	br	800c420 <__alt_data_end+0xfc00c420>
 800c460:	01002004 	movi	r4,128
 800c464:	02001004 	movi	r8,64
 800c468:	01c00fc4 	movi	r7,63
 800c46c:	003f6106 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800c470:	4009883a 	mov	r4,r8
 800c474:	003f7506 	br	800c24c <__alt_data_end+0xfc00c24c>
 800c478:	81000317 	ldw	r4,12(r16)
 800c47c:	003fde06 	br	800c3f8 <__alt_data_end+0xfc00c3f8>
 800c480:	81c5883a 	add	r2,r16,r7
 800c484:	11400117 	ldw	r5,4(r2)
 800c488:	9009883a 	mov	r4,r18
 800c48c:	29400054 	ori	r5,r5,1
 800c490:	11400115 	stw	r5,4(r2)
 800c494:	80158180 	call	8015818 <__malloc_unlock>
 800c498:	80800204 	addi	r2,r16,8
 800c49c:	003fe006 	br	800c420 <__alt_data_end+0xfc00c420>
 800c4a0:	9c000217 	ldw	r16,8(r19)
 800c4a4:	00bfff04 	movi	r2,-4
 800c4a8:	85800117 	ldw	r22,4(r16)
 800c4ac:	b0ac703a 	and	r22,r22,r2
 800c4b0:	b4400336 	bltu	r22,r17,800c4c0 <_malloc_r+0x344>
 800c4b4:	b445c83a 	sub	r2,r22,r17
 800c4b8:	00c003c4 	movi	r3,15
 800c4bc:	18805d16 	blt	r3,r2,800c634 <_malloc_r+0x4b8>
 800c4c0:	05c200b4 	movhi	r23,2050
 800c4c4:	008200b4 	movhi	r2,2050
 800c4c8:	10af7d04 	addi	r2,r2,-16908
 800c4cc:	bde80204 	addi	r23,r23,-24568
 800c4d0:	15400017 	ldw	r21,0(r2)
 800c4d4:	b8c00017 	ldw	r3,0(r23)
 800c4d8:	00bfffc4 	movi	r2,-1
 800c4dc:	858d883a 	add	r6,r16,r22
 800c4e0:	8d6b883a 	add	r21,r17,r21
 800c4e4:	1880ea26 	beq	r3,r2,800c890 <_malloc_r+0x714>
 800c4e8:	ad4403c4 	addi	r21,r21,4111
 800c4ec:	00bc0004 	movi	r2,-4096
 800c4f0:	a8aa703a 	and	r21,r21,r2
 800c4f4:	a80b883a 	mov	r5,r21
 800c4f8:	9009883a 	mov	r4,r18
 800c4fc:	d9800015 	stw	r6,0(sp)
 800c500:	800e4c80 	call	800e4c8 <_sbrk_r>
 800c504:	1029883a 	mov	r20,r2
 800c508:	00bfffc4 	movi	r2,-1
 800c50c:	d9800017 	ldw	r6,0(sp)
 800c510:	a080e826 	beq	r20,r2,800c8b4 <_malloc_r+0x738>
 800c514:	a180a636 	bltu	r20,r6,800c7b0 <_malloc_r+0x634>
 800c518:	070200b4 	movhi	fp,2050
 800c51c:	e72f9004 	addi	fp,fp,-16832
 800c520:	e0800017 	ldw	r2,0(fp)
 800c524:	a887883a 	add	r3,r21,r2
 800c528:	e0c00015 	stw	r3,0(fp)
 800c52c:	3500e626 	beq	r6,r20,800c8c8 <_malloc_r+0x74c>
 800c530:	b9000017 	ldw	r4,0(r23)
 800c534:	00bfffc4 	movi	r2,-1
 800c538:	2080ee26 	beq	r4,r2,800c8f4 <_malloc_r+0x778>
 800c53c:	a185c83a 	sub	r2,r20,r6
 800c540:	10c5883a 	add	r2,r2,r3
 800c544:	e0800015 	stw	r2,0(fp)
 800c548:	a0c001cc 	andi	r3,r20,7
 800c54c:	1800bc26 	beq	r3,zero,800c840 <_malloc_r+0x6c4>
 800c550:	a0e9c83a 	sub	r20,r20,r3
 800c554:	00840204 	movi	r2,4104
 800c558:	a5000204 	addi	r20,r20,8
 800c55c:	10c7c83a 	sub	r3,r2,r3
 800c560:	a545883a 	add	r2,r20,r21
 800c564:	1083ffcc 	andi	r2,r2,4095
 800c568:	18abc83a 	sub	r21,r3,r2
 800c56c:	a80b883a 	mov	r5,r21
 800c570:	9009883a 	mov	r4,r18
 800c574:	800e4c80 	call	800e4c8 <_sbrk_r>
 800c578:	00ffffc4 	movi	r3,-1
 800c57c:	10c0e126 	beq	r2,r3,800c904 <_malloc_r+0x788>
 800c580:	1505c83a 	sub	r2,r2,r20
 800c584:	1545883a 	add	r2,r2,r21
 800c588:	10800054 	ori	r2,r2,1
 800c58c:	e0c00017 	ldw	r3,0(fp)
 800c590:	9d000215 	stw	r20,8(r19)
 800c594:	a0800115 	stw	r2,4(r20)
 800c598:	a8c7883a 	add	r3,r21,r3
 800c59c:	e0c00015 	stw	r3,0(fp)
 800c5a0:	84c00e26 	beq	r16,r19,800c5dc <_malloc_r+0x460>
 800c5a4:	018003c4 	movi	r6,15
 800c5a8:	3580a72e 	bgeu	r6,r22,800c848 <_malloc_r+0x6cc>
 800c5ac:	81400117 	ldw	r5,4(r16)
 800c5b0:	013ffe04 	movi	r4,-8
 800c5b4:	b0bffd04 	addi	r2,r22,-12
 800c5b8:	1104703a 	and	r2,r2,r4
 800c5bc:	2900004c 	andi	r4,r5,1
 800c5c0:	2088b03a 	or	r4,r4,r2
 800c5c4:	81000115 	stw	r4,4(r16)
 800c5c8:	01400144 	movi	r5,5
 800c5cc:	8089883a 	add	r4,r16,r2
 800c5d0:	21400115 	stw	r5,4(r4)
 800c5d4:	21400215 	stw	r5,8(r4)
 800c5d8:	3080cd36 	bltu	r6,r2,800c910 <_malloc_r+0x794>
 800c5dc:	008200b4 	movhi	r2,2050
 800c5e0:	10af7c04 	addi	r2,r2,-16912
 800c5e4:	11000017 	ldw	r4,0(r2)
 800c5e8:	20c0012e 	bgeu	r4,r3,800c5f0 <_malloc_r+0x474>
 800c5ec:	10c00015 	stw	r3,0(r2)
 800c5f0:	008200b4 	movhi	r2,2050
 800c5f4:	10af7b04 	addi	r2,r2,-16916
 800c5f8:	11000017 	ldw	r4,0(r2)
 800c5fc:	9c000217 	ldw	r16,8(r19)
 800c600:	20c0012e 	bgeu	r4,r3,800c608 <_malloc_r+0x48c>
 800c604:	10c00015 	stw	r3,0(r2)
 800c608:	80c00117 	ldw	r3,4(r16)
 800c60c:	00bfff04 	movi	r2,-4
 800c610:	1886703a 	and	r3,r3,r2
 800c614:	1c45c83a 	sub	r2,r3,r17
 800c618:	1c400236 	bltu	r3,r17,800c624 <_malloc_r+0x4a8>
 800c61c:	00c003c4 	movi	r3,15
 800c620:	18800416 	blt	r3,r2,800c634 <_malloc_r+0x4b8>
 800c624:	9009883a 	mov	r4,r18
 800c628:	80158180 	call	8015818 <__malloc_unlock>
 800c62c:	0005883a 	mov	r2,zero
 800c630:	003f7b06 	br	800c420 <__alt_data_end+0xfc00c420>
 800c634:	88c00054 	ori	r3,r17,1
 800c638:	80c00115 	stw	r3,4(r16)
 800c63c:	8463883a 	add	r17,r16,r17
 800c640:	10800054 	ori	r2,r2,1
 800c644:	9c400215 	stw	r17,8(r19)
 800c648:	88800115 	stw	r2,4(r17)
 800c64c:	9009883a 	mov	r4,r18
 800c650:	80158180 	call	8015818 <__malloc_unlock>
 800c654:	80800204 	addi	r2,r16,8
 800c658:	003f7106 	br	800c420 <__alt_data_end+0xfc00c420>
 800c65c:	00c00504 	movi	r3,20
 800c660:	18804a2e 	bgeu	r3,r2,800c78c <_malloc_r+0x610>
 800c664:	00c01504 	movi	r3,84
 800c668:	18806e36 	bltu	r3,r2,800c824 <_malloc_r+0x6a8>
 800c66c:	8804d33a 	srli	r2,r17,12
 800c670:	12001bc4 	addi	r8,r2,111
 800c674:	11c01b84 	addi	r7,r2,110
 800c678:	4209883a 	add	r4,r8,r8
 800c67c:	003edd06 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800c680:	3804d27a 	srli	r2,r7,9
 800c684:	00c00104 	movi	r3,4
 800c688:	1880442e 	bgeu	r3,r2,800c79c <_malloc_r+0x620>
 800c68c:	00c00504 	movi	r3,20
 800c690:	18808136 	bltu	r3,r2,800c898 <_malloc_r+0x71c>
 800c694:	11401704 	addi	r5,r2,92
 800c698:	10c016c4 	addi	r3,r2,91
 800c69c:	294b883a 	add	r5,r5,r5
 800c6a0:	294b883a 	add	r5,r5,r5
 800c6a4:	294b883a 	add	r5,r5,r5
 800c6a8:	994b883a 	add	r5,r19,r5
 800c6ac:	28800017 	ldw	r2,0(r5)
 800c6b0:	018200b4 	movhi	r6,2050
 800c6b4:	297ffe04 	addi	r5,r5,-8
 800c6b8:	31a27604 	addi	r6,r6,-30248
 800c6bc:	28806526 	beq	r5,r2,800c854 <_malloc_r+0x6d8>
 800c6c0:	01bfff04 	movi	r6,-4
 800c6c4:	10c00117 	ldw	r3,4(r2)
 800c6c8:	1986703a 	and	r3,r3,r6
 800c6cc:	38c0022e 	bgeu	r7,r3,800c6d8 <_malloc_r+0x55c>
 800c6d0:	10800217 	ldw	r2,8(r2)
 800c6d4:	28bffb1e 	bne	r5,r2,800c6c4 <__alt_data_end+0xfc00c6c4>
 800c6d8:	11400317 	ldw	r5,12(r2)
 800c6dc:	98c00117 	ldw	r3,4(r19)
 800c6e0:	81400315 	stw	r5,12(r16)
 800c6e4:	80800215 	stw	r2,8(r16)
 800c6e8:	2c000215 	stw	r16,8(r5)
 800c6ec:	14000315 	stw	r16,12(r2)
 800c6f0:	003ef806 	br	800c2d4 <__alt_data_end+0xfc00c2d4>
 800c6f4:	88c00054 	ori	r3,r17,1
 800c6f8:	80c00115 	stw	r3,4(r16)
 800c6fc:	8463883a 	add	r17,r16,r17
 800c700:	34400515 	stw	r17,20(r6)
 800c704:	34400415 	stw	r17,16(r6)
 800c708:	10c00054 	ori	r3,r2,1
 800c70c:	8a000315 	stw	r8,12(r17)
 800c710:	8a000215 	stw	r8,8(r17)
 800c714:	88c00115 	stw	r3,4(r17)
 800c718:	88a3883a 	add	r17,r17,r2
 800c71c:	88800015 	stw	r2,0(r17)
 800c720:	9009883a 	mov	r4,r18
 800c724:	80158180 	call	8015818 <__malloc_unlock>
 800c728:	80800204 	addi	r2,r16,8
 800c72c:	003f3c06 	br	800c420 <__alt_data_end+0xfc00c420>
 800c730:	30c00117 	ldw	r3,4(r6)
 800c734:	003ee706 	br	800c2d4 <__alt_data_end+0xfc00c2d4>
 800c738:	5ac00044 	addi	r11,r11,1
 800c73c:	588000cc 	andi	r2,r11,3
 800c740:	31800204 	addi	r6,r6,8
 800c744:	103efd1e 	bne	r2,zero,800c33c <__alt_data_end+0xfc00c33c>
 800c748:	00002406 	br	800c7dc <_malloc_r+0x660>
 800c74c:	14000317 	ldw	r16,12(r2)
 800c750:	143f251e 	bne	r2,r16,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c754:	21000084 	addi	r4,r4,2
 800c758:	003ebc06 	br	800c24c <__alt_data_end+0xfc00c24c>
 800c75c:	8085883a 	add	r2,r16,r2
 800c760:	10c00117 	ldw	r3,4(r2)
 800c764:	81000317 	ldw	r4,12(r16)
 800c768:	81400217 	ldw	r5,8(r16)
 800c76c:	18c00054 	ori	r3,r3,1
 800c770:	10c00115 	stw	r3,4(r2)
 800c774:	29000315 	stw	r4,12(r5)
 800c778:	21400215 	stw	r5,8(r4)
 800c77c:	9009883a 	mov	r4,r18
 800c780:	80158180 	call	8015818 <__malloc_unlock>
 800c784:	80800204 	addi	r2,r16,8
 800c788:	003f2506 	br	800c420 <__alt_data_end+0xfc00c420>
 800c78c:	12001704 	addi	r8,r2,92
 800c790:	11c016c4 	addi	r7,r2,91
 800c794:	4209883a 	add	r4,r8,r8
 800c798:	003e9606 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800c79c:	3804d1ba 	srli	r2,r7,6
 800c7a0:	11400e44 	addi	r5,r2,57
 800c7a4:	10c00e04 	addi	r3,r2,56
 800c7a8:	294b883a 	add	r5,r5,r5
 800c7ac:	003fbc06 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800c7b0:	84ff5926 	beq	r16,r19,800c518 <__alt_data_end+0xfc00c518>
 800c7b4:	008200b4 	movhi	r2,2050
 800c7b8:	10a27604 	addi	r2,r2,-30248
 800c7bc:	14000217 	ldw	r16,8(r2)
 800c7c0:	00bfff04 	movi	r2,-4
 800c7c4:	80c00117 	ldw	r3,4(r16)
 800c7c8:	1886703a 	and	r3,r3,r2
 800c7cc:	003f9106 	br	800c614 <__alt_data_end+0xfc00c614>
 800c7d0:	60800217 	ldw	r2,8(r12)
 800c7d4:	213fffc4 	addi	r4,r4,-1
 800c7d8:	1300651e 	bne	r2,r12,800c970 <_malloc_r+0x7f4>
 800c7dc:	208000cc 	andi	r2,r4,3
 800c7e0:	633ffe04 	addi	r12,r12,-8
 800c7e4:	103ffa1e 	bne	r2,zero,800c7d0 <__alt_data_end+0xfc00c7d0>
 800c7e8:	98800117 	ldw	r2,4(r19)
 800c7ec:	0146303a 	nor	r3,zero,r5
 800c7f0:	1884703a 	and	r2,r3,r2
 800c7f4:	98800115 	stw	r2,4(r19)
 800c7f8:	294b883a 	add	r5,r5,r5
 800c7fc:	117f2836 	bltu	r2,r5,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c800:	283f2726 	beq	r5,zero,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c804:	2886703a 	and	r3,r5,r2
 800c808:	5809883a 	mov	r4,r11
 800c80c:	183ec31e 	bne	r3,zero,800c31c <__alt_data_end+0xfc00c31c>
 800c810:	294b883a 	add	r5,r5,r5
 800c814:	2886703a 	and	r3,r5,r2
 800c818:	21000104 	addi	r4,r4,4
 800c81c:	183ffc26 	beq	r3,zero,800c810 <__alt_data_end+0xfc00c810>
 800c820:	003ebe06 	br	800c31c <__alt_data_end+0xfc00c31c>
 800c824:	00c05504 	movi	r3,340
 800c828:	18801236 	bltu	r3,r2,800c874 <_malloc_r+0x6f8>
 800c82c:	8804d3fa 	srli	r2,r17,15
 800c830:	12001e04 	addi	r8,r2,120
 800c834:	11c01dc4 	addi	r7,r2,119
 800c838:	4209883a 	add	r4,r8,r8
 800c83c:	003e6d06 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800c840:	00c40004 	movi	r3,4096
 800c844:	003f4606 	br	800c560 <__alt_data_end+0xfc00c560>
 800c848:	00800044 	movi	r2,1
 800c84c:	a0800115 	stw	r2,4(r20)
 800c850:	003f7406 	br	800c624 <__alt_data_end+0xfc00c624>
 800c854:	1805d0ba 	srai	r2,r3,2
 800c858:	01c00044 	movi	r7,1
 800c85c:	30c00117 	ldw	r3,4(r6)
 800c860:	388e983a 	sll	r7,r7,r2
 800c864:	2805883a 	mov	r2,r5
 800c868:	38c6b03a 	or	r3,r7,r3
 800c86c:	30c00115 	stw	r3,4(r6)
 800c870:	003f9b06 	br	800c6e0 <__alt_data_end+0xfc00c6e0>
 800c874:	00c15504 	movi	r3,1364
 800c878:	18801a36 	bltu	r3,r2,800c8e4 <_malloc_r+0x768>
 800c87c:	8804d4ba 	srli	r2,r17,18
 800c880:	12001f44 	addi	r8,r2,125
 800c884:	11c01f04 	addi	r7,r2,124
 800c888:	4209883a 	add	r4,r8,r8
 800c88c:	003e5906 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800c890:	ad400404 	addi	r21,r21,16
 800c894:	003f1706 	br	800c4f4 <__alt_data_end+0xfc00c4f4>
 800c898:	00c01504 	movi	r3,84
 800c89c:	18802336 	bltu	r3,r2,800c92c <_malloc_r+0x7b0>
 800c8a0:	3804d33a 	srli	r2,r7,12
 800c8a4:	11401bc4 	addi	r5,r2,111
 800c8a8:	10c01b84 	addi	r3,r2,110
 800c8ac:	294b883a 	add	r5,r5,r5
 800c8b0:	003f7b06 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800c8b4:	9c000217 	ldw	r16,8(r19)
 800c8b8:	00bfff04 	movi	r2,-4
 800c8bc:	80c00117 	ldw	r3,4(r16)
 800c8c0:	1886703a 	and	r3,r3,r2
 800c8c4:	003f5306 	br	800c614 <__alt_data_end+0xfc00c614>
 800c8c8:	3083ffcc 	andi	r2,r6,4095
 800c8cc:	103f181e 	bne	r2,zero,800c530 <__alt_data_end+0xfc00c530>
 800c8d0:	99000217 	ldw	r4,8(r19)
 800c8d4:	b545883a 	add	r2,r22,r21
 800c8d8:	10800054 	ori	r2,r2,1
 800c8dc:	20800115 	stw	r2,4(r4)
 800c8e0:	003f3e06 	br	800c5dc <__alt_data_end+0xfc00c5dc>
 800c8e4:	01003f84 	movi	r4,254
 800c8e8:	02001fc4 	movi	r8,127
 800c8ec:	01c01f84 	movi	r7,126
 800c8f0:	003e4006 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800c8f4:	008200b4 	movhi	r2,2050
 800c8f8:	10a80204 	addi	r2,r2,-24568
 800c8fc:	15000015 	stw	r20,0(r2)
 800c900:	003f1106 	br	800c548 <__alt_data_end+0xfc00c548>
 800c904:	00800044 	movi	r2,1
 800c908:	002b883a 	mov	r21,zero
 800c90c:	003f1f06 	br	800c58c <__alt_data_end+0xfc00c58c>
 800c910:	81400204 	addi	r5,r16,8
 800c914:	9009883a 	mov	r4,r18
 800c918:	800b5840 	call	800b584 <_free_r>
 800c91c:	008200b4 	movhi	r2,2050
 800c920:	10af9004 	addi	r2,r2,-16832
 800c924:	10c00017 	ldw	r3,0(r2)
 800c928:	003f2c06 	br	800c5dc <__alt_data_end+0xfc00c5dc>
 800c92c:	00c05504 	movi	r3,340
 800c930:	18800536 	bltu	r3,r2,800c948 <_malloc_r+0x7cc>
 800c934:	3804d3fa 	srli	r2,r7,15
 800c938:	11401e04 	addi	r5,r2,120
 800c93c:	10c01dc4 	addi	r3,r2,119
 800c940:	294b883a 	add	r5,r5,r5
 800c944:	003f5606 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800c948:	00c15504 	movi	r3,1364
 800c94c:	18800536 	bltu	r3,r2,800c964 <_malloc_r+0x7e8>
 800c950:	3804d4ba 	srli	r2,r7,18
 800c954:	11401f44 	addi	r5,r2,125
 800c958:	10c01f04 	addi	r3,r2,124
 800c95c:	294b883a 	add	r5,r5,r5
 800c960:	003f4f06 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800c964:	01403f84 	movi	r5,254
 800c968:	00c01f84 	movi	r3,126
 800c96c:	003f4c06 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800c970:	98800117 	ldw	r2,4(r19)
 800c974:	003fa006 	br	800c7f8 <__alt_data_end+0xfc00c7f8>
 800c978:	8808d0fa 	srli	r4,r17,3
 800c97c:	20800044 	addi	r2,r4,1
 800c980:	1085883a 	add	r2,r2,r2
 800c984:	003e9006 	br	800c3c8 <__alt_data_end+0xfc00c3c8>

0800c988 <memchr>:
 800c988:	208000cc 	andi	r2,r4,3
 800c98c:	280f883a 	mov	r7,r5
 800c990:	10003426 	beq	r2,zero,800ca64 <memchr+0xdc>
 800c994:	30bfffc4 	addi	r2,r6,-1
 800c998:	30001a26 	beq	r6,zero,800ca04 <memchr+0x7c>
 800c99c:	20c00003 	ldbu	r3,0(r4)
 800c9a0:	29803fcc 	andi	r6,r5,255
 800c9a4:	30c0051e 	bne	r6,r3,800c9bc <memchr+0x34>
 800c9a8:	00001806 	br	800ca0c <memchr+0x84>
 800c9ac:	10001526 	beq	r2,zero,800ca04 <memchr+0x7c>
 800c9b0:	20c00003 	ldbu	r3,0(r4)
 800c9b4:	10bfffc4 	addi	r2,r2,-1
 800c9b8:	30c01426 	beq	r6,r3,800ca0c <memchr+0x84>
 800c9bc:	21000044 	addi	r4,r4,1
 800c9c0:	20c000cc 	andi	r3,r4,3
 800c9c4:	183ff91e 	bne	r3,zero,800c9ac <__alt_data_end+0xfc00c9ac>
 800c9c8:	020000c4 	movi	r8,3
 800c9cc:	40801136 	bltu	r8,r2,800ca14 <memchr+0x8c>
 800c9d0:	10000c26 	beq	r2,zero,800ca04 <memchr+0x7c>
 800c9d4:	20c00003 	ldbu	r3,0(r4)
 800c9d8:	29403fcc 	andi	r5,r5,255
 800c9dc:	28c00b26 	beq	r5,r3,800ca0c <memchr+0x84>
 800c9e0:	20c00044 	addi	r3,r4,1
 800c9e4:	39803fcc 	andi	r6,r7,255
 800c9e8:	2089883a 	add	r4,r4,r2
 800c9ec:	00000306 	br	800c9fc <memchr+0x74>
 800c9f0:	18c00044 	addi	r3,r3,1
 800c9f4:	197fffc3 	ldbu	r5,-1(r3)
 800c9f8:	31400526 	beq	r6,r5,800ca10 <memchr+0x88>
 800c9fc:	1805883a 	mov	r2,r3
 800ca00:	20fffb1e 	bne	r4,r3,800c9f0 <__alt_data_end+0xfc00c9f0>
 800ca04:	0005883a 	mov	r2,zero
 800ca08:	f800283a 	ret
 800ca0c:	2005883a 	mov	r2,r4
 800ca10:	f800283a 	ret
 800ca14:	28c03fcc 	andi	r3,r5,255
 800ca18:	1812923a 	slli	r9,r3,8
 800ca1c:	02ffbff4 	movhi	r11,65279
 800ca20:	02a02074 	movhi	r10,32897
 800ca24:	48d2b03a 	or	r9,r9,r3
 800ca28:	4806943a 	slli	r3,r9,16
 800ca2c:	5affbfc4 	addi	r11,r11,-257
 800ca30:	52a02004 	addi	r10,r10,-32640
 800ca34:	48d2b03a 	or	r9,r9,r3
 800ca38:	20c00017 	ldw	r3,0(r4)
 800ca3c:	48c6f03a 	xor	r3,r9,r3
 800ca40:	1acd883a 	add	r6,r3,r11
 800ca44:	00c6303a 	nor	r3,zero,r3
 800ca48:	30c6703a 	and	r3,r6,r3
 800ca4c:	1a86703a 	and	r3,r3,r10
 800ca50:	183fe01e 	bne	r3,zero,800c9d4 <__alt_data_end+0xfc00c9d4>
 800ca54:	10bfff04 	addi	r2,r2,-4
 800ca58:	21000104 	addi	r4,r4,4
 800ca5c:	40bff636 	bltu	r8,r2,800ca38 <__alt_data_end+0xfc00ca38>
 800ca60:	003fdb06 	br	800c9d0 <__alt_data_end+0xfc00c9d0>
 800ca64:	3005883a 	mov	r2,r6
 800ca68:	003fd706 	br	800c9c8 <__alt_data_end+0xfc00c9c8>

0800ca6c <memcpy>:
 800ca6c:	defffd04 	addi	sp,sp,-12
 800ca70:	dfc00215 	stw	ra,8(sp)
 800ca74:	dc400115 	stw	r17,4(sp)
 800ca78:	dc000015 	stw	r16,0(sp)
 800ca7c:	00c003c4 	movi	r3,15
 800ca80:	2005883a 	mov	r2,r4
 800ca84:	1980452e 	bgeu	r3,r6,800cb9c <memcpy+0x130>
 800ca88:	2906b03a 	or	r3,r5,r4
 800ca8c:	18c000cc 	andi	r3,r3,3
 800ca90:	1800441e 	bne	r3,zero,800cba4 <memcpy+0x138>
 800ca94:	347ffc04 	addi	r17,r6,-16
 800ca98:	8822d13a 	srli	r17,r17,4
 800ca9c:	28c00104 	addi	r3,r5,4
 800caa0:	23400104 	addi	r13,r4,4
 800caa4:	8820913a 	slli	r16,r17,4
 800caa8:	2b000204 	addi	r12,r5,8
 800caac:	22c00204 	addi	r11,r4,8
 800cab0:	84000504 	addi	r16,r16,20
 800cab4:	2a800304 	addi	r10,r5,12
 800cab8:	22400304 	addi	r9,r4,12
 800cabc:	2c21883a 	add	r16,r5,r16
 800cac0:	2811883a 	mov	r8,r5
 800cac4:	200f883a 	mov	r7,r4
 800cac8:	41000017 	ldw	r4,0(r8)
 800cacc:	1fc00017 	ldw	ra,0(r3)
 800cad0:	63c00017 	ldw	r15,0(r12)
 800cad4:	39000015 	stw	r4,0(r7)
 800cad8:	53800017 	ldw	r14,0(r10)
 800cadc:	6fc00015 	stw	ra,0(r13)
 800cae0:	5bc00015 	stw	r15,0(r11)
 800cae4:	4b800015 	stw	r14,0(r9)
 800cae8:	18c00404 	addi	r3,r3,16
 800caec:	39c00404 	addi	r7,r7,16
 800caf0:	42000404 	addi	r8,r8,16
 800caf4:	6b400404 	addi	r13,r13,16
 800caf8:	63000404 	addi	r12,r12,16
 800cafc:	5ac00404 	addi	r11,r11,16
 800cb00:	52800404 	addi	r10,r10,16
 800cb04:	4a400404 	addi	r9,r9,16
 800cb08:	1c3fef1e 	bne	r3,r16,800cac8 <__alt_data_end+0xfc00cac8>
 800cb0c:	89c00044 	addi	r7,r17,1
 800cb10:	380e913a 	slli	r7,r7,4
 800cb14:	310003cc 	andi	r4,r6,15
 800cb18:	02c000c4 	movi	r11,3
 800cb1c:	11c7883a 	add	r3,r2,r7
 800cb20:	29cb883a 	add	r5,r5,r7
 800cb24:	5900212e 	bgeu	r11,r4,800cbac <memcpy+0x140>
 800cb28:	1813883a 	mov	r9,r3
 800cb2c:	2811883a 	mov	r8,r5
 800cb30:	200f883a 	mov	r7,r4
 800cb34:	42800017 	ldw	r10,0(r8)
 800cb38:	4a400104 	addi	r9,r9,4
 800cb3c:	39ffff04 	addi	r7,r7,-4
 800cb40:	4abfff15 	stw	r10,-4(r9)
 800cb44:	42000104 	addi	r8,r8,4
 800cb48:	59fffa36 	bltu	r11,r7,800cb34 <__alt_data_end+0xfc00cb34>
 800cb4c:	213fff04 	addi	r4,r4,-4
 800cb50:	2008d0ba 	srli	r4,r4,2
 800cb54:	318000cc 	andi	r6,r6,3
 800cb58:	21000044 	addi	r4,r4,1
 800cb5c:	2109883a 	add	r4,r4,r4
 800cb60:	2109883a 	add	r4,r4,r4
 800cb64:	1907883a 	add	r3,r3,r4
 800cb68:	290b883a 	add	r5,r5,r4
 800cb6c:	30000626 	beq	r6,zero,800cb88 <memcpy+0x11c>
 800cb70:	198d883a 	add	r6,r3,r6
 800cb74:	29c00003 	ldbu	r7,0(r5)
 800cb78:	18c00044 	addi	r3,r3,1
 800cb7c:	29400044 	addi	r5,r5,1
 800cb80:	19ffffc5 	stb	r7,-1(r3)
 800cb84:	19bffb1e 	bne	r3,r6,800cb74 <__alt_data_end+0xfc00cb74>
 800cb88:	dfc00217 	ldw	ra,8(sp)
 800cb8c:	dc400117 	ldw	r17,4(sp)
 800cb90:	dc000017 	ldw	r16,0(sp)
 800cb94:	dec00304 	addi	sp,sp,12
 800cb98:	f800283a 	ret
 800cb9c:	2007883a 	mov	r3,r4
 800cba0:	003ff206 	br	800cb6c <__alt_data_end+0xfc00cb6c>
 800cba4:	2007883a 	mov	r3,r4
 800cba8:	003ff106 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800cbac:	200d883a 	mov	r6,r4
 800cbb0:	003fee06 	br	800cb6c <__alt_data_end+0xfc00cb6c>

0800cbb4 <memmove>:
 800cbb4:	2005883a 	mov	r2,r4
 800cbb8:	29000b2e 	bgeu	r5,r4,800cbe8 <memmove+0x34>
 800cbbc:	298f883a 	add	r7,r5,r6
 800cbc0:	21c0092e 	bgeu	r4,r7,800cbe8 <memmove+0x34>
 800cbc4:	2187883a 	add	r3,r4,r6
 800cbc8:	198bc83a 	sub	r5,r3,r6
 800cbcc:	30004826 	beq	r6,zero,800ccf0 <memmove+0x13c>
 800cbd0:	39ffffc4 	addi	r7,r7,-1
 800cbd4:	39000003 	ldbu	r4,0(r7)
 800cbd8:	18ffffc4 	addi	r3,r3,-1
 800cbdc:	19000005 	stb	r4,0(r3)
 800cbe0:	28fffb1e 	bne	r5,r3,800cbd0 <__alt_data_end+0xfc00cbd0>
 800cbe4:	f800283a 	ret
 800cbe8:	00c003c4 	movi	r3,15
 800cbec:	1980412e 	bgeu	r3,r6,800ccf4 <memmove+0x140>
 800cbf0:	2886b03a 	or	r3,r5,r2
 800cbf4:	18c000cc 	andi	r3,r3,3
 800cbf8:	1800401e 	bne	r3,zero,800ccfc <memmove+0x148>
 800cbfc:	33fffc04 	addi	r15,r6,-16
 800cc00:	781ed13a 	srli	r15,r15,4
 800cc04:	28c00104 	addi	r3,r5,4
 800cc08:	13400104 	addi	r13,r2,4
 800cc0c:	781c913a 	slli	r14,r15,4
 800cc10:	2b000204 	addi	r12,r5,8
 800cc14:	12c00204 	addi	r11,r2,8
 800cc18:	73800504 	addi	r14,r14,20
 800cc1c:	2a800304 	addi	r10,r5,12
 800cc20:	12400304 	addi	r9,r2,12
 800cc24:	2b9d883a 	add	r14,r5,r14
 800cc28:	2811883a 	mov	r8,r5
 800cc2c:	100f883a 	mov	r7,r2
 800cc30:	41000017 	ldw	r4,0(r8)
 800cc34:	39c00404 	addi	r7,r7,16
 800cc38:	18c00404 	addi	r3,r3,16
 800cc3c:	393ffc15 	stw	r4,-16(r7)
 800cc40:	193ffc17 	ldw	r4,-16(r3)
 800cc44:	6b400404 	addi	r13,r13,16
 800cc48:	5ac00404 	addi	r11,r11,16
 800cc4c:	693ffc15 	stw	r4,-16(r13)
 800cc50:	61000017 	ldw	r4,0(r12)
 800cc54:	4a400404 	addi	r9,r9,16
 800cc58:	42000404 	addi	r8,r8,16
 800cc5c:	593ffc15 	stw	r4,-16(r11)
 800cc60:	51000017 	ldw	r4,0(r10)
 800cc64:	63000404 	addi	r12,r12,16
 800cc68:	52800404 	addi	r10,r10,16
 800cc6c:	493ffc15 	stw	r4,-16(r9)
 800cc70:	1bbfef1e 	bne	r3,r14,800cc30 <__alt_data_end+0xfc00cc30>
 800cc74:	79000044 	addi	r4,r15,1
 800cc78:	2008913a 	slli	r4,r4,4
 800cc7c:	328003cc 	andi	r10,r6,15
 800cc80:	02c000c4 	movi	r11,3
 800cc84:	1107883a 	add	r3,r2,r4
 800cc88:	290b883a 	add	r5,r5,r4
 800cc8c:	5a801e2e 	bgeu	r11,r10,800cd08 <memmove+0x154>
 800cc90:	1813883a 	mov	r9,r3
 800cc94:	2811883a 	mov	r8,r5
 800cc98:	500f883a 	mov	r7,r10
 800cc9c:	41000017 	ldw	r4,0(r8)
 800cca0:	4a400104 	addi	r9,r9,4
 800cca4:	39ffff04 	addi	r7,r7,-4
 800cca8:	493fff15 	stw	r4,-4(r9)
 800ccac:	42000104 	addi	r8,r8,4
 800ccb0:	59fffa36 	bltu	r11,r7,800cc9c <__alt_data_end+0xfc00cc9c>
 800ccb4:	513fff04 	addi	r4,r10,-4
 800ccb8:	2008d0ba 	srli	r4,r4,2
 800ccbc:	318000cc 	andi	r6,r6,3
 800ccc0:	21000044 	addi	r4,r4,1
 800ccc4:	2109883a 	add	r4,r4,r4
 800ccc8:	2109883a 	add	r4,r4,r4
 800cccc:	1907883a 	add	r3,r3,r4
 800ccd0:	290b883a 	add	r5,r5,r4
 800ccd4:	30000b26 	beq	r6,zero,800cd04 <memmove+0x150>
 800ccd8:	198d883a 	add	r6,r3,r6
 800ccdc:	29c00003 	ldbu	r7,0(r5)
 800cce0:	18c00044 	addi	r3,r3,1
 800cce4:	29400044 	addi	r5,r5,1
 800cce8:	19ffffc5 	stb	r7,-1(r3)
 800ccec:	19bffb1e 	bne	r3,r6,800ccdc <__alt_data_end+0xfc00ccdc>
 800ccf0:	f800283a 	ret
 800ccf4:	1007883a 	mov	r3,r2
 800ccf8:	003ff606 	br	800ccd4 <__alt_data_end+0xfc00ccd4>
 800ccfc:	1007883a 	mov	r3,r2
 800cd00:	003ff506 	br	800ccd8 <__alt_data_end+0xfc00ccd8>
 800cd04:	f800283a 	ret
 800cd08:	500d883a 	mov	r6,r10
 800cd0c:	003ff106 	br	800ccd4 <__alt_data_end+0xfc00ccd4>

0800cd10 <memset>:
 800cd10:	20c000cc 	andi	r3,r4,3
 800cd14:	2005883a 	mov	r2,r4
 800cd18:	18004426 	beq	r3,zero,800ce2c <memset+0x11c>
 800cd1c:	31ffffc4 	addi	r7,r6,-1
 800cd20:	30004026 	beq	r6,zero,800ce24 <memset+0x114>
 800cd24:	2813883a 	mov	r9,r5
 800cd28:	200d883a 	mov	r6,r4
 800cd2c:	2007883a 	mov	r3,r4
 800cd30:	00000406 	br	800cd44 <memset+0x34>
 800cd34:	3a3fffc4 	addi	r8,r7,-1
 800cd38:	31800044 	addi	r6,r6,1
 800cd3c:	38003926 	beq	r7,zero,800ce24 <memset+0x114>
 800cd40:	400f883a 	mov	r7,r8
 800cd44:	18c00044 	addi	r3,r3,1
 800cd48:	32400005 	stb	r9,0(r6)
 800cd4c:	1a0000cc 	andi	r8,r3,3
 800cd50:	403ff81e 	bne	r8,zero,800cd34 <__alt_data_end+0xfc00cd34>
 800cd54:	010000c4 	movi	r4,3
 800cd58:	21c02d2e 	bgeu	r4,r7,800ce10 <memset+0x100>
 800cd5c:	29003fcc 	andi	r4,r5,255
 800cd60:	200c923a 	slli	r6,r4,8
 800cd64:	3108b03a 	or	r4,r6,r4
 800cd68:	200c943a 	slli	r6,r4,16
 800cd6c:	218cb03a 	or	r6,r4,r6
 800cd70:	010003c4 	movi	r4,15
 800cd74:	21c0182e 	bgeu	r4,r7,800cdd8 <memset+0xc8>
 800cd78:	3b3ffc04 	addi	r12,r7,-16
 800cd7c:	6018d13a 	srli	r12,r12,4
 800cd80:	1a000104 	addi	r8,r3,4
 800cd84:	1ac00204 	addi	r11,r3,8
 800cd88:	6008913a 	slli	r4,r12,4
 800cd8c:	1a800304 	addi	r10,r3,12
 800cd90:	1813883a 	mov	r9,r3
 800cd94:	21000504 	addi	r4,r4,20
 800cd98:	1909883a 	add	r4,r3,r4
 800cd9c:	49800015 	stw	r6,0(r9)
 800cda0:	41800015 	stw	r6,0(r8)
 800cda4:	59800015 	stw	r6,0(r11)
 800cda8:	51800015 	stw	r6,0(r10)
 800cdac:	42000404 	addi	r8,r8,16
 800cdb0:	4a400404 	addi	r9,r9,16
 800cdb4:	5ac00404 	addi	r11,r11,16
 800cdb8:	52800404 	addi	r10,r10,16
 800cdbc:	413ff71e 	bne	r8,r4,800cd9c <__alt_data_end+0xfc00cd9c>
 800cdc0:	63000044 	addi	r12,r12,1
 800cdc4:	6018913a 	slli	r12,r12,4
 800cdc8:	39c003cc 	andi	r7,r7,15
 800cdcc:	010000c4 	movi	r4,3
 800cdd0:	1b07883a 	add	r3,r3,r12
 800cdd4:	21c00e2e 	bgeu	r4,r7,800ce10 <memset+0x100>
 800cdd8:	1813883a 	mov	r9,r3
 800cddc:	3811883a 	mov	r8,r7
 800cde0:	010000c4 	movi	r4,3
 800cde4:	49800015 	stw	r6,0(r9)
 800cde8:	423fff04 	addi	r8,r8,-4
 800cdec:	4a400104 	addi	r9,r9,4
 800cdf0:	223ffc36 	bltu	r4,r8,800cde4 <__alt_data_end+0xfc00cde4>
 800cdf4:	393fff04 	addi	r4,r7,-4
 800cdf8:	2008d0ba 	srli	r4,r4,2
 800cdfc:	39c000cc 	andi	r7,r7,3
 800ce00:	21000044 	addi	r4,r4,1
 800ce04:	2109883a 	add	r4,r4,r4
 800ce08:	2109883a 	add	r4,r4,r4
 800ce0c:	1907883a 	add	r3,r3,r4
 800ce10:	38000526 	beq	r7,zero,800ce28 <memset+0x118>
 800ce14:	19cf883a 	add	r7,r3,r7
 800ce18:	19400005 	stb	r5,0(r3)
 800ce1c:	18c00044 	addi	r3,r3,1
 800ce20:	38fffd1e 	bne	r7,r3,800ce18 <__alt_data_end+0xfc00ce18>
 800ce24:	f800283a 	ret
 800ce28:	f800283a 	ret
 800ce2c:	2007883a 	mov	r3,r4
 800ce30:	300f883a 	mov	r7,r6
 800ce34:	003fc706 	br	800cd54 <__alt_data_end+0xfc00cd54>

0800ce38 <_Balloc>:
 800ce38:	20801317 	ldw	r2,76(r4)
 800ce3c:	defffc04 	addi	sp,sp,-16
 800ce40:	dc400115 	stw	r17,4(sp)
 800ce44:	dc000015 	stw	r16,0(sp)
 800ce48:	dfc00315 	stw	ra,12(sp)
 800ce4c:	dc800215 	stw	r18,8(sp)
 800ce50:	2023883a 	mov	r17,r4
 800ce54:	2821883a 	mov	r16,r5
 800ce58:	10000f26 	beq	r2,zero,800ce98 <_Balloc+0x60>
 800ce5c:	8407883a 	add	r3,r16,r16
 800ce60:	18c7883a 	add	r3,r3,r3
 800ce64:	10c7883a 	add	r3,r2,r3
 800ce68:	18800017 	ldw	r2,0(r3)
 800ce6c:	10001126 	beq	r2,zero,800ceb4 <_Balloc+0x7c>
 800ce70:	11000017 	ldw	r4,0(r2)
 800ce74:	19000015 	stw	r4,0(r3)
 800ce78:	10000415 	stw	zero,16(r2)
 800ce7c:	10000315 	stw	zero,12(r2)
 800ce80:	dfc00317 	ldw	ra,12(sp)
 800ce84:	dc800217 	ldw	r18,8(sp)
 800ce88:	dc400117 	ldw	r17,4(sp)
 800ce8c:	dc000017 	ldw	r16,0(sp)
 800ce90:	dec00404 	addi	sp,sp,16
 800ce94:	f800283a 	ret
 800ce98:	01800844 	movi	r6,33
 800ce9c:	01400104 	movi	r5,4
 800cea0:	80114500 	call	8011450 <_calloc_r>
 800cea4:	88801315 	stw	r2,76(r17)
 800cea8:	103fec1e 	bne	r2,zero,800ce5c <__alt_data_end+0xfc00ce5c>
 800ceac:	0005883a 	mov	r2,zero
 800ceb0:	003ff306 	br	800ce80 <__alt_data_end+0xfc00ce80>
 800ceb4:	01400044 	movi	r5,1
 800ceb8:	2c24983a 	sll	r18,r5,r16
 800cebc:	8809883a 	mov	r4,r17
 800cec0:	91800144 	addi	r6,r18,5
 800cec4:	318d883a 	add	r6,r6,r6
 800cec8:	318d883a 	add	r6,r6,r6
 800cecc:	80114500 	call	8011450 <_calloc_r>
 800ced0:	103ff626 	beq	r2,zero,800ceac <__alt_data_end+0xfc00ceac>
 800ced4:	14000115 	stw	r16,4(r2)
 800ced8:	14800215 	stw	r18,8(r2)
 800cedc:	003fe606 	br	800ce78 <__alt_data_end+0xfc00ce78>

0800cee0 <_Bfree>:
 800cee0:	28000826 	beq	r5,zero,800cf04 <_Bfree+0x24>
 800cee4:	28c00117 	ldw	r3,4(r5)
 800cee8:	20801317 	ldw	r2,76(r4)
 800ceec:	18c7883a 	add	r3,r3,r3
 800cef0:	18c7883a 	add	r3,r3,r3
 800cef4:	10c5883a 	add	r2,r2,r3
 800cef8:	10c00017 	ldw	r3,0(r2)
 800cefc:	28c00015 	stw	r3,0(r5)
 800cf00:	11400015 	stw	r5,0(r2)
 800cf04:	f800283a 	ret

0800cf08 <__multadd>:
 800cf08:	defff704 	addi	sp,sp,-36
 800cf0c:	dc800215 	stw	r18,8(sp)
 800cf10:	2c800417 	ldw	r18,16(r5)
 800cf14:	dd800615 	stw	r22,24(sp)
 800cf18:	dd400515 	stw	r21,20(sp)
 800cf1c:	dd000415 	stw	r20,16(sp)
 800cf20:	dcc00315 	stw	r19,12(sp)
 800cf24:	dc400115 	stw	r17,4(sp)
 800cf28:	dc000015 	stw	r16,0(sp)
 800cf2c:	dfc00815 	stw	ra,32(sp)
 800cf30:	ddc00715 	stw	r23,28(sp)
 800cf34:	2827883a 	mov	r19,r5
 800cf38:	2029883a 	mov	r20,r4
 800cf3c:	3023883a 	mov	r17,r6
 800cf40:	3821883a 	mov	r16,r7
 800cf44:	2d400504 	addi	r21,r5,20
 800cf48:	002d883a 	mov	r22,zero
 800cf4c:	adc00017 	ldw	r23,0(r21)
 800cf50:	880b883a 	mov	r5,r17
 800cf54:	ad400104 	addi	r21,r21,4
 800cf58:	b93fffcc 	andi	r4,r23,65535
 800cf5c:	8004a540 	call	8004a54 <__mulsi3>
 800cf60:	b808d43a 	srli	r4,r23,16
 800cf64:	880b883a 	mov	r5,r17
 800cf68:	1421883a 	add	r16,r2,r16
 800cf6c:	8004a540 	call	8004a54 <__mulsi3>
 800cf70:	800ed43a 	srli	r7,r16,16
 800cf74:	80ffffcc 	andi	r3,r16,65535
 800cf78:	b5800044 	addi	r22,r22,1
 800cf7c:	11c5883a 	add	r2,r2,r7
 800cf80:	100e943a 	slli	r7,r2,16
 800cf84:	1020d43a 	srli	r16,r2,16
 800cf88:	38c7883a 	add	r3,r7,r3
 800cf8c:	a8ffff15 	stw	r3,-4(r21)
 800cf90:	b4bfee16 	blt	r22,r18,800cf4c <__alt_data_end+0xfc00cf4c>
 800cf94:	80000926 	beq	r16,zero,800cfbc <__multadd+0xb4>
 800cf98:	98800217 	ldw	r2,8(r19)
 800cf9c:	9080130e 	bge	r18,r2,800cfec <__multadd+0xe4>
 800cfa0:	90800144 	addi	r2,r18,5
 800cfa4:	1085883a 	add	r2,r2,r2
 800cfa8:	1085883a 	add	r2,r2,r2
 800cfac:	9885883a 	add	r2,r19,r2
 800cfb0:	14000015 	stw	r16,0(r2)
 800cfb4:	94800044 	addi	r18,r18,1
 800cfb8:	9c800415 	stw	r18,16(r19)
 800cfbc:	9805883a 	mov	r2,r19
 800cfc0:	dfc00817 	ldw	ra,32(sp)
 800cfc4:	ddc00717 	ldw	r23,28(sp)
 800cfc8:	dd800617 	ldw	r22,24(sp)
 800cfcc:	dd400517 	ldw	r21,20(sp)
 800cfd0:	dd000417 	ldw	r20,16(sp)
 800cfd4:	dcc00317 	ldw	r19,12(sp)
 800cfd8:	dc800217 	ldw	r18,8(sp)
 800cfdc:	dc400117 	ldw	r17,4(sp)
 800cfe0:	dc000017 	ldw	r16,0(sp)
 800cfe4:	dec00904 	addi	sp,sp,36
 800cfe8:	f800283a 	ret
 800cfec:	99400117 	ldw	r5,4(r19)
 800cff0:	a009883a 	mov	r4,r20
 800cff4:	29400044 	addi	r5,r5,1
 800cff8:	800ce380 	call	800ce38 <_Balloc>
 800cffc:	99800417 	ldw	r6,16(r19)
 800d000:	99400304 	addi	r5,r19,12
 800d004:	11000304 	addi	r4,r2,12
 800d008:	31800084 	addi	r6,r6,2
 800d00c:	318d883a 	add	r6,r6,r6
 800d010:	318d883a 	add	r6,r6,r6
 800d014:	1023883a 	mov	r17,r2
 800d018:	800ca6c0 	call	800ca6c <memcpy>
 800d01c:	98000a26 	beq	r19,zero,800d048 <__multadd+0x140>
 800d020:	98c00117 	ldw	r3,4(r19)
 800d024:	a0801317 	ldw	r2,76(r20)
 800d028:	18c7883a 	add	r3,r3,r3
 800d02c:	18c7883a 	add	r3,r3,r3
 800d030:	10c5883a 	add	r2,r2,r3
 800d034:	10c00017 	ldw	r3,0(r2)
 800d038:	98c00015 	stw	r3,0(r19)
 800d03c:	14c00015 	stw	r19,0(r2)
 800d040:	8827883a 	mov	r19,r17
 800d044:	003fd606 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d048:	8827883a 	mov	r19,r17
 800d04c:	003fd406 	br	800cfa0 <__alt_data_end+0xfc00cfa0>

0800d050 <__s2b>:
 800d050:	defff904 	addi	sp,sp,-28
 800d054:	dc400115 	stw	r17,4(sp)
 800d058:	dc000015 	stw	r16,0(sp)
 800d05c:	2023883a 	mov	r17,r4
 800d060:	2821883a 	mov	r16,r5
 800d064:	39000204 	addi	r4,r7,8
 800d068:	01400244 	movi	r5,9
 800d06c:	dcc00315 	stw	r19,12(sp)
 800d070:	dc800215 	stw	r18,8(sp)
 800d074:	dfc00615 	stw	ra,24(sp)
 800d078:	dd400515 	stw	r21,20(sp)
 800d07c:	dd000415 	stw	r20,16(sp)
 800d080:	3825883a 	mov	r18,r7
 800d084:	3027883a 	mov	r19,r6
 800d088:	80048a00 	call	80048a0 <__divsi3>
 800d08c:	00c00044 	movi	r3,1
 800d090:	000b883a 	mov	r5,zero
 800d094:	1880030e 	bge	r3,r2,800d0a4 <__s2b+0x54>
 800d098:	18c7883a 	add	r3,r3,r3
 800d09c:	29400044 	addi	r5,r5,1
 800d0a0:	18bffd16 	blt	r3,r2,800d098 <__alt_data_end+0xfc00d098>
 800d0a4:	8809883a 	mov	r4,r17
 800d0a8:	800ce380 	call	800ce38 <_Balloc>
 800d0ac:	d8c00717 	ldw	r3,28(sp)
 800d0b0:	10c00515 	stw	r3,20(r2)
 800d0b4:	00c00044 	movi	r3,1
 800d0b8:	10c00415 	stw	r3,16(r2)
 800d0bc:	00c00244 	movi	r3,9
 800d0c0:	1cc0210e 	bge	r3,r19,800d148 <__s2b+0xf8>
 800d0c4:	80eb883a 	add	r21,r16,r3
 800d0c8:	a829883a 	mov	r20,r21
 800d0cc:	84e1883a 	add	r16,r16,r19
 800d0d0:	a1c00007 	ldb	r7,0(r20)
 800d0d4:	01800284 	movi	r6,10
 800d0d8:	a5000044 	addi	r20,r20,1
 800d0dc:	100b883a 	mov	r5,r2
 800d0e0:	39fff404 	addi	r7,r7,-48
 800d0e4:	8809883a 	mov	r4,r17
 800d0e8:	800cf080 	call	800cf08 <__multadd>
 800d0ec:	a43ff81e 	bne	r20,r16,800d0d0 <__alt_data_end+0xfc00d0d0>
 800d0f0:	ace1883a 	add	r16,r21,r19
 800d0f4:	843ffe04 	addi	r16,r16,-8
 800d0f8:	9c800a0e 	bge	r19,r18,800d124 <__s2b+0xd4>
 800d0fc:	94e5c83a 	sub	r18,r18,r19
 800d100:	84a5883a 	add	r18,r16,r18
 800d104:	81c00007 	ldb	r7,0(r16)
 800d108:	01800284 	movi	r6,10
 800d10c:	84000044 	addi	r16,r16,1
 800d110:	100b883a 	mov	r5,r2
 800d114:	39fff404 	addi	r7,r7,-48
 800d118:	8809883a 	mov	r4,r17
 800d11c:	800cf080 	call	800cf08 <__multadd>
 800d120:	84bff81e 	bne	r16,r18,800d104 <__alt_data_end+0xfc00d104>
 800d124:	dfc00617 	ldw	ra,24(sp)
 800d128:	dd400517 	ldw	r21,20(sp)
 800d12c:	dd000417 	ldw	r20,16(sp)
 800d130:	dcc00317 	ldw	r19,12(sp)
 800d134:	dc800217 	ldw	r18,8(sp)
 800d138:	dc400117 	ldw	r17,4(sp)
 800d13c:	dc000017 	ldw	r16,0(sp)
 800d140:	dec00704 	addi	sp,sp,28
 800d144:	f800283a 	ret
 800d148:	84000284 	addi	r16,r16,10
 800d14c:	1827883a 	mov	r19,r3
 800d150:	003fe906 	br	800d0f8 <__alt_data_end+0xfc00d0f8>

0800d154 <__hi0bits>:
 800d154:	20bfffec 	andhi	r2,r4,65535
 800d158:	1000141e 	bne	r2,zero,800d1ac <__hi0bits+0x58>
 800d15c:	2008943a 	slli	r4,r4,16
 800d160:	00800404 	movi	r2,16
 800d164:	20ffc02c 	andhi	r3,r4,65280
 800d168:	1800021e 	bne	r3,zero,800d174 <__hi0bits+0x20>
 800d16c:	2008923a 	slli	r4,r4,8
 800d170:	10800204 	addi	r2,r2,8
 800d174:	20fc002c 	andhi	r3,r4,61440
 800d178:	1800021e 	bne	r3,zero,800d184 <__hi0bits+0x30>
 800d17c:	2008913a 	slli	r4,r4,4
 800d180:	10800104 	addi	r2,r2,4
 800d184:	20f0002c 	andhi	r3,r4,49152
 800d188:	1800031e 	bne	r3,zero,800d198 <__hi0bits+0x44>
 800d18c:	2109883a 	add	r4,r4,r4
 800d190:	10800084 	addi	r2,r2,2
 800d194:	2109883a 	add	r4,r4,r4
 800d198:	20000316 	blt	r4,zero,800d1a8 <__hi0bits+0x54>
 800d19c:	2110002c 	andhi	r4,r4,16384
 800d1a0:	2000041e 	bne	r4,zero,800d1b4 <__hi0bits+0x60>
 800d1a4:	00800804 	movi	r2,32
 800d1a8:	f800283a 	ret
 800d1ac:	0005883a 	mov	r2,zero
 800d1b0:	003fec06 	br	800d164 <__alt_data_end+0xfc00d164>
 800d1b4:	10800044 	addi	r2,r2,1
 800d1b8:	f800283a 	ret

0800d1bc <__lo0bits>:
 800d1bc:	20c00017 	ldw	r3,0(r4)
 800d1c0:	188001cc 	andi	r2,r3,7
 800d1c4:	10000826 	beq	r2,zero,800d1e8 <__lo0bits+0x2c>
 800d1c8:	1880004c 	andi	r2,r3,1
 800d1cc:	1000211e 	bne	r2,zero,800d254 <__lo0bits+0x98>
 800d1d0:	1880008c 	andi	r2,r3,2
 800d1d4:	1000211e 	bne	r2,zero,800d25c <__lo0bits+0xa0>
 800d1d8:	1806d0ba 	srli	r3,r3,2
 800d1dc:	00800084 	movi	r2,2
 800d1e0:	20c00015 	stw	r3,0(r4)
 800d1e4:	f800283a 	ret
 800d1e8:	18bfffcc 	andi	r2,r3,65535
 800d1ec:	10001326 	beq	r2,zero,800d23c <__lo0bits+0x80>
 800d1f0:	0005883a 	mov	r2,zero
 800d1f4:	19403fcc 	andi	r5,r3,255
 800d1f8:	2800021e 	bne	r5,zero,800d204 <__lo0bits+0x48>
 800d1fc:	1806d23a 	srli	r3,r3,8
 800d200:	10800204 	addi	r2,r2,8
 800d204:	194003cc 	andi	r5,r3,15
 800d208:	2800021e 	bne	r5,zero,800d214 <__lo0bits+0x58>
 800d20c:	1806d13a 	srli	r3,r3,4
 800d210:	10800104 	addi	r2,r2,4
 800d214:	194000cc 	andi	r5,r3,3
 800d218:	2800021e 	bne	r5,zero,800d224 <__lo0bits+0x68>
 800d21c:	1806d0ba 	srli	r3,r3,2
 800d220:	10800084 	addi	r2,r2,2
 800d224:	1940004c 	andi	r5,r3,1
 800d228:	2800081e 	bne	r5,zero,800d24c <__lo0bits+0x90>
 800d22c:	1806d07a 	srli	r3,r3,1
 800d230:	1800051e 	bne	r3,zero,800d248 <__lo0bits+0x8c>
 800d234:	00800804 	movi	r2,32
 800d238:	f800283a 	ret
 800d23c:	1806d43a 	srli	r3,r3,16
 800d240:	00800404 	movi	r2,16
 800d244:	003feb06 	br	800d1f4 <__alt_data_end+0xfc00d1f4>
 800d248:	10800044 	addi	r2,r2,1
 800d24c:	20c00015 	stw	r3,0(r4)
 800d250:	f800283a 	ret
 800d254:	0005883a 	mov	r2,zero
 800d258:	f800283a 	ret
 800d25c:	1806d07a 	srli	r3,r3,1
 800d260:	00800044 	movi	r2,1
 800d264:	20c00015 	stw	r3,0(r4)
 800d268:	f800283a 	ret

0800d26c <__i2b>:
 800d26c:	defffd04 	addi	sp,sp,-12
 800d270:	dc000015 	stw	r16,0(sp)
 800d274:	04000044 	movi	r16,1
 800d278:	dc400115 	stw	r17,4(sp)
 800d27c:	2823883a 	mov	r17,r5
 800d280:	800b883a 	mov	r5,r16
 800d284:	dfc00215 	stw	ra,8(sp)
 800d288:	800ce380 	call	800ce38 <_Balloc>
 800d28c:	14400515 	stw	r17,20(r2)
 800d290:	14000415 	stw	r16,16(r2)
 800d294:	dfc00217 	ldw	ra,8(sp)
 800d298:	dc400117 	ldw	r17,4(sp)
 800d29c:	dc000017 	ldw	r16,0(sp)
 800d2a0:	dec00304 	addi	sp,sp,12
 800d2a4:	f800283a 	ret

0800d2a8 <__multiply>:
 800d2a8:	deffef04 	addi	sp,sp,-68
 800d2ac:	dc400815 	stw	r17,32(sp)
 800d2b0:	dc000715 	stw	r16,28(sp)
 800d2b4:	34400417 	ldw	r17,16(r6)
 800d2b8:	2c000417 	ldw	r16,16(r5)
 800d2bc:	dd800d15 	stw	r22,52(sp)
 800d2c0:	dc800915 	stw	r18,36(sp)
 800d2c4:	dfc01015 	stw	ra,64(sp)
 800d2c8:	df000f15 	stw	fp,60(sp)
 800d2cc:	ddc00e15 	stw	r23,56(sp)
 800d2d0:	dd400c15 	stw	r21,48(sp)
 800d2d4:	dd000b15 	stw	r20,44(sp)
 800d2d8:	dcc00a15 	stw	r19,40(sp)
 800d2dc:	2825883a 	mov	r18,r5
 800d2e0:	302d883a 	mov	r22,r6
 800d2e4:	8440050e 	bge	r16,r17,800d2fc <__multiply+0x54>
 800d2e8:	8007883a 	mov	r3,r16
 800d2ec:	3025883a 	mov	r18,r6
 800d2f0:	8821883a 	mov	r16,r17
 800d2f4:	282d883a 	mov	r22,r5
 800d2f8:	1823883a 	mov	r17,r3
 800d2fc:	90800217 	ldw	r2,8(r18)
 800d300:	8447883a 	add	r3,r16,r17
 800d304:	d8c00215 	stw	r3,8(sp)
 800d308:	91400117 	ldw	r5,4(r18)
 800d30c:	10c0010e 	bge	r2,r3,800d314 <__multiply+0x6c>
 800d310:	29400044 	addi	r5,r5,1
 800d314:	800ce380 	call	800ce38 <_Balloc>
 800d318:	d8c00217 	ldw	r3,8(sp)
 800d31c:	d8800615 	stw	r2,24(sp)
 800d320:	18eb883a 	add	r21,r3,r3
 800d324:	ad6b883a 	add	r21,r21,r21
 800d328:	10c00504 	addi	r3,r2,20
 800d32c:	1d6b883a 	add	r21,r3,r21
 800d330:	d8c00115 	stw	r3,4(sp)
 800d334:	dd400315 	stw	r21,12(sp)
 800d338:	1805883a 	mov	r2,r3
 800d33c:	1d40042e 	bgeu	r3,r21,800d350 <__multiply+0xa8>
 800d340:	d8c00317 	ldw	r3,12(sp)
 800d344:	10000015 	stw	zero,0(r2)
 800d348:	10800104 	addi	r2,r2,4
 800d34c:	10fffc36 	bltu	r2,r3,800d340 <__alt_data_end+0xfc00d340>
 800d350:	8c63883a 	add	r17,r17,r17
 800d354:	b5800504 	addi	r22,r22,20
 800d358:	8c63883a 	add	r17,r17,r17
 800d35c:	94800504 	addi	r18,r18,20
 800d360:	8421883a 	add	r16,r16,r16
 800d364:	b463883a 	add	r17,r22,r17
 800d368:	8421883a 	add	r16,r16,r16
 800d36c:	dd800015 	stw	r22,0(sp)
 800d370:	dc800415 	stw	r18,16(sp)
 800d374:	dc400515 	stw	r17,20(sp)
 800d378:	9429883a 	add	r20,r18,r16
 800d37c:	b4404f2e 	bgeu	r22,r17,800d4bc <__multiply+0x214>
 800d380:	d8c00017 	ldw	r3,0(sp)
 800d384:	1c800017 	ldw	r18,0(r3)
 800d388:	947fffcc 	andi	r17,r18,65535
 800d38c:	88001e26 	beq	r17,zero,800d408 <__multiply+0x160>
 800d390:	dd800117 	ldw	r22,4(sp)
 800d394:	dd400417 	ldw	r21,16(sp)
 800d398:	0027883a 	mov	r19,zero
 800d39c:	ac800017 	ldw	r18,0(r21)
 800d3a0:	b4000017 	ldw	r16,0(r22)
 800d3a4:	880b883a 	mov	r5,r17
 800d3a8:	913fffcc 	andi	r4,r18,65535
 800d3ac:	8004a540 	call	8004a54 <__mulsi3>
 800d3b0:	9008d43a 	srli	r4,r18,16
 800d3b4:	84bfffcc 	andi	r18,r16,65535
 800d3b8:	1485883a 	add	r2,r2,r18
 800d3bc:	14e5883a 	add	r18,r2,r19
 800d3c0:	8020d43a 	srli	r16,r16,16
 800d3c4:	9026d43a 	srli	r19,r18,16
 800d3c8:	880b883a 	mov	r5,r17
 800d3cc:	8004a540 	call	8004a54 <__mulsi3>
 800d3d0:	1405883a 	add	r2,r2,r16
 800d3d4:	14e1883a 	add	r16,r2,r19
 800d3d8:	90ffffcc 	andi	r3,r18,65535
 800d3dc:	8024943a 	slli	r18,r16,16
 800d3e0:	ad400104 	addi	r21,r21,4
 800d3e4:	b005883a 	mov	r2,r22
 800d3e8:	90c6b03a 	or	r3,r18,r3
 800d3ec:	b0c00015 	stw	r3,0(r22)
 800d3f0:	8026d43a 	srli	r19,r16,16
 800d3f4:	b5800104 	addi	r22,r22,4
 800d3f8:	ad3fe836 	bltu	r21,r20,800d39c <__alt_data_end+0xfc00d39c>
 800d3fc:	d8c00017 	ldw	r3,0(sp)
 800d400:	14c00115 	stw	r19,4(r2)
 800d404:	1c800017 	ldw	r18,0(r3)
 800d408:	9024d43a 	srli	r18,r18,16
 800d40c:	90002226 	beq	r18,zero,800d498 <__multiply+0x1f0>
 800d410:	d8c00117 	ldw	r3,4(sp)
 800d414:	dd800417 	ldw	r22,16(sp)
 800d418:	002f883a 	mov	r23,zero
 800d41c:	1f000017 	ldw	fp,0(r3)
 800d420:	1823883a 	mov	r17,r3
 800d424:	182b883a 	mov	r21,r3
 800d428:	e021883a 	mov	r16,fp
 800d42c:	00000106 	br	800d434 <__multiply+0x18c>
 800d430:	982b883a 	mov	r21,r19
 800d434:	b100000b 	ldhu	r4,0(r22)
 800d438:	8020d43a 	srli	r16,r16,16
 800d43c:	900b883a 	mov	r5,r18
 800d440:	8004a540 	call	8004a54 <__mulsi3>
 800d444:	1405883a 	add	r2,r2,r16
 800d448:	15ef883a 	add	r23,r2,r23
 800d44c:	b804943a 	slli	r2,r23,16
 800d450:	e0ffffcc 	andi	r3,fp,65535
 800d454:	8c400104 	addi	r17,r17,4
 800d458:	10c6b03a 	or	r3,r2,r3
 800d45c:	88ffff15 	stw	r3,-4(r17)
 800d460:	b5800104 	addi	r22,r22,4
 800d464:	b13fff17 	ldw	r4,-4(r22)
 800d468:	acc00104 	addi	r19,r21,4
 800d46c:	900b883a 	mov	r5,r18
 800d470:	2008d43a 	srli	r4,r4,16
 800d474:	9c000017 	ldw	r16,0(r19)
 800d478:	8004a540 	call	8004a54 <__mulsi3>
 800d47c:	b806d43a 	srli	r3,r23,16
 800d480:	813fffcc 	andi	r4,r16,65535
 800d484:	1105883a 	add	r2,r2,r4
 800d488:	10f9883a 	add	fp,r2,r3
 800d48c:	e02ed43a 	srli	r23,fp,16
 800d490:	b53fe736 	bltu	r22,r20,800d430 <__alt_data_end+0xfc00d430>
 800d494:	af000115 	stw	fp,4(r21)
 800d498:	d8c00017 	ldw	r3,0(sp)
 800d49c:	d9000517 	ldw	r4,20(sp)
 800d4a0:	18c00104 	addi	r3,r3,4
 800d4a4:	d8c00015 	stw	r3,0(sp)
 800d4a8:	d8c00117 	ldw	r3,4(sp)
 800d4ac:	18c00104 	addi	r3,r3,4
 800d4b0:	d8c00115 	stw	r3,4(sp)
 800d4b4:	d8c00017 	ldw	r3,0(sp)
 800d4b8:	193fb136 	bltu	r3,r4,800d380 <__alt_data_end+0xfc00d380>
 800d4bc:	d8c00217 	ldw	r3,8(sp)
 800d4c0:	00c00c0e 	bge	zero,r3,800d4f4 <__multiply+0x24c>
 800d4c4:	d8c00317 	ldw	r3,12(sp)
 800d4c8:	18bfff17 	ldw	r2,-4(r3)
 800d4cc:	1d7fff04 	addi	r21,r3,-4
 800d4d0:	10000326 	beq	r2,zero,800d4e0 <__multiply+0x238>
 800d4d4:	00000706 	br	800d4f4 <__multiply+0x24c>
 800d4d8:	a8800017 	ldw	r2,0(r21)
 800d4dc:	1000051e 	bne	r2,zero,800d4f4 <__multiply+0x24c>
 800d4e0:	d8c00217 	ldw	r3,8(sp)
 800d4e4:	ad7fff04 	addi	r21,r21,-4
 800d4e8:	18ffffc4 	addi	r3,r3,-1
 800d4ec:	d8c00215 	stw	r3,8(sp)
 800d4f0:	183ff91e 	bne	r3,zero,800d4d8 <__alt_data_end+0xfc00d4d8>
 800d4f4:	d8c00617 	ldw	r3,24(sp)
 800d4f8:	d9000217 	ldw	r4,8(sp)
 800d4fc:	1805883a 	mov	r2,r3
 800d500:	19000415 	stw	r4,16(r3)
 800d504:	dfc01017 	ldw	ra,64(sp)
 800d508:	df000f17 	ldw	fp,60(sp)
 800d50c:	ddc00e17 	ldw	r23,56(sp)
 800d510:	dd800d17 	ldw	r22,52(sp)
 800d514:	dd400c17 	ldw	r21,48(sp)
 800d518:	dd000b17 	ldw	r20,44(sp)
 800d51c:	dcc00a17 	ldw	r19,40(sp)
 800d520:	dc800917 	ldw	r18,36(sp)
 800d524:	dc400817 	ldw	r17,32(sp)
 800d528:	dc000717 	ldw	r16,28(sp)
 800d52c:	dec01104 	addi	sp,sp,68
 800d530:	f800283a 	ret

0800d534 <__pow5mult>:
 800d534:	defffa04 	addi	sp,sp,-24
 800d538:	dcc00315 	stw	r19,12(sp)
 800d53c:	dc000015 	stw	r16,0(sp)
 800d540:	dfc00515 	stw	ra,20(sp)
 800d544:	dd000415 	stw	r20,16(sp)
 800d548:	dc800215 	stw	r18,8(sp)
 800d54c:	dc400115 	stw	r17,4(sp)
 800d550:	308000cc 	andi	r2,r6,3
 800d554:	3021883a 	mov	r16,r6
 800d558:	2027883a 	mov	r19,r4
 800d55c:	10002f1e 	bne	r2,zero,800d61c <__pow5mult+0xe8>
 800d560:	2825883a 	mov	r18,r5
 800d564:	8021d0ba 	srai	r16,r16,2
 800d568:	80001a26 	beq	r16,zero,800d5d4 <__pow5mult+0xa0>
 800d56c:	9c401217 	ldw	r17,72(r19)
 800d570:	8800061e 	bne	r17,zero,800d58c <__pow5mult+0x58>
 800d574:	00003406 	br	800d648 <__pow5mult+0x114>
 800d578:	8021d07a 	srai	r16,r16,1
 800d57c:	80001526 	beq	r16,zero,800d5d4 <__pow5mult+0xa0>
 800d580:	88800017 	ldw	r2,0(r17)
 800d584:	10001c26 	beq	r2,zero,800d5f8 <__pow5mult+0xc4>
 800d588:	1023883a 	mov	r17,r2
 800d58c:	8080004c 	andi	r2,r16,1
 800d590:	103ff926 	beq	r2,zero,800d578 <__alt_data_end+0xfc00d578>
 800d594:	880d883a 	mov	r6,r17
 800d598:	900b883a 	mov	r5,r18
 800d59c:	9809883a 	mov	r4,r19
 800d5a0:	800d2a80 	call	800d2a8 <__multiply>
 800d5a4:	90001b26 	beq	r18,zero,800d614 <__pow5mult+0xe0>
 800d5a8:	91000117 	ldw	r4,4(r18)
 800d5ac:	98c01317 	ldw	r3,76(r19)
 800d5b0:	8021d07a 	srai	r16,r16,1
 800d5b4:	2109883a 	add	r4,r4,r4
 800d5b8:	2109883a 	add	r4,r4,r4
 800d5bc:	1907883a 	add	r3,r3,r4
 800d5c0:	19000017 	ldw	r4,0(r3)
 800d5c4:	91000015 	stw	r4,0(r18)
 800d5c8:	1c800015 	stw	r18,0(r3)
 800d5cc:	1025883a 	mov	r18,r2
 800d5d0:	803feb1e 	bne	r16,zero,800d580 <__alt_data_end+0xfc00d580>
 800d5d4:	9005883a 	mov	r2,r18
 800d5d8:	dfc00517 	ldw	ra,20(sp)
 800d5dc:	dd000417 	ldw	r20,16(sp)
 800d5e0:	dcc00317 	ldw	r19,12(sp)
 800d5e4:	dc800217 	ldw	r18,8(sp)
 800d5e8:	dc400117 	ldw	r17,4(sp)
 800d5ec:	dc000017 	ldw	r16,0(sp)
 800d5f0:	dec00604 	addi	sp,sp,24
 800d5f4:	f800283a 	ret
 800d5f8:	880d883a 	mov	r6,r17
 800d5fc:	880b883a 	mov	r5,r17
 800d600:	9809883a 	mov	r4,r19
 800d604:	800d2a80 	call	800d2a8 <__multiply>
 800d608:	88800015 	stw	r2,0(r17)
 800d60c:	10000015 	stw	zero,0(r2)
 800d610:	003fdd06 	br	800d588 <__alt_data_end+0xfc00d588>
 800d614:	1025883a 	mov	r18,r2
 800d618:	003fd706 	br	800d578 <__alt_data_end+0xfc00d578>
 800d61c:	10bfffc4 	addi	r2,r2,-1
 800d620:	1085883a 	add	r2,r2,r2
 800d624:	00c200b4 	movhi	r3,2050
 800d628:	18e00904 	addi	r3,r3,-32732
 800d62c:	1085883a 	add	r2,r2,r2
 800d630:	1885883a 	add	r2,r3,r2
 800d634:	11800017 	ldw	r6,0(r2)
 800d638:	000f883a 	mov	r7,zero
 800d63c:	800cf080 	call	800cf08 <__multadd>
 800d640:	1025883a 	mov	r18,r2
 800d644:	003fc706 	br	800d564 <__alt_data_end+0xfc00d564>
 800d648:	05000044 	movi	r20,1
 800d64c:	a00b883a 	mov	r5,r20
 800d650:	9809883a 	mov	r4,r19
 800d654:	800ce380 	call	800ce38 <_Balloc>
 800d658:	1023883a 	mov	r17,r2
 800d65c:	00809c44 	movi	r2,625
 800d660:	88800515 	stw	r2,20(r17)
 800d664:	8d000415 	stw	r20,16(r17)
 800d668:	9c401215 	stw	r17,72(r19)
 800d66c:	88000015 	stw	zero,0(r17)
 800d670:	003fc606 	br	800d58c <__alt_data_end+0xfc00d58c>

0800d674 <__lshift>:
 800d674:	defff904 	addi	sp,sp,-28
 800d678:	dd400515 	stw	r21,20(sp)
 800d67c:	dcc00315 	stw	r19,12(sp)
 800d680:	302bd17a 	srai	r21,r6,5
 800d684:	2cc00417 	ldw	r19,16(r5)
 800d688:	28800217 	ldw	r2,8(r5)
 800d68c:	dd000415 	stw	r20,16(sp)
 800d690:	ace7883a 	add	r19,r21,r19
 800d694:	dc800215 	stw	r18,8(sp)
 800d698:	dc400115 	stw	r17,4(sp)
 800d69c:	dc000015 	stw	r16,0(sp)
 800d6a0:	dfc00615 	stw	ra,24(sp)
 800d6a4:	9c000044 	addi	r16,r19,1
 800d6a8:	2823883a 	mov	r17,r5
 800d6ac:	3029883a 	mov	r20,r6
 800d6b0:	2025883a 	mov	r18,r4
 800d6b4:	29400117 	ldw	r5,4(r5)
 800d6b8:	1400030e 	bge	r2,r16,800d6c8 <__lshift+0x54>
 800d6bc:	1085883a 	add	r2,r2,r2
 800d6c0:	29400044 	addi	r5,r5,1
 800d6c4:	143ffd16 	blt	r2,r16,800d6bc <__alt_data_end+0xfc00d6bc>
 800d6c8:	9009883a 	mov	r4,r18
 800d6cc:	800ce380 	call	800ce38 <_Balloc>
 800d6d0:	10c00504 	addi	r3,r2,20
 800d6d4:	0540070e 	bge	zero,r21,800d6f4 <__lshift+0x80>
 800d6d8:	ad6b883a 	add	r21,r21,r21
 800d6dc:	ad6b883a 	add	r21,r21,r21
 800d6e0:	1809883a 	mov	r4,r3
 800d6e4:	1d47883a 	add	r3,r3,r21
 800d6e8:	20000015 	stw	zero,0(r4)
 800d6ec:	21000104 	addi	r4,r4,4
 800d6f0:	193ffd1e 	bne	r3,r4,800d6e8 <__alt_data_end+0xfc00d6e8>
 800d6f4:	8a000417 	ldw	r8,16(r17)
 800d6f8:	89000504 	addi	r4,r17,20
 800d6fc:	a18007cc 	andi	r6,r20,31
 800d700:	4211883a 	add	r8,r8,r8
 800d704:	4211883a 	add	r8,r8,r8
 800d708:	2211883a 	add	r8,r4,r8
 800d70c:	30002326 	beq	r6,zero,800d79c <__lshift+0x128>
 800d710:	02400804 	movi	r9,32
 800d714:	4993c83a 	sub	r9,r9,r6
 800d718:	000b883a 	mov	r5,zero
 800d71c:	21c00017 	ldw	r7,0(r4)
 800d720:	1815883a 	mov	r10,r3
 800d724:	18c00104 	addi	r3,r3,4
 800d728:	398e983a 	sll	r7,r7,r6
 800d72c:	21000104 	addi	r4,r4,4
 800d730:	394ab03a 	or	r5,r7,r5
 800d734:	197fff15 	stw	r5,-4(r3)
 800d738:	217fff17 	ldw	r5,-4(r4)
 800d73c:	2a4ad83a 	srl	r5,r5,r9
 800d740:	223ff636 	bltu	r4,r8,800d71c <__alt_data_end+0xfc00d71c>
 800d744:	51400115 	stw	r5,4(r10)
 800d748:	28001a1e 	bne	r5,zero,800d7b4 <__lshift+0x140>
 800d74c:	843fffc4 	addi	r16,r16,-1
 800d750:	14000415 	stw	r16,16(r2)
 800d754:	88000826 	beq	r17,zero,800d778 <__lshift+0x104>
 800d758:	89000117 	ldw	r4,4(r17)
 800d75c:	90c01317 	ldw	r3,76(r18)
 800d760:	2109883a 	add	r4,r4,r4
 800d764:	2109883a 	add	r4,r4,r4
 800d768:	1907883a 	add	r3,r3,r4
 800d76c:	19000017 	ldw	r4,0(r3)
 800d770:	89000015 	stw	r4,0(r17)
 800d774:	1c400015 	stw	r17,0(r3)
 800d778:	dfc00617 	ldw	ra,24(sp)
 800d77c:	dd400517 	ldw	r21,20(sp)
 800d780:	dd000417 	ldw	r20,16(sp)
 800d784:	dcc00317 	ldw	r19,12(sp)
 800d788:	dc800217 	ldw	r18,8(sp)
 800d78c:	dc400117 	ldw	r17,4(sp)
 800d790:	dc000017 	ldw	r16,0(sp)
 800d794:	dec00704 	addi	sp,sp,28
 800d798:	f800283a 	ret
 800d79c:	21400017 	ldw	r5,0(r4)
 800d7a0:	18c00104 	addi	r3,r3,4
 800d7a4:	21000104 	addi	r4,r4,4
 800d7a8:	197fff15 	stw	r5,-4(r3)
 800d7ac:	223ffb36 	bltu	r4,r8,800d79c <__alt_data_end+0xfc00d79c>
 800d7b0:	003fe606 	br	800d74c <__alt_data_end+0xfc00d74c>
 800d7b4:	9c000084 	addi	r16,r19,2
 800d7b8:	003fe406 	br	800d74c <__alt_data_end+0xfc00d74c>

0800d7bc <__mcmp>:
 800d7bc:	20800417 	ldw	r2,16(r4)
 800d7c0:	28c00417 	ldw	r3,16(r5)
 800d7c4:	10c5c83a 	sub	r2,r2,r3
 800d7c8:	1000111e 	bne	r2,zero,800d810 <__mcmp+0x54>
 800d7cc:	18c7883a 	add	r3,r3,r3
 800d7d0:	18c7883a 	add	r3,r3,r3
 800d7d4:	21000504 	addi	r4,r4,20
 800d7d8:	29400504 	addi	r5,r5,20
 800d7dc:	20c5883a 	add	r2,r4,r3
 800d7e0:	28cb883a 	add	r5,r5,r3
 800d7e4:	00000106 	br	800d7ec <__mcmp+0x30>
 800d7e8:	20800a2e 	bgeu	r4,r2,800d814 <__mcmp+0x58>
 800d7ec:	10bfff04 	addi	r2,r2,-4
 800d7f0:	297fff04 	addi	r5,r5,-4
 800d7f4:	11800017 	ldw	r6,0(r2)
 800d7f8:	28c00017 	ldw	r3,0(r5)
 800d7fc:	30fffa26 	beq	r6,r3,800d7e8 <__alt_data_end+0xfc00d7e8>
 800d800:	30c00236 	bltu	r6,r3,800d80c <__mcmp+0x50>
 800d804:	00800044 	movi	r2,1
 800d808:	f800283a 	ret
 800d80c:	00bfffc4 	movi	r2,-1
 800d810:	f800283a 	ret
 800d814:	0005883a 	mov	r2,zero
 800d818:	f800283a 	ret

0800d81c <__mdiff>:
 800d81c:	28c00417 	ldw	r3,16(r5)
 800d820:	30800417 	ldw	r2,16(r6)
 800d824:	defffa04 	addi	sp,sp,-24
 800d828:	dcc00315 	stw	r19,12(sp)
 800d82c:	dc800215 	stw	r18,8(sp)
 800d830:	dfc00515 	stw	ra,20(sp)
 800d834:	dd000415 	stw	r20,16(sp)
 800d838:	dc400115 	stw	r17,4(sp)
 800d83c:	dc000015 	stw	r16,0(sp)
 800d840:	1887c83a 	sub	r3,r3,r2
 800d844:	2825883a 	mov	r18,r5
 800d848:	3027883a 	mov	r19,r6
 800d84c:	1800141e 	bne	r3,zero,800d8a0 <__mdiff+0x84>
 800d850:	1085883a 	add	r2,r2,r2
 800d854:	1085883a 	add	r2,r2,r2
 800d858:	2a000504 	addi	r8,r5,20
 800d85c:	34000504 	addi	r16,r6,20
 800d860:	4087883a 	add	r3,r8,r2
 800d864:	8085883a 	add	r2,r16,r2
 800d868:	00000106 	br	800d870 <__mdiff+0x54>
 800d86c:	40c0592e 	bgeu	r8,r3,800d9d4 <__mdiff+0x1b8>
 800d870:	18ffff04 	addi	r3,r3,-4
 800d874:	10bfff04 	addi	r2,r2,-4
 800d878:	19c00017 	ldw	r7,0(r3)
 800d87c:	11400017 	ldw	r5,0(r2)
 800d880:	397ffa26 	beq	r7,r5,800d86c <__alt_data_end+0xfc00d86c>
 800d884:	3940592e 	bgeu	r7,r5,800d9ec <__mdiff+0x1d0>
 800d888:	9005883a 	mov	r2,r18
 800d88c:	4023883a 	mov	r17,r8
 800d890:	9825883a 	mov	r18,r19
 800d894:	05000044 	movi	r20,1
 800d898:	1027883a 	mov	r19,r2
 800d89c:	00000406 	br	800d8b0 <__mdiff+0x94>
 800d8a0:	18005616 	blt	r3,zero,800d9fc <__mdiff+0x1e0>
 800d8a4:	34400504 	addi	r17,r6,20
 800d8a8:	2c000504 	addi	r16,r5,20
 800d8ac:	0029883a 	mov	r20,zero
 800d8b0:	91400117 	ldw	r5,4(r18)
 800d8b4:	800ce380 	call	800ce38 <_Balloc>
 800d8b8:	92400417 	ldw	r9,16(r18)
 800d8bc:	9b000417 	ldw	r12,16(r19)
 800d8c0:	12c00504 	addi	r11,r2,20
 800d8c4:	4a51883a 	add	r8,r9,r9
 800d8c8:	6319883a 	add	r12,r12,r12
 800d8cc:	4211883a 	add	r8,r8,r8
 800d8d0:	6319883a 	add	r12,r12,r12
 800d8d4:	15000315 	stw	r20,12(r2)
 800d8d8:	8211883a 	add	r8,r16,r8
 800d8dc:	8b19883a 	add	r12,r17,r12
 800d8e0:	0007883a 	mov	r3,zero
 800d8e4:	81400017 	ldw	r5,0(r16)
 800d8e8:	89c00017 	ldw	r7,0(r17)
 800d8ec:	59800104 	addi	r6,r11,4
 800d8f0:	293fffcc 	andi	r4,r5,65535
 800d8f4:	20c7883a 	add	r3,r4,r3
 800d8f8:	393fffcc 	andi	r4,r7,65535
 800d8fc:	1909c83a 	sub	r4,r3,r4
 800d900:	280ad43a 	srli	r5,r5,16
 800d904:	380ed43a 	srli	r7,r7,16
 800d908:	2007d43a 	srai	r3,r4,16
 800d90c:	213fffcc 	andi	r4,r4,65535
 800d910:	29cbc83a 	sub	r5,r5,r7
 800d914:	28c7883a 	add	r3,r5,r3
 800d918:	180a943a 	slli	r5,r3,16
 800d91c:	8c400104 	addi	r17,r17,4
 800d920:	84000104 	addi	r16,r16,4
 800d924:	2908b03a 	or	r4,r5,r4
 800d928:	59000015 	stw	r4,0(r11)
 800d92c:	1807d43a 	srai	r3,r3,16
 800d930:	3015883a 	mov	r10,r6
 800d934:	3017883a 	mov	r11,r6
 800d938:	8b3fea36 	bltu	r17,r12,800d8e4 <__alt_data_end+0xfc00d8e4>
 800d93c:	8200162e 	bgeu	r16,r8,800d998 <__mdiff+0x17c>
 800d940:	8017883a 	mov	r11,r16
 800d944:	59400017 	ldw	r5,0(r11)
 800d948:	31800104 	addi	r6,r6,4
 800d94c:	5ac00104 	addi	r11,r11,4
 800d950:	293fffcc 	andi	r4,r5,65535
 800d954:	20c7883a 	add	r3,r4,r3
 800d958:	280ed43a 	srli	r7,r5,16
 800d95c:	180bd43a 	srai	r5,r3,16
 800d960:	193fffcc 	andi	r4,r3,65535
 800d964:	3947883a 	add	r3,r7,r5
 800d968:	180a943a 	slli	r5,r3,16
 800d96c:	1807d43a 	srai	r3,r3,16
 800d970:	2908b03a 	or	r4,r5,r4
 800d974:	313fff15 	stw	r4,-4(r6)
 800d978:	5a3ff236 	bltu	r11,r8,800d944 <__alt_data_end+0xfc00d944>
 800d97c:	0406303a 	nor	r3,zero,r16
 800d980:	1a07883a 	add	r3,r3,r8
 800d984:	1806d0ba 	srli	r3,r3,2
 800d988:	18c00044 	addi	r3,r3,1
 800d98c:	18c7883a 	add	r3,r3,r3
 800d990:	18c7883a 	add	r3,r3,r3
 800d994:	50d5883a 	add	r10,r10,r3
 800d998:	50ffff04 	addi	r3,r10,-4
 800d99c:	2000041e 	bne	r4,zero,800d9b0 <__mdiff+0x194>
 800d9a0:	18ffff04 	addi	r3,r3,-4
 800d9a4:	19000017 	ldw	r4,0(r3)
 800d9a8:	4a7fffc4 	addi	r9,r9,-1
 800d9ac:	203ffc26 	beq	r4,zero,800d9a0 <__alt_data_end+0xfc00d9a0>
 800d9b0:	12400415 	stw	r9,16(r2)
 800d9b4:	dfc00517 	ldw	ra,20(sp)
 800d9b8:	dd000417 	ldw	r20,16(sp)
 800d9bc:	dcc00317 	ldw	r19,12(sp)
 800d9c0:	dc800217 	ldw	r18,8(sp)
 800d9c4:	dc400117 	ldw	r17,4(sp)
 800d9c8:	dc000017 	ldw	r16,0(sp)
 800d9cc:	dec00604 	addi	sp,sp,24
 800d9d0:	f800283a 	ret
 800d9d4:	000b883a 	mov	r5,zero
 800d9d8:	800ce380 	call	800ce38 <_Balloc>
 800d9dc:	00c00044 	movi	r3,1
 800d9e0:	10c00415 	stw	r3,16(r2)
 800d9e4:	10000515 	stw	zero,20(r2)
 800d9e8:	003ff206 	br	800d9b4 <__alt_data_end+0xfc00d9b4>
 800d9ec:	8023883a 	mov	r17,r16
 800d9f0:	0029883a 	mov	r20,zero
 800d9f4:	4021883a 	mov	r16,r8
 800d9f8:	003fad06 	br	800d8b0 <__alt_data_end+0xfc00d8b0>
 800d9fc:	9005883a 	mov	r2,r18
 800da00:	94400504 	addi	r17,r18,20
 800da04:	9c000504 	addi	r16,r19,20
 800da08:	9825883a 	mov	r18,r19
 800da0c:	05000044 	movi	r20,1
 800da10:	1027883a 	mov	r19,r2
 800da14:	003fa606 	br	800d8b0 <__alt_data_end+0xfc00d8b0>

0800da18 <__ulp>:
 800da18:	295ffc2c 	andhi	r5,r5,32752
 800da1c:	00bf3034 	movhi	r2,64704
 800da20:	2887883a 	add	r3,r5,r2
 800da24:	00c0020e 	bge	zero,r3,800da30 <__ulp+0x18>
 800da28:	0005883a 	mov	r2,zero
 800da2c:	f800283a 	ret
 800da30:	00c7c83a 	sub	r3,zero,r3
 800da34:	1807d53a 	srai	r3,r3,20
 800da38:	008004c4 	movi	r2,19
 800da3c:	10c00b0e 	bge	r2,r3,800da6c <__ulp+0x54>
 800da40:	18bffb04 	addi	r2,r3,-20
 800da44:	01000784 	movi	r4,30
 800da48:	0007883a 	mov	r3,zero
 800da4c:	20800516 	blt	r4,r2,800da64 <__ulp+0x4c>
 800da50:	010007c4 	movi	r4,31
 800da54:	2089c83a 	sub	r4,r4,r2
 800da58:	00800044 	movi	r2,1
 800da5c:	1104983a 	sll	r2,r2,r4
 800da60:	f800283a 	ret
 800da64:	00800044 	movi	r2,1
 800da68:	f800283a 	ret
 800da6c:	01400234 	movhi	r5,8
 800da70:	28c7d83a 	sra	r3,r5,r3
 800da74:	0005883a 	mov	r2,zero
 800da78:	f800283a 	ret

0800da7c <__b2d>:
 800da7c:	defffa04 	addi	sp,sp,-24
 800da80:	dc000015 	stw	r16,0(sp)
 800da84:	24000417 	ldw	r16,16(r4)
 800da88:	dc400115 	stw	r17,4(sp)
 800da8c:	24400504 	addi	r17,r4,20
 800da90:	8421883a 	add	r16,r16,r16
 800da94:	8421883a 	add	r16,r16,r16
 800da98:	8c21883a 	add	r16,r17,r16
 800da9c:	dc800215 	stw	r18,8(sp)
 800daa0:	84bfff17 	ldw	r18,-4(r16)
 800daa4:	dd000415 	stw	r20,16(sp)
 800daa8:	dcc00315 	stw	r19,12(sp)
 800daac:	9009883a 	mov	r4,r18
 800dab0:	2829883a 	mov	r20,r5
 800dab4:	dfc00515 	stw	ra,20(sp)
 800dab8:	800d1540 	call	800d154 <__hi0bits>
 800dabc:	00c00804 	movi	r3,32
 800dac0:	1889c83a 	sub	r4,r3,r2
 800dac4:	a1000015 	stw	r4,0(r20)
 800dac8:	01000284 	movi	r4,10
 800dacc:	84ffff04 	addi	r19,r16,-4
 800dad0:	20801216 	blt	r4,r2,800db1c <__b2d+0xa0>
 800dad4:	018002c4 	movi	r6,11
 800dad8:	308dc83a 	sub	r6,r6,r2
 800dadc:	9186d83a 	srl	r3,r18,r6
 800dae0:	18cffc34 	orhi	r3,r3,16368
 800dae4:	8cc0212e 	bgeu	r17,r19,800db6c <__b2d+0xf0>
 800dae8:	813ffe17 	ldw	r4,-8(r16)
 800daec:	218cd83a 	srl	r6,r4,r6
 800daf0:	10800544 	addi	r2,r2,21
 800daf4:	9084983a 	sll	r2,r18,r2
 800daf8:	1184b03a 	or	r2,r2,r6
 800dafc:	dfc00517 	ldw	ra,20(sp)
 800db00:	dd000417 	ldw	r20,16(sp)
 800db04:	dcc00317 	ldw	r19,12(sp)
 800db08:	dc800217 	ldw	r18,8(sp)
 800db0c:	dc400117 	ldw	r17,4(sp)
 800db10:	dc000017 	ldw	r16,0(sp)
 800db14:	dec00604 	addi	sp,sp,24
 800db18:	f800283a 	ret
 800db1c:	8cc00f2e 	bgeu	r17,r19,800db5c <__b2d+0xe0>
 800db20:	117ffd44 	addi	r5,r2,-11
 800db24:	80bffe17 	ldw	r2,-8(r16)
 800db28:	28000e26 	beq	r5,zero,800db64 <__b2d+0xe8>
 800db2c:	1949c83a 	sub	r4,r3,r5
 800db30:	9164983a 	sll	r18,r18,r5
 800db34:	1106d83a 	srl	r3,r2,r4
 800db38:	81bffe04 	addi	r6,r16,-8
 800db3c:	948ffc34 	orhi	r18,r18,16368
 800db40:	90c6b03a 	or	r3,r18,r3
 800db44:	89800e2e 	bgeu	r17,r6,800db80 <__b2d+0x104>
 800db48:	81bffd17 	ldw	r6,-12(r16)
 800db4c:	1144983a 	sll	r2,r2,r5
 800db50:	310ad83a 	srl	r5,r6,r4
 800db54:	2884b03a 	or	r2,r5,r2
 800db58:	003fe806 	br	800dafc <__alt_data_end+0xfc00dafc>
 800db5c:	10bffd44 	addi	r2,r2,-11
 800db60:	1000041e 	bne	r2,zero,800db74 <__b2d+0xf8>
 800db64:	90cffc34 	orhi	r3,r18,16368
 800db68:	003fe406 	br	800dafc <__alt_data_end+0xfc00dafc>
 800db6c:	000d883a 	mov	r6,zero
 800db70:	003fdf06 	br	800daf0 <__alt_data_end+0xfc00daf0>
 800db74:	90a4983a 	sll	r18,r18,r2
 800db78:	0005883a 	mov	r2,zero
 800db7c:	003ff906 	br	800db64 <__alt_data_end+0xfc00db64>
 800db80:	1144983a 	sll	r2,r2,r5
 800db84:	003fdd06 	br	800dafc <__alt_data_end+0xfc00dafc>

0800db88 <__d2b>:
 800db88:	defff804 	addi	sp,sp,-32
 800db8c:	dc000215 	stw	r16,8(sp)
 800db90:	3021883a 	mov	r16,r6
 800db94:	dc400315 	stw	r17,12(sp)
 800db98:	8022907a 	slli	r17,r16,1
 800db9c:	dd000615 	stw	r20,24(sp)
 800dba0:	2829883a 	mov	r20,r5
 800dba4:	01400044 	movi	r5,1
 800dba8:	dcc00515 	stw	r19,20(sp)
 800dbac:	dc800415 	stw	r18,16(sp)
 800dbb0:	dfc00715 	stw	ra,28(sp)
 800dbb4:	3825883a 	mov	r18,r7
 800dbb8:	8822d57a 	srli	r17,r17,21
 800dbbc:	800ce380 	call	800ce38 <_Balloc>
 800dbc0:	1027883a 	mov	r19,r2
 800dbc4:	00800434 	movhi	r2,16
 800dbc8:	10bfffc4 	addi	r2,r2,-1
 800dbcc:	808c703a 	and	r6,r16,r2
 800dbd0:	88000126 	beq	r17,zero,800dbd8 <__d2b+0x50>
 800dbd4:	31800434 	orhi	r6,r6,16
 800dbd8:	d9800015 	stw	r6,0(sp)
 800dbdc:	a0002426 	beq	r20,zero,800dc70 <__d2b+0xe8>
 800dbe0:	d9000104 	addi	r4,sp,4
 800dbe4:	dd000115 	stw	r20,4(sp)
 800dbe8:	800d1bc0 	call	800d1bc <__lo0bits>
 800dbec:	d8c00017 	ldw	r3,0(sp)
 800dbf0:	10002f1e 	bne	r2,zero,800dcb0 <__d2b+0x128>
 800dbf4:	d9000117 	ldw	r4,4(sp)
 800dbf8:	99000515 	stw	r4,20(r19)
 800dbfc:	1821003a 	cmpeq	r16,r3,zero
 800dc00:	01000084 	movi	r4,2
 800dc04:	2421c83a 	sub	r16,r4,r16
 800dc08:	98c00615 	stw	r3,24(r19)
 800dc0c:	9c000415 	stw	r16,16(r19)
 800dc10:	88001f1e 	bne	r17,zero,800dc90 <__d2b+0x108>
 800dc14:	10bef384 	addi	r2,r2,-1074
 800dc18:	90800015 	stw	r2,0(r18)
 800dc1c:	00900034 	movhi	r2,16384
 800dc20:	10bfffc4 	addi	r2,r2,-1
 800dc24:	8085883a 	add	r2,r16,r2
 800dc28:	1085883a 	add	r2,r2,r2
 800dc2c:	1085883a 	add	r2,r2,r2
 800dc30:	9885883a 	add	r2,r19,r2
 800dc34:	11000517 	ldw	r4,20(r2)
 800dc38:	8020917a 	slli	r16,r16,5
 800dc3c:	800d1540 	call	800d154 <__hi0bits>
 800dc40:	d8c00817 	ldw	r3,32(sp)
 800dc44:	8085c83a 	sub	r2,r16,r2
 800dc48:	18800015 	stw	r2,0(r3)
 800dc4c:	9805883a 	mov	r2,r19
 800dc50:	dfc00717 	ldw	ra,28(sp)
 800dc54:	dd000617 	ldw	r20,24(sp)
 800dc58:	dcc00517 	ldw	r19,20(sp)
 800dc5c:	dc800417 	ldw	r18,16(sp)
 800dc60:	dc400317 	ldw	r17,12(sp)
 800dc64:	dc000217 	ldw	r16,8(sp)
 800dc68:	dec00804 	addi	sp,sp,32
 800dc6c:	f800283a 	ret
 800dc70:	d809883a 	mov	r4,sp
 800dc74:	800d1bc0 	call	800d1bc <__lo0bits>
 800dc78:	d8c00017 	ldw	r3,0(sp)
 800dc7c:	04000044 	movi	r16,1
 800dc80:	9c000415 	stw	r16,16(r19)
 800dc84:	98c00515 	stw	r3,20(r19)
 800dc88:	10800804 	addi	r2,r2,32
 800dc8c:	883fe126 	beq	r17,zero,800dc14 <__alt_data_end+0xfc00dc14>
 800dc90:	00c00d44 	movi	r3,53
 800dc94:	8c7ef344 	addi	r17,r17,-1075
 800dc98:	88a3883a 	add	r17,r17,r2
 800dc9c:	1885c83a 	sub	r2,r3,r2
 800dca0:	d8c00817 	ldw	r3,32(sp)
 800dca4:	94400015 	stw	r17,0(r18)
 800dca8:	18800015 	stw	r2,0(r3)
 800dcac:	003fe706 	br	800dc4c <__alt_data_end+0xfc00dc4c>
 800dcb0:	01000804 	movi	r4,32
 800dcb4:	2089c83a 	sub	r4,r4,r2
 800dcb8:	1908983a 	sll	r4,r3,r4
 800dcbc:	d9400117 	ldw	r5,4(sp)
 800dcc0:	1886d83a 	srl	r3,r3,r2
 800dcc4:	2148b03a 	or	r4,r4,r5
 800dcc8:	99000515 	stw	r4,20(r19)
 800dccc:	d8c00015 	stw	r3,0(sp)
 800dcd0:	003fca06 	br	800dbfc <__alt_data_end+0xfc00dbfc>

0800dcd4 <__ratio>:
 800dcd4:	defff904 	addi	sp,sp,-28
 800dcd8:	dc400315 	stw	r17,12(sp)
 800dcdc:	2823883a 	mov	r17,r5
 800dce0:	d9400104 	addi	r5,sp,4
 800dce4:	dfc00615 	stw	ra,24(sp)
 800dce8:	dcc00515 	stw	r19,20(sp)
 800dcec:	dc800415 	stw	r18,16(sp)
 800dcf0:	2027883a 	mov	r19,r4
 800dcf4:	dc000215 	stw	r16,8(sp)
 800dcf8:	800da7c0 	call	800da7c <__b2d>
 800dcfc:	d80b883a 	mov	r5,sp
 800dd00:	8809883a 	mov	r4,r17
 800dd04:	1025883a 	mov	r18,r2
 800dd08:	1821883a 	mov	r16,r3
 800dd0c:	800da7c0 	call	800da7c <__b2d>
 800dd10:	8a000417 	ldw	r8,16(r17)
 800dd14:	99000417 	ldw	r4,16(r19)
 800dd18:	d9400117 	ldw	r5,4(sp)
 800dd1c:	2209c83a 	sub	r4,r4,r8
 800dd20:	2010917a 	slli	r8,r4,5
 800dd24:	d9000017 	ldw	r4,0(sp)
 800dd28:	2909c83a 	sub	r4,r5,r4
 800dd2c:	4109883a 	add	r4,r8,r4
 800dd30:	01000e0e 	bge	zero,r4,800dd6c <__ratio+0x98>
 800dd34:	2008953a 	slli	r4,r4,20
 800dd38:	2421883a 	add	r16,r4,r16
 800dd3c:	100d883a 	mov	r6,r2
 800dd40:	180f883a 	mov	r7,r3
 800dd44:	9009883a 	mov	r4,r18
 800dd48:	800b883a 	mov	r5,r16
 800dd4c:	80132600 	call	8013260 <__divdf3>
 800dd50:	dfc00617 	ldw	ra,24(sp)
 800dd54:	dcc00517 	ldw	r19,20(sp)
 800dd58:	dc800417 	ldw	r18,16(sp)
 800dd5c:	dc400317 	ldw	r17,12(sp)
 800dd60:	dc000217 	ldw	r16,8(sp)
 800dd64:	dec00704 	addi	sp,sp,28
 800dd68:	f800283a 	ret
 800dd6c:	2008953a 	slli	r4,r4,20
 800dd70:	1907c83a 	sub	r3,r3,r4
 800dd74:	003ff106 	br	800dd3c <__alt_data_end+0xfc00dd3c>

0800dd78 <_mprec_log10>:
 800dd78:	defffe04 	addi	sp,sp,-8
 800dd7c:	dc000015 	stw	r16,0(sp)
 800dd80:	dfc00115 	stw	ra,4(sp)
 800dd84:	008005c4 	movi	r2,23
 800dd88:	2021883a 	mov	r16,r4
 800dd8c:	11000d0e 	bge	r2,r4,800ddc4 <_mprec_log10+0x4c>
 800dd90:	0005883a 	mov	r2,zero
 800dd94:	00cffc34 	movhi	r3,16368
 800dd98:	843fffc4 	addi	r16,r16,-1
 800dd9c:	000d883a 	mov	r6,zero
 800dda0:	01d00934 	movhi	r7,16420
 800dda4:	1009883a 	mov	r4,r2
 800dda8:	180b883a 	mov	r5,r3
 800ddac:	8013e880 	call	8013e88 <__muldf3>
 800ddb0:	803ff91e 	bne	r16,zero,800dd98 <__alt_data_end+0xfc00dd98>
 800ddb4:	dfc00117 	ldw	ra,4(sp)
 800ddb8:	dc000017 	ldw	r16,0(sp)
 800ddbc:	dec00204 	addi	sp,sp,8
 800ddc0:	f800283a 	ret
 800ddc4:	202090fa 	slli	r16,r4,3
 800ddc8:	008200b4 	movhi	r2,2050
 800ddcc:	10a02004 	addi	r2,r2,-32640
 800ddd0:	1421883a 	add	r16,r2,r16
 800ddd4:	80800017 	ldw	r2,0(r16)
 800ddd8:	80c00117 	ldw	r3,4(r16)
 800dddc:	dfc00117 	ldw	ra,4(sp)
 800dde0:	dc000017 	ldw	r16,0(sp)
 800dde4:	dec00204 	addi	sp,sp,8
 800dde8:	f800283a 	ret

0800ddec <__copybits>:
 800ddec:	297fffc4 	addi	r5,r5,-1
 800ddf0:	280fd17a 	srai	r7,r5,5
 800ddf4:	30c00417 	ldw	r3,16(r6)
 800ddf8:	30800504 	addi	r2,r6,20
 800ddfc:	39c00044 	addi	r7,r7,1
 800de00:	18c7883a 	add	r3,r3,r3
 800de04:	39cf883a 	add	r7,r7,r7
 800de08:	18c7883a 	add	r3,r3,r3
 800de0c:	39cf883a 	add	r7,r7,r7
 800de10:	10c7883a 	add	r3,r2,r3
 800de14:	21cf883a 	add	r7,r4,r7
 800de18:	10c00d2e 	bgeu	r2,r3,800de50 <__copybits+0x64>
 800de1c:	200b883a 	mov	r5,r4
 800de20:	12000017 	ldw	r8,0(r2)
 800de24:	29400104 	addi	r5,r5,4
 800de28:	10800104 	addi	r2,r2,4
 800de2c:	2a3fff15 	stw	r8,-4(r5)
 800de30:	10fffb36 	bltu	r2,r3,800de20 <__alt_data_end+0xfc00de20>
 800de34:	1985c83a 	sub	r2,r3,r6
 800de38:	10bffac4 	addi	r2,r2,-21
 800de3c:	1004d0ba 	srli	r2,r2,2
 800de40:	10800044 	addi	r2,r2,1
 800de44:	1085883a 	add	r2,r2,r2
 800de48:	1085883a 	add	r2,r2,r2
 800de4c:	2089883a 	add	r4,r4,r2
 800de50:	21c0032e 	bgeu	r4,r7,800de60 <__copybits+0x74>
 800de54:	20000015 	stw	zero,0(r4)
 800de58:	21000104 	addi	r4,r4,4
 800de5c:	21fffd36 	bltu	r4,r7,800de54 <__alt_data_end+0xfc00de54>
 800de60:	f800283a 	ret

0800de64 <__any_on>:
 800de64:	20c00417 	ldw	r3,16(r4)
 800de68:	2805d17a 	srai	r2,r5,5
 800de6c:	21000504 	addi	r4,r4,20
 800de70:	18800d0e 	bge	r3,r2,800dea8 <__any_on+0x44>
 800de74:	18c7883a 	add	r3,r3,r3
 800de78:	18c7883a 	add	r3,r3,r3
 800de7c:	20c7883a 	add	r3,r4,r3
 800de80:	20c0192e 	bgeu	r4,r3,800dee8 <__any_on+0x84>
 800de84:	18bfff17 	ldw	r2,-4(r3)
 800de88:	18ffff04 	addi	r3,r3,-4
 800de8c:	1000041e 	bne	r2,zero,800dea0 <__any_on+0x3c>
 800de90:	20c0142e 	bgeu	r4,r3,800dee4 <__any_on+0x80>
 800de94:	18ffff04 	addi	r3,r3,-4
 800de98:	19400017 	ldw	r5,0(r3)
 800de9c:	283ffc26 	beq	r5,zero,800de90 <__alt_data_end+0xfc00de90>
 800dea0:	00800044 	movi	r2,1
 800dea4:	f800283a 	ret
 800dea8:	10c00a0e 	bge	r2,r3,800ded4 <__any_on+0x70>
 800deac:	1085883a 	add	r2,r2,r2
 800deb0:	1085883a 	add	r2,r2,r2
 800deb4:	294007cc 	andi	r5,r5,31
 800deb8:	2087883a 	add	r3,r4,r2
 800debc:	283ff026 	beq	r5,zero,800de80 <__alt_data_end+0xfc00de80>
 800dec0:	19800017 	ldw	r6,0(r3)
 800dec4:	3144d83a 	srl	r2,r6,r5
 800dec8:	114a983a 	sll	r5,r2,r5
 800decc:	317ff41e 	bne	r6,r5,800dea0 <__alt_data_end+0xfc00dea0>
 800ded0:	003feb06 	br	800de80 <__alt_data_end+0xfc00de80>
 800ded4:	1085883a 	add	r2,r2,r2
 800ded8:	1085883a 	add	r2,r2,r2
 800dedc:	2087883a 	add	r3,r4,r2
 800dee0:	003fe706 	br	800de80 <__alt_data_end+0xfc00de80>
 800dee4:	f800283a 	ret
 800dee8:	0005883a 	mov	r2,zero
 800deec:	f800283a 	ret

0800def0 <_realloc_r>:
 800def0:	defff604 	addi	sp,sp,-40
 800def4:	dc800215 	stw	r18,8(sp)
 800def8:	dfc00915 	stw	ra,36(sp)
 800defc:	df000815 	stw	fp,32(sp)
 800df00:	ddc00715 	stw	r23,28(sp)
 800df04:	dd800615 	stw	r22,24(sp)
 800df08:	dd400515 	stw	r21,20(sp)
 800df0c:	dd000415 	stw	r20,16(sp)
 800df10:	dcc00315 	stw	r19,12(sp)
 800df14:	dc400115 	stw	r17,4(sp)
 800df18:	dc000015 	stw	r16,0(sp)
 800df1c:	3025883a 	mov	r18,r6
 800df20:	2800b726 	beq	r5,zero,800e200 <_realloc_r+0x310>
 800df24:	282b883a 	mov	r21,r5
 800df28:	2029883a 	mov	r20,r4
 800df2c:	80157f40 	call	80157f4 <__malloc_lock>
 800df30:	a8bfff17 	ldw	r2,-4(r21)
 800df34:	043fff04 	movi	r16,-4
 800df38:	90c002c4 	addi	r3,r18,11
 800df3c:	01000584 	movi	r4,22
 800df40:	acfffe04 	addi	r19,r21,-8
 800df44:	1420703a 	and	r16,r2,r16
 800df48:	20c0332e 	bgeu	r4,r3,800e018 <_realloc_r+0x128>
 800df4c:	047ffe04 	movi	r17,-8
 800df50:	1c62703a 	and	r17,r3,r17
 800df54:	8807883a 	mov	r3,r17
 800df58:	88005816 	blt	r17,zero,800e0bc <_realloc_r+0x1cc>
 800df5c:	8c805736 	bltu	r17,r18,800e0bc <_realloc_r+0x1cc>
 800df60:	80c0300e 	bge	r16,r3,800e024 <_realloc_r+0x134>
 800df64:	070200b4 	movhi	fp,2050
 800df68:	e7227604 	addi	fp,fp,-30248
 800df6c:	e1c00217 	ldw	r7,8(fp)
 800df70:	9c09883a 	add	r4,r19,r16
 800df74:	22000117 	ldw	r8,4(r4)
 800df78:	21c06326 	beq	r4,r7,800e108 <_realloc_r+0x218>
 800df7c:	017fff84 	movi	r5,-2
 800df80:	414a703a 	and	r5,r8,r5
 800df84:	214b883a 	add	r5,r4,r5
 800df88:	29800117 	ldw	r6,4(r5)
 800df8c:	3180004c 	andi	r6,r6,1
 800df90:	30003f26 	beq	r6,zero,800e090 <_realloc_r+0x1a0>
 800df94:	1080004c 	andi	r2,r2,1
 800df98:	10008326 	beq	r2,zero,800e1a8 <_realloc_r+0x2b8>
 800df9c:	900b883a 	mov	r5,r18
 800dfa0:	a009883a 	mov	r4,r20
 800dfa4:	800c17c0 	call	800c17c <_malloc_r>
 800dfa8:	1025883a 	mov	r18,r2
 800dfac:	10011e26 	beq	r2,zero,800e428 <_realloc_r+0x538>
 800dfb0:	a93fff17 	ldw	r4,-4(r21)
 800dfb4:	10fffe04 	addi	r3,r2,-8
 800dfb8:	00bfff84 	movi	r2,-2
 800dfbc:	2084703a 	and	r2,r4,r2
 800dfc0:	9885883a 	add	r2,r19,r2
 800dfc4:	1880ee26 	beq	r3,r2,800e380 <_realloc_r+0x490>
 800dfc8:	81bfff04 	addi	r6,r16,-4
 800dfcc:	00800904 	movi	r2,36
 800dfd0:	1180b836 	bltu	r2,r6,800e2b4 <_realloc_r+0x3c4>
 800dfd4:	00c004c4 	movi	r3,19
 800dfd8:	19809636 	bltu	r3,r6,800e234 <_realloc_r+0x344>
 800dfdc:	9005883a 	mov	r2,r18
 800dfe0:	a807883a 	mov	r3,r21
 800dfe4:	19000017 	ldw	r4,0(r3)
 800dfe8:	11000015 	stw	r4,0(r2)
 800dfec:	19000117 	ldw	r4,4(r3)
 800dff0:	11000115 	stw	r4,4(r2)
 800dff4:	18c00217 	ldw	r3,8(r3)
 800dff8:	10c00215 	stw	r3,8(r2)
 800dffc:	a80b883a 	mov	r5,r21
 800e000:	a009883a 	mov	r4,r20
 800e004:	800b5840 	call	800b584 <_free_r>
 800e008:	a009883a 	mov	r4,r20
 800e00c:	80158180 	call	8015818 <__malloc_unlock>
 800e010:	9005883a 	mov	r2,r18
 800e014:	00001206 	br	800e060 <_realloc_r+0x170>
 800e018:	00c00404 	movi	r3,16
 800e01c:	1823883a 	mov	r17,r3
 800e020:	003fce06 	br	800df5c <__alt_data_end+0xfc00df5c>
 800e024:	a825883a 	mov	r18,r21
 800e028:	8445c83a 	sub	r2,r16,r17
 800e02c:	00c003c4 	movi	r3,15
 800e030:	18802636 	bltu	r3,r2,800e0cc <_realloc_r+0x1dc>
 800e034:	99800117 	ldw	r6,4(r19)
 800e038:	9c07883a 	add	r3,r19,r16
 800e03c:	3180004c 	andi	r6,r6,1
 800e040:	3420b03a 	or	r16,r6,r16
 800e044:	9c000115 	stw	r16,4(r19)
 800e048:	18800117 	ldw	r2,4(r3)
 800e04c:	10800054 	ori	r2,r2,1
 800e050:	18800115 	stw	r2,4(r3)
 800e054:	a009883a 	mov	r4,r20
 800e058:	80158180 	call	8015818 <__malloc_unlock>
 800e05c:	9005883a 	mov	r2,r18
 800e060:	dfc00917 	ldw	ra,36(sp)
 800e064:	df000817 	ldw	fp,32(sp)
 800e068:	ddc00717 	ldw	r23,28(sp)
 800e06c:	dd800617 	ldw	r22,24(sp)
 800e070:	dd400517 	ldw	r21,20(sp)
 800e074:	dd000417 	ldw	r20,16(sp)
 800e078:	dcc00317 	ldw	r19,12(sp)
 800e07c:	dc800217 	ldw	r18,8(sp)
 800e080:	dc400117 	ldw	r17,4(sp)
 800e084:	dc000017 	ldw	r16,0(sp)
 800e088:	dec00a04 	addi	sp,sp,40
 800e08c:	f800283a 	ret
 800e090:	017fff04 	movi	r5,-4
 800e094:	414a703a 	and	r5,r8,r5
 800e098:	814d883a 	add	r6,r16,r5
 800e09c:	30c01f16 	blt	r6,r3,800e11c <_realloc_r+0x22c>
 800e0a0:	20800317 	ldw	r2,12(r4)
 800e0a4:	20c00217 	ldw	r3,8(r4)
 800e0a8:	a825883a 	mov	r18,r21
 800e0ac:	3021883a 	mov	r16,r6
 800e0b0:	18800315 	stw	r2,12(r3)
 800e0b4:	10c00215 	stw	r3,8(r2)
 800e0b8:	003fdb06 	br	800e028 <__alt_data_end+0xfc00e028>
 800e0bc:	00800304 	movi	r2,12
 800e0c0:	a0800015 	stw	r2,0(r20)
 800e0c4:	0005883a 	mov	r2,zero
 800e0c8:	003fe506 	br	800e060 <__alt_data_end+0xfc00e060>
 800e0cc:	98c00117 	ldw	r3,4(r19)
 800e0d0:	9c4b883a 	add	r5,r19,r17
 800e0d4:	11000054 	ori	r4,r2,1
 800e0d8:	18c0004c 	andi	r3,r3,1
 800e0dc:	1c62b03a 	or	r17,r3,r17
 800e0e0:	9c400115 	stw	r17,4(r19)
 800e0e4:	29000115 	stw	r4,4(r5)
 800e0e8:	2885883a 	add	r2,r5,r2
 800e0ec:	10c00117 	ldw	r3,4(r2)
 800e0f0:	29400204 	addi	r5,r5,8
 800e0f4:	a009883a 	mov	r4,r20
 800e0f8:	18c00054 	ori	r3,r3,1
 800e0fc:	10c00115 	stw	r3,4(r2)
 800e100:	800b5840 	call	800b584 <_free_r>
 800e104:	003fd306 	br	800e054 <__alt_data_end+0xfc00e054>
 800e108:	017fff04 	movi	r5,-4
 800e10c:	414a703a 	and	r5,r8,r5
 800e110:	89800404 	addi	r6,r17,16
 800e114:	8151883a 	add	r8,r16,r5
 800e118:	4180590e 	bge	r8,r6,800e280 <_realloc_r+0x390>
 800e11c:	1080004c 	andi	r2,r2,1
 800e120:	103f9e1e 	bne	r2,zero,800df9c <__alt_data_end+0xfc00df9c>
 800e124:	adbffe17 	ldw	r22,-8(r21)
 800e128:	00bfff04 	movi	r2,-4
 800e12c:	9dadc83a 	sub	r22,r19,r22
 800e130:	b1800117 	ldw	r6,4(r22)
 800e134:	3084703a 	and	r2,r6,r2
 800e138:	20002026 	beq	r4,zero,800e1bc <_realloc_r+0x2cc>
 800e13c:	80af883a 	add	r23,r16,r2
 800e140:	b96f883a 	add	r23,r23,r5
 800e144:	21c05f26 	beq	r4,r7,800e2c4 <_realloc_r+0x3d4>
 800e148:	b8c01c16 	blt	r23,r3,800e1bc <_realloc_r+0x2cc>
 800e14c:	20800317 	ldw	r2,12(r4)
 800e150:	20c00217 	ldw	r3,8(r4)
 800e154:	81bfff04 	addi	r6,r16,-4
 800e158:	01000904 	movi	r4,36
 800e15c:	18800315 	stw	r2,12(r3)
 800e160:	10c00215 	stw	r3,8(r2)
 800e164:	b0c00217 	ldw	r3,8(r22)
 800e168:	b0800317 	ldw	r2,12(r22)
 800e16c:	b4800204 	addi	r18,r22,8
 800e170:	18800315 	stw	r2,12(r3)
 800e174:	10c00215 	stw	r3,8(r2)
 800e178:	21801b36 	bltu	r4,r6,800e1e8 <_realloc_r+0x2f8>
 800e17c:	008004c4 	movi	r2,19
 800e180:	1180352e 	bgeu	r2,r6,800e258 <_realloc_r+0x368>
 800e184:	a8800017 	ldw	r2,0(r21)
 800e188:	b0800215 	stw	r2,8(r22)
 800e18c:	a8800117 	ldw	r2,4(r21)
 800e190:	b0800315 	stw	r2,12(r22)
 800e194:	008006c4 	movi	r2,27
 800e198:	11807f36 	bltu	r2,r6,800e398 <_realloc_r+0x4a8>
 800e19c:	b0800404 	addi	r2,r22,16
 800e1a0:	ad400204 	addi	r21,r21,8
 800e1a4:	00002d06 	br	800e25c <_realloc_r+0x36c>
 800e1a8:	adbffe17 	ldw	r22,-8(r21)
 800e1ac:	00bfff04 	movi	r2,-4
 800e1b0:	9dadc83a 	sub	r22,r19,r22
 800e1b4:	b1000117 	ldw	r4,4(r22)
 800e1b8:	2084703a 	and	r2,r4,r2
 800e1bc:	b03f7726 	beq	r22,zero,800df9c <__alt_data_end+0xfc00df9c>
 800e1c0:	80af883a 	add	r23,r16,r2
 800e1c4:	b8ff7516 	blt	r23,r3,800df9c <__alt_data_end+0xfc00df9c>
 800e1c8:	b0800317 	ldw	r2,12(r22)
 800e1cc:	b0c00217 	ldw	r3,8(r22)
 800e1d0:	81bfff04 	addi	r6,r16,-4
 800e1d4:	01000904 	movi	r4,36
 800e1d8:	18800315 	stw	r2,12(r3)
 800e1dc:	10c00215 	stw	r3,8(r2)
 800e1e0:	b4800204 	addi	r18,r22,8
 800e1e4:	21bfe52e 	bgeu	r4,r6,800e17c <__alt_data_end+0xfc00e17c>
 800e1e8:	a80b883a 	mov	r5,r21
 800e1ec:	9009883a 	mov	r4,r18
 800e1f0:	800cbb40 	call	800cbb4 <memmove>
 800e1f4:	b821883a 	mov	r16,r23
 800e1f8:	b027883a 	mov	r19,r22
 800e1fc:	003f8a06 	br	800e028 <__alt_data_end+0xfc00e028>
 800e200:	300b883a 	mov	r5,r6
 800e204:	dfc00917 	ldw	ra,36(sp)
 800e208:	df000817 	ldw	fp,32(sp)
 800e20c:	ddc00717 	ldw	r23,28(sp)
 800e210:	dd800617 	ldw	r22,24(sp)
 800e214:	dd400517 	ldw	r21,20(sp)
 800e218:	dd000417 	ldw	r20,16(sp)
 800e21c:	dcc00317 	ldw	r19,12(sp)
 800e220:	dc800217 	ldw	r18,8(sp)
 800e224:	dc400117 	ldw	r17,4(sp)
 800e228:	dc000017 	ldw	r16,0(sp)
 800e22c:	dec00a04 	addi	sp,sp,40
 800e230:	800c17c1 	jmpi	800c17c <_malloc_r>
 800e234:	a8c00017 	ldw	r3,0(r21)
 800e238:	90c00015 	stw	r3,0(r18)
 800e23c:	a8c00117 	ldw	r3,4(r21)
 800e240:	90c00115 	stw	r3,4(r18)
 800e244:	00c006c4 	movi	r3,27
 800e248:	19804536 	bltu	r3,r6,800e360 <_realloc_r+0x470>
 800e24c:	90800204 	addi	r2,r18,8
 800e250:	a8c00204 	addi	r3,r21,8
 800e254:	003f6306 	br	800dfe4 <__alt_data_end+0xfc00dfe4>
 800e258:	9005883a 	mov	r2,r18
 800e25c:	a8c00017 	ldw	r3,0(r21)
 800e260:	b821883a 	mov	r16,r23
 800e264:	b027883a 	mov	r19,r22
 800e268:	10c00015 	stw	r3,0(r2)
 800e26c:	a8c00117 	ldw	r3,4(r21)
 800e270:	10c00115 	stw	r3,4(r2)
 800e274:	a8c00217 	ldw	r3,8(r21)
 800e278:	10c00215 	stw	r3,8(r2)
 800e27c:	003f6a06 	br	800e028 <__alt_data_end+0xfc00e028>
 800e280:	9c67883a 	add	r19,r19,r17
 800e284:	4445c83a 	sub	r2,r8,r17
 800e288:	e4c00215 	stw	r19,8(fp)
 800e28c:	10800054 	ori	r2,r2,1
 800e290:	98800115 	stw	r2,4(r19)
 800e294:	a8bfff17 	ldw	r2,-4(r21)
 800e298:	a009883a 	mov	r4,r20
 800e29c:	1080004c 	andi	r2,r2,1
 800e2a0:	1462b03a 	or	r17,r2,r17
 800e2a4:	ac7fff15 	stw	r17,-4(r21)
 800e2a8:	80158180 	call	8015818 <__malloc_unlock>
 800e2ac:	a805883a 	mov	r2,r21
 800e2b0:	003f6b06 	br	800e060 <__alt_data_end+0xfc00e060>
 800e2b4:	a80b883a 	mov	r5,r21
 800e2b8:	9009883a 	mov	r4,r18
 800e2bc:	800cbb40 	call	800cbb4 <memmove>
 800e2c0:	003f4e06 	br	800dffc <__alt_data_end+0xfc00dffc>
 800e2c4:	89000404 	addi	r4,r17,16
 800e2c8:	b93fbc16 	blt	r23,r4,800e1bc <__alt_data_end+0xfc00e1bc>
 800e2cc:	b0800317 	ldw	r2,12(r22)
 800e2d0:	b0c00217 	ldw	r3,8(r22)
 800e2d4:	81bfff04 	addi	r6,r16,-4
 800e2d8:	01000904 	movi	r4,36
 800e2dc:	18800315 	stw	r2,12(r3)
 800e2e0:	10c00215 	stw	r3,8(r2)
 800e2e4:	b4800204 	addi	r18,r22,8
 800e2e8:	21804336 	bltu	r4,r6,800e3f8 <_realloc_r+0x508>
 800e2ec:	008004c4 	movi	r2,19
 800e2f0:	11803f2e 	bgeu	r2,r6,800e3f0 <_realloc_r+0x500>
 800e2f4:	a8800017 	ldw	r2,0(r21)
 800e2f8:	b0800215 	stw	r2,8(r22)
 800e2fc:	a8800117 	ldw	r2,4(r21)
 800e300:	b0800315 	stw	r2,12(r22)
 800e304:	008006c4 	movi	r2,27
 800e308:	11803f36 	bltu	r2,r6,800e408 <_realloc_r+0x518>
 800e30c:	b0800404 	addi	r2,r22,16
 800e310:	ad400204 	addi	r21,r21,8
 800e314:	a8c00017 	ldw	r3,0(r21)
 800e318:	10c00015 	stw	r3,0(r2)
 800e31c:	a8c00117 	ldw	r3,4(r21)
 800e320:	10c00115 	stw	r3,4(r2)
 800e324:	a8c00217 	ldw	r3,8(r21)
 800e328:	10c00215 	stw	r3,8(r2)
 800e32c:	b447883a 	add	r3,r22,r17
 800e330:	bc45c83a 	sub	r2,r23,r17
 800e334:	e0c00215 	stw	r3,8(fp)
 800e338:	10800054 	ori	r2,r2,1
 800e33c:	18800115 	stw	r2,4(r3)
 800e340:	b0800117 	ldw	r2,4(r22)
 800e344:	a009883a 	mov	r4,r20
 800e348:	1080004c 	andi	r2,r2,1
 800e34c:	1462b03a 	or	r17,r2,r17
 800e350:	b4400115 	stw	r17,4(r22)
 800e354:	80158180 	call	8015818 <__malloc_unlock>
 800e358:	9005883a 	mov	r2,r18
 800e35c:	003f4006 	br	800e060 <__alt_data_end+0xfc00e060>
 800e360:	a8c00217 	ldw	r3,8(r21)
 800e364:	90c00215 	stw	r3,8(r18)
 800e368:	a8c00317 	ldw	r3,12(r21)
 800e36c:	90c00315 	stw	r3,12(r18)
 800e370:	30801126 	beq	r6,r2,800e3b8 <_realloc_r+0x4c8>
 800e374:	90800404 	addi	r2,r18,16
 800e378:	a8c00404 	addi	r3,r21,16
 800e37c:	003f1906 	br	800dfe4 <__alt_data_end+0xfc00dfe4>
 800e380:	90ffff17 	ldw	r3,-4(r18)
 800e384:	00bfff04 	movi	r2,-4
 800e388:	a825883a 	mov	r18,r21
 800e38c:	1884703a 	and	r2,r3,r2
 800e390:	80a1883a 	add	r16,r16,r2
 800e394:	003f2406 	br	800e028 <__alt_data_end+0xfc00e028>
 800e398:	a8800217 	ldw	r2,8(r21)
 800e39c:	b0800415 	stw	r2,16(r22)
 800e3a0:	a8800317 	ldw	r2,12(r21)
 800e3a4:	b0800515 	stw	r2,20(r22)
 800e3a8:	31000a26 	beq	r6,r4,800e3d4 <_realloc_r+0x4e4>
 800e3ac:	b0800604 	addi	r2,r22,24
 800e3b0:	ad400404 	addi	r21,r21,16
 800e3b4:	003fa906 	br	800e25c <__alt_data_end+0xfc00e25c>
 800e3b8:	a9000417 	ldw	r4,16(r21)
 800e3bc:	90800604 	addi	r2,r18,24
 800e3c0:	a8c00604 	addi	r3,r21,24
 800e3c4:	91000415 	stw	r4,16(r18)
 800e3c8:	a9000517 	ldw	r4,20(r21)
 800e3cc:	91000515 	stw	r4,20(r18)
 800e3d0:	003f0406 	br	800dfe4 <__alt_data_end+0xfc00dfe4>
 800e3d4:	a8c00417 	ldw	r3,16(r21)
 800e3d8:	ad400604 	addi	r21,r21,24
 800e3dc:	b0800804 	addi	r2,r22,32
 800e3e0:	b0c00615 	stw	r3,24(r22)
 800e3e4:	a8ffff17 	ldw	r3,-4(r21)
 800e3e8:	b0c00715 	stw	r3,28(r22)
 800e3ec:	003f9b06 	br	800e25c <__alt_data_end+0xfc00e25c>
 800e3f0:	9005883a 	mov	r2,r18
 800e3f4:	003fc706 	br	800e314 <__alt_data_end+0xfc00e314>
 800e3f8:	a80b883a 	mov	r5,r21
 800e3fc:	9009883a 	mov	r4,r18
 800e400:	800cbb40 	call	800cbb4 <memmove>
 800e404:	003fc906 	br	800e32c <__alt_data_end+0xfc00e32c>
 800e408:	a8800217 	ldw	r2,8(r21)
 800e40c:	b0800415 	stw	r2,16(r22)
 800e410:	a8800317 	ldw	r2,12(r21)
 800e414:	b0800515 	stw	r2,20(r22)
 800e418:	31000726 	beq	r6,r4,800e438 <_realloc_r+0x548>
 800e41c:	b0800604 	addi	r2,r22,24
 800e420:	ad400404 	addi	r21,r21,16
 800e424:	003fbb06 	br	800e314 <__alt_data_end+0xfc00e314>
 800e428:	a009883a 	mov	r4,r20
 800e42c:	80158180 	call	8015818 <__malloc_unlock>
 800e430:	0005883a 	mov	r2,zero
 800e434:	003f0a06 	br	800e060 <__alt_data_end+0xfc00e060>
 800e438:	a8c00417 	ldw	r3,16(r21)
 800e43c:	ad400604 	addi	r21,r21,24
 800e440:	b0800804 	addi	r2,r22,32
 800e444:	b0c00615 	stw	r3,24(r22)
 800e448:	a8ffff17 	ldw	r3,-4(r21)
 800e44c:	b0c00715 	stw	r3,28(r22)
 800e450:	003fb006 	br	800e314 <__alt_data_end+0xfc00e314>

0800e454 <__fpclassifyd>:
 800e454:	00a00034 	movhi	r2,32768
 800e458:	10bfffc4 	addi	r2,r2,-1
 800e45c:	2884703a 	and	r2,r5,r2
 800e460:	10000726 	beq	r2,zero,800e480 <__fpclassifyd+0x2c>
 800e464:	00fffc34 	movhi	r3,65520
 800e468:	019ff834 	movhi	r6,32736
 800e46c:	28c7883a 	add	r3,r5,r3
 800e470:	31bfffc4 	addi	r6,r6,-1
 800e474:	30c00536 	bltu	r6,r3,800e48c <__fpclassifyd+0x38>
 800e478:	00800104 	movi	r2,4
 800e47c:	f800283a 	ret
 800e480:	2000021e 	bne	r4,zero,800e48c <__fpclassifyd+0x38>
 800e484:	00800084 	movi	r2,2
 800e488:	f800283a 	ret
 800e48c:	00dffc34 	movhi	r3,32752
 800e490:	019ff834 	movhi	r6,32736
 800e494:	28cb883a 	add	r5,r5,r3
 800e498:	31bfffc4 	addi	r6,r6,-1
 800e49c:	317ff62e 	bgeu	r6,r5,800e478 <__alt_data_end+0xfc00e478>
 800e4a0:	01400434 	movhi	r5,16
 800e4a4:	297fffc4 	addi	r5,r5,-1
 800e4a8:	28800236 	bltu	r5,r2,800e4b4 <__fpclassifyd+0x60>
 800e4ac:	008000c4 	movi	r2,3
 800e4b0:	f800283a 	ret
 800e4b4:	10c00226 	beq	r2,r3,800e4c0 <__fpclassifyd+0x6c>
 800e4b8:	0005883a 	mov	r2,zero
 800e4bc:	f800283a 	ret
 800e4c0:	2005003a 	cmpeq	r2,r4,zero
 800e4c4:	f800283a 	ret

0800e4c8 <_sbrk_r>:
 800e4c8:	defffd04 	addi	sp,sp,-12
 800e4cc:	dc000015 	stw	r16,0(sp)
 800e4d0:	040200b4 	movhi	r16,2050
 800e4d4:	dc400115 	stw	r17,4(sp)
 800e4d8:	842f7e04 	addi	r16,r16,-16904
 800e4dc:	2023883a 	mov	r17,r4
 800e4e0:	2809883a 	mov	r4,r5
 800e4e4:	dfc00215 	stw	ra,8(sp)
 800e4e8:	80000015 	stw	zero,0(r16)
 800e4ec:	8015a000 	call	8015a00 <sbrk>
 800e4f0:	00ffffc4 	movi	r3,-1
 800e4f4:	10c00526 	beq	r2,r3,800e50c <_sbrk_r+0x44>
 800e4f8:	dfc00217 	ldw	ra,8(sp)
 800e4fc:	dc400117 	ldw	r17,4(sp)
 800e500:	dc000017 	ldw	r16,0(sp)
 800e504:	dec00304 	addi	sp,sp,12
 800e508:	f800283a 	ret
 800e50c:	80c00017 	ldw	r3,0(r16)
 800e510:	183ff926 	beq	r3,zero,800e4f8 <__alt_data_end+0xfc00e4f8>
 800e514:	88c00015 	stw	r3,0(r17)
 800e518:	003ff706 	br	800e4f8 <__alt_data_end+0xfc00e4f8>

0800e51c <__sread>:
 800e51c:	defffe04 	addi	sp,sp,-8
 800e520:	dc000015 	stw	r16,0(sp)
 800e524:	2821883a 	mov	r16,r5
 800e528:	2940038f 	ldh	r5,14(r5)
 800e52c:	dfc00115 	stw	ra,4(sp)
 800e530:	80119480 	call	8011948 <_read_r>
 800e534:	10000716 	blt	r2,zero,800e554 <__sread+0x38>
 800e538:	80c01417 	ldw	r3,80(r16)
 800e53c:	1887883a 	add	r3,r3,r2
 800e540:	80c01415 	stw	r3,80(r16)
 800e544:	dfc00117 	ldw	ra,4(sp)
 800e548:	dc000017 	ldw	r16,0(sp)
 800e54c:	dec00204 	addi	sp,sp,8
 800e550:	f800283a 	ret
 800e554:	80c0030b 	ldhu	r3,12(r16)
 800e558:	18fbffcc 	andi	r3,r3,61439
 800e55c:	80c0030d 	sth	r3,12(r16)
 800e560:	dfc00117 	ldw	ra,4(sp)
 800e564:	dc000017 	ldw	r16,0(sp)
 800e568:	dec00204 	addi	sp,sp,8
 800e56c:	f800283a 	ret

0800e570 <__seofread>:
 800e570:	0005883a 	mov	r2,zero
 800e574:	f800283a 	ret

0800e578 <__swrite>:
 800e578:	2880030b 	ldhu	r2,12(r5)
 800e57c:	defffb04 	addi	sp,sp,-20
 800e580:	dcc00315 	stw	r19,12(sp)
 800e584:	dc800215 	stw	r18,8(sp)
 800e588:	dc400115 	stw	r17,4(sp)
 800e58c:	dc000015 	stw	r16,0(sp)
 800e590:	dfc00415 	stw	ra,16(sp)
 800e594:	10c0400c 	andi	r3,r2,256
 800e598:	2821883a 	mov	r16,r5
 800e59c:	2023883a 	mov	r17,r4
 800e5a0:	3025883a 	mov	r18,r6
 800e5a4:	3827883a 	mov	r19,r7
 800e5a8:	18000526 	beq	r3,zero,800e5c0 <__swrite+0x48>
 800e5ac:	2940038f 	ldh	r5,14(r5)
 800e5b0:	01c00084 	movi	r7,2
 800e5b4:	000d883a 	mov	r6,zero
 800e5b8:	80118e80 	call	80118e8 <_lseek_r>
 800e5bc:	8080030b 	ldhu	r2,12(r16)
 800e5c0:	8140038f 	ldh	r5,14(r16)
 800e5c4:	10bbffcc 	andi	r2,r2,61439
 800e5c8:	980f883a 	mov	r7,r19
 800e5cc:	900d883a 	mov	r6,r18
 800e5d0:	8809883a 	mov	r4,r17
 800e5d4:	8080030d 	sth	r2,12(r16)
 800e5d8:	dfc00417 	ldw	ra,16(sp)
 800e5dc:	dcc00317 	ldw	r19,12(sp)
 800e5e0:	dc800217 	ldw	r18,8(sp)
 800e5e4:	dc400117 	ldw	r17,4(sp)
 800e5e8:	dc000017 	ldw	r16,0(sp)
 800e5ec:	dec00504 	addi	sp,sp,20
 800e5f0:	801139c1 	jmpi	801139c <_write_r>

0800e5f4 <__sseek>:
 800e5f4:	defffe04 	addi	sp,sp,-8
 800e5f8:	dc000015 	stw	r16,0(sp)
 800e5fc:	2821883a 	mov	r16,r5
 800e600:	2940038f 	ldh	r5,14(r5)
 800e604:	dfc00115 	stw	ra,4(sp)
 800e608:	80118e80 	call	80118e8 <_lseek_r>
 800e60c:	00ffffc4 	movi	r3,-1
 800e610:	10c00826 	beq	r2,r3,800e634 <__sseek+0x40>
 800e614:	80c0030b 	ldhu	r3,12(r16)
 800e618:	80801415 	stw	r2,80(r16)
 800e61c:	18c40014 	ori	r3,r3,4096
 800e620:	80c0030d 	sth	r3,12(r16)
 800e624:	dfc00117 	ldw	ra,4(sp)
 800e628:	dc000017 	ldw	r16,0(sp)
 800e62c:	dec00204 	addi	sp,sp,8
 800e630:	f800283a 	ret
 800e634:	80c0030b 	ldhu	r3,12(r16)
 800e638:	18fbffcc 	andi	r3,r3,61439
 800e63c:	80c0030d 	sth	r3,12(r16)
 800e640:	dfc00117 	ldw	ra,4(sp)
 800e644:	dc000017 	ldw	r16,0(sp)
 800e648:	dec00204 	addi	sp,sp,8
 800e64c:	f800283a 	ret

0800e650 <__sclose>:
 800e650:	2940038f 	ldh	r5,14(r5)
 800e654:	80113fc1 	jmpi	80113fc <_close_r>

0800e658 <strcmp>:
 800e658:	2144b03a 	or	r2,r4,r5
 800e65c:	108000cc 	andi	r2,r2,3
 800e660:	1000171e 	bne	r2,zero,800e6c0 <strcmp+0x68>
 800e664:	20800017 	ldw	r2,0(r4)
 800e668:	28c00017 	ldw	r3,0(r5)
 800e66c:	10c0141e 	bne	r2,r3,800e6c0 <strcmp+0x68>
 800e670:	027fbff4 	movhi	r9,65279
 800e674:	4a7fbfc4 	addi	r9,r9,-257
 800e678:	0086303a 	nor	r3,zero,r2
 800e67c:	02202074 	movhi	r8,32897
 800e680:	1245883a 	add	r2,r2,r9
 800e684:	42202004 	addi	r8,r8,-32640
 800e688:	10c4703a 	and	r2,r2,r3
 800e68c:	1204703a 	and	r2,r2,r8
 800e690:	10000226 	beq	r2,zero,800e69c <strcmp+0x44>
 800e694:	00002306 	br	800e724 <strcmp+0xcc>
 800e698:	1000221e 	bne	r2,zero,800e724 <strcmp+0xcc>
 800e69c:	21000104 	addi	r4,r4,4
 800e6a0:	20c00017 	ldw	r3,0(r4)
 800e6a4:	29400104 	addi	r5,r5,4
 800e6a8:	29800017 	ldw	r6,0(r5)
 800e6ac:	1a4f883a 	add	r7,r3,r9
 800e6b0:	00c4303a 	nor	r2,zero,r3
 800e6b4:	3884703a 	and	r2,r7,r2
 800e6b8:	1204703a 	and	r2,r2,r8
 800e6bc:	19bff626 	beq	r3,r6,800e698 <__alt_data_end+0xfc00e698>
 800e6c0:	20800003 	ldbu	r2,0(r4)
 800e6c4:	10c03fcc 	andi	r3,r2,255
 800e6c8:	18c0201c 	xori	r3,r3,128
 800e6cc:	18ffe004 	addi	r3,r3,-128
 800e6d0:	18000c26 	beq	r3,zero,800e704 <strcmp+0xac>
 800e6d4:	29800007 	ldb	r6,0(r5)
 800e6d8:	19800326 	beq	r3,r6,800e6e8 <strcmp+0x90>
 800e6dc:	00001306 	br	800e72c <strcmp+0xd4>
 800e6e0:	29800007 	ldb	r6,0(r5)
 800e6e4:	11800b1e 	bne	r2,r6,800e714 <strcmp+0xbc>
 800e6e8:	21000044 	addi	r4,r4,1
 800e6ec:	20c00003 	ldbu	r3,0(r4)
 800e6f0:	29400044 	addi	r5,r5,1
 800e6f4:	18803fcc 	andi	r2,r3,255
 800e6f8:	1080201c 	xori	r2,r2,128
 800e6fc:	10bfe004 	addi	r2,r2,-128
 800e700:	103ff71e 	bne	r2,zero,800e6e0 <__alt_data_end+0xfc00e6e0>
 800e704:	0007883a 	mov	r3,zero
 800e708:	28800003 	ldbu	r2,0(r5)
 800e70c:	1885c83a 	sub	r2,r3,r2
 800e710:	f800283a 	ret
 800e714:	28800003 	ldbu	r2,0(r5)
 800e718:	18c03fcc 	andi	r3,r3,255
 800e71c:	1885c83a 	sub	r2,r3,r2
 800e720:	f800283a 	ret
 800e724:	0005883a 	mov	r2,zero
 800e728:	f800283a 	ret
 800e72c:	10c03fcc 	andi	r3,r2,255
 800e730:	003ff506 	br	800e708 <__alt_data_end+0xfc00e708>

0800e734 <__ssprint_r>:
 800e734:	30800217 	ldw	r2,8(r6)
 800e738:	defff604 	addi	sp,sp,-40
 800e73c:	dc800215 	stw	r18,8(sp)
 800e740:	dfc00915 	stw	ra,36(sp)
 800e744:	df000815 	stw	fp,32(sp)
 800e748:	ddc00715 	stw	r23,28(sp)
 800e74c:	dd800615 	stw	r22,24(sp)
 800e750:	dd400515 	stw	r21,20(sp)
 800e754:	dd000415 	stw	r20,16(sp)
 800e758:	dcc00315 	stw	r19,12(sp)
 800e75c:	dc400115 	stw	r17,4(sp)
 800e760:	dc000015 	stw	r16,0(sp)
 800e764:	3025883a 	mov	r18,r6
 800e768:	10005826 	beq	r2,zero,800e8cc <__ssprint_r+0x198>
 800e76c:	2027883a 	mov	r19,r4
 800e770:	35c00017 	ldw	r23,0(r6)
 800e774:	29000017 	ldw	r4,0(r5)
 800e778:	28800217 	ldw	r2,8(r5)
 800e77c:	2823883a 	mov	r17,r5
 800e780:	0039883a 	mov	fp,zero
 800e784:	0021883a 	mov	r16,zero
 800e788:	80003926 	beq	r16,zero,800e870 <__ssprint_r+0x13c>
 800e78c:	102b883a 	mov	r21,r2
 800e790:	102d883a 	mov	r22,r2
 800e794:	80803a36 	bltu	r16,r2,800e880 <__ssprint_r+0x14c>
 800e798:	88c0030b 	ldhu	r3,12(r17)
 800e79c:	1881200c 	andi	r2,r3,1152
 800e7a0:	10002626 	beq	r2,zero,800e83c <__ssprint_r+0x108>
 800e7a4:	88800517 	ldw	r2,20(r17)
 800e7a8:	89400417 	ldw	r5,16(r17)
 800e7ac:	81800044 	addi	r6,r16,1
 800e7b0:	108f883a 	add	r7,r2,r2
 800e7b4:	3885883a 	add	r2,r7,r2
 800e7b8:	100ed7fa 	srli	r7,r2,31
 800e7bc:	216dc83a 	sub	r22,r4,r5
 800e7c0:	3589883a 	add	r4,r6,r22
 800e7c4:	3885883a 	add	r2,r7,r2
 800e7c8:	102bd07a 	srai	r21,r2,1
 800e7cc:	a80d883a 	mov	r6,r21
 800e7d0:	a900022e 	bgeu	r21,r4,800e7dc <__ssprint_r+0xa8>
 800e7d4:	202b883a 	mov	r21,r4
 800e7d8:	200d883a 	mov	r6,r4
 800e7dc:	18c1000c 	andi	r3,r3,1024
 800e7e0:	18002a26 	beq	r3,zero,800e88c <__ssprint_r+0x158>
 800e7e4:	300b883a 	mov	r5,r6
 800e7e8:	9809883a 	mov	r4,r19
 800e7ec:	800c17c0 	call	800c17c <_malloc_r>
 800e7f0:	1029883a 	mov	r20,r2
 800e7f4:	10002c26 	beq	r2,zero,800e8a8 <__ssprint_r+0x174>
 800e7f8:	89400417 	ldw	r5,16(r17)
 800e7fc:	b00d883a 	mov	r6,r22
 800e800:	1009883a 	mov	r4,r2
 800e804:	800ca6c0 	call	800ca6c <memcpy>
 800e808:	8880030b 	ldhu	r2,12(r17)
 800e80c:	00fedfc4 	movi	r3,-1153
 800e810:	10c4703a 	and	r2,r2,r3
 800e814:	10802014 	ori	r2,r2,128
 800e818:	8880030d 	sth	r2,12(r17)
 800e81c:	a589883a 	add	r4,r20,r22
 800e820:	adadc83a 	sub	r22,r21,r22
 800e824:	8d400515 	stw	r21,20(r17)
 800e828:	8d800215 	stw	r22,8(r17)
 800e82c:	8d000415 	stw	r20,16(r17)
 800e830:	89000015 	stw	r4,0(r17)
 800e834:	802b883a 	mov	r21,r16
 800e838:	802d883a 	mov	r22,r16
 800e83c:	b00d883a 	mov	r6,r22
 800e840:	e00b883a 	mov	r5,fp
 800e844:	800cbb40 	call	800cbb4 <memmove>
 800e848:	88800217 	ldw	r2,8(r17)
 800e84c:	89000017 	ldw	r4,0(r17)
 800e850:	90c00217 	ldw	r3,8(r18)
 800e854:	1545c83a 	sub	r2,r2,r21
 800e858:	2589883a 	add	r4,r4,r22
 800e85c:	88800215 	stw	r2,8(r17)
 800e860:	89000015 	stw	r4,0(r17)
 800e864:	1c21c83a 	sub	r16,r3,r16
 800e868:	94000215 	stw	r16,8(r18)
 800e86c:	80001726 	beq	r16,zero,800e8cc <__ssprint_r+0x198>
 800e870:	bf000017 	ldw	fp,0(r23)
 800e874:	bc000117 	ldw	r16,4(r23)
 800e878:	bdc00204 	addi	r23,r23,8
 800e87c:	003fc206 	br	800e788 <__alt_data_end+0xfc00e788>
 800e880:	802b883a 	mov	r21,r16
 800e884:	802d883a 	mov	r22,r16
 800e888:	003fec06 	br	800e83c <__alt_data_end+0xfc00e83c>
 800e88c:	9809883a 	mov	r4,r19
 800e890:	800def00 	call	800def0 <_realloc_r>
 800e894:	1029883a 	mov	r20,r2
 800e898:	103fe01e 	bne	r2,zero,800e81c <__alt_data_end+0xfc00e81c>
 800e89c:	89400417 	ldw	r5,16(r17)
 800e8a0:	9809883a 	mov	r4,r19
 800e8a4:	800b5840 	call	800b584 <_free_r>
 800e8a8:	88c0030b 	ldhu	r3,12(r17)
 800e8ac:	00800304 	movi	r2,12
 800e8b0:	98800015 	stw	r2,0(r19)
 800e8b4:	18c01014 	ori	r3,r3,64
 800e8b8:	88c0030d 	sth	r3,12(r17)
 800e8bc:	00bfffc4 	movi	r2,-1
 800e8c0:	90000215 	stw	zero,8(r18)
 800e8c4:	90000115 	stw	zero,4(r18)
 800e8c8:	00000206 	br	800e8d4 <__ssprint_r+0x1a0>
 800e8cc:	90000115 	stw	zero,4(r18)
 800e8d0:	0005883a 	mov	r2,zero
 800e8d4:	dfc00917 	ldw	ra,36(sp)
 800e8d8:	df000817 	ldw	fp,32(sp)
 800e8dc:	ddc00717 	ldw	r23,28(sp)
 800e8e0:	dd800617 	ldw	r22,24(sp)
 800e8e4:	dd400517 	ldw	r21,20(sp)
 800e8e8:	dd000417 	ldw	r20,16(sp)
 800e8ec:	dcc00317 	ldw	r19,12(sp)
 800e8f0:	dc800217 	ldw	r18,8(sp)
 800e8f4:	dc400117 	ldw	r17,4(sp)
 800e8f8:	dc000017 	ldw	r16,0(sp)
 800e8fc:	dec00a04 	addi	sp,sp,40
 800e900:	f800283a 	ret

0800e904 <___svfiprintf_internal_r>:
 800e904:	2880030b 	ldhu	r2,12(r5)
 800e908:	deffc804 	addi	sp,sp,-224
 800e90c:	dcc03115 	stw	r19,196(sp)
 800e910:	dfc03715 	stw	ra,220(sp)
 800e914:	df003615 	stw	fp,216(sp)
 800e918:	ddc03515 	stw	r23,212(sp)
 800e91c:	dd803415 	stw	r22,208(sp)
 800e920:	dd403315 	stw	r21,204(sp)
 800e924:	dd003215 	stw	r20,200(sp)
 800e928:	dc803015 	stw	r18,192(sp)
 800e92c:	dc402f15 	stw	r17,188(sp)
 800e930:	dc002e15 	stw	r16,184(sp)
 800e934:	d9402315 	stw	r5,140(sp)
 800e938:	d9002715 	stw	r4,156(sp)
 800e93c:	1080200c 	andi	r2,r2,128
 800e940:	d9c02415 	stw	r7,144(sp)
 800e944:	3027883a 	mov	r19,r6
 800e948:	10000226 	beq	r2,zero,800e954 <___svfiprintf_internal_r+0x50>
 800e94c:	28800417 	ldw	r2,16(r5)
 800e950:	10046d26 	beq	r2,zero,800fb08 <___svfiprintf_internal_r+0x1204>
 800e954:	d8801a04 	addi	r2,sp,104
 800e958:	d8c019c4 	addi	r3,sp,103
 800e95c:	058200b4 	movhi	r22,2050
 800e960:	10c9c83a 	sub	r4,r2,r3
 800e964:	b5a05204 	addi	r22,r22,-32440
 800e968:	d8801e15 	stw	r2,120(sp)
 800e96c:	d8c01f15 	stw	r3,124(sp)
 800e970:	dec01a15 	stw	sp,104(sp)
 800e974:	d8001c15 	stw	zero,112(sp)
 800e978:	d8001b15 	stw	zero,108(sp)
 800e97c:	d811883a 	mov	r8,sp
 800e980:	d8002915 	stw	zero,164(sp)
 800e984:	d8002615 	stw	zero,152(sp)
 800e988:	d9002c15 	stw	r4,176(sp)
 800e98c:	98800007 	ldb	r2,0(r19)
 800e990:	10031426 	beq	r2,zero,800f5e4 <___svfiprintf_internal_r+0xce0>
 800e994:	00c00944 	movi	r3,37
 800e998:	9825883a 	mov	r18,r19
 800e99c:	10c0021e 	bne	r2,r3,800e9a8 <___svfiprintf_internal_r+0xa4>
 800e9a0:	00001406 	br	800e9f4 <___svfiprintf_internal_r+0xf0>
 800e9a4:	10c00326 	beq	r2,r3,800e9b4 <___svfiprintf_internal_r+0xb0>
 800e9a8:	94800044 	addi	r18,r18,1
 800e9ac:	90800007 	ldb	r2,0(r18)
 800e9b0:	103ffc1e 	bne	r2,zero,800e9a4 <__alt_data_end+0xfc00e9a4>
 800e9b4:	94e1c83a 	sub	r16,r18,r19
 800e9b8:	80000e26 	beq	r16,zero,800e9f4 <___svfiprintf_internal_r+0xf0>
 800e9bc:	d8c01c17 	ldw	r3,112(sp)
 800e9c0:	d8801b17 	ldw	r2,108(sp)
 800e9c4:	44c00015 	stw	r19,0(r8)
 800e9c8:	1c07883a 	add	r3,r3,r16
 800e9cc:	10800044 	addi	r2,r2,1
 800e9d0:	d8c01c15 	stw	r3,112(sp)
 800e9d4:	44000115 	stw	r16,4(r8)
 800e9d8:	d8801b15 	stw	r2,108(sp)
 800e9dc:	00c001c4 	movi	r3,7
 800e9e0:	18835c16 	blt	r3,r2,800f754 <___svfiprintf_internal_r+0xe50>
 800e9e4:	42000204 	addi	r8,r8,8
 800e9e8:	d9402617 	ldw	r5,152(sp)
 800e9ec:	2c0b883a 	add	r5,r5,r16
 800e9f0:	d9402615 	stw	r5,152(sp)
 800e9f4:	90800007 	ldb	r2,0(r18)
 800e9f8:	1002fc26 	beq	r2,zero,800f5ec <___svfiprintf_internal_r+0xce8>
 800e9fc:	0023883a 	mov	r17,zero
 800ea00:	00bfffc4 	movi	r2,-1
 800ea04:	0021883a 	mov	r16,zero
 800ea08:	94c00044 	addi	r19,r18,1
 800ea0c:	90c00047 	ldb	r3,1(r18)
 800ea10:	dc402105 	stb	r17,132(sp)
 800ea14:	d8001d85 	stb	zero,118(sp)
 800ea18:	002b883a 	mov	r21,zero
 800ea1c:	d8802015 	stw	r2,128(sp)
 800ea20:	d8002515 	stw	zero,148(sp)
 800ea24:	04801604 	movi	r18,88
 800ea28:	05000244 	movi	r20,9
 800ea2c:	402f883a 	mov	r23,r8
 800ea30:	8023883a 	mov	r17,r16
 800ea34:	9cc00044 	addi	r19,r19,1
 800ea38:	18bff804 	addi	r2,r3,-32
 800ea3c:	9081fb36 	bltu	r18,r2,800f22c <___svfiprintf_internal_r+0x928>
 800ea40:	100490ba 	slli	r2,r2,2
 800ea44:	01020074 	movhi	r4,2049
 800ea48:	213a9604 	addi	r4,r4,-5544
 800ea4c:	1105883a 	add	r2,r2,r4
 800ea50:	10800017 	ldw	r2,0(r2)
 800ea54:	1000683a 	jmp	r2
 800ea58:	0800ec58 	cmpnei	zero,at,945
 800ea5c:	0800f22c 	andhi	zero,at,968
 800ea60:	0800f22c 	andhi	zero,at,968
 800ea64:	0800ec4c 	andi	zero,at,945
 800ea68:	0800f22c 	andhi	zero,at,968
 800ea6c:	0800f22c 	andhi	zero,at,968
 800ea70:	0800f22c 	andhi	zero,at,968
 800ea74:	0800f22c 	andhi	zero,at,968
 800ea78:	0800f22c 	andhi	zero,at,968
 800ea7c:	0800f22c 	andhi	zero,at,968
 800ea80:	0800ebbc 	xorhi	zero,at,942
 800ea84:	0800edb8 	rdprs	zero,at,950
 800ea88:	0800f22c 	andhi	zero,at,968
 800ea8c:	0800ebe4 	muli	zero,at,943
 800ea90:	0800f268 	cmpgeui	zero,at,969
 800ea94:	0800f22c 	andhi	zero,at,968
 800ea98:	0800f25c 	xori	zero,at,969
 800ea9c:	0800f1f0 	cmpltui	zero,at,967
 800eaa0:	0800f1f0 	cmpltui	zero,at,967
 800eaa4:	0800f1f0 	cmpltui	zero,at,967
 800eaa8:	0800f1f0 	cmpltui	zero,at,967
 800eaac:	0800f1f0 	cmpltui	zero,at,967
 800eab0:	0800f1f0 	cmpltui	zero,at,967
 800eab4:	0800f1f0 	cmpltui	zero,at,967
 800eab8:	0800f1f0 	cmpltui	zero,at,967
 800eabc:	0800f1f0 	cmpltui	zero,at,967
 800eac0:	0800f22c 	andhi	zero,at,968
 800eac4:	0800f22c 	andhi	zero,at,968
 800eac8:	0800f22c 	andhi	zero,at,968
 800eacc:	0800f22c 	andhi	zero,at,968
 800ead0:	0800f22c 	andhi	zero,at,968
 800ead4:	0800f22c 	andhi	zero,at,968
 800ead8:	0800f22c 	andhi	zero,at,968
 800eadc:	0800f22c 	andhi	zero,at,968
 800eae0:	0800f22c 	andhi	zero,at,968
 800eae4:	0800f22c 	andhi	zero,at,968
 800eae8:	0800f174 	orhi	zero,at,965
 800eaec:	0800f22c 	andhi	zero,at,968
 800eaf0:	0800f22c 	andhi	zero,at,968
 800eaf4:	0800f22c 	andhi	zero,at,968
 800eaf8:	0800f22c 	andhi	zero,at,968
 800eafc:	0800f22c 	andhi	zero,at,968
 800eb00:	0800f22c 	andhi	zero,at,968
 800eb04:	0800f22c 	andhi	zero,at,968
 800eb08:	0800f22c 	andhi	zero,at,968
 800eb0c:	0800f22c 	andhi	zero,at,968
 800eb10:	0800f22c 	andhi	zero,at,968
 800eb14:	0800f324 	muli	zero,at,972
 800eb18:	0800f22c 	andhi	zero,at,968
 800eb1c:	0800f22c 	andhi	zero,at,968
 800eb20:	0800f22c 	andhi	zero,at,968
 800eb24:	0800f22c 	andhi	zero,at,968
 800eb28:	0800f22c 	andhi	zero,at,968
 800eb2c:	0800f2b0 	cmpltui	zero,at,970
 800eb30:	0800f22c 	andhi	zero,at,968
 800eb34:	0800f22c 	andhi	zero,at,968
 800eb38:	0800efb0 	cmpltui	zero,at,958
 800eb3c:	0800f22c 	andhi	zero,at,968
 800eb40:	0800f22c 	andhi	zero,at,968
 800eb44:	0800f22c 	andhi	zero,at,968
 800eb48:	0800f22c 	andhi	zero,at,968
 800eb4c:	0800f22c 	andhi	zero,at,968
 800eb50:	0800f22c 	andhi	zero,at,968
 800eb54:	0800f22c 	andhi	zero,at,968
 800eb58:	0800f22c 	andhi	zero,at,968
 800eb5c:	0800f22c 	andhi	zero,at,968
 800eb60:	0800f22c 	andhi	zero,at,968
 800eb64:	0800ee7c 	xorhi	zero,at,953
 800eb68:	0800f060 	cmpeqi	zero,at,961
 800eb6c:	0800f22c 	andhi	zero,at,968
 800eb70:	0800f22c 	andhi	zero,at,968
 800eb74:	0800f22c 	andhi	zero,at,968
 800eb78:	0800f054 	ori	zero,at,961
 800eb7c:	0800f060 	cmpeqi	zero,at,961
 800eb80:	0800f22c 	andhi	zero,at,968
 800eb84:	0800f22c 	andhi	zero,at,968
 800eb88:	0800f040 	call	800f04 <__alt_mem_onchip_memory2_0+0x800f04>
 800eb8c:	0800f22c 	andhi	zero,at,968
 800eb90:	0800f000 	call	800f00 <__alt_mem_onchip_memory2_0+0x800f00>
 800eb94:	0800edcc 	andi	zero,at,951
 800eb98:	0800ebf0 	cmpltui	zero,at,943
 800eb9c:	0800f168 	cmpgeui	zero,at,965
 800eba0:	0800f22c 	andhi	zero,at,968
 800eba4:	0800f114 	ori	zero,at,964
 800eba8:	0800f22c 	andhi	zero,at,968
 800ebac:	0800ed30 	cmpltui	zero,at,948
 800ebb0:	0800f22c 	andhi	zero,at,968
 800ebb4:	0800f22c 	andhi	zero,at,968
 800ebb8:	0800ec7c 	xorhi	zero,at,945
 800ebbc:	d9002417 	ldw	r4,144(sp)
 800ebc0:	d9402417 	ldw	r5,144(sp)
 800ebc4:	21000017 	ldw	r4,0(r4)
 800ebc8:	28800104 	addi	r2,r5,4
 800ebcc:	d9002515 	stw	r4,148(sp)
 800ebd0:	20032b0e 	bge	r4,zero,800f880 <___svfiprintf_internal_r+0xf7c>
 800ebd4:	d8c02517 	ldw	r3,148(sp)
 800ebd8:	d8802415 	stw	r2,144(sp)
 800ebdc:	00c7c83a 	sub	r3,zero,r3
 800ebe0:	d8c02515 	stw	r3,148(sp)
 800ebe4:	8c400114 	ori	r17,r17,4
 800ebe8:	98c00007 	ldb	r3,0(r19)
 800ebec:	003f9106 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800ebf0:	00800c04 	movi	r2,48
 800ebf4:	d9402417 	ldw	r5,144(sp)
 800ebf8:	d9002017 	ldw	r4,128(sp)
 800ebfc:	d8801d05 	stb	r2,116(sp)
 800ec00:	00801e04 	movi	r2,120
 800ec04:	d8801d45 	stb	r2,117(sp)
 800ec08:	d8001d85 	stb	zero,118(sp)
 800ec0c:	b811883a 	mov	r8,r23
 800ec10:	28c00104 	addi	r3,r5,4
 800ec14:	2c800017 	ldw	r18,0(r5)
 800ec18:	0029883a 	mov	r20,zero
 800ec1c:	88800094 	ori	r2,r17,2
 800ec20:	20036316 	blt	r4,zero,800f9b0 <___svfiprintf_internal_r+0x10ac>
 800ec24:	00bfdfc4 	movi	r2,-129
 800ec28:	88a0703a 	and	r16,r17,r2
 800ec2c:	d8c02415 	stw	r3,144(sp)
 800ec30:	84000094 	ori	r16,r16,2
 800ec34:	90031c26 	beq	r18,zero,800f8a8 <___svfiprintf_internal_r+0xfa4>
 800ec38:	01420074 	movhi	r5,2049
 800ec3c:	295fe904 	addi	r5,r5,32676
 800ec40:	002b883a 	mov	r21,zero
 800ec44:	d9402915 	stw	r5,164(sp)
 800ec48:	00002906 	br	800ecf0 <___svfiprintf_internal_r+0x3ec>
 800ec4c:	8c400054 	ori	r17,r17,1
 800ec50:	98c00007 	ldb	r3,0(r19)
 800ec54:	003f7706 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800ec58:	a8803fcc 	andi	r2,r21,255
 800ec5c:	1080201c 	xori	r2,r2,128
 800ec60:	10bfe004 	addi	r2,r2,-128
 800ec64:	10032a1e 	bne	r2,zero,800f910 <___svfiprintf_internal_r+0x100c>
 800ec68:	00c00044 	movi	r3,1
 800ec6c:	d8c02105 	stb	r3,132(sp)
 800ec70:	05400804 	movi	r21,32
 800ec74:	98c00007 	ldb	r3,0(r19)
 800ec78:	003f6e06 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800ec7c:	8821883a 	mov	r16,r17
 800ec80:	dc402103 	ldbu	r17,132(sp)
 800ec84:	b811883a 	mov	r8,r23
 800ec88:	8c403fcc 	andi	r17,r17,255
 800ec8c:	8803f01e 	bne	r17,zero,800fc50 <___svfiprintf_internal_r+0x134c>
 800ec90:	00820074 	movhi	r2,2049
 800ec94:	109fe904 	addi	r2,r2,32676
 800ec98:	d8802915 	stw	r2,164(sp)
 800ec9c:	8080080c 	andi	r2,r16,32
 800eca0:	1000cd26 	beq	r2,zero,800efd8 <___svfiprintf_internal_r+0x6d4>
 800eca4:	d9002417 	ldw	r4,144(sp)
 800eca8:	24800017 	ldw	r18,0(r4)
 800ecac:	25000117 	ldw	r20,4(r4)
 800ecb0:	21000204 	addi	r4,r4,8
 800ecb4:	d9002415 	stw	r4,144(sp)
 800ecb8:	8080004c 	andi	r2,r16,1
 800ecbc:	1002c726 	beq	r2,zero,800f7dc <___svfiprintf_internal_r+0xed8>
 800ecc0:	9504b03a 	or	r2,r18,r20
 800ecc4:	1003061e 	bne	r2,zero,800f8e0 <___svfiprintf_internal_r+0xfdc>
 800ecc8:	d9002017 	ldw	r4,128(sp)
 800eccc:	d8001d85 	stb	zero,118(sp)
 800ecd0:	20033e16 	blt	r4,zero,800f9cc <___svfiprintf_internal_r+0x10c8>
 800ecd4:	00bfdfc4 	movi	r2,-129
 800ecd8:	80a0703a 	and	r16,r16,r2
 800ecdc:	d9402017 	ldw	r5,128(sp)
 800ece0:	002b883a 	mov	r21,zero
 800ece4:	28002826 	beq	r5,zero,800ed88 <___svfiprintf_internal_r+0x484>
 800ece8:	0025883a 	mov	r18,zero
 800ecec:	0029883a 	mov	r20,zero
 800ecf0:	d9002917 	ldw	r4,164(sp)
 800ecf4:	dc401a04 	addi	r17,sp,104
 800ecf8:	908003cc 	andi	r2,r18,15
 800ecfc:	a006973a 	slli	r3,r20,28
 800ed00:	2085883a 	add	r2,r4,r2
 800ed04:	9024d13a 	srli	r18,r18,4
 800ed08:	10800003 	ldbu	r2,0(r2)
 800ed0c:	a028d13a 	srli	r20,r20,4
 800ed10:	8c7fffc4 	addi	r17,r17,-1
 800ed14:	1ca4b03a 	or	r18,r3,r18
 800ed18:	88800005 	stb	r2,0(r17)
 800ed1c:	9504b03a 	or	r2,r18,r20
 800ed20:	103ff51e 	bne	r2,zero,800ecf8 <__alt_data_end+0xfc00ecf8>
 800ed24:	d8801e17 	ldw	r2,120(sp)
 800ed28:	1469c83a 	sub	r20,r2,r17
 800ed2c:	00001906 	br	800ed94 <___svfiprintf_internal_r+0x490>
 800ed30:	8821883a 	mov	r16,r17
 800ed34:	dc402103 	ldbu	r17,132(sp)
 800ed38:	b811883a 	mov	r8,r23
 800ed3c:	8c403fcc 	andi	r17,r17,255
 800ed40:	8803d01e 	bne	r17,zero,800fc84 <___svfiprintf_internal_r+0x1380>
 800ed44:	8080080c 	andi	r2,r16,32
 800ed48:	10016126 	beq	r2,zero,800f2d0 <___svfiprintf_internal_r+0x9cc>
 800ed4c:	d9002417 	ldw	r4,144(sp)
 800ed50:	d9402017 	ldw	r5,128(sp)
 800ed54:	d8001d85 	stb	zero,118(sp)
 800ed58:	20c00204 	addi	r3,r4,8
 800ed5c:	24800017 	ldw	r18,0(r4)
 800ed60:	25000117 	ldw	r20,4(r4)
 800ed64:	28030f16 	blt	r5,zero,800f9a4 <___svfiprintf_internal_r+0x10a0>
 800ed68:	013fdfc4 	movi	r4,-129
 800ed6c:	9504b03a 	or	r2,r18,r20
 800ed70:	d8c02415 	stw	r3,144(sp)
 800ed74:	8120703a 	and	r16,r16,r4
 800ed78:	002b883a 	mov	r21,zero
 800ed7c:	1000cd1e 	bne	r2,zero,800f0b4 <___svfiprintf_internal_r+0x7b0>
 800ed80:	d8c02017 	ldw	r3,128(sp)
 800ed84:	1803141e 	bne	r3,zero,800f9d8 <___svfiprintf_internal_r+0x10d4>
 800ed88:	d8002015 	stw	zero,128(sp)
 800ed8c:	0029883a 	mov	r20,zero
 800ed90:	dc401a04 	addi	r17,sp,104
 800ed94:	dc802017 	ldw	r18,128(sp)
 800ed98:	9500010e 	bge	r18,r20,800eda0 <___svfiprintf_internal_r+0x49c>
 800ed9c:	a025883a 	mov	r18,r20
 800eda0:	ad403fcc 	andi	r21,r21,255
 800eda4:	ad40201c 	xori	r21,r21,128
 800eda8:	ad7fe004 	addi	r21,r21,-128
 800edac:	a8003f26 	beq	r21,zero,800eeac <___svfiprintf_internal_r+0x5a8>
 800edb0:	94800044 	addi	r18,r18,1
 800edb4:	00003d06 	br	800eeac <___svfiprintf_internal_r+0x5a8>
 800edb8:	00c00044 	movi	r3,1
 800edbc:	d8c02105 	stb	r3,132(sp)
 800edc0:	05400ac4 	movi	r21,43
 800edc4:	98c00007 	ldb	r3,0(r19)
 800edc8:	003f1a06 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800edcc:	8821883a 	mov	r16,r17
 800edd0:	dc402103 	ldbu	r17,132(sp)
 800edd4:	b811883a 	mov	r8,r23
 800edd8:	8c403fcc 	andi	r17,r17,255
 800eddc:	8803a71e 	bne	r17,zero,800fc7c <___svfiprintf_internal_r+0x1378>
 800ede0:	8080080c 	andi	r2,r16,32
 800ede4:	10015726 	beq	r2,zero,800f344 <___svfiprintf_internal_r+0xa40>
 800ede8:	d8c02417 	ldw	r3,144(sp)
 800edec:	d9002017 	ldw	r4,128(sp)
 800edf0:	d8001d85 	stb	zero,118(sp)
 800edf4:	18800204 	addi	r2,r3,8
 800edf8:	1c800017 	ldw	r18,0(r3)
 800edfc:	1d000117 	ldw	r20,4(r3)
 800ee00:	2002db16 	blt	r4,zero,800f970 <___svfiprintf_internal_r+0x106c>
 800ee04:	013fdfc4 	movi	r4,-129
 800ee08:	9506b03a 	or	r3,r18,r20
 800ee0c:	d8802415 	stw	r2,144(sp)
 800ee10:	8120703a 	and	r16,r16,r4
 800ee14:	18015826 	beq	r3,zero,800f378 <___svfiprintf_internal_r+0xa74>
 800ee18:	002b883a 	mov	r21,zero
 800ee1c:	dc401a04 	addi	r17,sp,104
 800ee20:	9006d0fa 	srli	r3,r18,3
 800ee24:	a008977a 	slli	r4,r20,29
 800ee28:	a028d0fa 	srli	r20,r20,3
 800ee2c:	948001cc 	andi	r18,r18,7
 800ee30:	90800c04 	addi	r2,r18,48
 800ee34:	8c7fffc4 	addi	r17,r17,-1
 800ee38:	20e4b03a 	or	r18,r4,r3
 800ee3c:	88800005 	stb	r2,0(r17)
 800ee40:	9506b03a 	or	r3,r18,r20
 800ee44:	183ff61e 	bne	r3,zero,800ee20 <__alt_data_end+0xfc00ee20>
 800ee48:	80c0004c 	andi	r3,r16,1
 800ee4c:	18028926 	beq	r3,zero,800f874 <___svfiprintf_internal_r+0xf70>
 800ee50:	10803fcc 	andi	r2,r2,255
 800ee54:	1080201c 	xori	r2,r2,128
 800ee58:	10bfe004 	addi	r2,r2,-128
 800ee5c:	00c00c04 	movi	r3,48
 800ee60:	10ffb026 	beq	r2,r3,800ed24 <__alt_data_end+0xfc00ed24>
 800ee64:	88ffffc5 	stb	r3,-1(r17)
 800ee68:	d8c01e17 	ldw	r3,120(sp)
 800ee6c:	88bfffc4 	addi	r2,r17,-1
 800ee70:	1023883a 	mov	r17,r2
 800ee74:	18a9c83a 	sub	r20,r3,r2
 800ee78:	003fc606 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800ee7c:	d8c02417 	ldw	r3,144(sp)
 800ee80:	04800044 	movi	r18,1
 800ee84:	8821883a 	mov	r16,r17
 800ee88:	18800017 	ldw	r2,0(r3)
 800ee8c:	18c00104 	addi	r3,r3,4
 800ee90:	b811883a 	mov	r8,r23
 800ee94:	d8001d85 	stb	zero,118(sp)
 800ee98:	d8801005 	stb	r2,64(sp)
 800ee9c:	d8c02415 	stw	r3,144(sp)
 800eea0:	9029883a 	mov	r20,r18
 800eea4:	dc401004 	addi	r17,sp,64
 800eea8:	d8002015 	stw	zero,128(sp)
 800eeac:	80c0008c 	andi	r3,r16,2
 800eeb0:	d8c02115 	stw	r3,132(sp)
 800eeb4:	18000126 	beq	r3,zero,800eebc <___svfiprintf_internal_r+0x5b8>
 800eeb8:	94800084 	addi	r18,r18,2
 800eebc:	80c0210c 	andi	r3,r16,132
 800eec0:	d8c02215 	stw	r3,136(sp)
 800eec4:	1801321e 	bne	r3,zero,800f390 <___svfiprintf_internal_r+0xa8c>
 800eec8:	d9002517 	ldw	r4,148(sp)
 800eecc:	24b9c83a 	sub	fp,r4,r18
 800eed0:	07012f0e 	bge	zero,fp,800f390 <___svfiprintf_internal_r+0xa8c>
 800eed4:	02400404 	movi	r9,16
 800eed8:	d8c01c17 	ldw	r3,112(sp)
 800eedc:	d8801b17 	ldw	r2,108(sp)
 800eee0:	4f03250e 	bge	r9,fp,800fb78 <___svfiprintf_internal_r+0x1274>
 800eee4:	010200b4 	movhi	r4,2050
 800eee8:	21205604 	addi	r4,r4,-32424
 800eeec:	dc002a15 	stw	r16,168(sp)
 800eef0:	dc402b15 	stw	r17,172(sp)
 800eef4:	d9002815 	stw	r4,160(sp)
 800eef8:	e023883a 	mov	r17,fp
 800eefc:	482f883a 	mov	r23,r9
 800ef00:	9839883a 	mov	fp,r19
 800ef04:	054001c4 	movi	r21,7
 800ef08:	9027883a 	mov	r19,r18
 800ef0c:	dc002717 	ldw	r16,156(sp)
 800ef10:	dc802317 	ldw	r18,140(sp)
 800ef14:	00000306 	br	800ef24 <___svfiprintf_internal_r+0x620>
 800ef18:	8c7ffc04 	addi	r17,r17,-16
 800ef1c:	42000204 	addi	r8,r8,8
 800ef20:	bc40130e 	bge	r23,r17,800ef70 <___svfiprintf_internal_r+0x66c>
 800ef24:	014200b4 	movhi	r5,2050
 800ef28:	18c00404 	addi	r3,r3,16
 800ef2c:	10800044 	addi	r2,r2,1
 800ef30:	29605604 	addi	r5,r5,-32424
 800ef34:	41400015 	stw	r5,0(r8)
 800ef38:	45c00115 	stw	r23,4(r8)
 800ef3c:	d8c01c15 	stw	r3,112(sp)
 800ef40:	d8801b15 	stw	r2,108(sp)
 800ef44:	a8bff40e 	bge	r21,r2,800ef18 <__alt_data_end+0xfc00ef18>
 800ef48:	d9801a04 	addi	r6,sp,104
 800ef4c:	900b883a 	mov	r5,r18
 800ef50:	8009883a 	mov	r4,r16
 800ef54:	800e7340 	call	800e734 <__ssprint_r>
 800ef58:	1001aa1e 	bne	r2,zero,800f604 <___svfiprintf_internal_r+0xd00>
 800ef5c:	8c7ffc04 	addi	r17,r17,-16
 800ef60:	d8c01c17 	ldw	r3,112(sp)
 800ef64:	d8801b17 	ldw	r2,108(sp)
 800ef68:	d811883a 	mov	r8,sp
 800ef6c:	bc7fed16 	blt	r23,r17,800ef24 <__alt_data_end+0xfc00ef24>
 800ef70:	9825883a 	mov	r18,r19
 800ef74:	dc002a17 	ldw	r16,168(sp)
 800ef78:	e027883a 	mov	r19,fp
 800ef7c:	8839883a 	mov	fp,r17
 800ef80:	dc402b17 	ldw	r17,172(sp)
 800ef84:	d9002817 	ldw	r4,160(sp)
 800ef88:	e0c7883a 	add	r3,fp,r3
 800ef8c:	10800044 	addi	r2,r2,1
 800ef90:	41000015 	stw	r4,0(r8)
 800ef94:	47000115 	stw	fp,4(r8)
 800ef98:	d8c01c15 	stw	r3,112(sp)
 800ef9c:	d8801b15 	stw	r2,108(sp)
 800efa0:	010001c4 	movi	r4,7
 800efa4:	20821616 	blt	r4,r2,800f800 <___svfiprintf_internal_r+0xefc>
 800efa8:	42000204 	addi	r8,r8,8
 800efac:	0000fa06 	br	800f398 <___svfiprintf_internal_r+0xa94>
 800efb0:	8821883a 	mov	r16,r17
 800efb4:	dc402103 	ldbu	r17,132(sp)
 800efb8:	b811883a 	mov	r8,r23
 800efbc:	8c403fcc 	andi	r17,r17,255
 800efc0:	8803361e 	bne	r17,zero,800fc9c <___svfiprintf_internal_r+0x1398>
 800efc4:	01420074 	movhi	r5,2049
 800efc8:	295fe404 	addi	r5,r5,32656
 800efcc:	d9402915 	stw	r5,164(sp)
 800efd0:	8080080c 	andi	r2,r16,32
 800efd4:	103f331e 	bne	r2,zero,800eca4 <__alt_data_end+0xfc00eca4>
 800efd8:	8080040c 	andi	r2,r16,16
 800efdc:	1002551e 	bne	r2,zero,800f934 <___svfiprintf_internal_r+0x1030>
 800efe0:	8080100c 	andi	r2,r16,64
 800efe4:	1002a626 	beq	r2,zero,800fa80 <___svfiprintf_internal_r+0x117c>
 800efe8:	d8802417 	ldw	r2,144(sp)
 800efec:	0029883a 	mov	r20,zero
 800eff0:	1480000b 	ldhu	r18,0(r2)
 800eff4:	10800104 	addi	r2,r2,4
 800eff8:	d8802415 	stw	r2,144(sp)
 800effc:	003f2e06 	br	800ecb8 <__alt_data_end+0xfc00ecb8>
 800f000:	8821883a 	mov	r16,r17
 800f004:	dc402103 	ldbu	r17,132(sp)
 800f008:	b811883a 	mov	r8,r23
 800f00c:	8c403fcc 	andi	r17,r17,255
 800f010:	88030b1e 	bne	r17,zero,800fc40 <___svfiprintf_internal_r+0x133c>
 800f014:	8080080c 	andi	r2,r16,32
 800f018:	1002271e 	bne	r2,zero,800f8b8 <___svfiprintf_internal_r+0xfb4>
 800f01c:	8080040c 	andi	r2,r16,16
 800f020:	10028e26 	beq	r2,zero,800fa5c <___svfiprintf_internal_r+0x1158>
 800f024:	d8c02417 	ldw	r3,144(sp)
 800f028:	d9002617 	ldw	r4,152(sp)
 800f02c:	18800017 	ldw	r2,0(r3)
 800f030:	18c00104 	addi	r3,r3,4
 800f034:	d8c02415 	stw	r3,144(sp)
 800f038:	11000015 	stw	r4,0(r2)
 800f03c:	003e5306 	br	800e98c <__alt_data_end+0xfc00e98c>
 800f040:	98c00007 	ldb	r3,0(r19)
 800f044:	01401b04 	movi	r5,108
 800f048:	19424f26 	beq	r3,r5,800f988 <___svfiprintf_internal_r+0x1084>
 800f04c:	8c400414 	ori	r17,r17,16
 800f050:	003e7806 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f054:	8c401014 	ori	r17,r17,64
 800f058:	98c00007 	ldb	r3,0(r19)
 800f05c:	003e7506 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f060:	8821883a 	mov	r16,r17
 800f064:	dc402103 	ldbu	r17,132(sp)
 800f068:	b811883a 	mov	r8,r23
 800f06c:	8c403fcc 	andi	r17,r17,255
 800f070:	8802fe1e 	bne	r17,zero,800fc6c <___svfiprintf_internal_r+0x1368>
 800f074:	8080080c 	andi	r2,r16,32
 800f078:	10004626 	beq	r2,zero,800f194 <___svfiprintf_internal_r+0x890>
 800f07c:	d9002417 	ldw	r4,144(sp)
 800f080:	20800117 	ldw	r2,4(r4)
 800f084:	24800017 	ldw	r18,0(r4)
 800f088:	21000204 	addi	r4,r4,8
 800f08c:	d9002415 	stw	r4,144(sp)
 800f090:	1029883a 	mov	r20,r2
 800f094:	10004a16 	blt	r2,zero,800f1c0 <___svfiprintf_internal_r+0x8bc>
 800f098:	d9002017 	ldw	r4,128(sp)
 800f09c:	dd401d83 	ldbu	r21,118(sp)
 800f0a0:	2001eb16 	blt	r4,zero,800f850 <___svfiprintf_internal_r+0xf4c>
 800f0a4:	00ffdfc4 	movi	r3,-129
 800f0a8:	9504b03a 	or	r2,r18,r20
 800f0ac:	80e0703a 	and	r16,r16,r3
 800f0b0:	103f3326 	beq	r2,zero,800ed80 <__alt_data_end+0xfc00ed80>
 800f0b4:	a0009426 	beq	r20,zero,800f308 <___svfiprintf_internal_r+0xa04>
 800f0b8:	dc401a04 	addi	r17,sp,104
 800f0bc:	402f883a 	mov	r23,r8
 800f0c0:	9009883a 	mov	r4,r18
 800f0c4:	a00b883a 	mov	r5,r20
 800f0c8:	01800284 	movi	r6,10
 800f0cc:	000f883a 	mov	r7,zero
 800f0d0:	80123f00 	call	80123f0 <__umoddi3>
 800f0d4:	10800c04 	addi	r2,r2,48
 800f0d8:	8c7fffc4 	addi	r17,r17,-1
 800f0dc:	9009883a 	mov	r4,r18
 800f0e0:	a00b883a 	mov	r5,r20
 800f0e4:	88800005 	stb	r2,0(r17)
 800f0e8:	01800284 	movi	r6,10
 800f0ec:	000f883a 	mov	r7,zero
 800f0f0:	8011df40 	call	8011df4 <__udivdi3>
 800f0f4:	1025883a 	mov	r18,r2
 800f0f8:	10c4b03a 	or	r2,r2,r3
 800f0fc:	1829883a 	mov	r20,r3
 800f100:	103fef1e 	bne	r2,zero,800f0c0 <__alt_data_end+0xfc00f0c0>
 800f104:	d9001e17 	ldw	r4,120(sp)
 800f108:	b811883a 	mov	r8,r23
 800f10c:	2469c83a 	sub	r20,r4,r17
 800f110:	003f2006 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800f114:	d8802417 	ldw	r2,144(sp)
 800f118:	8821883a 	mov	r16,r17
 800f11c:	d8001d85 	stb	zero,118(sp)
 800f120:	14400017 	ldw	r17,0(r2)
 800f124:	b811883a 	mov	r8,r23
 800f128:	15c00104 	addi	r23,r2,4
 800f12c:	88026c26 	beq	r17,zero,800fae0 <___svfiprintf_internal_r+0x11dc>
 800f130:	d8c02017 	ldw	r3,128(sp)
 800f134:	18025f16 	blt	r3,zero,800fab4 <___svfiprintf_internal_r+0x11b0>
 800f138:	180d883a 	mov	r6,r3
 800f13c:	000b883a 	mov	r5,zero
 800f140:	8809883a 	mov	r4,r17
 800f144:	da002d15 	stw	r8,180(sp)
 800f148:	800c9880 	call	800c988 <memchr>
 800f14c:	da002d17 	ldw	r8,180(sp)
 800f150:	1002a526 	beq	r2,zero,800fbe8 <___svfiprintf_internal_r+0x12e4>
 800f154:	1469c83a 	sub	r20,r2,r17
 800f158:	dd401d83 	ldbu	r21,118(sp)
 800f15c:	ddc02415 	stw	r23,144(sp)
 800f160:	d8002015 	stw	zero,128(sp)
 800f164:	003f0b06 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800f168:	8c400814 	ori	r17,r17,32
 800f16c:	98c00007 	ldb	r3,0(r19)
 800f170:	003e3006 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f174:	8821883a 	mov	r16,r17
 800f178:	dc402103 	ldbu	r17,132(sp)
 800f17c:	b811883a 	mov	r8,r23
 800f180:	8c403fcc 	andi	r17,r17,255
 800f184:	8802b01e 	bne	r17,zero,800fc48 <___svfiprintf_internal_r+0x1344>
 800f188:	84000414 	ori	r16,r16,16
 800f18c:	8080080c 	andi	r2,r16,32
 800f190:	103fba1e 	bne	r2,zero,800f07c <__alt_data_end+0xfc00f07c>
 800f194:	8080040c 	andi	r2,r16,16
 800f198:	1001df1e 	bne	r2,zero,800f918 <___svfiprintf_internal_r+0x1014>
 800f19c:	8080100c 	andi	r2,r16,64
 800f1a0:	10023d26 	beq	r2,zero,800fa98 <___svfiprintf_internal_r+0x1194>
 800f1a4:	d8802417 	ldw	r2,144(sp)
 800f1a8:	1480000f 	ldh	r18,0(r2)
 800f1ac:	10800104 	addi	r2,r2,4
 800f1b0:	d8802415 	stw	r2,144(sp)
 800f1b4:	9029d7fa 	srai	r20,r18,31
 800f1b8:	a005883a 	mov	r2,r20
 800f1bc:	103fb60e 	bge	r2,zero,800f098 <__alt_data_end+0xfc00f098>
 800f1c0:	d9402017 	ldw	r5,128(sp)
 800f1c4:	04a5c83a 	sub	r18,zero,r18
 800f1c8:	05400b44 	movi	r21,45
 800f1cc:	9004c03a 	cmpne	r2,r18,zero
 800f1d0:	0529c83a 	sub	r20,zero,r20
 800f1d4:	dd401d85 	stb	r21,118(sp)
 800f1d8:	a0a9c83a 	sub	r20,r20,r2
 800f1dc:	28026c16 	blt	r5,zero,800fb90 <___svfiprintf_internal_r+0x128c>
 800f1e0:	00bfdfc4 	movi	r2,-129
 800f1e4:	80a0703a 	and	r16,r16,r2
 800f1e8:	a03fb31e 	bne	r20,zero,800f0b8 <__alt_data_end+0xfc00f0b8>
 800f1ec:	00004606 	br	800f308 <___svfiprintf_internal_r+0xa04>
 800f1f0:	9839883a 	mov	fp,r19
 800f1f4:	d8002515 	stw	zero,148(sp)
 800f1f8:	1c3ff404 	addi	r16,r3,-48
 800f1fc:	0009883a 	mov	r4,zero
 800f200:	01400284 	movi	r5,10
 800f204:	8004a540 	call	8004a54 <__mulsi3>
 800f208:	e0c00007 	ldb	r3,0(fp)
 800f20c:	8089883a 	add	r4,r16,r2
 800f210:	9cc00044 	addi	r19,r19,1
 800f214:	1c3ff404 	addi	r16,r3,-48
 800f218:	9839883a 	mov	fp,r19
 800f21c:	a43ff82e 	bgeu	r20,r16,800f200 <__alt_data_end+0xfc00f200>
 800f220:	d9002515 	stw	r4,148(sp)
 800f224:	18bff804 	addi	r2,r3,-32
 800f228:	90be052e 	bgeu	r18,r2,800ea40 <__alt_data_end+0xfc00ea40>
 800f22c:	8821883a 	mov	r16,r17
 800f230:	dc402103 	ldbu	r17,132(sp)
 800f234:	b811883a 	mov	r8,r23
 800f238:	8c403fcc 	andi	r17,r17,255
 800f23c:	88028d1e 	bne	r17,zero,800fc74 <___svfiprintf_internal_r+0x1370>
 800f240:	1800ea26 	beq	r3,zero,800f5ec <___svfiprintf_internal_r+0xce8>
 800f244:	04800044 	movi	r18,1
 800f248:	d8c01005 	stb	r3,64(sp)
 800f24c:	d8001d85 	stb	zero,118(sp)
 800f250:	9029883a 	mov	r20,r18
 800f254:	dc401004 	addi	r17,sp,64
 800f258:	003f1306 	br	800eea8 <__alt_data_end+0xfc00eea8>
 800f25c:	8c402014 	ori	r17,r17,128
 800f260:	98c00007 	ldb	r3,0(r19)
 800f264:	003df306 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f268:	98c00007 	ldb	r3,0(r19)
 800f26c:	01000a84 	movi	r4,42
 800f270:	9f000044 	addi	fp,r19,1
 800f274:	19026326 	beq	r3,r4,800fc04 <___svfiprintf_internal_r+0x1300>
 800f278:	1c3ff404 	addi	r16,r3,-48
 800f27c:	0009883a 	mov	r4,zero
 800f280:	a4025636 	bltu	r20,r16,800fbdc <___svfiprintf_internal_r+0x12d8>
 800f284:	01400284 	movi	r5,10
 800f288:	8004a540 	call	8004a54 <__mulsi3>
 800f28c:	e0c00007 	ldb	r3,0(fp)
 800f290:	1409883a 	add	r4,r2,r16
 800f294:	e4c00044 	addi	r19,fp,1
 800f298:	1c3ff404 	addi	r16,r3,-48
 800f29c:	9839883a 	mov	fp,r19
 800f2a0:	a43ff82e 	bgeu	r20,r16,800f284 <__alt_data_end+0xfc00f284>
 800f2a4:	20020c16 	blt	r4,zero,800fad8 <___svfiprintf_internal_r+0x11d4>
 800f2a8:	d9002015 	stw	r4,128(sp)
 800f2ac:	003de206 	br	800ea38 <__alt_data_end+0xfc00ea38>
 800f2b0:	8821883a 	mov	r16,r17
 800f2b4:	dc402103 	ldbu	r17,132(sp)
 800f2b8:	b811883a 	mov	r8,r23
 800f2bc:	8c403fcc 	andi	r17,r17,255
 800f2c0:	8802721e 	bne	r17,zero,800fc8c <___svfiprintf_internal_r+0x1388>
 800f2c4:	84000414 	ori	r16,r16,16
 800f2c8:	8080080c 	andi	r2,r16,32
 800f2cc:	103e9f1e 	bne	r2,zero,800ed4c <__alt_data_end+0xfc00ed4c>
 800f2d0:	8080040c 	andi	r2,r16,16
 800f2d4:	10015326 	beq	r2,zero,800f824 <___svfiprintf_internal_r+0xf20>
 800f2d8:	d8c02417 	ldw	r3,144(sp)
 800f2dc:	d9002017 	ldw	r4,128(sp)
 800f2e0:	d8001d85 	stb	zero,118(sp)
 800f2e4:	18800104 	addi	r2,r3,4
 800f2e8:	1c800017 	ldw	r18,0(r3)
 800f2ec:	0029883a 	mov	r20,zero
 800f2f0:	20015516 	blt	r4,zero,800f848 <___svfiprintf_internal_r+0xf44>
 800f2f4:	00ffdfc4 	movi	r3,-129
 800f2f8:	d8802415 	stw	r2,144(sp)
 800f2fc:	80e0703a 	and	r16,r16,r3
 800f300:	002b883a 	mov	r21,zero
 800f304:	903e9e26 	beq	r18,zero,800ed80 <__alt_data_end+0xfc00ed80>
 800f308:	00800244 	movi	r2,9
 800f30c:	14bf6a36 	bltu	r2,r18,800f0b8 <__alt_data_end+0xfc00f0b8>
 800f310:	94800c04 	addi	r18,r18,48
 800f314:	dc8019c5 	stb	r18,103(sp)
 800f318:	dd002c17 	ldw	r20,176(sp)
 800f31c:	dc4019c4 	addi	r17,sp,103
 800f320:	003e9c06 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800f324:	8821883a 	mov	r16,r17
 800f328:	dc402103 	ldbu	r17,132(sp)
 800f32c:	b811883a 	mov	r8,r23
 800f330:	8c403fcc 	andi	r17,r17,255
 800f334:	8802571e 	bne	r17,zero,800fc94 <___svfiprintf_internal_r+0x1390>
 800f338:	84000414 	ori	r16,r16,16
 800f33c:	8080080c 	andi	r2,r16,32
 800f340:	103ea91e 	bne	r2,zero,800ede8 <__alt_data_end+0xfc00ede8>
 800f344:	8080040c 	andi	r2,r16,16
 800f348:	10018026 	beq	r2,zero,800f94c <___svfiprintf_internal_r+0x1048>
 800f34c:	d9402417 	ldw	r5,144(sp)
 800f350:	d8c02017 	ldw	r3,128(sp)
 800f354:	d8001d85 	stb	zero,118(sp)
 800f358:	28800104 	addi	r2,r5,4
 800f35c:	2c800017 	ldw	r18,0(r5)
 800f360:	0029883a 	mov	r20,zero
 800f364:	18018216 	blt	r3,zero,800f970 <___svfiprintf_internal_r+0x106c>
 800f368:	00ffdfc4 	movi	r3,-129
 800f36c:	d8802415 	stw	r2,144(sp)
 800f370:	80e0703a 	and	r16,r16,r3
 800f374:	903ea81e 	bne	r18,zero,800ee18 <__alt_data_end+0xfc00ee18>
 800f378:	d8802017 	ldw	r2,128(sp)
 800f37c:	002b883a 	mov	r21,zero
 800f380:	1001f226 	beq	r2,zero,800fb4c <___svfiprintf_internal_r+0x1248>
 800f384:	0025883a 	mov	r18,zero
 800f388:	0029883a 	mov	r20,zero
 800f38c:	003ea306 	br	800ee1c <__alt_data_end+0xfc00ee1c>
 800f390:	d8c01c17 	ldw	r3,112(sp)
 800f394:	d8801b17 	ldw	r2,108(sp)
 800f398:	d9001d87 	ldb	r4,118(sp)
 800f39c:	20000b26 	beq	r4,zero,800f3cc <___svfiprintf_internal_r+0xac8>
 800f3a0:	d9001d84 	addi	r4,sp,118
 800f3a4:	18c00044 	addi	r3,r3,1
 800f3a8:	10800044 	addi	r2,r2,1
 800f3ac:	41000015 	stw	r4,0(r8)
 800f3b0:	01000044 	movi	r4,1
 800f3b4:	41000115 	stw	r4,4(r8)
 800f3b8:	d8c01c15 	stw	r3,112(sp)
 800f3bc:	d8801b15 	stw	r2,108(sp)
 800f3c0:	010001c4 	movi	r4,7
 800f3c4:	2080f316 	blt	r4,r2,800f794 <___svfiprintf_internal_r+0xe90>
 800f3c8:	42000204 	addi	r8,r8,8
 800f3cc:	d9402117 	ldw	r5,132(sp)
 800f3d0:	28000b26 	beq	r5,zero,800f400 <___svfiprintf_internal_r+0xafc>
 800f3d4:	d9001d04 	addi	r4,sp,116
 800f3d8:	18c00084 	addi	r3,r3,2
 800f3dc:	10800044 	addi	r2,r2,1
 800f3e0:	41000015 	stw	r4,0(r8)
 800f3e4:	01000084 	movi	r4,2
 800f3e8:	41000115 	stw	r4,4(r8)
 800f3ec:	d8c01c15 	stw	r3,112(sp)
 800f3f0:	d8801b15 	stw	r2,108(sp)
 800f3f4:	010001c4 	movi	r4,7
 800f3f8:	2080ef16 	blt	r4,r2,800f7b8 <___svfiprintf_internal_r+0xeb4>
 800f3fc:	42000204 	addi	r8,r8,8
 800f400:	d9402217 	ldw	r5,136(sp)
 800f404:	01002004 	movi	r4,128
 800f408:	29008f26 	beq	r5,r4,800f648 <___svfiprintf_internal_r+0xd44>
 800f40c:	d9002017 	ldw	r4,128(sp)
 800f410:	252fc83a 	sub	r23,r4,r20
 800f414:	05c0310e 	bge	zero,r23,800f4dc <___svfiprintf_internal_r+0xbd8>
 800f418:	07000404 	movi	fp,16
 800f41c:	e5c17d0e 	bge	fp,r23,800fa14 <___svfiprintf_internal_r+0x1110>
 800f420:	010200b4 	movhi	r4,2050
 800f424:	21205204 	addi	r4,r4,-32440
 800f428:	dc002015 	stw	r16,128(sp)
 800f42c:	dc402215 	stw	r17,136(sp)
 800f430:	d9002115 	stw	r4,132(sp)
 800f434:	b823883a 	mov	r17,r23
 800f438:	054001c4 	movi	r21,7
 800f43c:	982f883a 	mov	r23,r19
 800f440:	dc002717 	ldw	r16,156(sp)
 800f444:	9027883a 	mov	r19,r18
 800f448:	dc802317 	ldw	r18,140(sp)
 800f44c:	00000306 	br	800f45c <___svfiprintf_internal_r+0xb58>
 800f450:	8c7ffc04 	addi	r17,r17,-16
 800f454:	42000204 	addi	r8,r8,8
 800f458:	e440110e 	bge	fp,r17,800f4a0 <___svfiprintf_internal_r+0xb9c>
 800f45c:	18c00404 	addi	r3,r3,16
 800f460:	10800044 	addi	r2,r2,1
 800f464:	45800015 	stw	r22,0(r8)
 800f468:	47000115 	stw	fp,4(r8)
 800f46c:	d8c01c15 	stw	r3,112(sp)
 800f470:	d8801b15 	stw	r2,108(sp)
 800f474:	a8bff60e 	bge	r21,r2,800f450 <__alt_data_end+0xfc00f450>
 800f478:	d9801a04 	addi	r6,sp,104
 800f47c:	900b883a 	mov	r5,r18
 800f480:	8009883a 	mov	r4,r16
 800f484:	800e7340 	call	800e734 <__ssprint_r>
 800f488:	10005e1e 	bne	r2,zero,800f604 <___svfiprintf_internal_r+0xd00>
 800f48c:	8c7ffc04 	addi	r17,r17,-16
 800f490:	d8c01c17 	ldw	r3,112(sp)
 800f494:	d8801b17 	ldw	r2,108(sp)
 800f498:	d811883a 	mov	r8,sp
 800f49c:	e47fef16 	blt	fp,r17,800f45c <__alt_data_end+0xfc00f45c>
 800f4a0:	9825883a 	mov	r18,r19
 800f4a4:	dc002017 	ldw	r16,128(sp)
 800f4a8:	b827883a 	mov	r19,r23
 800f4ac:	882f883a 	mov	r23,r17
 800f4b0:	dc402217 	ldw	r17,136(sp)
 800f4b4:	d9402117 	ldw	r5,132(sp)
 800f4b8:	1dc7883a 	add	r3,r3,r23
 800f4bc:	10800044 	addi	r2,r2,1
 800f4c0:	41400015 	stw	r5,0(r8)
 800f4c4:	45c00115 	stw	r23,4(r8)
 800f4c8:	d8c01c15 	stw	r3,112(sp)
 800f4cc:	d8801b15 	stw	r2,108(sp)
 800f4d0:	010001c4 	movi	r4,7
 800f4d4:	2080a616 	blt	r4,r2,800f770 <___svfiprintf_internal_r+0xe6c>
 800f4d8:	42000204 	addi	r8,r8,8
 800f4dc:	a0c7883a 	add	r3,r20,r3
 800f4e0:	10800044 	addi	r2,r2,1
 800f4e4:	44400015 	stw	r17,0(r8)
 800f4e8:	45000115 	stw	r20,4(r8)
 800f4ec:	d8c01c15 	stw	r3,112(sp)
 800f4f0:	d8801b15 	stw	r2,108(sp)
 800f4f4:	010001c4 	movi	r4,7
 800f4f8:	20808816 	blt	r4,r2,800f71c <___svfiprintf_internal_r+0xe18>
 800f4fc:	42000204 	addi	r8,r8,8
 800f500:	8400010c 	andi	r16,r16,4
 800f504:	80002c26 	beq	r16,zero,800f5b8 <___svfiprintf_internal_r+0xcb4>
 800f508:	d8802517 	ldw	r2,148(sp)
 800f50c:	14a1c83a 	sub	r16,r2,r18
 800f510:	0400290e 	bge	zero,r16,800f5b8 <___svfiprintf_internal_r+0xcb4>
 800f514:	04400404 	movi	r17,16
 800f518:	d8801b17 	ldw	r2,108(sp)
 800f51c:	8c01a70e 	bge	r17,r16,800fbbc <___svfiprintf_internal_r+0x12b8>
 800f520:	014200b4 	movhi	r5,2050
 800f524:	29605604 	addi	r5,r5,-32424
 800f528:	d9402815 	stw	r5,160(sp)
 800f52c:	050001c4 	movi	r20,7
 800f530:	dd402717 	ldw	r21,156(sp)
 800f534:	ddc02317 	ldw	r23,140(sp)
 800f538:	00000306 	br	800f548 <___svfiprintf_internal_r+0xc44>
 800f53c:	843ffc04 	addi	r16,r16,-16
 800f540:	42000204 	addi	r8,r8,8
 800f544:	8c00130e 	bge	r17,r16,800f594 <___svfiprintf_internal_r+0xc90>
 800f548:	010200b4 	movhi	r4,2050
 800f54c:	18c00404 	addi	r3,r3,16
 800f550:	10800044 	addi	r2,r2,1
 800f554:	21205604 	addi	r4,r4,-32424
 800f558:	41000015 	stw	r4,0(r8)
 800f55c:	44400115 	stw	r17,4(r8)
 800f560:	d8c01c15 	stw	r3,112(sp)
 800f564:	d8801b15 	stw	r2,108(sp)
 800f568:	a0bff40e 	bge	r20,r2,800f53c <__alt_data_end+0xfc00f53c>
 800f56c:	d9801a04 	addi	r6,sp,104
 800f570:	b80b883a 	mov	r5,r23
 800f574:	a809883a 	mov	r4,r21
 800f578:	800e7340 	call	800e734 <__ssprint_r>
 800f57c:	1000211e 	bne	r2,zero,800f604 <___svfiprintf_internal_r+0xd00>
 800f580:	843ffc04 	addi	r16,r16,-16
 800f584:	d8c01c17 	ldw	r3,112(sp)
 800f588:	d8801b17 	ldw	r2,108(sp)
 800f58c:	d811883a 	mov	r8,sp
 800f590:	8c3fed16 	blt	r17,r16,800f548 <__alt_data_end+0xfc00f548>
 800f594:	d9402817 	ldw	r5,160(sp)
 800f598:	1c07883a 	add	r3,r3,r16
 800f59c:	10800044 	addi	r2,r2,1
 800f5a0:	41400015 	stw	r5,0(r8)
 800f5a4:	44000115 	stw	r16,4(r8)
 800f5a8:	d8c01c15 	stw	r3,112(sp)
 800f5ac:	d8801b15 	stw	r2,108(sp)
 800f5b0:	010001c4 	movi	r4,7
 800f5b4:	2080b516 	blt	r4,r2,800f88c <___svfiprintf_internal_r+0xf88>
 800f5b8:	d8802517 	ldw	r2,148(sp)
 800f5bc:	1480010e 	bge	r2,r18,800f5c4 <___svfiprintf_internal_r+0xcc0>
 800f5c0:	9005883a 	mov	r2,r18
 800f5c4:	d9002617 	ldw	r4,152(sp)
 800f5c8:	2089883a 	add	r4,r4,r2
 800f5cc:	d9002615 	stw	r4,152(sp)
 800f5d0:	18005a1e 	bne	r3,zero,800f73c <___svfiprintf_internal_r+0xe38>
 800f5d4:	98800007 	ldb	r2,0(r19)
 800f5d8:	d8001b15 	stw	zero,108(sp)
 800f5dc:	d811883a 	mov	r8,sp
 800f5e0:	103cec1e 	bne	r2,zero,800e994 <__alt_data_end+0xfc00e994>
 800f5e4:	9825883a 	mov	r18,r19
 800f5e8:	003d0206 	br	800e9f4 <__alt_data_end+0xfc00e9f4>
 800f5ec:	d8801c17 	ldw	r2,112(sp)
 800f5f0:	10000426 	beq	r2,zero,800f604 <___svfiprintf_internal_r+0xd00>
 800f5f4:	d9402317 	ldw	r5,140(sp)
 800f5f8:	d9002717 	ldw	r4,156(sp)
 800f5fc:	d9801a04 	addi	r6,sp,104
 800f600:	800e7340 	call	800e734 <__ssprint_r>
 800f604:	d9402317 	ldw	r5,140(sp)
 800f608:	d8802617 	ldw	r2,152(sp)
 800f60c:	28c0030b 	ldhu	r3,12(r5)
 800f610:	18c0100c 	andi	r3,r3,64
 800f614:	18015c1e 	bne	r3,zero,800fb88 <___svfiprintf_internal_r+0x1284>
 800f618:	dfc03717 	ldw	ra,220(sp)
 800f61c:	df003617 	ldw	fp,216(sp)
 800f620:	ddc03517 	ldw	r23,212(sp)
 800f624:	dd803417 	ldw	r22,208(sp)
 800f628:	dd403317 	ldw	r21,204(sp)
 800f62c:	dd003217 	ldw	r20,200(sp)
 800f630:	dcc03117 	ldw	r19,196(sp)
 800f634:	dc803017 	ldw	r18,192(sp)
 800f638:	dc402f17 	ldw	r17,188(sp)
 800f63c:	dc002e17 	ldw	r16,184(sp)
 800f640:	dec03804 	addi	sp,sp,224
 800f644:	f800283a 	ret
 800f648:	d9002517 	ldw	r4,148(sp)
 800f64c:	24afc83a 	sub	r23,r4,r18
 800f650:	05ff6e0e 	bge	zero,r23,800f40c <__alt_data_end+0xfc00f40c>
 800f654:	07000404 	movi	fp,16
 800f658:	e5c15c0e 	bge	fp,r23,800fbcc <___svfiprintf_internal_r+0x12c8>
 800f65c:	010200b4 	movhi	r4,2050
 800f660:	21205204 	addi	r4,r4,-32440
 800f664:	dc002215 	stw	r16,136(sp)
 800f668:	dc402815 	stw	r17,160(sp)
 800f66c:	d9002115 	stw	r4,132(sp)
 800f670:	b823883a 	mov	r17,r23
 800f674:	054001c4 	movi	r21,7
 800f678:	982f883a 	mov	r23,r19
 800f67c:	dc002717 	ldw	r16,156(sp)
 800f680:	9027883a 	mov	r19,r18
 800f684:	dc802317 	ldw	r18,140(sp)
 800f688:	00000306 	br	800f698 <___svfiprintf_internal_r+0xd94>
 800f68c:	8c7ffc04 	addi	r17,r17,-16
 800f690:	42000204 	addi	r8,r8,8
 800f694:	e440110e 	bge	fp,r17,800f6dc <___svfiprintf_internal_r+0xdd8>
 800f698:	18c00404 	addi	r3,r3,16
 800f69c:	10800044 	addi	r2,r2,1
 800f6a0:	45800015 	stw	r22,0(r8)
 800f6a4:	47000115 	stw	fp,4(r8)
 800f6a8:	d8c01c15 	stw	r3,112(sp)
 800f6ac:	d8801b15 	stw	r2,108(sp)
 800f6b0:	a8bff60e 	bge	r21,r2,800f68c <__alt_data_end+0xfc00f68c>
 800f6b4:	d9801a04 	addi	r6,sp,104
 800f6b8:	900b883a 	mov	r5,r18
 800f6bc:	8009883a 	mov	r4,r16
 800f6c0:	800e7340 	call	800e734 <__ssprint_r>
 800f6c4:	103fcf1e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f6c8:	8c7ffc04 	addi	r17,r17,-16
 800f6cc:	d8c01c17 	ldw	r3,112(sp)
 800f6d0:	d8801b17 	ldw	r2,108(sp)
 800f6d4:	d811883a 	mov	r8,sp
 800f6d8:	e47fef16 	blt	fp,r17,800f698 <__alt_data_end+0xfc00f698>
 800f6dc:	9825883a 	mov	r18,r19
 800f6e0:	dc002217 	ldw	r16,136(sp)
 800f6e4:	b827883a 	mov	r19,r23
 800f6e8:	882f883a 	mov	r23,r17
 800f6ec:	dc402817 	ldw	r17,160(sp)
 800f6f0:	d9402117 	ldw	r5,132(sp)
 800f6f4:	1dc7883a 	add	r3,r3,r23
 800f6f8:	10800044 	addi	r2,r2,1
 800f6fc:	41400015 	stw	r5,0(r8)
 800f700:	45c00115 	stw	r23,4(r8)
 800f704:	d8c01c15 	stw	r3,112(sp)
 800f708:	d8801b15 	stw	r2,108(sp)
 800f70c:	010001c4 	movi	r4,7
 800f710:	2080b716 	blt	r4,r2,800f9f0 <___svfiprintf_internal_r+0x10ec>
 800f714:	42000204 	addi	r8,r8,8
 800f718:	003f3c06 	br	800f40c <__alt_data_end+0xfc00f40c>
 800f71c:	d9402317 	ldw	r5,140(sp)
 800f720:	d9002717 	ldw	r4,156(sp)
 800f724:	d9801a04 	addi	r6,sp,104
 800f728:	800e7340 	call	800e734 <__ssprint_r>
 800f72c:	103fb51e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f730:	d8c01c17 	ldw	r3,112(sp)
 800f734:	d811883a 	mov	r8,sp
 800f738:	003f7106 	br	800f500 <__alt_data_end+0xfc00f500>
 800f73c:	d9402317 	ldw	r5,140(sp)
 800f740:	d9002717 	ldw	r4,156(sp)
 800f744:	d9801a04 	addi	r6,sp,104
 800f748:	800e7340 	call	800e734 <__ssprint_r>
 800f74c:	103fa126 	beq	r2,zero,800f5d4 <__alt_data_end+0xfc00f5d4>
 800f750:	003fac06 	br	800f604 <__alt_data_end+0xfc00f604>
 800f754:	d9402317 	ldw	r5,140(sp)
 800f758:	d9002717 	ldw	r4,156(sp)
 800f75c:	d9801a04 	addi	r6,sp,104
 800f760:	800e7340 	call	800e734 <__ssprint_r>
 800f764:	103fa71e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f768:	d811883a 	mov	r8,sp
 800f76c:	003c9e06 	br	800e9e8 <__alt_data_end+0xfc00e9e8>
 800f770:	d9402317 	ldw	r5,140(sp)
 800f774:	d9002717 	ldw	r4,156(sp)
 800f778:	d9801a04 	addi	r6,sp,104
 800f77c:	800e7340 	call	800e734 <__ssprint_r>
 800f780:	103fa01e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f784:	d8c01c17 	ldw	r3,112(sp)
 800f788:	d8801b17 	ldw	r2,108(sp)
 800f78c:	d811883a 	mov	r8,sp
 800f790:	003f5206 	br	800f4dc <__alt_data_end+0xfc00f4dc>
 800f794:	d9402317 	ldw	r5,140(sp)
 800f798:	d9002717 	ldw	r4,156(sp)
 800f79c:	d9801a04 	addi	r6,sp,104
 800f7a0:	800e7340 	call	800e734 <__ssprint_r>
 800f7a4:	103f971e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f7a8:	d8c01c17 	ldw	r3,112(sp)
 800f7ac:	d8801b17 	ldw	r2,108(sp)
 800f7b0:	d811883a 	mov	r8,sp
 800f7b4:	003f0506 	br	800f3cc <__alt_data_end+0xfc00f3cc>
 800f7b8:	d9402317 	ldw	r5,140(sp)
 800f7bc:	d9002717 	ldw	r4,156(sp)
 800f7c0:	d9801a04 	addi	r6,sp,104
 800f7c4:	800e7340 	call	800e734 <__ssprint_r>
 800f7c8:	103f8e1e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f7cc:	d8c01c17 	ldw	r3,112(sp)
 800f7d0:	d8801b17 	ldw	r2,108(sp)
 800f7d4:	d811883a 	mov	r8,sp
 800f7d8:	003f0906 	br	800f400 <__alt_data_end+0xfc00f400>
 800f7dc:	d9402017 	ldw	r5,128(sp)
 800f7e0:	d8001d85 	stb	zero,118(sp)
 800f7e4:	28007716 	blt	r5,zero,800f9c4 <___svfiprintf_internal_r+0x10c0>
 800f7e8:	00ffdfc4 	movi	r3,-129
 800f7ec:	9504b03a 	or	r2,r18,r20
 800f7f0:	80e0703a 	and	r16,r16,r3
 800f7f4:	103d3926 	beq	r2,zero,800ecdc <__alt_data_end+0xfc00ecdc>
 800f7f8:	002b883a 	mov	r21,zero
 800f7fc:	003d3c06 	br	800ecf0 <__alt_data_end+0xfc00ecf0>
 800f800:	d9402317 	ldw	r5,140(sp)
 800f804:	d9002717 	ldw	r4,156(sp)
 800f808:	d9801a04 	addi	r6,sp,104
 800f80c:	800e7340 	call	800e734 <__ssprint_r>
 800f810:	103f7c1e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f814:	d8c01c17 	ldw	r3,112(sp)
 800f818:	d8801b17 	ldw	r2,108(sp)
 800f81c:	d811883a 	mov	r8,sp
 800f820:	003edd06 	br	800f398 <__alt_data_end+0xfc00f398>
 800f824:	8080100c 	andi	r2,r16,64
 800f828:	d8001d85 	stb	zero,118(sp)
 800f82c:	10008426 	beq	r2,zero,800fa40 <___svfiprintf_internal_r+0x113c>
 800f830:	d9402417 	ldw	r5,144(sp)
 800f834:	d8c02017 	ldw	r3,128(sp)
 800f838:	0029883a 	mov	r20,zero
 800f83c:	28800104 	addi	r2,r5,4
 800f840:	2c80000b 	ldhu	r18,0(r5)
 800f844:	183eab0e 	bge	r3,zero,800f2f4 <__alt_data_end+0xfc00f2f4>
 800f848:	d8802415 	stw	r2,144(sp)
 800f84c:	002b883a 	mov	r21,zero
 800f850:	9504b03a 	or	r2,r18,r20
 800f854:	103e171e 	bne	r2,zero,800f0b4 <__alt_data_end+0xfc00f0b4>
 800f858:	00800044 	movi	r2,1
 800f85c:	10803fcc 	andi	r2,r2,255
 800f860:	00c00044 	movi	r3,1
 800f864:	10c05c26 	beq	r2,r3,800f9d8 <___svfiprintf_internal_r+0x10d4>
 800f868:	00c00084 	movi	r3,2
 800f86c:	10fd1e26 	beq	r2,r3,800ece8 <__alt_data_end+0xfc00ece8>
 800f870:	003ec406 	br	800f384 <__alt_data_end+0xfc00f384>
 800f874:	d9401e17 	ldw	r5,120(sp)
 800f878:	2c69c83a 	sub	r20,r5,r17
 800f87c:	003d4506 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800f880:	d8802415 	stw	r2,144(sp)
 800f884:	98c00007 	ldb	r3,0(r19)
 800f888:	003c6a06 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f88c:	d9402317 	ldw	r5,140(sp)
 800f890:	d9002717 	ldw	r4,156(sp)
 800f894:	d9801a04 	addi	r6,sp,104
 800f898:	800e7340 	call	800e734 <__ssprint_r>
 800f89c:	103f591e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800f8a0:	d8c01c17 	ldw	r3,112(sp)
 800f8a4:	003f4406 	br	800f5b8 <__alt_data_end+0xfc00f5b8>
 800f8a8:	01420074 	movhi	r5,2049
 800f8ac:	295fe904 	addi	r5,r5,32676
 800f8b0:	d9402915 	stw	r5,164(sp)
 800f8b4:	003d0906 	br	800ecdc <__alt_data_end+0xfc00ecdc>
 800f8b8:	d8c02417 	ldw	r3,144(sp)
 800f8bc:	d9002617 	ldw	r4,152(sp)
 800f8c0:	d9402417 	ldw	r5,144(sp)
 800f8c4:	18800017 	ldw	r2,0(r3)
 800f8c8:	2007d7fa 	srai	r3,r4,31
 800f8cc:	29400104 	addi	r5,r5,4
 800f8d0:	d9402415 	stw	r5,144(sp)
 800f8d4:	11000015 	stw	r4,0(r2)
 800f8d8:	10c00115 	stw	r3,4(r2)
 800f8dc:	003c2b06 	br	800e98c <__alt_data_end+0xfc00e98c>
 800f8e0:	d8c01d45 	stb	r3,117(sp)
 800f8e4:	d8c02017 	ldw	r3,128(sp)
 800f8e8:	00800c04 	movi	r2,48
 800f8ec:	d8801d05 	stb	r2,116(sp)
 800f8f0:	d8001d85 	stb	zero,118(sp)
 800f8f4:	80800094 	ori	r2,r16,2
 800f8f8:	1800ac16 	blt	r3,zero,800fbac <___svfiprintf_internal_r+0x12a8>
 800f8fc:	00bfdfc4 	movi	r2,-129
 800f900:	80a0703a 	and	r16,r16,r2
 800f904:	84000094 	ori	r16,r16,2
 800f908:	002b883a 	mov	r21,zero
 800f90c:	003cf806 	br	800ecf0 <__alt_data_end+0xfc00ecf0>
 800f910:	98c00007 	ldb	r3,0(r19)
 800f914:	003c4706 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f918:	d9402417 	ldw	r5,144(sp)
 800f91c:	2c800017 	ldw	r18,0(r5)
 800f920:	29400104 	addi	r5,r5,4
 800f924:	d9402415 	stw	r5,144(sp)
 800f928:	9029d7fa 	srai	r20,r18,31
 800f92c:	a005883a 	mov	r2,r20
 800f930:	003dd806 	br	800f094 <__alt_data_end+0xfc00f094>
 800f934:	d9402417 	ldw	r5,144(sp)
 800f938:	0029883a 	mov	r20,zero
 800f93c:	2c800017 	ldw	r18,0(r5)
 800f940:	29400104 	addi	r5,r5,4
 800f944:	d9402415 	stw	r5,144(sp)
 800f948:	003cdb06 	br	800ecb8 <__alt_data_end+0xfc00ecb8>
 800f94c:	8080100c 	andi	r2,r16,64
 800f950:	d8001d85 	stb	zero,118(sp)
 800f954:	10003326 	beq	r2,zero,800fa24 <___svfiprintf_internal_r+0x1120>
 800f958:	d9002417 	ldw	r4,144(sp)
 800f95c:	d9402017 	ldw	r5,128(sp)
 800f960:	0029883a 	mov	r20,zero
 800f964:	20800104 	addi	r2,r4,4
 800f968:	2480000b 	ldhu	r18,0(r4)
 800f96c:	283e7e0e 	bge	r5,zero,800f368 <__alt_data_end+0xfc00f368>
 800f970:	9506b03a 	or	r3,r18,r20
 800f974:	d8802415 	stw	r2,144(sp)
 800f978:	183d271e 	bne	r3,zero,800ee18 <__alt_data_end+0xfc00ee18>
 800f97c:	002b883a 	mov	r21,zero
 800f980:	0005883a 	mov	r2,zero
 800f984:	003fb506 	br	800f85c <__alt_data_end+0xfc00f85c>
 800f988:	98c00043 	ldbu	r3,1(r19)
 800f98c:	8c400814 	ori	r17,r17,32
 800f990:	9cc00044 	addi	r19,r19,1
 800f994:	18c03fcc 	andi	r3,r3,255
 800f998:	18c0201c 	xori	r3,r3,128
 800f99c:	18ffe004 	addi	r3,r3,-128
 800f9a0:	003c2406 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800f9a4:	d8c02415 	stw	r3,144(sp)
 800f9a8:	002b883a 	mov	r21,zero
 800f9ac:	003fa806 	br	800f850 <__alt_data_end+0xfc00f850>
 800f9b0:	01020074 	movhi	r4,2049
 800f9b4:	211fe904 	addi	r4,r4,32676
 800f9b8:	d9002915 	stw	r4,164(sp)
 800f9bc:	d8c02415 	stw	r3,144(sp)
 800f9c0:	1021883a 	mov	r16,r2
 800f9c4:	9504b03a 	or	r2,r18,r20
 800f9c8:	103f8b1e 	bne	r2,zero,800f7f8 <__alt_data_end+0xfc00f7f8>
 800f9cc:	002b883a 	mov	r21,zero
 800f9d0:	00800084 	movi	r2,2
 800f9d4:	003fa106 	br	800f85c <__alt_data_end+0xfc00f85c>
 800f9d8:	0025883a 	mov	r18,zero
 800f9dc:	94800c04 	addi	r18,r18,48
 800f9e0:	dc8019c5 	stb	r18,103(sp)
 800f9e4:	dd002c17 	ldw	r20,176(sp)
 800f9e8:	dc4019c4 	addi	r17,sp,103
 800f9ec:	003ce906 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800f9f0:	d9402317 	ldw	r5,140(sp)
 800f9f4:	d9002717 	ldw	r4,156(sp)
 800f9f8:	d9801a04 	addi	r6,sp,104
 800f9fc:	800e7340 	call	800e734 <__ssprint_r>
 800fa00:	103f001e 	bne	r2,zero,800f604 <__alt_data_end+0xfc00f604>
 800fa04:	d8c01c17 	ldw	r3,112(sp)
 800fa08:	d8801b17 	ldw	r2,108(sp)
 800fa0c:	d811883a 	mov	r8,sp
 800fa10:	003e7e06 	br	800f40c <__alt_data_end+0xfc00f40c>
 800fa14:	014200b4 	movhi	r5,2050
 800fa18:	29605204 	addi	r5,r5,-32440
 800fa1c:	d9402115 	stw	r5,132(sp)
 800fa20:	003ea406 	br	800f4b4 <__alt_data_end+0xfc00f4b4>
 800fa24:	d8c02417 	ldw	r3,144(sp)
 800fa28:	d9002017 	ldw	r4,128(sp)
 800fa2c:	0029883a 	mov	r20,zero
 800fa30:	18800104 	addi	r2,r3,4
 800fa34:	1c800017 	ldw	r18,0(r3)
 800fa38:	203e4b0e 	bge	r4,zero,800f368 <__alt_data_end+0xfc00f368>
 800fa3c:	003fcc06 	br	800f970 <__alt_data_end+0xfc00f970>
 800fa40:	d9002417 	ldw	r4,144(sp)
 800fa44:	d9402017 	ldw	r5,128(sp)
 800fa48:	0029883a 	mov	r20,zero
 800fa4c:	20800104 	addi	r2,r4,4
 800fa50:	24800017 	ldw	r18,0(r4)
 800fa54:	283e270e 	bge	r5,zero,800f2f4 <__alt_data_end+0xfc00f2f4>
 800fa58:	003f7b06 	br	800f848 <__alt_data_end+0xfc00f848>
 800fa5c:	8400100c 	andi	r16,r16,64
 800fa60:	80003326 	beq	r16,zero,800fb30 <___svfiprintf_internal_r+0x122c>
 800fa64:	d9402417 	ldw	r5,144(sp)
 800fa68:	d8c02617 	ldw	r3,152(sp)
 800fa6c:	28800017 	ldw	r2,0(r5)
 800fa70:	29400104 	addi	r5,r5,4
 800fa74:	d9402415 	stw	r5,144(sp)
 800fa78:	10c0000d 	sth	r3,0(r2)
 800fa7c:	003bc306 	br	800e98c <__alt_data_end+0xfc00e98c>
 800fa80:	d9002417 	ldw	r4,144(sp)
 800fa84:	0029883a 	mov	r20,zero
 800fa88:	24800017 	ldw	r18,0(r4)
 800fa8c:	21000104 	addi	r4,r4,4
 800fa90:	d9002415 	stw	r4,144(sp)
 800fa94:	003c8806 	br	800ecb8 <__alt_data_end+0xfc00ecb8>
 800fa98:	d8c02417 	ldw	r3,144(sp)
 800fa9c:	1c800017 	ldw	r18,0(r3)
 800faa0:	18c00104 	addi	r3,r3,4
 800faa4:	d8c02415 	stw	r3,144(sp)
 800faa8:	9029d7fa 	srai	r20,r18,31
 800faac:	a005883a 	mov	r2,r20
 800fab0:	003d7806 	br	800f094 <__alt_data_end+0xfc00f094>
 800fab4:	8809883a 	mov	r4,r17
 800fab8:	da002d15 	stw	r8,180(sp)
 800fabc:	8004cfc0 	call	8004cfc <strlen>
 800fac0:	1029883a 	mov	r20,r2
 800fac4:	dd401d83 	ldbu	r21,118(sp)
 800fac8:	ddc02415 	stw	r23,144(sp)
 800facc:	d8002015 	stw	zero,128(sp)
 800fad0:	da002d17 	ldw	r8,180(sp)
 800fad4:	003caf06 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800fad8:	013fffc4 	movi	r4,-1
 800fadc:	003df206 	br	800f2a8 <__alt_data_end+0xfc00f2a8>
 800fae0:	dd002017 	ldw	r20,128(sp)
 800fae4:	00800184 	movi	r2,6
 800fae8:	1500012e 	bgeu	r2,r20,800faf0 <___svfiprintf_internal_r+0x11ec>
 800faec:	1029883a 	mov	r20,r2
 800faf0:	a025883a 	mov	r18,r20
 800faf4:	a0004116 	blt	r20,zero,800fbfc <___svfiprintf_internal_r+0x12f8>
 800faf8:	04420074 	movhi	r17,2049
 800fafc:	ddc02415 	stw	r23,144(sp)
 800fb00:	8c5fee04 	addi	r17,r17,32696
 800fb04:	003ce806 	br	800eea8 <__alt_data_end+0xfc00eea8>
 800fb08:	04001004 	movi	r16,64
 800fb0c:	800b883a 	mov	r5,r16
 800fb10:	800c17c0 	call	800c17c <_malloc_r>
 800fb14:	d8c02317 	ldw	r3,140(sp)
 800fb18:	18800015 	stw	r2,0(r3)
 800fb1c:	18800415 	stw	r2,16(r3)
 800fb20:	10004d26 	beq	r2,zero,800fc58 <___svfiprintf_internal_r+0x1354>
 800fb24:	d9402317 	ldw	r5,140(sp)
 800fb28:	2c000515 	stw	r16,20(r5)
 800fb2c:	003b8906 	br	800e954 <__alt_data_end+0xfc00e954>
 800fb30:	d9002417 	ldw	r4,144(sp)
 800fb34:	d9402617 	ldw	r5,152(sp)
 800fb38:	20800017 	ldw	r2,0(r4)
 800fb3c:	21000104 	addi	r4,r4,4
 800fb40:	d9002415 	stw	r4,144(sp)
 800fb44:	11400015 	stw	r5,0(r2)
 800fb48:	003b9006 	br	800e98c <__alt_data_end+0xfc00e98c>
 800fb4c:	8080004c 	andi	r2,r16,1
 800fb50:	002b883a 	mov	r21,zero
 800fb54:	10000526 	beq	r2,zero,800fb6c <___svfiprintf_internal_r+0x1268>
 800fb58:	00800c04 	movi	r2,48
 800fb5c:	d88019c5 	stb	r2,103(sp)
 800fb60:	dd002c17 	ldw	r20,176(sp)
 800fb64:	dc4019c4 	addi	r17,sp,103
 800fb68:	003c8a06 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800fb6c:	0029883a 	mov	r20,zero
 800fb70:	dc401a04 	addi	r17,sp,104
 800fb74:	003c8706 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800fb78:	014200b4 	movhi	r5,2050
 800fb7c:	29605604 	addi	r5,r5,-32424
 800fb80:	d9402815 	stw	r5,160(sp)
 800fb84:	003cff06 	br	800ef84 <__alt_data_end+0xfc00ef84>
 800fb88:	00bfffc4 	movi	r2,-1
 800fb8c:	003ea206 	br	800f618 <__alt_data_end+0xfc00f618>
 800fb90:	00800044 	movi	r2,1
 800fb94:	10803fcc 	andi	r2,r2,255
 800fb98:	00c00044 	movi	r3,1
 800fb9c:	10fd4526 	beq	r2,r3,800f0b4 <__alt_data_end+0xfc00f0b4>
 800fba0:	00c00084 	movi	r3,2
 800fba4:	10fc5226 	beq	r2,r3,800ecf0 <__alt_data_end+0xfc00ecf0>
 800fba8:	003c9c06 	br	800ee1c <__alt_data_end+0xfc00ee1c>
 800fbac:	1021883a 	mov	r16,r2
 800fbb0:	002b883a 	mov	r21,zero
 800fbb4:	00800084 	movi	r2,2
 800fbb8:	003ff606 	br	800fb94 <__alt_data_end+0xfc00fb94>
 800fbbc:	010200b4 	movhi	r4,2050
 800fbc0:	21205604 	addi	r4,r4,-32424
 800fbc4:	d9002815 	stw	r4,160(sp)
 800fbc8:	003e7206 	br	800f594 <__alt_data_end+0xfc00f594>
 800fbcc:	014200b4 	movhi	r5,2050
 800fbd0:	29605204 	addi	r5,r5,-32440
 800fbd4:	d9402115 	stw	r5,132(sp)
 800fbd8:	003ec506 	br	800f6f0 <__alt_data_end+0xfc00f6f0>
 800fbdc:	e027883a 	mov	r19,fp
 800fbe0:	d8002015 	stw	zero,128(sp)
 800fbe4:	003b9406 	br	800ea38 <__alt_data_end+0xfc00ea38>
 800fbe8:	dd002017 	ldw	r20,128(sp)
 800fbec:	dd401d83 	ldbu	r21,118(sp)
 800fbf0:	ddc02415 	stw	r23,144(sp)
 800fbf4:	d8002015 	stw	zero,128(sp)
 800fbf8:	003c6606 	br	800ed94 <__alt_data_end+0xfc00ed94>
 800fbfc:	0025883a 	mov	r18,zero
 800fc00:	003fbd06 	br	800faf8 <__alt_data_end+0xfc00faf8>
 800fc04:	d9402417 	ldw	r5,144(sp)
 800fc08:	d8c02417 	ldw	r3,144(sp)
 800fc0c:	29400017 	ldw	r5,0(r5)
 800fc10:	19000104 	addi	r4,r3,4
 800fc14:	d9002415 	stw	r4,144(sp)
 800fc18:	d9402015 	stw	r5,128(sp)
 800fc1c:	98c00043 	ldbu	r3,1(r19)
 800fc20:	e027883a 	mov	r19,fp
 800fc24:	283f5b0e 	bge	r5,zero,800f994 <__alt_data_end+0xfc00f994>
 800fc28:	18c03fcc 	andi	r3,r3,255
 800fc2c:	013fffc4 	movi	r4,-1
 800fc30:	18c0201c 	xori	r3,r3,128
 800fc34:	d9002015 	stw	r4,128(sp)
 800fc38:	18ffe004 	addi	r3,r3,-128
 800fc3c:	003b7d06 	br	800ea34 <__alt_data_end+0xfc00ea34>
 800fc40:	dd401d85 	stb	r21,118(sp)
 800fc44:	003cf306 	br	800f014 <__alt_data_end+0xfc00f014>
 800fc48:	dd401d85 	stb	r21,118(sp)
 800fc4c:	003d4e06 	br	800f188 <__alt_data_end+0xfc00f188>
 800fc50:	dd401d85 	stb	r21,118(sp)
 800fc54:	003c0e06 	br	800ec90 <__alt_data_end+0xfc00ec90>
 800fc58:	d9002717 	ldw	r4,156(sp)
 800fc5c:	00800304 	movi	r2,12
 800fc60:	20800015 	stw	r2,0(r4)
 800fc64:	00bfffc4 	movi	r2,-1
 800fc68:	003e6b06 	br	800f618 <__alt_data_end+0xfc00f618>
 800fc6c:	dd401d85 	stb	r21,118(sp)
 800fc70:	003d0006 	br	800f074 <__alt_data_end+0xfc00f074>
 800fc74:	dd401d85 	stb	r21,118(sp)
 800fc78:	003d7106 	br	800f240 <__alt_data_end+0xfc00f240>
 800fc7c:	dd401d85 	stb	r21,118(sp)
 800fc80:	003c5706 	br	800ede0 <__alt_data_end+0xfc00ede0>
 800fc84:	dd401d85 	stb	r21,118(sp)
 800fc88:	003c2e06 	br	800ed44 <__alt_data_end+0xfc00ed44>
 800fc8c:	dd401d85 	stb	r21,118(sp)
 800fc90:	003d8c06 	br	800f2c4 <__alt_data_end+0xfc00f2c4>
 800fc94:	dd401d85 	stb	r21,118(sp)
 800fc98:	003da706 	br	800f338 <__alt_data_end+0xfc00f338>
 800fc9c:	dd401d85 	stb	r21,118(sp)
 800fca0:	003cc806 	br	800efc4 <__alt_data_end+0xfc00efc4>

0800fca4 <__sprint_r.part.0>:
 800fca4:	28801917 	ldw	r2,100(r5)
 800fca8:	defff604 	addi	sp,sp,-40
 800fcac:	dd400515 	stw	r21,20(sp)
 800fcb0:	dfc00915 	stw	ra,36(sp)
 800fcb4:	df000815 	stw	fp,32(sp)
 800fcb8:	ddc00715 	stw	r23,28(sp)
 800fcbc:	dd800615 	stw	r22,24(sp)
 800fcc0:	dd000415 	stw	r20,16(sp)
 800fcc4:	dcc00315 	stw	r19,12(sp)
 800fcc8:	dc800215 	stw	r18,8(sp)
 800fccc:	dc400115 	stw	r17,4(sp)
 800fcd0:	dc000015 	stw	r16,0(sp)
 800fcd4:	1088000c 	andi	r2,r2,8192
 800fcd8:	302b883a 	mov	r21,r6
 800fcdc:	10002e26 	beq	r2,zero,800fd98 <__sprint_r.part.0+0xf4>
 800fce0:	30800217 	ldw	r2,8(r6)
 800fce4:	35800017 	ldw	r22,0(r6)
 800fce8:	10002926 	beq	r2,zero,800fd90 <__sprint_r.part.0+0xec>
 800fcec:	2827883a 	mov	r19,r5
 800fcf0:	2029883a 	mov	r20,r4
 800fcf4:	b5c00104 	addi	r23,r22,4
 800fcf8:	04bfffc4 	movi	r18,-1
 800fcfc:	bc400017 	ldw	r17,0(r23)
 800fd00:	b4000017 	ldw	r16,0(r22)
 800fd04:	0039883a 	mov	fp,zero
 800fd08:	8822d0ba 	srli	r17,r17,2
 800fd0c:	8800031e 	bne	r17,zero,800fd1c <__sprint_r.part.0+0x78>
 800fd10:	00001806 	br	800fd74 <__sprint_r.part.0+0xd0>
 800fd14:	84000104 	addi	r16,r16,4
 800fd18:	8f001526 	beq	r17,fp,800fd70 <__sprint_r.part.0+0xcc>
 800fd1c:	81400017 	ldw	r5,0(r16)
 800fd20:	980d883a 	mov	r6,r19
 800fd24:	a009883a 	mov	r4,r20
 800fd28:	80117940 	call	8011794 <_fputwc_r>
 800fd2c:	e7000044 	addi	fp,fp,1
 800fd30:	14bff81e 	bne	r2,r18,800fd14 <__alt_data_end+0xfc00fd14>
 800fd34:	9005883a 	mov	r2,r18
 800fd38:	a8000215 	stw	zero,8(r21)
 800fd3c:	a8000115 	stw	zero,4(r21)
 800fd40:	dfc00917 	ldw	ra,36(sp)
 800fd44:	df000817 	ldw	fp,32(sp)
 800fd48:	ddc00717 	ldw	r23,28(sp)
 800fd4c:	dd800617 	ldw	r22,24(sp)
 800fd50:	dd400517 	ldw	r21,20(sp)
 800fd54:	dd000417 	ldw	r20,16(sp)
 800fd58:	dcc00317 	ldw	r19,12(sp)
 800fd5c:	dc800217 	ldw	r18,8(sp)
 800fd60:	dc400117 	ldw	r17,4(sp)
 800fd64:	dc000017 	ldw	r16,0(sp)
 800fd68:	dec00a04 	addi	sp,sp,40
 800fd6c:	f800283a 	ret
 800fd70:	a8800217 	ldw	r2,8(r21)
 800fd74:	8c63883a 	add	r17,r17,r17
 800fd78:	8c63883a 	add	r17,r17,r17
 800fd7c:	1445c83a 	sub	r2,r2,r17
 800fd80:	a8800215 	stw	r2,8(r21)
 800fd84:	b5800204 	addi	r22,r22,8
 800fd88:	bdc00204 	addi	r23,r23,8
 800fd8c:	103fdb1e 	bne	r2,zero,800fcfc <__alt_data_end+0xfc00fcfc>
 800fd90:	0005883a 	mov	r2,zero
 800fd94:	003fe806 	br	800fd38 <__alt_data_end+0xfc00fd38>
 800fd98:	800b8940 	call	800b894 <__sfvwrite_r>
 800fd9c:	003fe606 	br	800fd38 <__alt_data_end+0xfc00fd38>

0800fda0 <__sprint_r>:
 800fda0:	30c00217 	ldw	r3,8(r6)
 800fda4:	18000126 	beq	r3,zero,800fdac <__sprint_r+0xc>
 800fda8:	800fca41 	jmpi	800fca4 <__sprint_r.part.0>
 800fdac:	30000115 	stw	zero,4(r6)
 800fdb0:	0005883a 	mov	r2,zero
 800fdb4:	f800283a 	ret

0800fdb8 <___vfiprintf_internal_r>:
 800fdb8:	deffca04 	addi	sp,sp,-216
 800fdbc:	dd403115 	stw	r21,196(sp)
 800fdc0:	dfc03515 	stw	ra,212(sp)
 800fdc4:	df003415 	stw	fp,208(sp)
 800fdc8:	ddc03315 	stw	r23,204(sp)
 800fdcc:	dd803215 	stw	r22,200(sp)
 800fdd0:	dd003015 	stw	r20,192(sp)
 800fdd4:	dcc02f15 	stw	r19,188(sp)
 800fdd8:	dc802e15 	stw	r18,184(sp)
 800fddc:	dc402d15 	stw	r17,180(sp)
 800fde0:	dc002c15 	stw	r16,176(sp)
 800fde4:	d9002115 	stw	r4,132(sp)
 800fde8:	d9402015 	stw	r5,128(sp)
 800fdec:	d9c02215 	stw	r7,136(sp)
 800fdf0:	302b883a 	mov	r21,r6
 800fdf4:	20000226 	beq	r4,zero,800fe00 <___vfiprintf_internal_r+0x48>
 800fdf8:	20800e17 	ldw	r2,56(r4)
 800fdfc:	1000cf26 	beq	r2,zero,801013c <___vfiprintf_internal_r+0x384>
 800fe00:	d8c02017 	ldw	r3,128(sp)
 800fe04:	1880030b 	ldhu	r2,12(r3)
 800fe08:	10c8000c 	andi	r3,r2,8192
 800fe0c:	1800071e 	bne	r3,zero,800fe2c <___vfiprintf_internal_r+0x74>
 800fe10:	d9402017 	ldw	r5,128(sp)
 800fe14:	00f7ffc4 	movi	r3,-8193
 800fe18:	10880014 	ori	r2,r2,8192
 800fe1c:	29001917 	ldw	r4,100(r5)
 800fe20:	2880030d 	sth	r2,12(r5)
 800fe24:	20c6703a 	and	r3,r4,r3
 800fe28:	28c01915 	stw	r3,100(r5)
 800fe2c:	10c0020c 	andi	r3,r2,8
 800fe30:	1800a526 	beq	r3,zero,80100c8 <___vfiprintf_internal_r+0x310>
 800fe34:	d9002017 	ldw	r4,128(sp)
 800fe38:	20c00417 	ldw	r3,16(r4)
 800fe3c:	1800a226 	beq	r3,zero,80100c8 <___vfiprintf_internal_r+0x310>
 800fe40:	1080068c 	andi	r2,r2,26
 800fe44:	00c00284 	movi	r3,10
 800fe48:	10c0a826 	beq	r2,r3,80100ec <___vfiprintf_internal_r+0x334>
 800fe4c:	d9001a04 	addi	r4,sp,104
 800fe50:	d94019c4 	addi	r5,sp,103
 800fe54:	048200b4 	movhi	r18,2050
 800fe58:	2145c83a 	sub	r2,r4,r5
 800fe5c:	94a05a04 	addi	r18,r18,-32408
 800fe60:	d9001e15 	stw	r4,120(sp)
 800fe64:	d9401f15 	stw	r5,124(sp)
 800fe68:	dec01a15 	stw	sp,104(sp)
 800fe6c:	d8001c15 	stw	zero,112(sp)
 800fe70:	d8001b15 	stw	zero,108(sp)
 800fe74:	d811883a 	mov	r8,sp
 800fe78:	d8002615 	stw	zero,152(sp)
 800fe7c:	d8002415 	stw	zero,144(sp)
 800fe80:	d8802815 	stw	r2,160(sp)
 800fe84:	a82d883a 	mov	r22,r21
 800fe88:	b0800007 	ldb	r2,0(r22)
 800fe8c:	10040d26 	beq	r2,zero,8010ec4 <___vfiprintf_internal_r+0x110c>
 800fe90:	00c00944 	movi	r3,37
 800fe94:	b029883a 	mov	r20,r22
 800fe98:	10c0021e 	bne	r2,r3,800fea4 <___vfiprintf_internal_r+0xec>
 800fe9c:	00001606 	br	800fef8 <___vfiprintf_internal_r+0x140>
 800fea0:	10c00326 	beq	r2,r3,800feb0 <___vfiprintf_internal_r+0xf8>
 800fea4:	a5000044 	addi	r20,r20,1
 800fea8:	a0800007 	ldb	r2,0(r20)
 800feac:	103ffc1e 	bne	r2,zero,800fea0 <__alt_data_end+0xfc00fea0>
 800feb0:	a5a1c83a 	sub	r16,r20,r22
 800feb4:	80001026 	beq	r16,zero,800fef8 <___vfiprintf_internal_r+0x140>
 800feb8:	d8c01c17 	ldw	r3,112(sp)
 800febc:	d8801b17 	ldw	r2,108(sp)
 800fec0:	45800015 	stw	r22,0(r8)
 800fec4:	80c7883a 	add	r3,r16,r3
 800fec8:	10800044 	addi	r2,r2,1
 800fecc:	44000115 	stw	r16,4(r8)
 800fed0:	d8c01c15 	stw	r3,112(sp)
 800fed4:	d8801b15 	stw	r2,108(sp)
 800fed8:	010001c4 	movi	r4,7
 800fedc:	2080750e 	bge	r4,r2,80100b4 <___vfiprintf_internal_r+0x2fc>
 800fee0:	1803951e 	bne	r3,zero,8010d38 <___vfiprintf_internal_r+0xf80>
 800fee4:	d8c02417 	ldw	r3,144(sp)
 800fee8:	d8001b15 	stw	zero,108(sp)
 800feec:	d811883a 	mov	r8,sp
 800fef0:	1c07883a 	add	r3,r3,r16
 800fef4:	d8c02415 	stw	r3,144(sp)
 800fef8:	a0800007 	ldb	r2,0(r20)
 800fefc:	1002e026 	beq	r2,zero,8010a80 <___vfiprintf_internal_r+0xcc8>
 800ff00:	a5800044 	addi	r22,r20,1
 800ff04:	a0c00047 	ldb	r3,1(r20)
 800ff08:	d8001d85 	stb	zero,118(sp)
 800ff0c:	0027883a 	mov	r19,zero
 800ff10:	d8002305 	stb	zero,140(sp)
 800ff14:	043fffc4 	movi	r16,-1
 800ff18:	d8002515 	stw	zero,148(sp)
 800ff1c:	0023883a 	mov	r17,zero
 800ff20:	05001604 	movi	r20,88
 800ff24:	05400244 	movi	r21,9
 800ff28:	402f883a 	mov	r23,r8
 800ff2c:	b5800044 	addi	r22,r22,1
 800ff30:	18bff804 	addi	r2,r3,-32
 800ff34:	a0827736 	bltu	r20,r2,8010914 <___vfiprintf_internal_r+0xb5c>
 800ff38:	100490ba 	slli	r2,r2,2
 800ff3c:	01020074 	movhi	r4,2049
 800ff40:	213fd404 	addi	r4,r4,-176
 800ff44:	1105883a 	add	r2,r2,r4
 800ff48:	10800017 	ldw	r2,0(r2)
 800ff4c:	1000683a 	jmp	r2
 800ff50:	08010614 	ori	zero,at,1048
 800ff54:	08010914 	ori	zero,at,1060
 800ff58:	08010914 	ori	zero,at,1060
 800ff5c:	08010630 	cmpltui	zero,at,1048
 800ff60:	08010914 	ori	zero,at,1060
 800ff64:	08010914 	ori	zero,at,1060
 800ff68:	08010914 	ori	zero,at,1060
 800ff6c:	08010914 	ori	zero,at,1060
 800ff70:	08010914 	ori	zero,at,1060
 800ff74:	08010914 	ori	zero,at,1060
 800ff78:	08010838 	rdprs	zero,at,1056
 800ff7c:	0801085c 	xori	zero,at,1057
 800ff80:	08010914 	ori	zero,at,1060
 800ff84:	08010154 	ori	zero,at,1029
 800ff88:	08010870 	cmpltui	zero,at,1057
 800ff8c:	08010914 	ori	zero,at,1060
 800ff90:	0801063c 	xorhi	zero,at,1048
 800ff94:	08010648 	cmpgei	zero,at,1049
 800ff98:	08010648 	cmpgei	zero,at,1049
 800ff9c:	08010648 	cmpgei	zero,at,1049
 800ffa0:	08010648 	cmpgei	zero,at,1049
 800ffa4:	08010648 	cmpgei	zero,at,1049
 800ffa8:	08010648 	cmpgei	zero,at,1049
 800ffac:	08010648 	cmpgei	zero,at,1049
 800ffb0:	08010648 	cmpgei	zero,at,1049
 800ffb4:	08010648 	cmpgei	zero,at,1049
 800ffb8:	08010914 	ori	zero,at,1060
 800ffbc:	08010914 	ori	zero,at,1060
 800ffc0:	08010914 	ori	zero,at,1060
 800ffc4:	08010914 	ori	zero,at,1060
 800ffc8:	08010914 	ori	zero,at,1060
 800ffcc:	08010914 	ori	zero,at,1060
 800ffd0:	08010914 	ori	zero,at,1060
 800ffd4:	08010914 	ori	zero,at,1060
 800ffd8:	08010914 	ori	zero,at,1060
 800ffdc:	08010914 	ori	zero,at,1060
 800ffe0:	08010688 	cmpgei	zero,at,1050
 800ffe4:	08010914 	ori	zero,at,1060
 800ffe8:	08010914 	ori	zero,at,1060
 800ffec:	08010914 	ori	zero,at,1060
 800fff0:	08010914 	ori	zero,at,1060
 800fff4:	08010914 	ori	zero,at,1060
 800fff8:	08010914 	ori	zero,at,1060
 800fffc:	08010914 	ori	zero,at,1060
 8010000:	08010914 	ori	zero,at,1060
 8010004:	08010914 	ori	zero,at,1060
 8010008:	08010914 	ori	zero,at,1060
 801000c:	080106c4 	addi	zero,at,1051
 8010010:	08010914 	ori	zero,at,1060
 8010014:	08010914 	ori	zero,at,1060
 8010018:	08010914 	ori	zero,at,1060
 801001c:	08010914 	ori	zero,at,1060
 8010020:	08010914 	ori	zero,at,1060
 8010024:	08010720 	cmpeqi	zero,at,1052
 8010028:	08010914 	ori	zero,at,1060
 801002c:	08010914 	ori	zero,at,1060
 8010030:	08010794 	ori	zero,at,1054
 8010034:	08010914 	ori	zero,at,1060
 8010038:	08010914 	ori	zero,at,1060
 801003c:	08010914 	ori	zero,at,1060
 8010040:	08010914 	ori	zero,at,1060
 8010044:	08010914 	ori	zero,at,1060
 8010048:	08010914 	ori	zero,at,1060
 801004c:	08010914 	ori	zero,at,1060
 8010050:	08010914 	ori	zero,at,1060
 8010054:	08010914 	ori	zero,at,1060
 8010058:	08010914 	ori	zero,at,1060
 801005c:	0801053c 	xorhi	zero,at,1044
 8010060:	0801056c 	andhi	zero,at,1045
 8010064:	08010914 	ori	zero,at,1060
 8010068:	08010914 	ori	zero,at,1060
 801006c:	08010914 	ori	zero,at,1060
 8010070:	080108bc 	xorhi	zero,at,1058
 8010074:	0801056c 	andhi	zero,at,1045
 8010078:	08010914 	ori	zero,at,1060
 801007c:	08010914 	ori	zero,at,1060
 8010080:	08010414 	ori	zero,at,1040
 8010084:	08010914 	ori	zero,at,1060
 8010088:	08010428 	cmpgeui	zero,at,1040
 801008c:	08010460 	cmpeqi	zero,at,1041
 8010090:	08010160 	cmpeqi	zero,at,1029
 8010094:	08010408 	cmpgei	zero,at,1040
 8010098:	08010914 	ori	zero,at,1060
 801009c:	080107d4 	ori	zero,at,1055
 80100a0:	08010914 	ori	zero,at,1060
 80100a4:	08010820 	cmpeqi	zero,at,1056
 80100a8:	08010914 	ori	zero,at,1060
 80100ac:	08010914 	ori	zero,at,1060
 80100b0:	080104e4 	muli	zero,at,1043
 80100b4:	42000204 	addi	r8,r8,8
 80100b8:	d8c02417 	ldw	r3,144(sp)
 80100bc:	1c07883a 	add	r3,r3,r16
 80100c0:	d8c02415 	stw	r3,144(sp)
 80100c4:	003f8c06 	br	800fef8 <__alt_data_end+0xfc00fef8>
 80100c8:	d9402017 	ldw	r5,128(sp)
 80100cc:	d9002117 	ldw	r4,132(sp)
 80100d0:	80094040 	call	8009404 <__swsetup_r>
 80100d4:	1003c11e 	bne	r2,zero,8010fdc <___vfiprintf_internal_r+0x1224>
 80100d8:	d9402017 	ldw	r5,128(sp)
 80100dc:	00c00284 	movi	r3,10
 80100e0:	2880030b 	ldhu	r2,12(r5)
 80100e4:	1080068c 	andi	r2,r2,26
 80100e8:	10ff581e 	bne	r2,r3,800fe4c <__alt_data_end+0xfc00fe4c>
 80100ec:	d8c02017 	ldw	r3,128(sp)
 80100f0:	1880038f 	ldh	r2,14(r3)
 80100f4:	103f5516 	blt	r2,zero,800fe4c <__alt_data_end+0xfc00fe4c>
 80100f8:	d9c02217 	ldw	r7,136(sp)
 80100fc:	d9002117 	ldw	r4,132(sp)
 8010100:	a80d883a 	mov	r6,r21
 8010104:	180b883a 	mov	r5,r3
 8010108:	80112e00 	call	80112e0 <__sbprintf>
 801010c:	dfc03517 	ldw	ra,212(sp)
 8010110:	df003417 	ldw	fp,208(sp)
 8010114:	ddc03317 	ldw	r23,204(sp)
 8010118:	dd803217 	ldw	r22,200(sp)
 801011c:	dd403117 	ldw	r21,196(sp)
 8010120:	dd003017 	ldw	r20,192(sp)
 8010124:	dcc02f17 	ldw	r19,188(sp)
 8010128:	dc802e17 	ldw	r18,184(sp)
 801012c:	dc402d17 	ldw	r17,180(sp)
 8010130:	dc002c17 	ldw	r16,176(sp)
 8010134:	dec03604 	addi	sp,sp,216
 8010138:	f800283a 	ret
 801013c:	800b4100 	call	800b410 <__sinit>
 8010140:	003f2f06 	br	800fe00 <__alt_data_end+0xfc00fe00>
 8010144:	d8c02517 	ldw	r3,148(sp)
 8010148:	d8802215 	stw	r2,136(sp)
 801014c:	00c7c83a 	sub	r3,zero,r3
 8010150:	d8c02515 	stw	r3,148(sp)
 8010154:	8c400114 	ori	r17,r17,4
 8010158:	b0c00007 	ldb	r3,0(r22)
 801015c:	003f7306 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010160:	00800c04 	movi	r2,48
 8010164:	d9402217 	ldw	r5,136(sp)
 8010168:	d8801d05 	stb	r2,116(sp)
 801016c:	00801e04 	movi	r2,120
 8010170:	d8801d45 	stb	r2,117(sp)
 8010174:	d8001d85 	stb	zero,118(sp)
 8010178:	b811883a 	mov	r8,r23
 801017c:	28c00104 	addi	r3,r5,4
 8010180:	2cc00017 	ldw	r19,0(r5)
 8010184:	0029883a 	mov	r20,zero
 8010188:	88800094 	ori	r2,r17,2
 801018c:	80032516 	blt	r16,zero,8010e24 <___vfiprintf_internal_r+0x106c>
 8010190:	00bfdfc4 	movi	r2,-129
 8010194:	88a2703a 	and	r17,r17,r2
 8010198:	d8c02215 	stw	r3,136(sp)
 801019c:	8c400094 	ori	r17,r17,2
 80101a0:	98032a1e 	bne	r19,zero,8010e4c <___vfiprintf_internal_r+0x1094>
 80101a4:	00820074 	movhi	r2,2049
 80101a8:	109fe904 	addi	r2,r2,32676
 80101ac:	d8802615 	stw	r2,152(sp)
 80101b0:	002b883a 	mov	r21,zero
 80101b4:	8001741e 	bne	r16,zero,8010788 <___vfiprintf_internal_r+0x9d0>
 80101b8:	0021883a 	mov	r16,zero
 80101bc:	0029883a 	mov	r20,zero
 80101c0:	ddc01a04 	addi	r23,sp,104
 80101c4:	8027883a 	mov	r19,r16
 80101c8:	8500010e 	bge	r16,r20,80101d0 <___vfiprintf_internal_r+0x418>
 80101cc:	a027883a 	mov	r19,r20
 80101d0:	ad403fcc 	andi	r21,r21,255
 80101d4:	ad40201c 	xori	r21,r21,128
 80101d8:	ad7fe004 	addi	r21,r21,-128
 80101dc:	a8000126 	beq	r21,zero,80101e4 <___vfiprintf_internal_r+0x42c>
 80101e0:	9cc00044 	addi	r19,r19,1
 80101e4:	89c0008c 	andi	r7,r17,2
 80101e8:	38000126 	beq	r7,zero,80101f0 <___vfiprintf_internal_r+0x438>
 80101ec:	9cc00084 	addi	r19,r19,2
 80101f0:	88c0210c 	andi	r3,r17,132
 80101f4:	1801dd1e 	bne	r3,zero,801096c <___vfiprintf_internal_r+0xbb4>
 80101f8:	d9402517 	ldw	r5,148(sp)
 80101fc:	2cebc83a 	sub	r21,r5,r19
 8010200:	0541da0e 	bge	zero,r21,801096c <___vfiprintf_internal_r+0xbb4>
 8010204:	07000404 	movi	fp,16
 8010208:	d8801c17 	ldw	r2,112(sp)
 801020c:	e543be0e 	bge	fp,r21,8011108 <___vfiprintf_internal_r+0x1350>
 8010210:	014200b4 	movhi	r5,2050
 8010214:	29605e04 	addi	r5,r5,-32392
 8010218:	dc002715 	stw	r16,156(sp)
 801021c:	d9801b17 	ldw	r6,108(sp)
 8010220:	a821883a 	mov	r16,r21
 8010224:	d9402315 	stw	r5,140(sp)
 8010228:	028001c4 	movi	r10,7
 801022c:	d9c02915 	stw	r7,164(sp)
 8010230:	182b883a 	mov	r21,r3
 8010234:	00000506 	br	801024c <___vfiprintf_internal_r+0x494>
 8010238:	31000084 	addi	r4,r6,2
 801023c:	42000204 	addi	r8,r8,8
 8010240:	180d883a 	mov	r6,r3
 8010244:	843ffc04 	addi	r16,r16,-16
 8010248:	e4000f0e 	bge	fp,r16,8010288 <___vfiprintf_internal_r+0x4d0>
 801024c:	010200b4 	movhi	r4,2050
 8010250:	10800404 	addi	r2,r2,16
 8010254:	30c00044 	addi	r3,r6,1
 8010258:	21205e04 	addi	r4,r4,-32392
 801025c:	41000015 	stw	r4,0(r8)
 8010260:	47000115 	stw	fp,4(r8)
 8010264:	d8801c15 	stw	r2,112(sp)
 8010268:	d8c01b15 	stw	r3,108(sp)
 801026c:	50fff20e 	bge	r10,r3,8010238 <__alt_data_end+0xfc010238>
 8010270:	1001b21e 	bne	r2,zero,801093c <___vfiprintf_internal_r+0xb84>
 8010274:	843ffc04 	addi	r16,r16,-16
 8010278:	000d883a 	mov	r6,zero
 801027c:	01000044 	movi	r4,1
 8010280:	d811883a 	mov	r8,sp
 8010284:	e43ff116 	blt	fp,r16,801024c <__alt_data_end+0xfc01024c>
 8010288:	a807883a 	mov	r3,r21
 801028c:	d9c02917 	ldw	r7,164(sp)
 8010290:	802b883a 	mov	r21,r16
 8010294:	dc002717 	ldw	r16,156(sp)
 8010298:	d9402317 	ldw	r5,140(sp)
 801029c:	a885883a 	add	r2,r21,r2
 80102a0:	45400115 	stw	r21,4(r8)
 80102a4:	41400015 	stw	r5,0(r8)
 80102a8:	d8801c15 	stw	r2,112(sp)
 80102ac:	d9001b15 	stw	r4,108(sp)
 80102b0:	014001c4 	movi	r5,7
 80102b4:	29026216 	blt	r5,r4,8010c40 <___vfiprintf_internal_r+0xe88>
 80102b8:	d9801d87 	ldb	r6,118(sp)
 80102bc:	42000204 	addi	r8,r8,8
 80102c0:	21400044 	addi	r5,r4,1
 80102c4:	3001ae1e 	bne	r6,zero,8010980 <___vfiprintf_internal_r+0xbc8>
 80102c8:	3801bb26 	beq	r7,zero,80109b8 <___vfiprintf_internal_r+0xc00>
 80102cc:	d9001d04 	addi	r4,sp,116
 80102d0:	10800084 	addi	r2,r2,2
 80102d4:	41000015 	stw	r4,0(r8)
 80102d8:	01000084 	movi	r4,2
 80102dc:	41000115 	stw	r4,4(r8)
 80102e0:	d8801c15 	stw	r2,112(sp)
 80102e4:	d9401b15 	stw	r5,108(sp)
 80102e8:	010001c4 	movi	r4,7
 80102ec:	2142680e 	bge	r4,r5,8010c90 <___vfiprintf_internal_r+0xed8>
 80102f0:	1002b11e 	bne	r2,zero,8010db8 <___vfiprintf_internal_r+0x1000>
 80102f4:	01802004 	movi	r6,128
 80102f8:	01400044 	movi	r5,1
 80102fc:	0009883a 	mov	r4,zero
 8010300:	d811883a 	mov	r8,sp
 8010304:	1981ae1e 	bne	r3,r6,80109c0 <___vfiprintf_internal_r+0xc08>
 8010308:	d8c02517 	ldw	r3,148(sp)
 801030c:	1cf9c83a 	sub	fp,r3,r19
 8010310:	0701ab0e 	bge	zero,fp,80109c0 <___vfiprintf_internal_r+0xc08>
 8010314:	05400404 	movi	r21,16
 8010318:	af03a90e 	bge	r21,fp,80111c0 <___vfiprintf_internal_r+0x1408>
 801031c:	014200b4 	movhi	r5,2050
 8010320:	29605a04 	addi	r5,r5,-32408
 8010324:	d9402315 	stw	r5,140(sp)
 8010328:	01c001c4 	movi	r7,7
 801032c:	00000506 	br	8010344 <___vfiprintf_internal_r+0x58c>
 8010330:	21800084 	addi	r6,r4,2
 8010334:	42000204 	addi	r8,r8,8
 8010338:	1809883a 	mov	r4,r3
 801033c:	e73ffc04 	addi	fp,fp,-16
 8010340:	af000d0e 	bge	r21,fp,8010378 <___vfiprintf_internal_r+0x5c0>
 8010344:	10800404 	addi	r2,r2,16
 8010348:	20c00044 	addi	r3,r4,1
 801034c:	44800015 	stw	r18,0(r8)
 8010350:	45400115 	stw	r21,4(r8)
 8010354:	d8801c15 	stw	r2,112(sp)
 8010358:	d8c01b15 	stw	r3,108(sp)
 801035c:	38fff40e 	bge	r7,r3,8010330 <__alt_data_end+0xfc010330>
 8010360:	10022b1e 	bne	r2,zero,8010c10 <___vfiprintf_internal_r+0xe58>
 8010364:	e73ffc04 	addi	fp,fp,-16
 8010368:	01800044 	movi	r6,1
 801036c:	0009883a 	mov	r4,zero
 8010370:	d811883a 	mov	r8,sp
 8010374:	af3ff316 	blt	r21,fp,8010344 <__alt_data_end+0xfc010344>
 8010378:	d8c02317 	ldw	r3,140(sp)
 801037c:	1705883a 	add	r2,r2,fp
 8010380:	47000115 	stw	fp,4(r8)
 8010384:	40c00015 	stw	r3,0(r8)
 8010388:	d8801c15 	stw	r2,112(sp)
 801038c:	d9801b15 	stw	r6,108(sp)
 8010390:	00c001c4 	movi	r3,7
 8010394:	19829416 	blt	r3,r6,8010de8 <___vfiprintf_internal_r+0x1030>
 8010398:	8521c83a 	sub	r16,r16,r20
 801039c:	42000204 	addi	r8,r8,8
 80103a0:	31400044 	addi	r5,r6,1
 80103a4:	3009883a 	mov	r4,r6
 80103a8:	04018716 	blt	zero,r16,80109c8 <___vfiprintf_internal_r+0xc10>
 80103ac:	a085883a 	add	r2,r20,r2
 80103b0:	45c00015 	stw	r23,0(r8)
 80103b4:	45000115 	stw	r20,4(r8)
 80103b8:	d8801c15 	stw	r2,112(sp)
 80103bc:	d9401b15 	stw	r5,108(sp)
 80103c0:	00c001c4 	movi	r3,7
 80103c4:	1941c20e 	bge	r3,r5,8010ad0 <___vfiprintf_internal_r+0xd18>
 80103c8:	1002531e 	bne	r2,zero,8010d18 <___vfiprintf_internal_r+0xf60>
 80103cc:	d8001b15 	stw	zero,108(sp)
 80103d0:	8c40010c 	andi	r17,r17,4
 80103d4:	88023226 	beq	r17,zero,8010ca0 <___vfiprintf_internal_r+0xee8>
 80103d8:	d9002517 	ldw	r4,148(sp)
 80103dc:	24e3c83a 	sub	r17,r4,r19
 80103e0:	04432916 	blt	zero,r17,8011088 <___vfiprintf_internal_r+0x12d0>
 80103e4:	d8802517 	ldw	r2,148(sp)
 80103e8:	14c0010e 	bge	r2,r19,80103f0 <___vfiprintf_internal_r+0x638>
 80103ec:	9805883a 	mov	r2,r19
 80103f0:	d8c02417 	ldw	r3,144(sp)
 80103f4:	1887883a 	add	r3,r3,r2
 80103f8:	d8c02415 	stw	r3,144(sp)
 80103fc:	d8001b15 	stw	zero,108(sp)
 8010400:	d811883a 	mov	r8,sp
 8010404:	003ea006 	br	800fe88 <__alt_data_end+0xfc00fe88>
 8010408:	8c400814 	ori	r17,r17,32
 801040c:	b0c00007 	ldb	r3,0(r22)
 8010410:	003ec606 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010414:	b0c00007 	ldb	r3,0(r22)
 8010418:	00801b04 	movi	r2,108
 801041c:	18832026 	beq	r3,r2,80110a0 <___vfiprintf_internal_r+0x12e8>
 8010420:	8c400414 	ori	r17,r17,16
 8010424:	003ec106 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010428:	9cc03fcc 	andi	r19,r19,255
 801042c:	b811883a 	mov	r8,r23
 8010430:	9803981e 	bne	r19,zero,8011294 <___vfiprintf_internal_r+0x14dc>
 8010434:	8880080c 	andi	r2,r17,32
 8010438:	1002be26 	beq	r2,zero,8010f34 <___vfiprintf_internal_r+0x117c>
 801043c:	d9002217 	ldw	r4,136(sp)
 8010440:	d9402417 	ldw	r5,144(sp)
 8010444:	20800017 	ldw	r2,0(r4)
 8010448:	2807d7fa 	srai	r3,r5,31
 801044c:	21000104 	addi	r4,r4,4
 8010450:	d9002215 	stw	r4,136(sp)
 8010454:	11400015 	stw	r5,0(r2)
 8010458:	10c00115 	stw	r3,4(r2)
 801045c:	003e8a06 	br	800fe88 <__alt_data_end+0xfc00fe88>
 8010460:	9cc03fcc 	andi	r19,r19,255
 8010464:	b811883a 	mov	r8,r23
 8010468:	9803871e 	bne	r19,zero,8011288 <___vfiprintf_internal_r+0x14d0>
 801046c:	8880080c 	andi	r2,r17,32
 8010470:	10009a26 	beq	r2,zero,80106dc <___vfiprintf_internal_r+0x924>
 8010474:	d9002217 	ldw	r4,136(sp)
 8010478:	d8001d85 	stb	zero,118(sp)
 801047c:	20800204 	addi	r2,r4,8
 8010480:	24c00017 	ldw	r19,0(r4)
 8010484:	25000117 	ldw	r20,4(r4)
 8010488:	8002a416 	blt	r16,zero,8010f1c <___vfiprintf_internal_r+0x1164>
 801048c:	013fdfc4 	movi	r4,-129
 8010490:	9d06b03a 	or	r3,r19,r20
 8010494:	d8802215 	stw	r2,136(sp)
 8010498:	8922703a 	and	r17,r17,r4
 801049c:	18009b26 	beq	r3,zero,801070c <___vfiprintf_internal_r+0x954>
 80104a0:	002b883a 	mov	r21,zero
 80104a4:	ddc01a04 	addi	r23,sp,104
 80104a8:	9806d0fa 	srli	r3,r19,3
 80104ac:	a008977a 	slli	r4,r20,29
 80104b0:	a028d0fa 	srli	r20,r20,3
 80104b4:	9cc001cc 	andi	r19,r19,7
 80104b8:	98800c04 	addi	r2,r19,48
 80104bc:	bdffffc4 	addi	r23,r23,-1
 80104c0:	20e6b03a 	or	r19,r4,r3
 80104c4:	b8800005 	stb	r2,0(r23)
 80104c8:	9d06b03a 	or	r3,r19,r20
 80104cc:	183ff61e 	bne	r3,zero,80104a8 <__alt_data_end+0xfc0104a8>
 80104d0:	88c0004c 	andi	r3,r17,1
 80104d4:	18021f1e 	bne	r3,zero,8010d54 <___vfiprintf_internal_r+0xf9c>
 80104d8:	d9401e17 	ldw	r5,120(sp)
 80104dc:	2de9c83a 	sub	r20,r5,r23
 80104e0:	003f3806 	br	80101c4 <__alt_data_end+0xfc0101c4>
 80104e4:	9cc03fcc 	andi	r19,r19,255
 80104e8:	b811883a 	mov	r8,r23
 80104ec:	98034f1e 	bne	r19,zero,801122c <___vfiprintf_internal_r+0x1474>
 80104f0:	00820074 	movhi	r2,2049
 80104f4:	109fe904 	addi	r2,r2,32676
 80104f8:	d8802615 	stw	r2,152(sp)
 80104fc:	8880080c 	andi	r2,r17,32
 8010500:	1000ac26 	beq	r2,zero,80107b4 <___vfiprintf_internal_r+0x9fc>
 8010504:	d9002217 	ldw	r4,136(sp)
 8010508:	24c00017 	ldw	r19,0(r4)
 801050c:	25000117 	ldw	r20,4(r4)
 8010510:	21000204 	addi	r4,r4,8
 8010514:	d9002215 	stw	r4,136(sp)
 8010518:	8880004c 	andi	r2,r17,1
 801051c:	1001e726 	beq	r2,zero,8010cbc <___vfiprintf_internal_r+0xf04>
 8010520:	9d04b03a 	or	r2,r19,r20
 8010524:	10025c1e 	bne	r2,zero,8010e98 <___vfiprintf_internal_r+0x10e0>
 8010528:	d8001d85 	stb	zero,118(sp)
 801052c:	80024416 	blt	r16,zero,8010e40 <___vfiprintf_internal_r+0x1088>
 8010530:	00bfdfc4 	movi	r2,-129
 8010534:	88a2703a 	and	r17,r17,r2
 8010538:	003f1d06 	br	80101b0 <__alt_data_end+0xfc0101b0>
 801053c:	d8c02217 	ldw	r3,136(sp)
 8010540:	04c00044 	movi	r19,1
 8010544:	b811883a 	mov	r8,r23
 8010548:	18800017 	ldw	r2,0(r3)
 801054c:	18c00104 	addi	r3,r3,4
 8010550:	d8001d85 	stb	zero,118(sp)
 8010554:	d8801005 	stb	r2,64(sp)
 8010558:	d8c02215 	stw	r3,136(sp)
 801055c:	9829883a 	mov	r20,r19
 8010560:	ddc01004 	addi	r23,sp,64
 8010564:	0021883a 	mov	r16,zero
 8010568:	003f1e06 	br	80101e4 <__alt_data_end+0xfc0101e4>
 801056c:	9cc03fcc 	andi	r19,r19,255
 8010570:	b811883a 	mov	r8,r23
 8010574:	9803331e 	bne	r19,zero,8011244 <___vfiprintf_internal_r+0x148c>
 8010578:	8880080c 	andi	r2,r17,32
 801057c:	10004826 	beq	r2,zero,80106a0 <___vfiprintf_internal_r+0x8e8>
 8010580:	d9002217 	ldw	r4,136(sp)
 8010584:	20800117 	ldw	r2,4(r4)
 8010588:	24c00017 	ldw	r19,0(r4)
 801058c:	21000204 	addi	r4,r4,8
 8010590:	d9002215 	stw	r4,136(sp)
 8010594:	1029883a 	mov	r20,r2
 8010598:	10024c16 	blt	r2,zero,8010ecc <___vfiprintf_internal_r+0x1114>
 801059c:	dd401d83 	ldbu	r21,118(sp)
 80105a0:	80007116 	blt	r16,zero,8010768 <___vfiprintf_internal_r+0x9b0>
 80105a4:	00ffdfc4 	movi	r3,-129
 80105a8:	9d04b03a 	or	r2,r19,r20
 80105ac:	88e2703a 	and	r17,r17,r3
 80105b0:	1000d126 	beq	r2,zero,80108f8 <___vfiprintf_internal_r+0xb40>
 80105b4:	a0023526 	beq	r20,zero,8010e8c <___vfiprintf_internal_r+0x10d4>
 80105b8:	ddc01a04 	addi	r23,sp,104
 80105bc:	4039883a 	mov	fp,r8
 80105c0:	9809883a 	mov	r4,r19
 80105c4:	a00b883a 	mov	r5,r20
 80105c8:	01800284 	movi	r6,10
 80105cc:	000f883a 	mov	r7,zero
 80105d0:	80123f00 	call	80123f0 <__umoddi3>
 80105d4:	10800c04 	addi	r2,r2,48
 80105d8:	bdffffc4 	addi	r23,r23,-1
 80105dc:	9809883a 	mov	r4,r19
 80105e0:	a00b883a 	mov	r5,r20
 80105e4:	b8800005 	stb	r2,0(r23)
 80105e8:	01800284 	movi	r6,10
 80105ec:	000f883a 	mov	r7,zero
 80105f0:	8011df40 	call	8011df4 <__udivdi3>
 80105f4:	1027883a 	mov	r19,r2
 80105f8:	10c4b03a 	or	r2,r2,r3
 80105fc:	1829883a 	mov	r20,r3
 8010600:	103fef1e 	bne	r2,zero,80105c0 <__alt_data_end+0xfc0105c0>
 8010604:	d9001e17 	ldw	r4,120(sp)
 8010608:	e011883a 	mov	r8,fp
 801060c:	25e9c83a 	sub	r20,r4,r23
 8010610:	003eec06 	br	80101c4 <__alt_data_end+0xfc0101c4>
 8010614:	d8802307 	ldb	r2,140(sp)
 8010618:	1002361e 	bne	r2,zero,8010ef4 <___vfiprintf_internal_r+0x113c>
 801061c:	00c00804 	movi	r3,32
 8010620:	d8c02305 	stb	r3,140(sp)
 8010624:	04c00044 	movi	r19,1
 8010628:	b0c00007 	ldb	r3,0(r22)
 801062c:	003e3f06 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010630:	8c400054 	ori	r17,r17,1
 8010634:	b0c00007 	ldb	r3,0(r22)
 8010638:	003e3c06 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 801063c:	8c402014 	ori	r17,r17,128
 8010640:	b0c00007 	ldb	r3,0(r22)
 8010644:	003e3906 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010648:	dc002715 	stw	r16,156(sp)
 801064c:	d8002515 	stw	zero,148(sp)
 8010650:	1f3ff404 	addi	fp,r3,-48
 8010654:	0009883a 	mov	r4,zero
 8010658:	b021883a 	mov	r16,r22
 801065c:	01400284 	movi	r5,10
 8010660:	8004a540 	call	8004a54 <__mulsi3>
 8010664:	80c00007 	ldb	r3,0(r16)
 8010668:	e089883a 	add	r4,fp,r2
 801066c:	b5800044 	addi	r22,r22,1
 8010670:	1f3ff404 	addi	fp,r3,-48
 8010674:	b021883a 	mov	r16,r22
 8010678:	af3ff82e 	bgeu	r21,fp,801065c <__alt_data_end+0xfc01065c>
 801067c:	d9002515 	stw	r4,148(sp)
 8010680:	dc002717 	ldw	r16,156(sp)
 8010684:	003e2a06 	br	800ff30 <__alt_data_end+0xfc00ff30>
 8010688:	9cc03fcc 	andi	r19,r19,255
 801068c:	b811883a 	mov	r8,r23
 8010690:	9802e91e 	bne	r19,zero,8011238 <___vfiprintf_internal_r+0x1480>
 8010694:	8c400414 	ori	r17,r17,16
 8010698:	8880080c 	andi	r2,r17,32
 801069c:	103fb81e 	bne	r2,zero,8010580 <__alt_data_end+0xfc010580>
 80106a0:	8880040c 	andi	r2,r17,16
 80106a4:	10022e26 	beq	r2,zero,8010f60 <___vfiprintf_internal_r+0x11a8>
 80106a8:	d9402217 	ldw	r5,136(sp)
 80106ac:	2cc00017 	ldw	r19,0(r5)
 80106b0:	29400104 	addi	r5,r5,4
 80106b4:	d9402215 	stw	r5,136(sp)
 80106b8:	9829d7fa 	srai	r20,r19,31
 80106bc:	a005883a 	mov	r2,r20
 80106c0:	003fb506 	br	8010598 <__alt_data_end+0xfc010598>
 80106c4:	9cc03fcc 	andi	r19,r19,255
 80106c8:	b811883a 	mov	r8,r23
 80106cc:	9802fa1e 	bne	r19,zero,80112b8 <___vfiprintf_internal_r+0x1500>
 80106d0:	8c400414 	ori	r17,r17,16
 80106d4:	8880080c 	andi	r2,r17,32
 80106d8:	103f661e 	bne	r2,zero,8010474 <__alt_data_end+0xfc010474>
 80106dc:	8880040c 	andi	r2,r17,16
 80106e0:	10020626 	beq	r2,zero,8010efc <___vfiprintf_internal_r+0x1144>
 80106e4:	d9402217 	ldw	r5,136(sp)
 80106e8:	d8001d85 	stb	zero,118(sp)
 80106ec:	0029883a 	mov	r20,zero
 80106f0:	28800104 	addi	r2,r5,4
 80106f4:	2cc00017 	ldw	r19,0(r5)
 80106f8:	80020816 	blt	r16,zero,8010f1c <___vfiprintf_internal_r+0x1164>
 80106fc:	00ffdfc4 	movi	r3,-129
 8010700:	d8802215 	stw	r2,136(sp)
 8010704:	88e2703a 	and	r17,r17,r3
 8010708:	983f651e 	bne	r19,zero,80104a0 <__alt_data_end+0xfc0104a0>
 801070c:	002b883a 	mov	r21,zero
 8010710:	8002cf26 	beq	r16,zero,8011250 <___vfiprintf_internal_r+0x1498>
 8010714:	0027883a 	mov	r19,zero
 8010718:	0029883a 	mov	r20,zero
 801071c:	003f6106 	br	80104a4 <__alt_data_end+0xfc0104a4>
 8010720:	9cc03fcc 	andi	r19,r19,255
 8010724:	b811883a 	mov	r8,r23
 8010728:	9802e01e 	bne	r19,zero,80112ac <___vfiprintf_internal_r+0x14f4>
 801072c:	8c400414 	ori	r17,r17,16
 8010730:	8880080c 	andi	r2,r17,32
 8010734:	1000641e 	bne	r2,zero,80108c8 <___vfiprintf_internal_r+0xb10>
 8010738:	8880040c 	andi	r2,r17,16
 801073c:	1001c81e 	bne	r2,zero,8010e60 <___vfiprintf_internal_r+0x10a8>
 8010740:	8880100c 	andi	r2,r17,64
 8010744:	d8001d85 	stb	zero,118(sp)
 8010748:	1002281e 	bne	r2,zero,8010fec <___vfiprintf_internal_r+0x1234>
 801074c:	d9002217 	ldw	r4,136(sp)
 8010750:	0029883a 	mov	r20,zero
 8010754:	20800104 	addi	r2,r4,4
 8010758:	24c00017 	ldw	r19,0(r4)
 801075c:	8001c60e 	bge	r16,zero,8010e78 <___vfiprintf_internal_r+0x10c0>
 8010760:	d8802215 	stw	r2,136(sp)
 8010764:	002b883a 	mov	r21,zero
 8010768:	9d04b03a 	or	r2,r19,r20
 801076c:	103f911e 	bne	r2,zero,80105b4 <__alt_data_end+0xfc0105b4>
 8010770:	00800044 	movi	r2,1
 8010774:	10803fcc 	andi	r2,r2,255
 8010778:	00c00044 	movi	r3,1
 801077c:	10c05f26 	beq	r2,r3,80108fc <___vfiprintf_internal_r+0xb44>
 8010780:	00c00084 	movi	r3,2
 8010784:	10ffe31e 	bne	r2,r3,8010714 <__alt_data_end+0xfc010714>
 8010788:	0027883a 	mov	r19,zero
 801078c:	0029883a 	mov	r20,zero
 8010790:	00015106 	br	8010cd8 <___vfiprintf_internal_r+0xf20>
 8010794:	9cc03fcc 	andi	r19,r19,255
 8010798:	b811883a 	mov	r8,r23
 801079c:	9802c01e 	bne	r19,zero,80112a0 <___vfiprintf_internal_r+0x14e8>
 80107a0:	01420074 	movhi	r5,2049
 80107a4:	295fe404 	addi	r5,r5,32656
 80107a8:	d9402615 	stw	r5,152(sp)
 80107ac:	8880080c 	andi	r2,r17,32
 80107b0:	103f541e 	bne	r2,zero,8010504 <__alt_data_end+0xfc010504>
 80107b4:	8880040c 	andi	r2,r17,16
 80107b8:	1001f226 	beq	r2,zero,8010f84 <___vfiprintf_internal_r+0x11cc>
 80107bc:	d9402217 	ldw	r5,136(sp)
 80107c0:	0029883a 	mov	r20,zero
 80107c4:	2cc00017 	ldw	r19,0(r5)
 80107c8:	29400104 	addi	r5,r5,4
 80107cc:	d9402215 	stw	r5,136(sp)
 80107d0:	003f5106 	br	8010518 <__alt_data_end+0xfc010518>
 80107d4:	d8c02217 	ldw	r3,136(sp)
 80107d8:	b811883a 	mov	r8,r23
 80107dc:	d8001d85 	stb	zero,118(sp)
 80107e0:	1dc00017 	ldw	r23,0(r3)
 80107e4:	1f000104 	addi	fp,r3,4
 80107e8:	b8025926 	beq	r23,zero,8011150 <___vfiprintf_internal_r+0x1398>
 80107ec:	80023316 	blt	r16,zero,80110bc <___vfiprintf_internal_r+0x1304>
 80107f0:	800d883a 	mov	r6,r16
 80107f4:	000b883a 	mov	r5,zero
 80107f8:	b809883a 	mov	r4,r23
 80107fc:	da002a15 	stw	r8,168(sp)
 8010800:	800c9880 	call	800c988 <memchr>
 8010804:	da002a17 	ldw	r8,168(sp)
 8010808:	10026826 	beq	r2,zero,80111ac <___vfiprintf_internal_r+0x13f4>
 801080c:	15e9c83a 	sub	r20,r2,r23
 8010810:	dd401d83 	ldbu	r21,118(sp)
 8010814:	df002215 	stw	fp,136(sp)
 8010818:	0021883a 	mov	r16,zero
 801081c:	003e6906 	br	80101c4 <__alt_data_end+0xfc0101c4>
 8010820:	9cc03fcc 	andi	r19,r19,255
 8010824:	b811883a 	mov	r8,r23
 8010828:	983fc126 	beq	r19,zero,8010730 <__alt_data_end+0xfc010730>
 801082c:	d8c02303 	ldbu	r3,140(sp)
 8010830:	d8c01d85 	stb	r3,118(sp)
 8010834:	003fbe06 	br	8010730 <__alt_data_end+0xfc010730>
 8010838:	d9002217 	ldw	r4,136(sp)
 801083c:	d9402217 	ldw	r5,136(sp)
 8010840:	21000017 	ldw	r4,0(r4)
 8010844:	28800104 	addi	r2,r5,4
 8010848:	d9002515 	stw	r4,148(sp)
 801084c:	203e3d16 	blt	r4,zero,8010144 <__alt_data_end+0xfc010144>
 8010850:	d8802215 	stw	r2,136(sp)
 8010854:	b0c00007 	ldb	r3,0(r22)
 8010858:	003db406 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 801085c:	00c00ac4 	movi	r3,43
 8010860:	d8c02305 	stb	r3,140(sp)
 8010864:	04c00044 	movi	r19,1
 8010868:	b0c00007 	ldb	r3,0(r22)
 801086c:	003daf06 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010870:	b0c00007 	ldb	r3,0(r22)
 8010874:	01000a84 	movi	r4,42
 8010878:	b4000044 	addi	r16,r22,1
 801087c:	19025e26 	beq	r3,r4,80111f8 <___vfiprintf_internal_r+0x1440>
 8010880:	1f3ff404 	addi	fp,r3,-48
 8010884:	0009883a 	mov	r4,zero
 8010888:	af025236 	bltu	r21,fp,80111d4 <___vfiprintf_internal_r+0x141c>
 801088c:	01400284 	movi	r5,10
 8010890:	8004a540 	call	8004a54 <__mulsi3>
 8010894:	80c00007 	ldb	r3,0(r16)
 8010898:	1709883a 	add	r4,r2,fp
 801089c:	85800044 	addi	r22,r16,1
 80108a0:	1f3ff404 	addi	fp,r3,-48
 80108a4:	b021883a 	mov	r16,r22
 80108a8:	af3ff82e 	bgeu	r21,fp,801088c <__alt_data_end+0xfc01088c>
 80108ac:	2021883a 	mov	r16,r4
 80108b0:	203d9f0e 	bge	r4,zero,800ff30 <__alt_data_end+0xfc00ff30>
 80108b4:	043fffc4 	movi	r16,-1
 80108b8:	003d9d06 	br	800ff30 <__alt_data_end+0xfc00ff30>
 80108bc:	8c401014 	ori	r17,r17,64
 80108c0:	b0c00007 	ldb	r3,0(r22)
 80108c4:	003d9906 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 80108c8:	d9002217 	ldw	r4,136(sp)
 80108cc:	d8001d85 	stb	zero,118(sp)
 80108d0:	20c00204 	addi	r3,r4,8
 80108d4:	24c00017 	ldw	r19,0(r4)
 80108d8:	25000117 	ldw	r20,4(r4)
 80108dc:	8001e716 	blt	r16,zero,801107c <___vfiprintf_internal_r+0x12c4>
 80108e0:	013fdfc4 	movi	r4,-129
 80108e4:	9d04b03a 	or	r2,r19,r20
 80108e8:	d8c02215 	stw	r3,136(sp)
 80108ec:	8922703a 	and	r17,r17,r4
 80108f0:	002b883a 	mov	r21,zero
 80108f4:	103f2f1e 	bne	r2,zero,80105b4 <__alt_data_end+0xfc0105b4>
 80108f8:	803e2f26 	beq	r16,zero,80101b8 <__alt_data_end+0xfc0101b8>
 80108fc:	0027883a 	mov	r19,zero
 8010900:	9cc00c04 	addi	r19,r19,48
 8010904:	dcc019c5 	stb	r19,103(sp)
 8010908:	dd002817 	ldw	r20,160(sp)
 801090c:	ddc019c4 	addi	r23,sp,103
 8010910:	003e2c06 	br	80101c4 <__alt_data_end+0xfc0101c4>
 8010914:	9cc03fcc 	andi	r19,r19,255
 8010918:	b811883a 	mov	r8,r23
 801091c:	9802571e 	bne	r19,zero,801127c <___vfiprintf_internal_r+0x14c4>
 8010920:	18005726 	beq	r3,zero,8010a80 <___vfiprintf_internal_r+0xcc8>
 8010924:	04c00044 	movi	r19,1
 8010928:	d8c01005 	stb	r3,64(sp)
 801092c:	d8001d85 	stb	zero,118(sp)
 8010930:	9829883a 	mov	r20,r19
 8010934:	ddc01004 	addi	r23,sp,64
 8010938:	003f0a06 	br	8010564 <__alt_data_end+0xfc010564>
 801093c:	d9402017 	ldw	r5,128(sp)
 8010940:	d9002117 	ldw	r4,132(sp)
 8010944:	d9801a04 	addi	r6,sp,104
 8010948:	da802a15 	stw	r10,168(sp)
 801094c:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010950:	da802a17 	ldw	r10,168(sp)
 8010954:	1000501e 	bne	r2,zero,8010a98 <___vfiprintf_internal_r+0xce0>
 8010958:	d9801b17 	ldw	r6,108(sp)
 801095c:	d8801c17 	ldw	r2,112(sp)
 8010960:	d811883a 	mov	r8,sp
 8010964:	31000044 	addi	r4,r6,1
 8010968:	003e3606 	br	8010244 <__alt_data_end+0xfc010244>
 801096c:	d9001b17 	ldw	r4,108(sp)
 8010970:	d8801c17 	ldw	r2,112(sp)
 8010974:	21400044 	addi	r5,r4,1
 8010978:	d9801d87 	ldb	r6,118(sp)
 801097c:	303e5226 	beq	r6,zero,80102c8 <__alt_data_end+0xfc0102c8>
 8010980:	01800044 	movi	r6,1
 8010984:	d9001d84 	addi	r4,sp,118
 8010988:	1185883a 	add	r2,r2,r6
 801098c:	41000015 	stw	r4,0(r8)
 8010990:	41800115 	stw	r6,4(r8)
 8010994:	d8801c15 	stw	r2,112(sp)
 8010998:	d9401b15 	stw	r5,108(sp)
 801099c:	010001c4 	movi	r4,7
 80109a0:	2140b00e 	bge	r4,r5,8010c64 <___vfiprintf_internal_r+0xeac>
 80109a4:	1000f61e 	bne	r2,zero,8010d80 <___vfiprintf_internal_r+0xfc8>
 80109a8:	3800b31e 	bne	r7,zero,8010c78 <___vfiprintf_internal_r+0xec0>
 80109ac:	0009883a 	mov	r4,zero
 80109b0:	300b883a 	mov	r5,r6
 80109b4:	d811883a 	mov	r8,sp
 80109b8:	01802004 	movi	r6,128
 80109bc:	19be5226 	beq	r3,r6,8010308 <__alt_data_end+0xfc010308>
 80109c0:	8521c83a 	sub	r16,r16,r20
 80109c4:	043e790e 	bge	zero,r16,80103ac <__alt_data_end+0xfc0103ac>
 80109c8:	05400404 	movi	r21,16
 80109cc:	ac01b00e 	bge	r21,r16,8011090 <___vfiprintf_internal_r+0x12d8>
 80109d0:	014200b4 	movhi	r5,2050
 80109d4:	29605a04 	addi	r5,r5,-32408
 80109d8:	d9402315 	stw	r5,140(sp)
 80109dc:	070001c4 	movi	fp,7
 80109e0:	00000506 	br	80109f8 <___vfiprintf_internal_r+0xc40>
 80109e4:	21400084 	addi	r5,r4,2
 80109e8:	42000204 	addi	r8,r8,8
 80109ec:	1809883a 	mov	r4,r3
 80109f0:	843ffc04 	addi	r16,r16,-16
 80109f4:	ac000d0e 	bge	r21,r16,8010a2c <___vfiprintf_internal_r+0xc74>
 80109f8:	10800404 	addi	r2,r2,16
 80109fc:	20c00044 	addi	r3,r4,1
 8010a00:	44800015 	stw	r18,0(r8)
 8010a04:	45400115 	stw	r21,4(r8)
 8010a08:	d8801c15 	stw	r2,112(sp)
 8010a0c:	d8c01b15 	stw	r3,108(sp)
 8010a10:	e0fff40e 	bge	fp,r3,80109e4 <__alt_data_end+0xfc0109e4>
 8010a14:	1000101e 	bne	r2,zero,8010a58 <___vfiprintf_internal_r+0xca0>
 8010a18:	843ffc04 	addi	r16,r16,-16
 8010a1c:	01400044 	movi	r5,1
 8010a20:	0009883a 	mov	r4,zero
 8010a24:	d811883a 	mov	r8,sp
 8010a28:	ac3ff316 	blt	r21,r16,80109f8 <__alt_data_end+0xfc0109f8>
 8010a2c:	d8c02317 	ldw	r3,140(sp)
 8010a30:	1405883a 	add	r2,r2,r16
 8010a34:	44000115 	stw	r16,4(r8)
 8010a38:	40c00015 	stw	r3,0(r8)
 8010a3c:	d8801c15 	stw	r2,112(sp)
 8010a40:	d9401b15 	stw	r5,108(sp)
 8010a44:	00c001c4 	movi	r3,7
 8010a48:	19401916 	blt	r3,r5,8010ab0 <___vfiprintf_internal_r+0xcf8>
 8010a4c:	42000204 	addi	r8,r8,8
 8010a50:	29400044 	addi	r5,r5,1
 8010a54:	003e5506 	br	80103ac <__alt_data_end+0xfc0103ac>
 8010a58:	d9402017 	ldw	r5,128(sp)
 8010a5c:	d9002117 	ldw	r4,132(sp)
 8010a60:	d9801a04 	addi	r6,sp,104
 8010a64:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010a68:	10000b1e 	bne	r2,zero,8010a98 <___vfiprintf_internal_r+0xce0>
 8010a6c:	d9001b17 	ldw	r4,108(sp)
 8010a70:	d8801c17 	ldw	r2,112(sp)
 8010a74:	d811883a 	mov	r8,sp
 8010a78:	21400044 	addi	r5,r4,1
 8010a7c:	003fdc06 	br	80109f0 <__alt_data_end+0xfc0109f0>
 8010a80:	d8801c17 	ldw	r2,112(sp)
 8010a84:	10000426 	beq	r2,zero,8010a98 <___vfiprintf_internal_r+0xce0>
 8010a88:	d9402017 	ldw	r5,128(sp)
 8010a8c:	d9002117 	ldw	r4,132(sp)
 8010a90:	d9801a04 	addi	r6,sp,104
 8010a94:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010a98:	d9402017 	ldw	r5,128(sp)
 8010a9c:	2880030b 	ldhu	r2,12(r5)
 8010aa0:	1080100c 	andi	r2,r2,64
 8010aa4:	10014d1e 	bne	r2,zero,8010fdc <___vfiprintf_internal_r+0x1224>
 8010aa8:	d8802417 	ldw	r2,144(sp)
 8010aac:	003d9706 	br	801010c <__alt_data_end+0xfc01010c>
 8010ab0:	1000d21e 	bne	r2,zero,8010dfc <___vfiprintf_internal_r+0x1044>
 8010ab4:	00c00044 	movi	r3,1
 8010ab8:	a005883a 	mov	r2,r20
 8010abc:	ddc00015 	stw	r23,0(sp)
 8010ac0:	dd000115 	stw	r20,4(sp)
 8010ac4:	dd001c15 	stw	r20,112(sp)
 8010ac8:	d8c01b15 	stw	r3,108(sp)
 8010acc:	d811883a 	mov	r8,sp
 8010ad0:	42000204 	addi	r8,r8,8
 8010ad4:	8c40010c 	andi	r17,r17,4
 8010ad8:	88004026 	beq	r17,zero,8010bdc <___vfiprintf_internal_r+0xe24>
 8010adc:	d9002517 	ldw	r4,148(sp)
 8010ae0:	24e3c83a 	sub	r17,r4,r19
 8010ae4:	04403d0e 	bge	zero,r17,8010bdc <___vfiprintf_internal_r+0xe24>
 8010ae8:	04000404 	movi	r16,16
 8010aec:	8441a90e 	bge	r16,r17,8011194 <___vfiprintf_internal_r+0x13dc>
 8010af0:	00c200b4 	movhi	r3,2050
 8010af4:	18e05e04 	addi	r3,r3,-32392
 8010af8:	d9001b17 	ldw	r4,108(sp)
 8010afc:	d8c02315 	stw	r3,140(sp)
 8010b00:	050001c4 	movi	r20,7
 8010b04:	dd402117 	ldw	r21,132(sp)
 8010b08:	ddc02017 	ldw	r23,128(sp)
 8010b0c:	00000506 	br	8010b24 <___vfiprintf_internal_r+0xd6c>
 8010b10:	21400084 	addi	r5,r4,2
 8010b14:	42000204 	addi	r8,r8,8
 8010b18:	1809883a 	mov	r4,r3
 8010b1c:	8c7ffc04 	addi	r17,r17,-16
 8010b20:	84400f0e 	bge	r16,r17,8010b60 <___vfiprintf_internal_r+0xda8>
 8010b24:	014200b4 	movhi	r5,2050
 8010b28:	10800404 	addi	r2,r2,16
 8010b2c:	20c00044 	addi	r3,r4,1
 8010b30:	29605e04 	addi	r5,r5,-32392
 8010b34:	41400015 	stw	r5,0(r8)
 8010b38:	44000115 	stw	r16,4(r8)
 8010b3c:	d8801c15 	stw	r2,112(sp)
 8010b40:	d8c01b15 	stw	r3,108(sp)
 8010b44:	a0fff20e 	bge	r20,r3,8010b10 <__alt_data_end+0xfc010b10>
 8010b48:	1000141e 	bne	r2,zero,8010b9c <___vfiprintf_internal_r+0xde4>
 8010b4c:	8c7ffc04 	addi	r17,r17,-16
 8010b50:	01400044 	movi	r5,1
 8010b54:	0009883a 	mov	r4,zero
 8010b58:	d811883a 	mov	r8,sp
 8010b5c:	847ff116 	blt	r16,r17,8010b24 <__alt_data_end+0xfc010b24>
 8010b60:	d8c02317 	ldw	r3,140(sp)
 8010b64:	1445883a 	add	r2,r2,r17
 8010b68:	44400115 	stw	r17,4(r8)
 8010b6c:	40c00015 	stw	r3,0(r8)
 8010b70:	d8801c15 	stw	r2,112(sp)
 8010b74:	d9401b15 	stw	r5,108(sp)
 8010b78:	00c001c4 	movi	r3,7
 8010b7c:	1940170e 	bge	r3,r5,8010bdc <___vfiprintf_internal_r+0xe24>
 8010b80:	1000101e 	bne	r2,zero,8010bc4 <___vfiprintf_internal_r+0xe0c>
 8010b84:	d8802517 	ldw	r2,148(sp)
 8010b88:	14c11616 	blt	r2,r19,8010fe4 <___vfiprintf_internal_r+0x122c>
 8010b8c:	d9002417 	ldw	r4,144(sp)
 8010b90:	2089883a 	add	r4,r4,r2
 8010b94:	d9002415 	stw	r4,144(sp)
 8010b98:	003e1806 	br	80103fc <__alt_data_end+0xfc0103fc>
 8010b9c:	d9801a04 	addi	r6,sp,104
 8010ba0:	b80b883a 	mov	r5,r23
 8010ba4:	a809883a 	mov	r4,r21
 8010ba8:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010bac:	103fba1e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010bb0:	d9001b17 	ldw	r4,108(sp)
 8010bb4:	d8801c17 	ldw	r2,112(sp)
 8010bb8:	d811883a 	mov	r8,sp
 8010bbc:	21400044 	addi	r5,r4,1
 8010bc0:	003fd606 	br	8010b1c <__alt_data_end+0xfc010b1c>
 8010bc4:	d9402017 	ldw	r5,128(sp)
 8010bc8:	d9002117 	ldw	r4,132(sp)
 8010bcc:	d9801a04 	addi	r6,sp,104
 8010bd0:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010bd4:	103fb01e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010bd8:	d8801c17 	ldw	r2,112(sp)
 8010bdc:	d8c02517 	ldw	r3,148(sp)
 8010be0:	1cc0010e 	bge	r3,r19,8010be8 <___vfiprintf_internal_r+0xe30>
 8010be4:	9807883a 	mov	r3,r19
 8010be8:	d9002417 	ldw	r4,144(sp)
 8010bec:	20c9883a 	add	r4,r4,r3
 8010bf0:	d9002415 	stw	r4,144(sp)
 8010bf4:	103e0126 	beq	r2,zero,80103fc <__alt_data_end+0xfc0103fc>
 8010bf8:	d9402017 	ldw	r5,128(sp)
 8010bfc:	d9002117 	ldw	r4,132(sp)
 8010c00:	d9801a04 	addi	r6,sp,104
 8010c04:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010c08:	103dfc26 	beq	r2,zero,80103fc <__alt_data_end+0xfc0103fc>
 8010c0c:	003fa206 	br	8010a98 <__alt_data_end+0xfc010a98>
 8010c10:	d9402017 	ldw	r5,128(sp)
 8010c14:	d9002117 	ldw	r4,132(sp)
 8010c18:	d9801a04 	addi	r6,sp,104
 8010c1c:	d9c02b15 	stw	r7,172(sp)
 8010c20:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010c24:	d9c02b17 	ldw	r7,172(sp)
 8010c28:	103f9b1e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010c2c:	d9001b17 	ldw	r4,108(sp)
 8010c30:	d8801c17 	ldw	r2,112(sp)
 8010c34:	d811883a 	mov	r8,sp
 8010c38:	21800044 	addi	r6,r4,1
 8010c3c:	003dbf06 	br	801033c <__alt_data_end+0xfc01033c>
 8010c40:	1000d81e 	bne	r2,zero,8010fa4 <___vfiprintf_internal_r+0x11ec>
 8010c44:	d9001d87 	ldb	r4,118(sp)
 8010c48:	20000a26 	beq	r4,zero,8010c74 <___vfiprintf_internal_r+0xebc>
 8010c4c:	00800044 	movi	r2,1
 8010c50:	d9001d84 	addi	r4,sp,118
 8010c54:	100b883a 	mov	r5,r2
 8010c58:	d9000015 	stw	r4,0(sp)
 8010c5c:	d8800115 	stw	r2,4(sp)
 8010c60:	d811883a 	mov	r8,sp
 8010c64:	2809883a 	mov	r4,r5
 8010c68:	42000204 	addi	r8,r8,8
 8010c6c:	29400044 	addi	r5,r5,1
 8010c70:	003d9506 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010c74:	3800fd26 	beq	r7,zero,801106c <___vfiprintf_internal_r+0x12b4>
 8010c78:	00800084 	movi	r2,2
 8010c7c:	d9001d04 	addi	r4,sp,116
 8010c80:	d9000015 	stw	r4,0(sp)
 8010c84:	d8800115 	stw	r2,4(sp)
 8010c88:	01400044 	movi	r5,1
 8010c8c:	d811883a 	mov	r8,sp
 8010c90:	2809883a 	mov	r4,r5
 8010c94:	42000204 	addi	r8,r8,8
 8010c98:	29400044 	addi	r5,r5,1
 8010c9c:	003f4606 	br	80109b8 <__alt_data_end+0xfc0109b8>
 8010ca0:	d8802517 	ldw	r2,148(sp)
 8010ca4:	14c0010e 	bge	r2,r19,8010cac <___vfiprintf_internal_r+0xef4>
 8010ca8:	9805883a 	mov	r2,r19
 8010cac:	d9402417 	ldw	r5,144(sp)
 8010cb0:	288b883a 	add	r5,r5,r2
 8010cb4:	d9402415 	stw	r5,144(sp)
 8010cb8:	003dd006 	br	80103fc <__alt_data_end+0xfc0103fc>
 8010cbc:	d8001d85 	stb	zero,118(sp)
 8010cc0:	80005d16 	blt	r16,zero,8010e38 <___vfiprintf_internal_r+0x1080>
 8010cc4:	00ffdfc4 	movi	r3,-129
 8010cc8:	9d04b03a 	or	r2,r19,r20
 8010ccc:	88e2703a 	and	r17,r17,r3
 8010cd0:	103d3726 	beq	r2,zero,80101b0 <__alt_data_end+0xfc0101b0>
 8010cd4:	002b883a 	mov	r21,zero
 8010cd8:	d9002617 	ldw	r4,152(sp)
 8010cdc:	ddc01a04 	addi	r23,sp,104
 8010ce0:	988003cc 	andi	r2,r19,15
 8010ce4:	a006973a 	slli	r3,r20,28
 8010ce8:	2085883a 	add	r2,r4,r2
 8010cec:	9826d13a 	srli	r19,r19,4
 8010cf0:	10800003 	ldbu	r2,0(r2)
 8010cf4:	a028d13a 	srli	r20,r20,4
 8010cf8:	bdffffc4 	addi	r23,r23,-1
 8010cfc:	1ce6b03a 	or	r19,r3,r19
 8010d00:	b8800005 	stb	r2,0(r23)
 8010d04:	9d04b03a 	or	r2,r19,r20
 8010d08:	103ff51e 	bne	r2,zero,8010ce0 <__alt_data_end+0xfc010ce0>
 8010d0c:	d8801e17 	ldw	r2,120(sp)
 8010d10:	15e9c83a 	sub	r20,r2,r23
 8010d14:	003d2b06 	br	80101c4 <__alt_data_end+0xfc0101c4>
 8010d18:	d9402017 	ldw	r5,128(sp)
 8010d1c:	d9002117 	ldw	r4,132(sp)
 8010d20:	d9801a04 	addi	r6,sp,104
 8010d24:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010d28:	103f5b1e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010d2c:	d8801c17 	ldw	r2,112(sp)
 8010d30:	d811883a 	mov	r8,sp
 8010d34:	003f6706 	br	8010ad4 <__alt_data_end+0xfc010ad4>
 8010d38:	d9402017 	ldw	r5,128(sp)
 8010d3c:	d9002117 	ldw	r4,132(sp)
 8010d40:	d9801a04 	addi	r6,sp,104
 8010d44:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010d48:	103f531e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010d4c:	d811883a 	mov	r8,sp
 8010d50:	003cd906 	br	80100b8 <__alt_data_end+0xfc0100b8>
 8010d54:	10803fcc 	andi	r2,r2,255
 8010d58:	1080201c 	xori	r2,r2,128
 8010d5c:	10bfe004 	addi	r2,r2,-128
 8010d60:	00c00c04 	movi	r3,48
 8010d64:	10ffe926 	beq	r2,r3,8010d0c <__alt_data_end+0xfc010d0c>
 8010d68:	b8ffffc5 	stb	r3,-1(r23)
 8010d6c:	d8c01e17 	ldw	r3,120(sp)
 8010d70:	b8bfffc4 	addi	r2,r23,-1
 8010d74:	102f883a 	mov	r23,r2
 8010d78:	18a9c83a 	sub	r20,r3,r2
 8010d7c:	003d1106 	br	80101c4 <__alt_data_end+0xfc0101c4>
 8010d80:	d9402017 	ldw	r5,128(sp)
 8010d84:	d9002117 	ldw	r4,132(sp)
 8010d88:	d9801a04 	addi	r6,sp,104
 8010d8c:	d8c02a15 	stw	r3,168(sp)
 8010d90:	d9c02b15 	stw	r7,172(sp)
 8010d94:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010d98:	d8c02a17 	ldw	r3,168(sp)
 8010d9c:	d9c02b17 	ldw	r7,172(sp)
 8010da0:	103f3d1e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010da4:	d9001b17 	ldw	r4,108(sp)
 8010da8:	d8801c17 	ldw	r2,112(sp)
 8010dac:	d811883a 	mov	r8,sp
 8010db0:	21400044 	addi	r5,r4,1
 8010db4:	003d4406 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010db8:	d9402017 	ldw	r5,128(sp)
 8010dbc:	d9002117 	ldw	r4,132(sp)
 8010dc0:	d9801a04 	addi	r6,sp,104
 8010dc4:	d8c02a15 	stw	r3,168(sp)
 8010dc8:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010dcc:	d8c02a17 	ldw	r3,168(sp)
 8010dd0:	103f311e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010dd4:	d9001b17 	ldw	r4,108(sp)
 8010dd8:	d8801c17 	ldw	r2,112(sp)
 8010ddc:	d811883a 	mov	r8,sp
 8010de0:	21400044 	addi	r5,r4,1
 8010de4:	003ef406 	br	80109b8 <__alt_data_end+0xfc0109b8>
 8010de8:	1000bd1e 	bne	r2,zero,80110e0 <___vfiprintf_internal_r+0x1328>
 8010dec:	01400044 	movi	r5,1
 8010df0:	0009883a 	mov	r4,zero
 8010df4:	d811883a 	mov	r8,sp
 8010df8:	003ef106 	br	80109c0 <__alt_data_end+0xfc0109c0>
 8010dfc:	d9402017 	ldw	r5,128(sp)
 8010e00:	d9002117 	ldw	r4,132(sp)
 8010e04:	d9801a04 	addi	r6,sp,104
 8010e08:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010e0c:	103f221e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010e10:	d9401b17 	ldw	r5,108(sp)
 8010e14:	d8801c17 	ldw	r2,112(sp)
 8010e18:	d811883a 	mov	r8,sp
 8010e1c:	29400044 	addi	r5,r5,1
 8010e20:	003d6206 	br	80103ac <__alt_data_end+0xfc0103ac>
 8010e24:	01420074 	movhi	r5,2049
 8010e28:	295fe904 	addi	r5,r5,32676
 8010e2c:	d9402615 	stw	r5,152(sp)
 8010e30:	d8c02215 	stw	r3,136(sp)
 8010e34:	1023883a 	mov	r17,r2
 8010e38:	9d04b03a 	or	r2,r19,r20
 8010e3c:	103fa51e 	bne	r2,zero,8010cd4 <__alt_data_end+0xfc010cd4>
 8010e40:	002b883a 	mov	r21,zero
 8010e44:	00800084 	movi	r2,2
 8010e48:	003e4a06 	br	8010774 <__alt_data_end+0xfc010774>
 8010e4c:	01420074 	movhi	r5,2049
 8010e50:	295fe904 	addi	r5,r5,32676
 8010e54:	002b883a 	mov	r21,zero
 8010e58:	d9402615 	stw	r5,152(sp)
 8010e5c:	003f9e06 	br	8010cd8 <__alt_data_end+0xfc010cd8>
 8010e60:	d9402217 	ldw	r5,136(sp)
 8010e64:	d8001d85 	stb	zero,118(sp)
 8010e68:	0029883a 	mov	r20,zero
 8010e6c:	28800104 	addi	r2,r5,4
 8010e70:	2cc00017 	ldw	r19,0(r5)
 8010e74:	803e3a16 	blt	r16,zero,8010760 <__alt_data_end+0xfc010760>
 8010e78:	00ffdfc4 	movi	r3,-129
 8010e7c:	d8802215 	stw	r2,136(sp)
 8010e80:	88e2703a 	and	r17,r17,r3
 8010e84:	002b883a 	mov	r21,zero
 8010e88:	983e9b26 	beq	r19,zero,80108f8 <__alt_data_end+0xfc0108f8>
 8010e8c:	00800244 	movi	r2,9
 8010e90:	14fdc936 	bltu	r2,r19,80105b8 <__alt_data_end+0xfc0105b8>
 8010e94:	003e9a06 	br	8010900 <__alt_data_end+0xfc010900>
 8010e98:	00800c04 	movi	r2,48
 8010e9c:	d8c01d45 	stb	r3,117(sp)
 8010ea0:	d8801d05 	stb	r2,116(sp)
 8010ea4:	d8001d85 	stb	zero,118(sp)
 8010ea8:	88c00094 	ori	r3,r17,2
 8010eac:	80009c16 	blt	r16,zero,8011120 <___vfiprintf_internal_r+0x1368>
 8010eb0:	00bfdfc4 	movi	r2,-129
 8010eb4:	88a2703a 	and	r17,r17,r2
 8010eb8:	8c400094 	ori	r17,r17,2
 8010ebc:	002b883a 	mov	r21,zero
 8010ec0:	003f8506 	br	8010cd8 <__alt_data_end+0xfc010cd8>
 8010ec4:	b029883a 	mov	r20,r22
 8010ec8:	003c0b06 	br	800fef8 <__alt_data_end+0xfc00fef8>
 8010ecc:	04e7c83a 	sub	r19,zero,r19
 8010ed0:	05400b44 	movi	r21,45
 8010ed4:	9804c03a 	cmpne	r2,r19,zero
 8010ed8:	0529c83a 	sub	r20,zero,r20
 8010edc:	dd401d85 	stb	r21,118(sp)
 8010ee0:	a0a9c83a 	sub	r20,r20,r2
 8010ee4:	80009716 	blt	r16,zero,8011144 <___vfiprintf_internal_r+0x138c>
 8010ee8:	00bfdfc4 	movi	r2,-129
 8010eec:	88a2703a 	and	r17,r17,r2
 8010ef0:	003db006 	br	80105b4 <__alt_data_end+0xfc0105b4>
 8010ef4:	b0c00007 	ldb	r3,0(r22)
 8010ef8:	003c0c06 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 8010efc:	8880100c 	andi	r2,r17,64
 8010f00:	d8001d85 	stb	zero,118(sp)
 8010f04:	1000461e 	bne	r2,zero,8011020 <___vfiprintf_internal_r+0x1268>
 8010f08:	d9002217 	ldw	r4,136(sp)
 8010f0c:	0029883a 	mov	r20,zero
 8010f10:	20800104 	addi	r2,r4,4
 8010f14:	24c00017 	ldw	r19,0(r4)
 8010f18:	803df80e 	bge	r16,zero,80106fc <__alt_data_end+0xfc0106fc>
 8010f1c:	9d06b03a 	or	r3,r19,r20
 8010f20:	d8802215 	stw	r2,136(sp)
 8010f24:	183d5e1e 	bne	r3,zero,80104a0 <__alt_data_end+0xfc0104a0>
 8010f28:	002b883a 	mov	r21,zero
 8010f2c:	0005883a 	mov	r2,zero
 8010f30:	003e1006 	br	8010774 <__alt_data_end+0xfc010774>
 8010f34:	8880040c 	andi	r2,r17,16
 8010f38:	1000321e 	bne	r2,zero,8011004 <___vfiprintf_internal_r+0x124c>
 8010f3c:	8c40100c 	andi	r17,r17,64
 8010f40:	88008d26 	beq	r17,zero,8011178 <___vfiprintf_internal_r+0x13c0>
 8010f44:	d9402217 	ldw	r5,136(sp)
 8010f48:	d8c02417 	ldw	r3,144(sp)
 8010f4c:	28800017 	ldw	r2,0(r5)
 8010f50:	29400104 	addi	r5,r5,4
 8010f54:	d9402215 	stw	r5,136(sp)
 8010f58:	10c0000d 	sth	r3,0(r2)
 8010f5c:	003bca06 	br	800fe88 <__alt_data_end+0xfc00fe88>
 8010f60:	8880100c 	andi	r2,r17,64
 8010f64:	10003a26 	beq	r2,zero,8011050 <___vfiprintf_internal_r+0x1298>
 8010f68:	d8802217 	ldw	r2,136(sp)
 8010f6c:	14c0000f 	ldh	r19,0(r2)
 8010f70:	10800104 	addi	r2,r2,4
 8010f74:	d8802215 	stw	r2,136(sp)
 8010f78:	9829d7fa 	srai	r20,r19,31
 8010f7c:	a005883a 	mov	r2,r20
 8010f80:	003d8506 	br	8010598 <__alt_data_end+0xfc010598>
 8010f84:	8880100c 	andi	r2,r17,64
 8010f88:	10002b26 	beq	r2,zero,8011038 <___vfiprintf_internal_r+0x1280>
 8010f8c:	d8802217 	ldw	r2,136(sp)
 8010f90:	0029883a 	mov	r20,zero
 8010f94:	14c0000b 	ldhu	r19,0(r2)
 8010f98:	10800104 	addi	r2,r2,4
 8010f9c:	d8802215 	stw	r2,136(sp)
 8010fa0:	003d5d06 	br	8010518 <__alt_data_end+0xfc010518>
 8010fa4:	d9402017 	ldw	r5,128(sp)
 8010fa8:	d9002117 	ldw	r4,132(sp)
 8010fac:	d9801a04 	addi	r6,sp,104
 8010fb0:	d8c02a15 	stw	r3,168(sp)
 8010fb4:	d9c02b15 	stw	r7,172(sp)
 8010fb8:	800fca40 	call	800fca4 <__sprint_r.part.0>
 8010fbc:	d8c02a17 	ldw	r3,168(sp)
 8010fc0:	d9c02b17 	ldw	r7,172(sp)
 8010fc4:	103eb41e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 8010fc8:	d9001b17 	ldw	r4,108(sp)
 8010fcc:	d8801c17 	ldw	r2,112(sp)
 8010fd0:	d811883a 	mov	r8,sp
 8010fd4:	21400044 	addi	r5,r4,1
 8010fd8:	003e6706 	br	8010978 <__alt_data_end+0xfc010978>
 8010fdc:	00bfffc4 	movi	r2,-1
 8010fe0:	003c4a06 	br	801010c <__alt_data_end+0xfc01010c>
 8010fe4:	9805883a 	mov	r2,r19
 8010fe8:	003ee806 	br	8010b8c <__alt_data_end+0xfc010b8c>
 8010fec:	d8c02217 	ldw	r3,136(sp)
 8010ff0:	0029883a 	mov	r20,zero
 8010ff4:	18800104 	addi	r2,r3,4
 8010ff8:	1cc0000b 	ldhu	r19,0(r3)
 8010ffc:	803f9e0e 	bge	r16,zero,8010e78 <__alt_data_end+0xfc010e78>
 8011000:	003dd706 	br	8010760 <__alt_data_end+0xfc010760>
 8011004:	d8c02217 	ldw	r3,136(sp)
 8011008:	d9002417 	ldw	r4,144(sp)
 801100c:	18800017 	ldw	r2,0(r3)
 8011010:	18c00104 	addi	r3,r3,4
 8011014:	d8c02215 	stw	r3,136(sp)
 8011018:	11000015 	stw	r4,0(r2)
 801101c:	003b9a06 	br	800fe88 <__alt_data_end+0xfc00fe88>
 8011020:	d8c02217 	ldw	r3,136(sp)
 8011024:	0029883a 	mov	r20,zero
 8011028:	18800104 	addi	r2,r3,4
 801102c:	1cc0000b 	ldhu	r19,0(r3)
 8011030:	803db20e 	bge	r16,zero,80106fc <__alt_data_end+0xfc0106fc>
 8011034:	003fb906 	br	8010f1c <__alt_data_end+0xfc010f1c>
 8011038:	d9002217 	ldw	r4,136(sp)
 801103c:	0029883a 	mov	r20,zero
 8011040:	24c00017 	ldw	r19,0(r4)
 8011044:	21000104 	addi	r4,r4,4
 8011048:	d9002215 	stw	r4,136(sp)
 801104c:	003d3206 	br	8010518 <__alt_data_end+0xfc010518>
 8011050:	d8c02217 	ldw	r3,136(sp)
 8011054:	1cc00017 	ldw	r19,0(r3)
 8011058:	18c00104 	addi	r3,r3,4
 801105c:	d8c02215 	stw	r3,136(sp)
 8011060:	9829d7fa 	srai	r20,r19,31
 8011064:	a005883a 	mov	r2,r20
 8011068:	003d4b06 	br	8010598 <__alt_data_end+0xfc010598>
 801106c:	0009883a 	mov	r4,zero
 8011070:	01400044 	movi	r5,1
 8011074:	d811883a 	mov	r8,sp
 8011078:	003e4f06 	br	80109b8 <__alt_data_end+0xfc0109b8>
 801107c:	d8c02215 	stw	r3,136(sp)
 8011080:	002b883a 	mov	r21,zero
 8011084:	003db806 	br	8010768 <__alt_data_end+0xfc010768>
 8011088:	d811883a 	mov	r8,sp
 801108c:	003e9606 	br	8010ae8 <__alt_data_end+0xfc010ae8>
 8011090:	010200b4 	movhi	r4,2050
 8011094:	21205a04 	addi	r4,r4,-32408
 8011098:	d9002315 	stw	r4,140(sp)
 801109c:	003e6306 	br	8010a2c <__alt_data_end+0xfc010a2c>
 80110a0:	b0c00043 	ldbu	r3,1(r22)
 80110a4:	8c400814 	ori	r17,r17,32
 80110a8:	b5800044 	addi	r22,r22,1
 80110ac:	18c03fcc 	andi	r3,r3,255
 80110b0:	18c0201c 	xori	r3,r3,128
 80110b4:	18ffe004 	addi	r3,r3,-128
 80110b8:	003b9c06 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 80110bc:	b809883a 	mov	r4,r23
 80110c0:	da002a15 	stw	r8,168(sp)
 80110c4:	8004cfc0 	call	8004cfc <strlen>
 80110c8:	1029883a 	mov	r20,r2
 80110cc:	dd401d83 	ldbu	r21,118(sp)
 80110d0:	df002215 	stw	fp,136(sp)
 80110d4:	0021883a 	mov	r16,zero
 80110d8:	da002a17 	ldw	r8,168(sp)
 80110dc:	003c3906 	br	80101c4 <__alt_data_end+0xfc0101c4>
 80110e0:	d9402017 	ldw	r5,128(sp)
 80110e4:	d9002117 	ldw	r4,132(sp)
 80110e8:	d9801a04 	addi	r6,sp,104
 80110ec:	800fca40 	call	800fca4 <__sprint_r.part.0>
 80110f0:	103e691e 	bne	r2,zero,8010a98 <__alt_data_end+0xfc010a98>
 80110f4:	d9001b17 	ldw	r4,108(sp)
 80110f8:	d8801c17 	ldw	r2,112(sp)
 80110fc:	d811883a 	mov	r8,sp
 8011100:	21400044 	addi	r5,r4,1
 8011104:	003e2e06 	br	80109c0 <__alt_data_end+0xfc0109c0>
 8011108:	010200b4 	movhi	r4,2050
 801110c:	21205e04 	addi	r4,r4,-32392
 8011110:	d9002315 	stw	r4,140(sp)
 8011114:	d9001b17 	ldw	r4,108(sp)
 8011118:	21000044 	addi	r4,r4,1
 801111c:	003c5e06 	br	8010298 <__alt_data_end+0xfc010298>
 8011120:	002b883a 	mov	r21,zero
 8011124:	00800084 	movi	r2,2
 8011128:	10803fcc 	andi	r2,r2,255
 801112c:	01000044 	movi	r4,1
 8011130:	11002b26 	beq	r2,r4,80111e0 <___vfiprintf_internal_r+0x1428>
 8011134:	01000084 	movi	r4,2
 8011138:	11002b1e 	bne	r2,r4,80111e8 <___vfiprintf_internal_r+0x1430>
 801113c:	1823883a 	mov	r17,r3
 8011140:	003ee506 	br	8010cd8 <__alt_data_end+0xfc010cd8>
 8011144:	8807883a 	mov	r3,r17
 8011148:	00800044 	movi	r2,1
 801114c:	003ff606 	br	8011128 <__alt_data_end+0xfc011128>
 8011150:	00800184 	movi	r2,6
 8011154:	1400012e 	bgeu	r2,r16,801115c <___vfiprintf_internal_r+0x13a4>
 8011158:	1021883a 	mov	r16,r2
 801115c:	8029883a 	mov	r20,r16
 8011160:	8027883a 	mov	r19,r16
 8011164:	80002216 	blt	r16,zero,80111f0 <___vfiprintf_internal_r+0x1438>
 8011168:	05c20074 	movhi	r23,2049
 801116c:	df002215 	stw	fp,136(sp)
 8011170:	bddfee04 	addi	r23,r23,32696
 8011174:	003cfb06 	br	8010564 <__alt_data_end+0xfc010564>
 8011178:	d9002217 	ldw	r4,136(sp)
 801117c:	d9402417 	ldw	r5,144(sp)
 8011180:	20800017 	ldw	r2,0(r4)
 8011184:	21000104 	addi	r4,r4,4
 8011188:	d9002215 	stw	r4,136(sp)
 801118c:	11400015 	stw	r5,0(r2)
 8011190:	003b3d06 	br	800fe88 <__alt_data_end+0xfc00fe88>
 8011194:	014200b4 	movhi	r5,2050
 8011198:	29605e04 	addi	r5,r5,-32392
 801119c:	d9402315 	stw	r5,140(sp)
 80111a0:	d9401b17 	ldw	r5,108(sp)
 80111a4:	29400044 	addi	r5,r5,1
 80111a8:	003e6d06 	br	8010b60 <__alt_data_end+0xfc010b60>
 80111ac:	8029883a 	mov	r20,r16
 80111b0:	dd401d83 	ldbu	r21,118(sp)
 80111b4:	df002215 	stw	fp,136(sp)
 80111b8:	0021883a 	mov	r16,zero
 80111bc:	003c0106 	br	80101c4 <__alt_data_end+0xfc0101c4>
 80111c0:	00c200b4 	movhi	r3,2050
 80111c4:	18e05a04 	addi	r3,r3,-32408
 80111c8:	d8c02315 	stw	r3,140(sp)
 80111cc:	280d883a 	mov	r6,r5
 80111d0:	003c6906 	br	8010378 <__alt_data_end+0xfc010378>
 80111d4:	802d883a 	mov	r22,r16
 80111d8:	0021883a 	mov	r16,zero
 80111dc:	003b5406 	br	800ff30 <__alt_data_end+0xfc00ff30>
 80111e0:	1823883a 	mov	r17,r3
 80111e4:	003cf306 	br	80105b4 <__alt_data_end+0xfc0105b4>
 80111e8:	1823883a 	mov	r17,r3
 80111ec:	003cad06 	br	80104a4 <__alt_data_end+0xfc0104a4>
 80111f0:	0027883a 	mov	r19,zero
 80111f4:	003fdc06 	br	8011168 <__alt_data_end+0xfc011168>
 80111f8:	d9402217 	ldw	r5,136(sp)
 80111fc:	8005883a 	mov	r2,r16
 8011200:	b0c00043 	ldbu	r3,1(r22)
 8011204:	2c000017 	ldw	r16,0(r5)
 8011208:	29000104 	addi	r4,r5,4
 801120c:	d9002215 	stw	r4,136(sp)
 8011210:	102d883a 	mov	r22,r2
 8011214:	803fa50e 	bge	r16,zero,80110ac <__alt_data_end+0xfc0110ac>
 8011218:	18c03fcc 	andi	r3,r3,255
 801121c:	18c0201c 	xori	r3,r3,128
 8011220:	043fffc4 	movi	r16,-1
 8011224:	18ffe004 	addi	r3,r3,-128
 8011228:	003b4006 	br	800ff2c <__alt_data_end+0xfc00ff2c>
 801122c:	d9402303 	ldbu	r5,140(sp)
 8011230:	d9401d85 	stb	r5,118(sp)
 8011234:	003cae06 	br	80104f0 <__alt_data_end+0xfc0104f0>
 8011238:	d8c02303 	ldbu	r3,140(sp)
 801123c:	d8c01d85 	stb	r3,118(sp)
 8011240:	003d1406 	br	8010694 <__alt_data_end+0xfc010694>
 8011244:	d8c02303 	ldbu	r3,140(sp)
 8011248:	d8c01d85 	stb	r3,118(sp)
 801124c:	003cca06 	br	8010578 <__alt_data_end+0xfc010578>
 8011250:	8880004c 	andi	r2,r17,1
 8011254:	002b883a 	mov	r21,zero
 8011258:	10000526 	beq	r2,zero,8011270 <___vfiprintf_internal_r+0x14b8>
 801125c:	00800c04 	movi	r2,48
 8011260:	d88019c5 	stb	r2,103(sp)
 8011264:	dd002817 	ldw	r20,160(sp)
 8011268:	ddc019c4 	addi	r23,sp,103
 801126c:	003bd506 	br	80101c4 <__alt_data_end+0xfc0101c4>
 8011270:	0029883a 	mov	r20,zero
 8011274:	ddc01a04 	addi	r23,sp,104
 8011278:	003bd206 	br	80101c4 <__alt_data_end+0xfc0101c4>
 801127c:	d9002303 	ldbu	r4,140(sp)
 8011280:	d9001d85 	stb	r4,118(sp)
 8011284:	003da606 	br	8010920 <__alt_data_end+0xfc010920>
 8011288:	d8c02303 	ldbu	r3,140(sp)
 801128c:	d8c01d85 	stb	r3,118(sp)
 8011290:	003c7606 	br	801046c <__alt_data_end+0xfc01046c>
 8011294:	d8c02303 	ldbu	r3,140(sp)
 8011298:	d8c01d85 	stb	r3,118(sp)
 801129c:	003c6506 	br	8010434 <__alt_data_end+0xfc010434>
 80112a0:	d9002303 	ldbu	r4,140(sp)
 80112a4:	d9001d85 	stb	r4,118(sp)
 80112a8:	003d3d06 	br	80107a0 <__alt_data_end+0xfc0107a0>
 80112ac:	d8c02303 	ldbu	r3,140(sp)
 80112b0:	d8c01d85 	stb	r3,118(sp)
 80112b4:	003d1d06 	br	801072c <__alt_data_end+0xfc01072c>
 80112b8:	d8c02303 	ldbu	r3,140(sp)
 80112bc:	d8c01d85 	stb	r3,118(sp)
 80112c0:	003d0306 	br	80106d0 <__alt_data_end+0xfc0106d0>

080112c4 <__vfiprintf_internal>:
 80112c4:	008200b4 	movhi	r2,2050
 80112c8:	10a80004 	addi	r2,r2,-24576
 80112cc:	300f883a 	mov	r7,r6
 80112d0:	280d883a 	mov	r6,r5
 80112d4:	200b883a 	mov	r5,r4
 80112d8:	11000017 	ldw	r4,0(r2)
 80112dc:	800fdb81 	jmpi	800fdb8 <___vfiprintf_internal_r>

080112e0 <__sbprintf>:
 80112e0:	2880030b 	ldhu	r2,12(r5)
 80112e4:	2ac01917 	ldw	r11,100(r5)
 80112e8:	2a80038b 	ldhu	r10,14(r5)
 80112ec:	2a400717 	ldw	r9,28(r5)
 80112f0:	2a000917 	ldw	r8,36(r5)
 80112f4:	defee204 	addi	sp,sp,-1144
 80112f8:	00c10004 	movi	r3,1024
 80112fc:	dc011a15 	stw	r16,1128(sp)
 8011300:	10bfff4c 	andi	r2,r2,65533
 8011304:	2821883a 	mov	r16,r5
 8011308:	d8cb883a 	add	r5,sp,r3
 801130c:	dc811c15 	stw	r18,1136(sp)
 8011310:	dc411b15 	stw	r17,1132(sp)
 8011314:	dfc11d15 	stw	ra,1140(sp)
 8011318:	2025883a 	mov	r18,r4
 801131c:	d881030d 	sth	r2,1036(sp)
 8011320:	dac11915 	stw	r11,1124(sp)
 8011324:	da81038d 	sth	r10,1038(sp)
 8011328:	da410715 	stw	r9,1052(sp)
 801132c:	da010915 	stw	r8,1060(sp)
 8011330:	dec10015 	stw	sp,1024(sp)
 8011334:	dec10415 	stw	sp,1040(sp)
 8011338:	d8c10215 	stw	r3,1032(sp)
 801133c:	d8c10515 	stw	r3,1044(sp)
 8011340:	d8010615 	stw	zero,1048(sp)
 8011344:	800fdb80 	call	800fdb8 <___vfiprintf_internal_r>
 8011348:	1023883a 	mov	r17,r2
 801134c:	10000416 	blt	r2,zero,8011360 <__sbprintf+0x80>
 8011350:	d9410004 	addi	r5,sp,1024
 8011354:	9009883a 	mov	r4,r18
 8011358:	800b0240 	call	800b024 <_fflush_r>
 801135c:	10000d1e 	bne	r2,zero,8011394 <__sbprintf+0xb4>
 8011360:	d881030b 	ldhu	r2,1036(sp)
 8011364:	1080100c 	andi	r2,r2,64
 8011368:	10000326 	beq	r2,zero,8011378 <__sbprintf+0x98>
 801136c:	8080030b 	ldhu	r2,12(r16)
 8011370:	10801014 	ori	r2,r2,64
 8011374:	8080030d 	sth	r2,12(r16)
 8011378:	8805883a 	mov	r2,r17
 801137c:	dfc11d17 	ldw	ra,1140(sp)
 8011380:	dc811c17 	ldw	r18,1136(sp)
 8011384:	dc411b17 	ldw	r17,1132(sp)
 8011388:	dc011a17 	ldw	r16,1128(sp)
 801138c:	dec11e04 	addi	sp,sp,1144
 8011390:	f800283a 	ret
 8011394:	047fffc4 	movi	r17,-1
 8011398:	003ff106 	br	8011360 <__alt_data_end+0xfc011360>

0801139c <_write_r>:
 801139c:	defffd04 	addi	sp,sp,-12
 80113a0:	2805883a 	mov	r2,r5
 80113a4:	dc000015 	stw	r16,0(sp)
 80113a8:	040200b4 	movhi	r16,2050
 80113ac:	dc400115 	stw	r17,4(sp)
 80113b0:	300b883a 	mov	r5,r6
 80113b4:	842f7e04 	addi	r16,r16,-16904
 80113b8:	2023883a 	mov	r17,r4
 80113bc:	380d883a 	mov	r6,r7
 80113c0:	1009883a 	mov	r4,r2
 80113c4:	dfc00215 	stw	ra,8(sp)
 80113c8:	80000015 	stw	zero,0(r16)
 80113cc:	8015cc00 	call	8015cc0 <write>
 80113d0:	00ffffc4 	movi	r3,-1
 80113d4:	10c00526 	beq	r2,r3,80113ec <_write_r+0x50>
 80113d8:	dfc00217 	ldw	ra,8(sp)
 80113dc:	dc400117 	ldw	r17,4(sp)
 80113e0:	dc000017 	ldw	r16,0(sp)
 80113e4:	dec00304 	addi	sp,sp,12
 80113e8:	f800283a 	ret
 80113ec:	80c00017 	ldw	r3,0(r16)
 80113f0:	183ff926 	beq	r3,zero,80113d8 <__alt_data_end+0xfc0113d8>
 80113f4:	88c00015 	stw	r3,0(r17)
 80113f8:	003ff706 	br	80113d8 <__alt_data_end+0xfc0113d8>

080113fc <_close_r>:
 80113fc:	defffd04 	addi	sp,sp,-12
 8011400:	dc000015 	stw	r16,0(sp)
 8011404:	040200b4 	movhi	r16,2050
 8011408:	dc400115 	stw	r17,4(sp)
 801140c:	842f7e04 	addi	r16,r16,-16904
 8011410:	2023883a 	mov	r17,r4
 8011414:	2809883a 	mov	r4,r5
 8011418:	dfc00215 	stw	ra,8(sp)
 801141c:	80000015 	stw	zero,0(r16)
 8011420:	80152940 	call	8015294 <close>
 8011424:	00ffffc4 	movi	r3,-1
 8011428:	10c00526 	beq	r2,r3,8011440 <_close_r+0x44>
 801142c:	dfc00217 	ldw	ra,8(sp)
 8011430:	dc400117 	ldw	r17,4(sp)
 8011434:	dc000017 	ldw	r16,0(sp)
 8011438:	dec00304 	addi	sp,sp,12
 801143c:	f800283a 	ret
 8011440:	80c00017 	ldw	r3,0(r16)
 8011444:	183ff926 	beq	r3,zero,801142c <__alt_data_end+0xfc01142c>
 8011448:	88c00015 	stw	r3,0(r17)
 801144c:	003ff706 	br	801142c <__alt_data_end+0xfc01142c>

08011450 <_calloc_r>:
 8011450:	defffe04 	addi	sp,sp,-8
 8011454:	2805883a 	mov	r2,r5
 8011458:	dc000015 	stw	r16,0(sp)
 801145c:	300b883a 	mov	r5,r6
 8011460:	2021883a 	mov	r16,r4
 8011464:	1009883a 	mov	r4,r2
 8011468:	dfc00115 	stw	ra,4(sp)
 801146c:	8004a540 	call	8004a54 <__mulsi3>
 8011470:	100b883a 	mov	r5,r2
 8011474:	8009883a 	mov	r4,r16
 8011478:	800c17c0 	call	800c17c <_malloc_r>
 801147c:	10002926 	beq	r2,zero,8011524 <_calloc_r+0xd4>
 8011480:	11bfff17 	ldw	r6,-4(r2)
 8011484:	1021883a 	mov	r16,r2
 8011488:	00bfff04 	movi	r2,-4
 801148c:	308c703a 	and	r6,r6,r2
 8011490:	00c00904 	movi	r3,36
 8011494:	308d883a 	add	r6,r6,r2
 8011498:	19801636 	bltu	r3,r6,80114f4 <_calloc_r+0xa4>
 801149c:	008004c4 	movi	r2,19
 80114a0:	11800b2e 	bgeu	r2,r6,80114d0 <_calloc_r+0x80>
 80114a4:	80000015 	stw	zero,0(r16)
 80114a8:	80000115 	stw	zero,4(r16)
 80114ac:	008006c4 	movi	r2,27
 80114b0:	11801a2e 	bgeu	r2,r6,801151c <_calloc_r+0xcc>
 80114b4:	80000215 	stw	zero,8(r16)
 80114b8:	80000315 	stw	zero,12(r16)
 80114bc:	30c0151e 	bne	r6,r3,8011514 <_calloc_r+0xc4>
 80114c0:	80000415 	stw	zero,16(r16)
 80114c4:	80800604 	addi	r2,r16,24
 80114c8:	80000515 	stw	zero,20(r16)
 80114cc:	00000106 	br	80114d4 <_calloc_r+0x84>
 80114d0:	8005883a 	mov	r2,r16
 80114d4:	10000015 	stw	zero,0(r2)
 80114d8:	10000115 	stw	zero,4(r2)
 80114dc:	10000215 	stw	zero,8(r2)
 80114e0:	8005883a 	mov	r2,r16
 80114e4:	dfc00117 	ldw	ra,4(sp)
 80114e8:	dc000017 	ldw	r16,0(sp)
 80114ec:	dec00204 	addi	sp,sp,8
 80114f0:	f800283a 	ret
 80114f4:	000b883a 	mov	r5,zero
 80114f8:	8009883a 	mov	r4,r16
 80114fc:	800cd100 	call	800cd10 <memset>
 8011500:	8005883a 	mov	r2,r16
 8011504:	dfc00117 	ldw	ra,4(sp)
 8011508:	dc000017 	ldw	r16,0(sp)
 801150c:	dec00204 	addi	sp,sp,8
 8011510:	f800283a 	ret
 8011514:	80800404 	addi	r2,r16,16
 8011518:	003fee06 	br	80114d4 <__alt_data_end+0xfc0114d4>
 801151c:	80800204 	addi	r2,r16,8
 8011520:	003fec06 	br	80114d4 <__alt_data_end+0xfc0114d4>
 8011524:	0005883a 	mov	r2,zero
 8011528:	003fee06 	br	80114e4 <__alt_data_end+0xfc0114e4>

0801152c <_fclose_r>:
 801152c:	28003926 	beq	r5,zero,8011614 <_fclose_r+0xe8>
 8011530:	defffc04 	addi	sp,sp,-16
 8011534:	dc400115 	stw	r17,4(sp)
 8011538:	dc000015 	stw	r16,0(sp)
 801153c:	dfc00315 	stw	ra,12(sp)
 8011540:	dc800215 	stw	r18,8(sp)
 8011544:	2023883a 	mov	r17,r4
 8011548:	2821883a 	mov	r16,r5
 801154c:	20000226 	beq	r4,zero,8011558 <_fclose_r+0x2c>
 8011550:	20800e17 	ldw	r2,56(r4)
 8011554:	10002726 	beq	r2,zero,80115f4 <_fclose_r+0xc8>
 8011558:	8080030f 	ldh	r2,12(r16)
 801155c:	1000071e 	bne	r2,zero,801157c <_fclose_r+0x50>
 8011560:	0005883a 	mov	r2,zero
 8011564:	dfc00317 	ldw	ra,12(sp)
 8011568:	dc800217 	ldw	r18,8(sp)
 801156c:	dc400117 	ldw	r17,4(sp)
 8011570:	dc000017 	ldw	r16,0(sp)
 8011574:	dec00404 	addi	sp,sp,16
 8011578:	f800283a 	ret
 801157c:	800b883a 	mov	r5,r16
 8011580:	8809883a 	mov	r4,r17
 8011584:	800ae080 	call	800ae08 <__sflush_r>
 8011588:	1025883a 	mov	r18,r2
 801158c:	80800b17 	ldw	r2,44(r16)
 8011590:	10000426 	beq	r2,zero,80115a4 <_fclose_r+0x78>
 8011594:	81400717 	ldw	r5,28(r16)
 8011598:	8809883a 	mov	r4,r17
 801159c:	103ee83a 	callr	r2
 80115a0:	10001616 	blt	r2,zero,80115fc <_fclose_r+0xd0>
 80115a4:	8080030b 	ldhu	r2,12(r16)
 80115a8:	1080200c 	andi	r2,r2,128
 80115ac:	1000151e 	bne	r2,zero,8011604 <_fclose_r+0xd8>
 80115b0:	81400c17 	ldw	r5,48(r16)
 80115b4:	28000526 	beq	r5,zero,80115cc <_fclose_r+0xa0>
 80115b8:	80801004 	addi	r2,r16,64
 80115bc:	28800226 	beq	r5,r2,80115c8 <_fclose_r+0x9c>
 80115c0:	8809883a 	mov	r4,r17
 80115c4:	800b5840 	call	800b584 <_free_r>
 80115c8:	80000c15 	stw	zero,48(r16)
 80115cc:	81401117 	ldw	r5,68(r16)
 80115d0:	28000326 	beq	r5,zero,80115e0 <_fclose_r+0xb4>
 80115d4:	8809883a 	mov	r4,r17
 80115d8:	800b5840 	call	800b584 <_free_r>
 80115dc:	80001115 	stw	zero,68(r16)
 80115e0:	800b4200 	call	800b420 <__sfp_lock_acquire>
 80115e4:	8000030d 	sth	zero,12(r16)
 80115e8:	800b4240 	call	800b424 <__sfp_lock_release>
 80115ec:	9005883a 	mov	r2,r18
 80115f0:	003fdc06 	br	8011564 <__alt_data_end+0xfc011564>
 80115f4:	800b4100 	call	800b410 <__sinit>
 80115f8:	003fd706 	br	8011558 <__alt_data_end+0xfc011558>
 80115fc:	04bfffc4 	movi	r18,-1
 8011600:	003fe806 	br	80115a4 <__alt_data_end+0xfc0115a4>
 8011604:	81400417 	ldw	r5,16(r16)
 8011608:	8809883a 	mov	r4,r17
 801160c:	800b5840 	call	800b584 <_free_r>
 8011610:	003fe706 	br	80115b0 <__alt_data_end+0xfc0115b0>
 8011614:	0005883a 	mov	r2,zero
 8011618:	f800283a 	ret

0801161c <fclose>:
 801161c:	008200b4 	movhi	r2,2050
 8011620:	10a80004 	addi	r2,r2,-24576
 8011624:	200b883a 	mov	r5,r4
 8011628:	11000017 	ldw	r4,0(r2)
 801162c:	801152c1 	jmpi	801152c <_fclose_r>

08011630 <__fputwc>:
 8011630:	defff804 	addi	sp,sp,-32
 8011634:	dcc00415 	stw	r19,16(sp)
 8011638:	dc800315 	stw	r18,12(sp)
 801163c:	dc000115 	stw	r16,4(sp)
 8011640:	dfc00715 	stw	ra,28(sp)
 8011644:	dd400615 	stw	r21,24(sp)
 8011648:	dd000515 	stw	r20,20(sp)
 801164c:	dc400215 	stw	r17,8(sp)
 8011650:	2027883a 	mov	r19,r4
 8011654:	2825883a 	mov	r18,r5
 8011658:	3021883a 	mov	r16,r6
 801165c:	800bf6c0 	call	800bf6c <__locale_mb_cur_max>
 8011660:	00c00044 	movi	r3,1
 8011664:	10c03e26 	beq	r2,r3,8011760 <__fputwc+0x130>
 8011668:	81c01704 	addi	r7,r16,92
 801166c:	900d883a 	mov	r6,r18
 8011670:	d80b883a 	mov	r5,sp
 8011674:	9809883a 	mov	r4,r19
 8011678:	8011b000 	call	8011b00 <_wcrtomb_r>
 801167c:	1029883a 	mov	r20,r2
 8011680:	00bfffc4 	movi	r2,-1
 8011684:	a0802026 	beq	r20,r2,8011708 <__fputwc+0xd8>
 8011688:	d9400003 	ldbu	r5,0(sp)
 801168c:	a0001c26 	beq	r20,zero,8011700 <__fputwc+0xd0>
 8011690:	0023883a 	mov	r17,zero
 8011694:	05400284 	movi	r21,10
 8011698:	00000906 	br	80116c0 <__fputwc+0x90>
 801169c:	80800017 	ldw	r2,0(r16)
 80116a0:	11400005 	stb	r5,0(r2)
 80116a4:	80c00017 	ldw	r3,0(r16)
 80116a8:	18c00044 	addi	r3,r3,1
 80116ac:	80c00015 	stw	r3,0(r16)
 80116b0:	8c400044 	addi	r17,r17,1
 80116b4:	dc45883a 	add	r2,sp,r17
 80116b8:	8d00112e 	bgeu	r17,r20,8011700 <__fputwc+0xd0>
 80116bc:	11400003 	ldbu	r5,0(r2)
 80116c0:	80c00217 	ldw	r3,8(r16)
 80116c4:	18ffffc4 	addi	r3,r3,-1
 80116c8:	80c00215 	stw	r3,8(r16)
 80116cc:	183ff30e 	bge	r3,zero,801169c <__alt_data_end+0xfc01169c>
 80116d0:	80800617 	ldw	r2,24(r16)
 80116d4:	18801916 	blt	r3,r2,801173c <__fputwc+0x10c>
 80116d8:	80800017 	ldw	r2,0(r16)
 80116dc:	11400005 	stb	r5,0(r2)
 80116e0:	80800017 	ldw	r2,0(r16)
 80116e4:	10c00003 	ldbu	r3,0(r2)
 80116e8:	10800044 	addi	r2,r2,1
 80116ec:	1d402326 	beq	r3,r21,801177c <__fputwc+0x14c>
 80116f0:	80800015 	stw	r2,0(r16)
 80116f4:	8c400044 	addi	r17,r17,1
 80116f8:	dc45883a 	add	r2,sp,r17
 80116fc:	8d3fef36 	bltu	r17,r20,80116bc <__alt_data_end+0xfc0116bc>
 8011700:	9005883a 	mov	r2,r18
 8011704:	00000406 	br	8011718 <__fputwc+0xe8>
 8011708:	80c0030b 	ldhu	r3,12(r16)
 801170c:	a005883a 	mov	r2,r20
 8011710:	18c01014 	ori	r3,r3,64
 8011714:	80c0030d 	sth	r3,12(r16)
 8011718:	dfc00717 	ldw	ra,28(sp)
 801171c:	dd400617 	ldw	r21,24(sp)
 8011720:	dd000517 	ldw	r20,20(sp)
 8011724:	dcc00417 	ldw	r19,16(sp)
 8011728:	dc800317 	ldw	r18,12(sp)
 801172c:	dc400217 	ldw	r17,8(sp)
 8011730:	dc000117 	ldw	r16,4(sp)
 8011734:	dec00804 	addi	sp,sp,32
 8011738:	f800283a 	ret
 801173c:	800d883a 	mov	r6,r16
 8011740:	29403fcc 	andi	r5,r5,255
 8011744:	9809883a 	mov	r4,r19
 8011748:	80119a80 	call	80119a8 <__swbuf_r>
 801174c:	10bfffe0 	cmpeqi	r2,r2,-1
 8011750:	10803fcc 	andi	r2,r2,255
 8011754:	103fd626 	beq	r2,zero,80116b0 <__alt_data_end+0xfc0116b0>
 8011758:	00bfffc4 	movi	r2,-1
 801175c:	003fee06 	br	8011718 <__alt_data_end+0xfc011718>
 8011760:	90ffffc4 	addi	r3,r18,-1
 8011764:	01003f84 	movi	r4,254
 8011768:	20ffbf36 	bltu	r4,r3,8011668 <__alt_data_end+0xfc011668>
 801176c:	900b883a 	mov	r5,r18
 8011770:	dc800005 	stb	r18,0(sp)
 8011774:	1029883a 	mov	r20,r2
 8011778:	003fc506 	br	8011690 <__alt_data_end+0xfc011690>
 801177c:	800d883a 	mov	r6,r16
 8011780:	a80b883a 	mov	r5,r21
 8011784:	9809883a 	mov	r4,r19
 8011788:	80119a80 	call	80119a8 <__swbuf_r>
 801178c:	10bfffe0 	cmpeqi	r2,r2,-1
 8011790:	003fef06 	br	8011750 <__alt_data_end+0xfc011750>

08011794 <_fputwc_r>:
 8011794:	3080030b 	ldhu	r2,12(r6)
 8011798:	10c8000c 	andi	r3,r2,8192
 801179c:	1800051e 	bne	r3,zero,80117b4 <_fputwc_r+0x20>
 80117a0:	30c01917 	ldw	r3,100(r6)
 80117a4:	10880014 	ori	r2,r2,8192
 80117a8:	3080030d 	sth	r2,12(r6)
 80117ac:	18880014 	ori	r2,r3,8192
 80117b0:	30801915 	stw	r2,100(r6)
 80117b4:	80116301 	jmpi	8011630 <__fputwc>

080117b8 <fputwc>:
 80117b8:	008200b4 	movhi	r2,2050
 80117bc:	defffc04 	addi	sp,sp,-16
 80117c0:	10a80004 	addi	r2,r2,-24576
 80117c4:	dc000115 	stw	r16,4(sp)
 80117c8:	14000017 	ldw	r16,0(r2)
 80117cc:	dc400215 	stw	r17,8(sp)
 80117d0:	dfc00315 	stw	ra,12(sp)
 80117d4:	2023883a 	mov	r17,r4
 80117d8:	80000226 	beq	r16,zero,80117e4 <fputwc+0x2c>
 80117dc:	80800e17 	ldw	r2,56(r16)
 80117e0:	10001026 	beq	r2,zero,8011824 <fputwc+0x6c>
 80117e4:	2880030b 	ldhu	r2,12(r5)
 80117e8:	10c8000c 	andi	r3,r2,8192
 80117ec:	1800051e 	bne	r3,zero,8011804 <fputwc+0x4c>
 80117f0:	28c01917 	ldw	r3,100(r5)
 80117f4:	10880014 	ori	r2,r2,8192
 80117f8:	2880030d 	sth	r2,12(r5)
 80117fc:	18880014 	ori	r2,r3,8192
 8011800:	28801915 	stw	r2,100(r5)
 8011804:	280d883a 	mov	r6,r5
 8011808:	8009883a 	mov	r4,r16
 801180c:	880b883a 	mov	r5,r17
 8011810:	dfc00317 	ldw	ra,12(sp)
 8011814:	dc400217 	ldw	r17,8(sp)
 8011818:	dc000117 	ldw	r16,4(sp)
 801181c:	dec00404 	addi	sp,sp,16
 8011820:	80116301 	jmpi	8011630 <__fputwc>
 8011824:	8009883a 	mov	r4,r16
 8011828:	d9400015 	stw	r5,0(sp)
 801182c:	800b4100 	call	800b410 <__sinit>
 8011830:	d9400017 	ldw	r5,0(sp)
 8011834:	003feb06 	br	80117e4 <__alt_data_end+0xfc0117e4>

08011838 <_fstat_r>:
 8011838:	defffd04 	addi	sp,sp,-12
 801183c:	2805883a 	mov	r2,r5
 8011840:	dc000015 	stw	r16,0(sp)
 8011844:	040200b4 	movhi	r16,2050
 8011848:	dc400115 	stw	r17,4(sp)
 801184c:	842f7e04 	addi	r16,r16,-16904
 8011850:	2023883a 	mov	r17,r4
 8011854:	300b883a 	mov	r5,r6
 8011858:	1009883a 	mov	r4,r2
 801185c:	dfc00215 	stw	ra,8(sp)
 8011860:	80000015 	stw	zero,0(r16)
 8011864:	80153d40 	call	80153d4 <fstat>
 8011868:	00ffffc4 	movi	r3,-1
 801186c:	10c00526 	beq	r2,r3,8011884 <_fstat_r+0x4c>
 8011870:	dfc00217 	ldw	ra,8(sp)
 8011874:	dc400117 	ldw	r17,4(sp)
 8011878:	dc000017 	ldw	r16,0(sp)
 801187c:	dec00304 	addi	sp,sp,12
 8011880:	f800283a 	ret
 8011884:	80c00017 	ldw	r3,0(r16)
 8011888:	183ff926 	beq	r3,zero,8011870 <__alt_data_end+0xfc011870>
 801188c:	88c00015 	stw	r3,0(r17)
 8011890:	003ff706 	br	8011870 <__alt_data_end+0xfc011870>

08011894 <_isatty_r>:
 8011894:	defffd04 	addi	sp,sp,-12
 8011898:	dc000015 	stw	r16,0(sp)
 801189c:	040200b4 	movhi	r16,2050
 80118a0:	dc400115 	stw	r17,4(sp)
 80118a4:	842f7e04 	addi	r16,r16,-16904
 80118a8:	2023883a 	mov	r17,r4
 80118ac:	2809883a 	mov	r4,r5
 80118b0:	dfc00215 	stw	ra,8(sp)
 80118b4:	80000015 	stw	zero,0(r16)
 80118b8:	80154c80 	call	80154c8 <isatty>
 80118bc:	00ffffc4 	movi	r3,-1
 80118c0:	10c00526 	beq	r2,r3,80118d8 <_isatty_r+0x44>
 80118c4:	dfc00217 	ldw	ra,8(sp)
 80118c8:	dc400117 	ldw	r17,4(sp)
 80118cc:	dc000017 	ldw	r16,0(sp)
 80118d0:	dec00304 	addi	sp,sp,12
 80118d4:	f800283a 	ret
 80118d8:	80c00017 	ldw	r3,0(r16)
 80118dc:	183ff926 	beq	r3,zero,80118c4 <__alt_data_end+0xfc0118c4>
 80118e0:	88c00015 	stw	r3,0(r17)
 80118e4:	003ff706 	br	80118c4 <__alt_data_end+0xfc0118c4>

080118e8 <_lseek_r>:
 80118e8:	defffd04 	addi	sp,sp,-12
 80118ec:	2805883a 	mov	r2,r5
 80118f0:	dc000015 	stw	r16,0(sp)
 80118f4:	040200b4 	movhi	r16,2050
 80118f8:	dc400115 	stw	r17,4(sp)
 80118fc:	300b883a 	mov	r5,r6
 8011900:	842f7e04 	addi	r16,r16,-16904
 8011904:	2023883a 	mov	r17,r4
 8011908:	380d883a 	mov	r6,r7
 801190c:	1009883a 	mov	r4,r2
 8011910:	dfc00215 	stw	ra,8(sp)
 8011914:	80000015 	stw	zero,0(r16)
 8011918:	801569c0 	call	801569c <lseek>
 801191c:	00ffffc4 	movi	r3,-1
 8011920:	10c00526 	beq	r2,r3,8011938 <_lseek_r+0x50>
 8011924:	dfc00217 	ldw	ra,8(sp)
 8011928:	dc400117 	ldw	r17,4(sp)
 801192c:	dc000017 	ldw	r16,0(sp)
 8011930:	dec00304 	addi	sp,sp,12
 8011934:	f800283a 	ret
 8011938:	80c00017 	ldw	r3,0(r16)
 801193c:	183ff926 	beq	r3,zero,8011924 <__alt_data_end+0xfc011924>
 8011940:	88c00015 	stw	r3,0(r17)
 8011944:	003ff706 	br	8011924 <__alt_data_end+0xfc011924>

08011948 <_read_r>:
 8011948:	defffd04 	addi	sp,sp,-12
 801194c:	2805883a 	mov	r2,r5
 8011950:	dc000015 	stw	r16,0(sp)
 8011954:	040200b4 	movhi	r16,2050
 8011958:	dc400115 	stw	r17,4(sp)
 801195c:	300b883a 	mov	r5,r6
 8011960:	842f7e04 	addi	r16,r16,-16904
 8011964:	2023883a 	mov	r17,r4
 8011968:	380d883a 	mov	r6,r7
 801196c:	1009883a 	mov	r4,r2
 8011970:	dfc00215 	stw	ra,8(sp)
 8011974:	80000015 	stw	zero,0(r16)
 8011978:	80158780 	call	8015878 <read>
 801197c:	00ffffc4 	movi	r3,-1
 8011980:	10c00526 	beq	r2,r3,8011998 <_read_r+0x50>
 8011984:	dfc00217 	ldw	ra,8(sp)
 8011988:	dc400117 	ldw	r17,4(sp)
 801198c:	dc000017 	ldw	r16,0(sp)
 8011990:	dec00304 	addi	sp,sp,12
 8011994:	f800283a 	ret
 8011998:	80c00017 	ldw	r3,0(r16)
 801199c:	183ff926 	beq	r3,zero,8011984 <__alt_data_end+0xfc011984>
 80119a0:	88c00015 	stw	r3,0(r17)
 80119a4:	003ff706 	br	8011984 <__alt_data_end+0xfc011984>

080119a8 <__swbuf_r>:
 80119a8:	defffb04 	addi	sp,sp,-20
 80119ac:	dcc00315 	stw	r19,12(sp)
 80119b0:	dc800215 	stw	r18,8(sp)
 80119b4:	dc000015 	stw	r16,0(sp)
 80119b8:	dfc00415 	stw	ra,16(sp)
 80119bc:	dc400115 	stw	r17,4(sp)
 80119c0:	2025883a 	mov	r18,r4
 80119c4:	2827883a 	mov	r19,r5
 80119c8:	3021883a 	mov	r16,r6
 80119cc:	20000226 	beq	r4,zero,80119d8 <__swbuf_r+0x30>
 80119d0:	20800e17 	ldw	r2,56(r4)
 80119d4:	10004226 	beq	r2,zero,8011ae0 <__swbuf_r+0x138>
 80119d8:	80800617 	ldw	r2,24(r16)
 80119dc:	8100030b 	ldhu	r4,12(r16)
 80119e0:	80800215 	stw	r2,8(r16)
 80119e4:	2080020c 	andi	r2,r4,8
 80119e8:	10003626 	beq	r2,zero,8011ac4 <__swbuf_r+0x11c>
 80119ec:	80c00417 	ldw	r3,16(r16)
 80119f0:	18003426 	beq	r3,zero,8011ac4 <__swbuf_r+0x11c>
 80119f4:	2088000c 	andi	r2,r4,8192
 80119f8:	9c403fcc 	andi	r17,r19,255
 80119fc:	10001a26 	beq	r2,zero,8011a68 <__swbuf_r+0xc0>
 8011a00:	80800017 	ldw	r2,0(r16)
 8011a04:	81000517 	ldw	r4,20(r16)
 8011a08:	10c7c83a 	sub	r3,r2,r3
 8011a0c:	1900200e 	bge	r3,r4,8011a90 <__swbuf_r+0xe8>
 8011a10:	18c00044 	addi	r3,r3,1
 8011a14:	81000217 	ldw	r4,8(r16)
 8011a18:	11400044 	addi	r5,r2,1
 8011a1c:	81400015 	stw	r5,0(r16)
 8011a20:	213fffc4 	addi	r4,r4,-1
 8011a24:	81000215 	stw	r4,8(r16)
 8011a28:	14c00005 	stb	r19,0(r2)
 8011a2c:	80800517 	ldw	r2,20(r16)
 8011a30:	10c01e26 	beq	r2,r3,8011aac <__swbuf_r+0x104>
 8011a34:	8080030b 	ldhu	r2,12(r16)
 8011a38:	1080004c 	andi	r2,r2,1
 8011a3c:	10000226 	beq	r2,zero,8011a48 <__swbuf_r+0xa0>
 8011a40:	00800284 	movi	r2,10
 8011a44:	88801926 	beq	r17,r2,8011aac <__swbuf_r+0x104>
 8011a48:	8805883a 	mov	r2,r17
 8011a4c:	dfc00417 	ldw	ra,16(sp)
 8011a50:	dcc00317 	ldw	r19,12(sp)
 8011a54:	dc800217 	ldw	r18,8(sp)
 8011a58:	dc400117 	ldw	r17,4(sp)
 8011a5c:	dc000017 	ldw	r16,0(sp)
 8011a60:	dec00504 	addi	sp,sp,20
 8011a64:	f800283a 	ret
 8011a68:	81401917 	ldw	r5,100(r16)
 8011a6c:	00b7ffc4 	movi	r2,-8193
 8011a70:	21080014 	ori	r4,r4,8192
 8011a74:	2884703a 	and	r2,r5,r2
 8011a78:	80801915 	stw	r2,100(r16)
 8011a7c:	80800017 	ldw	r2,0(r16)
 8011a80:	8100030d 	sth	r4,12(r16)
 8011a84:	81000517 	ldw	r4,20(r16)
 8011a88:	10c7c83a 	sub	r3,r2,r3
 8011a8c:	193fe016 	blt	r3,r4,8011a10 <__alt_data_end+0xfc011a10>
 8011a90:	800b883a 	mov	r5,r16
 8011a94:	9009883a 	mov	r4,r18
 8011a98:	800b0240 	call	800b024 <_fflush_r>
 8011a9c:	1000071e 	bne	r2,zero,8011abc <__swbuf_r+0x114>
 8011aa0:	80800017 	ldw	r2,0(r16)
 8011aa4:	00c00044 	movi	r3,1
 8011aa8:	003fda06 	br	8011a14 <__alt_data_end+0xfc011a14>
 8011aac:	800b883a 	mov	r5,r16
 8011ab0:	9009883a 	mov	r4,r18
 8011ab4:	800b0240 	call	800b024 <_fflush_r>
 8011ab8:	103fe326 	beq	r2,zero,8011a48 <__alt_data_end+0xfc011a48>
 8011abc:	00bfffc4 	movi	r2,-1
 8011ac0:	003fe206 	br	8011a4c <__alt_data_end+0xfc011a4c>
 8011ac4:	800b883a 	mov	r5,r16
 8011ac8:	9009883a 	mov	r4,r18
 8011acc:	80094040 	call	8009404 <__swsetup_r>
 8011ad0:	103ffa1e 	bne	r2,zero,8011abc <__alt_data_end+0xfc011abc>
 8011ad4:	8100030b 	ldhu	r4,12(r16)
 8011ad8:	80c00417 	ldw	r3,16(r16)
 8011adc:	003fc506 	br	80119f4 <__alt_data_end+0xfc0119f4>
 8011ae0:	800b4100 	call	800b410 <__sinit>
 8011ae4:	003fbc06 	br	80119d8 <__alt_data_end+0xfc0119d8>

08011ae8 <__swbuf>:
 8011ae8:	008200b4 	movhi	r2,2050
 8011aec:	10a80004 	addi	r2,r2,-24576
 8011af0:	280d883a 	mov	r6,r5
 8011af4:	200b883a 	mov	r5,r4
 8011af8:	11000017 	ldw	r4,0(r2)
 8011afc:	80119a81 	jmpi	80119a8 <__swbuf_r>

08011b00 <_wcrtomb_r>:
 8011b00:	defff604 	addi	sp,sp,-40
 8011b04:	008200b4 	movhi	r2,2050
 8011b08:	dc800815 	stw	r18,32(sp)
 8011b0c:	dc400715 	stw	r17,28(sp)
 8011b10:	dc000615 	stw	r16,24(sp)
 8011b14:	10a80404 	addi	r2,r2,-24560
 8011b18:	dfc00915 	stw	ra,36(sp)
 8011b1c:	2021883a 	mov	r16,r4
 8011b20:	3823883a 	mov	r17,r7
 8011b24:	14800017 	ldw	r18,0(r2)
 8011b28:	28001426 	beq	r5,zero,8011b7c <_wcrtomb_r+0x7c>
 8011b2c:	d9400415 	stw	r5,16(sp)
 8011b30:	d9800515 	stw	r6,20(sp)
 8011b34:	800bf600 	call	800bf60 <__locale_charset>
 8011b38:	d9800517 	ldw	r6,20(sp)
 8011b3c:	d9400417 	ldw	r5,16(sp)
 8011b40:	100f883a 	mov	r7,r2
 8011b44:	dc400015 	stw	r17,0(sp)
 8011b48:	8009883a 	mov	r4,r16
 8011b4c:	903ee83a 	callr	r18
 8011b50:	00ffffc4 	movi	r3,-1
 8011b54:	10c0031e 	bne	r2,r3,8011b64 <_wcrtomb_r+0x64>
 8011b58:	88000015 	stw	zero,0(r17)
 8011b5c:	00c02284 	movi	r3,138
 8011b60:	80c00015 	stw	r3,0(r16)
 8011b64:	dfc00917 	ldw	ra,36(sp)
 8011b68:	dc800817 	ldw	r18,32(sp)
 8011b6c:	dc400717 	ldw	r17,28(sp)
 8011b70:	dc000617 	ldw	r16,24(sp)
 8011b74:	dec00a04 	addi	sp,sp,40
 8011b78:	f800283a 	ret
 8011b7c:	800bf600 	call	800bf60 <__locale_charset>
 8011b80:	100f883a 	mov	r7,r2
 8011b84:	dc400015 	stw	r17,0(sp)
 8011b88:	000d883a 	mov	r6,zero
 8011b8c:	d9400104 	addi	r5,sp,4
 8011b90:	8009883a 	mov	r4,r16
 8011b94:	903ee83a 	callr	r18
 8011b98:	003fed06 	br	8011b50 <__alt_data_end+0xfc011b50>

08011b9c <wcrtomb>:
 8011b9c:	defff604 	addi	sp,sp,-40
 8011ba0:	008200b4 	movhi	r2,2050
 8011ba4:	dc800615 	stw	r18,24(sp)
 8011ba8:	dc400515 	stw	r17,20(sp)
 8011bac:	10a80004 	addi	r2,r2,-24576
 8011bb0:	dfc00915 	stw	ra,36(sp)
 8011bb4:	dd000815 	stw	r20,32(sp)
 8011bb8:	dcc00715 	stw	r19,28(sp)
 8011bbc:	dc000415 	stw	r16,16(sp)
 8011bc0:	3025883a 	mov	r18,r6
 8011bc4:	14400017 	ldw	r17,0(r2)
 8011bc8:	20001926 	beq	r4,zero,8011c30 <wcrtomb+0x94>
 8011bcc:	008200b4 	movhi	r2,2050
 8011bd0:	10a80404 	addi	r2,r2,-24560
 8011bd4:	15000017 	ldw	r20,0(r2)
 8011bd8:	2021883a 	mov	r16,r4
 8011bdc:	2827883a 	mov	r19,r5
 8011be0:	800bf600 	call	800bf60 <__locale_charset>
 8011be4:	100f883a 	mov	r7,r2
 8011be8:	dc800015 	stw	r18,0(sp)
 8011bec:	980d883a 	mov	r6,r19
 8011bf0:	800b883a 	mov	r5,r16
 8011bf4:	8809883a 	mov	r4,r17
 8011bf8:	a03ee83a 	callr	r20
 8011bfc:	00ffffc4 	movi	r3,-1
 8011c00:	10c0031e 	bne	r2,r3,8011c10 <wcrtomb+0x74>
 8011c04:	90000015 	stw	zero,0(r18)
 8011c08:	00c02284 	movi	r3,138
 8011c0c:	88c00015 	stw	r3,0(r17)
 8011c10:	dfc00917 	ldw	ra,36(sp)
 8011c14:	dd000817 	ldw	r20,32(sp)
 8011c18:	dcc00717 	ldw	r19,28(sp)
 8011c1c:	dc800617 	ldw	r18,24(sp)
 8011c20:	dc400517 	ldw	r17,20(sp)
 8011c24:	dc000417 	ldw	r16,16(sp)
 8011c28:	dec00a04 	addi	sp,sp,40
 8011c2c:	f800283a 	ret
 8011c30:	008200b4 	movhi	r2,2050
 8011c34:	10a80404 	addi	r2,r2,-24560
 8011c38:	14000017 	ldw	r16,0(r2)
 8011c3c:	800bf600 	call	800bf60 <__locale_charset>
 8011c40:	100f883a 	mov	r7,r2
 8011c44:	dc800015 	stw	r18,0(sp)
 8011c48:	000d883a 	mov	r6,zero
 8011c4c:	d9400104 	addi	r5,sp,4
 8011c50:	8809883a 	mov	r4,r17
 8011c54:	803ee83a 	callr	r16
 8011c58:	003fe806 	br	8011bfc <__alt_data_end+0xfc011bfc>

08011c5c <__ascii_wctomb>:
 8011c5c:	28000526 	beq	r5,zero,8011c74 <__ascii_wctomb+0x18>
 8011c60:	00803fc4 	movi	r2,255
 8011c64:	11800536 	bltu	r2,r6,8011c7c <__ascii_wctomb+0x20>
 8011c68:	29800005 	stb	r6,0(r5)
 8011c6c:	00800044 	movi	r2,1
 8011c70:	f800283a 	ret
 8011c74:	0005883a 	mov	r2,zero
 8011c78:	f800283a 	ret
 8011c7c:	00802284 	movi	r2,138
 8011c80:	20800015 	stw	r2,0(r4)
 8011c84:	00bfffc4 	movi	r2,-1
 8011c88:	f800283a 	ret

08011c8c <_wctomb_r>:
 8011c8c:	008200b4 	movhi	r2,2050
 8011c90:	defff904 	addi	sp,sp,-28
 8011c94:	10a80404 	addi	r2,r2,-24560
 8011c98:	dfc00615 	stw	ra,24(sp)
 8011c9c:	dc400515 	stw	r17,20(sp)
 8011ca0:	dc000415 	stw	r16,16(sp)
 8011ca4:	3823883a 	mov	r17,r7
 8011ca8:	14000017 	ldw	r16,0(r2)
 8011cac:	d9000115 	stw	r4,4(sp)
 8011cb0:	d9400215 	stw	r5,8(sp)
 8011cb4:	d9800315 	stw	r6,12(sp)
 8011cb8:	800bf600 	call	800bf60 <__locale_charset>
 8011cbc:	d9800317 	ldw	r6,12(sp)
 8011cc0:	d9400217 	ldw	r5,8(sp)
 8011cc4:	d9000117 	ldw	r4,4(sp)
 8011cc8:	100f883a 	mov	r7,r2
 8011ccc:	dc400015 	stw	r17,0(sp)
 8011cd0:	803ee83a 	callr	r16
 8011cd4:	dfc00617 	ldw	ra,24(sp)
 8011cd8:	dc400517 	ldw	r17,20(sp)
 8011cdc:	dc000417 	ldw	r16,16(sp)
 8011ce0:	dec00704 	addi	sp,sp,28
 8011ce4:	f800283a 	ret

08011ce8 <__muldi3>:
 8011ce8:	defff604 	addi	sp,sp,-40
 8011cec:	dd800615 	stw	r22,24(sp)
 8011cf0:	dd400515 	stw	r21,20(sp)
 8011cf4:	dc400115 	stw	r17,4(sp)
 8011cf8:	357fffcc 	andi	r21,r6,65535
 8011cfc:	2022d43a 	srli	r17,r4,16
 8011d00:	25bfffcc 	andi	r22,r4,65535
 8011d04:	dcc00315 	stw	r19,12(sp)
 8011d08:	dc800215 	stw	r18,8(sp)
 8011d0c:	2027883a 	mov	r19,r4
 8011d10:	2825883a 	mov	r18,r5
 8011d14:	b009883a 	mov	r4,r22
 8011d18:	a80b883a 	mov	r5,r21
 8011d1c:	dfc00915 	stw	ra,36(sp)
 8011d20:	df000815 	stw	fp,32(sp)
 8011d24:	ddc00715 	stw	r23,28(sp)
 8011d28:	3839883a 	mov	fp,r7
 8011d2c:	302ed43a 	srli	r23,r6,16
 8011d30:	dd000415 	stw	r20,16(sp)
 8011d34:	dc000015 	stw	r16,0(sp)
 8011d38:	3029883a 	mov	r20,r6
 8011d3c:	8004a540 	call	8004a54 <__mulsi3>
 8011d40:	a80b883a 	mov	r5,r21
 8011d44:	8809883a 	mov	r4,r17
 8011d48:	1021883a 	mov	r16,r2
 8011d4c:	8004a540 	call	8004a54 <__mulsi3>
 8011d50:	8809883a 	mov	r4,r17
 8011d54:	b80b883a 	mov	r5,r23
 8011d58:	102b883a 	mov	r21,r2
 8011d5c:	8004a540 	call	8004a54 <__mulsi3>
 8011d60:	b80b883a 	mov	r5,r23
 8011d64:	b009883a 	mov	r4,r22
 8011d68:	1023883a 	mov	r17,r2
 8011d6c:	8004a540 	call	8004a54 <__mulsi3>
 8011d70:	8006d43a 	srli	r3,r16,16
 8011d74:	1545883a 	add	r2,r2,r21
 8011d78:	1885883a 	add	r2,r3,r2
 8011d7c:	1540022e 	bgeu	r2,r21,8011d88 <__muldi3+0xa0>
 8011d80:	00c00074 	movhi	r3,1
 8011d84:	88e3883a 	add	r17,r17,r3
 8011d88:	1006d43a 	srli	r3,r2,16
 8011d8c:	1004943a 	slli	r2,r2,16
 8011d90:	e00b883a 	mov	r5,fp
 8011d94:	9809883a 	mov	r4,r19
 8011d98:	843fffcc 	andi	r16,r16,65535
 8011d9c:	1c63883a 	add	r17,r3,r17
 8011da0:	1421883a 	add	r16,r2,r16
 8011da4:	8004a540 	call	8004a54 <__mulsi3>
 8011da8:	900b883a 	mov	r5,r18
 8011dac:	a009883a 	mov	r4,r20
 8011db0:	1027883a 	mov	r19,r2
 8011db4:	8004a540 	call	8004a54 <__mulsi3>
 8011db8:	9885883a 	add	r2,r19,r2
 8011dbc:	1447883a 	add	r3,r2,r17
 8011dc0:	8005883a 	mov	r2,r16
 8011dc4:	dfc00917 	ldw	ra,36(sp)
 8011dc8:	df000817 	ldw	fp,32(sp)
 8011dcc:	ddc00717 	ldw	r23,28(sp)
 8011dd0:	dd800617 	ldw	r22,24(sp)
 8011dd4:	dd400517 	ldw	r21,20(sp)
 8011dd8:	dd000417 	ldw	r20,16(sp)
 8011ddc:	dcc00317 	ldw	r19,12(sp)
 8011de0:	dc800217 	ldw	r18,8(sp)
 8011de4:	dc400117 	ldw	r17,4(sp)
 8011de8:	dc000017 	ldw	r16,0(sp)
 8011dec:	dec00a04 	addi	sp,sp,40
 8011df0:	f800283a 	ret

08011df4 <__udivdi3>:
 8011df4:	defff404 	addi	sp,sp,-48
 8011df8:	dcc00515 	stw	r19,20(sp)
 8011dfc:	dc000215 	stw	r16,8(sp)
 8011e00:	dfc00b15 	stw	ra,44(sp)
 8011e04:	df000a15 	stw	fp,40(sp)
 8011e08:	ddc00915 	stw	r23,36(sp)
 8011e0c:	dd800815 	stw	r22,32(sp)
 8011e10:	dd400715 	stw	r21,28(sp)
 8011e14:	dd000615 	stw	r20,24(sp)
 8011e18:	dc800415 	stw	r18,16(sp)
 8011e1c:	dc400315 	stw	r17,12(sp)
 8011e20:	2027883a 	mov	r19,r4
 8011e24:	2821883a 	mov	r16,r5
 8011e28:	3800461e 	bne	r7,zero,8011f44 <__udivdi3+0x150>
 8011e2c:	3023883a 	mov	r17,r6
 8011e30:	2025883a 	mov	r18,r4
 8011e34:	2980572e 	bgeu	r5,r6,8011f94 <__udivdi3+0x1a0>
 8011e38:	00bfffd4 	movui	r2,65535
 8011e3c:	282d883a 	mov	r22,r5
 8011e40:	1180b236 	bltu	r2,r6,801210c <__udivdi3+0x318>
 8011e44:	00803fc4 	movi	r2,255
 8011e48:	1185803a 	cmpltu	r2,r2,r6
 8011e4c:	100490fa 	slli	r2,r2,3
 8011e50:	3086d83a 	srl	r3,r6,r2
 8011e54:	010200b4 	movhi	r4,2050
 8011e58:	21206204 	addi	r4,r4,-32376
 8011e5c:	20c7883a 	add	r3,r4,r3
 8011e60:	18c00003 	ldbu	r3,0(r3)
 8011e64:	1885883a 	add	r2,r3,r2
 8011e68:	00c00804 	movi	r3,32
 8011e6c:	1887c83a 	sub	r3,r3,r2
 8011e70:	18000526 	beq	r3,zero,8011e88 <__udivdi3+0x94>
 8011e74:	80e0983a 	sll	r16,r16,r3
 8011e78:	9884d83a 	srl	r2,r19,r2
 8011e7c:	30e2983a 	sll	r17,r6,r3
 8011e80:	98e4983a 	sll	r18,r19,r3
 8011e84:	142cb03a 	or	r22,r2,r16
 8011e88:	882ad43a 	srli	r21,r17,16
 8011e8c:	b009883a 	mov	r4,r22
 8011e90:	8d3fffcc 	andi	r20,r17,65535
 8011e94:	a80b883a 	mov	r5,r21
 8011e98:	80049fc0 	call	80049fc <__umodsi3>
 8011e9c:	b009883a 	mov	r4,r22
 8011ea0:	a80b883a 	mov	r5,r21
 8011ea4:	1027883a 	mov	r19,r2
 8011ea8:	80049980 	call	8004998 <__udivsi3>
 8011eac:	100b883a 	mov	r5,r2
 8011eb0:	a009883a 	mov	r4,r20
 8011eb4:	102d883a 	mov	r22,r2
 8011eb8:	8004a540 	call	8004a54 <__mulsi3>
 8011ebc:	9826943a 	slli	r19,r19,16
 8011ec0:	9006d43a 	srli	r3,r18,16
 8011ec4:	1cc6b03a 	or	r3,r3,r19
 8011ec8:	1880052e 	bgeu	r3,r2,8011ee0 <__udivdi3+0xec>
 8011ecc:	1c47883a 	add	r3,r3,r17
 8011ed0:	b13fffc4 	addi	r4,r22,-1
 8011ed4:	1c400136 	bltu	r3,r17,8011edc <__udivdi3+0xe8>
 8011ed8:	18814236 	bltu	r3,r2,80123e4 <__udivdi3+0x5f0>
 8011edc:	202d883a 	mov	r22,r4
 8011ee0:	18a1c83a 	sub	r16,r3,r2
 8011ee4:	8009883a 	mov	r4,r16
 8011ee8:	a80b883a 	mov	r5,r21
 8011eec:	80049fc0 	call	80049fc <__umodsi3>
 8011ef0:	1027883a 	mov	r19,r2
 8011ef4:	8009883a 	mov	r4,r16
 8011ef8:	a80b883a 	mov	r5,r21
 8011efc:	9826943a 	slli	r19,r19,16
 8011f00:	80049980 	call	8004998 <__udivsi3>
 8011f04:	100b883a 	mov	r5,r2
 8011f08:	a009883a 	mov	r4,r20
 8011f0c:	94bfffcc 	andi	r18,r18,65535
 8011f10:	1021883a 	mov	r16,r2
 8011f14:	94e4b03a 	or	r18,r18,r19
 8011f18:	8004a540 	call	8004a54 <__mulsi3>
 8011f1c:	9080052e 	bgeu	r18,r2,8011f34 <__udivdi3+0x140>
 8011f20:	8ca5883a 	add	r18,r17,r18
 8011f24:	80ffffc4 	addi	r3,r16,-1
 8011f28:	94410c36 	bltu	r18,r17,801235c <__udivdi3+0x568>
 8011f2c:	90810b2e 	bgeu	r18,r2,801235c <__udivdi3+0x568>
 8011f30:	843fff84 	addi	r16,r16,-2
 8011f34:	b004943a 	slli	r2,r22,16
 8011f38:	0007883a 	mov	r3,zero
 8011f3c:	1404b03a 	or	r2,r2,r16
 8011f40:	00005e06 	br	80120bc <__udivdi3+0x2c8>
 8011f44:	29c05b36 	bltu	r5,r7,80120b4 <__udivdi3+0x2c0>
 8011f48:	00bfffd4 	movui	r2,65535
 8011f4c:	11c0672e 	bgeu	r2,r7,80120ec <__udivdi3+0x2f8>
 8011f50:	00804034 	movhi	r2,256
 8011f54:	10bfffc4 	addi	r2,r2,-1
 8011f58:	11c10a36 	bltu	r2,r7,8012384 <__udivdi3+0x590>
 8011f5c:	00800404 	movi	r2,16
 8011f60:	3886d83a 	srl	r3,r7,r2
 8011f64:	010200b4 	movhi	r4,2050
 8011f68:	21206204 	addi	r4,r4,-32376
 8011f6c:	20c7883a 	add	r3,r4,r3
 8011f70:	18c00003 	ldbu	r3,0(r3)
 8011f74:	05c00804 	movi	r23,32
 8011f78:	1885883a 	add	r2,r3,r2
 8011f7c:	b8afc83a 	sub	r23,r23,r2
 8011f80:	b800671e 	bne	r23,zero,8012120 <__udivdi3+0x32c>
 8011f84:	3c010536 	bltu	r7,r16,801239c <__udivdi3+0x5a8>
 8011f88:	9985403a 	cmpgeu	r2,r19,r6
 8011f8c:	0007883a 	mov	r3,zero
 8011f90:	00004a06 	br	80120bc <__udivdi3+0x2c8>
 8011f94:	3000041e 	bne	r6,zero,8011fa8 <__udivdi3+0x1b4>
 8011f98:	000b883a 	mov	r5,zero
 8011f9c:	01000044 	movi	r4,1
 8011fa0:	80049980 	call	8004998 <__udivsi3>
 8011fa4:	1023883a 	mov	r17,r2
 8011fa8:	00bfffd4 	movui	r2,65535
 8011fac:	1440532e 	bgeu	r2,r17,80120fc <__udivdi3+0x308>
 8011fb0:	00804034 	movhi	r2,256
 8011fb4:	10bfffc4 	addi	r2,r2,-1
 8011fb8:	1440f436 	bltu	r2,r17,801238c <__udivdi3+0x598>
 8011fbc:	00800404 	movi	r2,16
 8011fc0:	8886d83a 	srl	r3,r17,r2
 8011fc4:	010200b4 	movhi	r4,2050
 8011fc8:	21206204 	addi	r4,r4,-32376
 8011fcc:	20c7883a 	add	r3,r4,r3
 8011fd0:	18c00003 	ldbu	r3,0(r3)
 8011fd4:	1885883a 	add	r2,r3,r2
 8011fd8:	00c00804 	movi	r3,32
 8011fdc:	1887c83a 	sub	r3,r3,r2
 8011fe0:	1800a51e 	bne	r3,zero,8012278 <__udivdi3+0x484>
 8011fe4:	882ad43a 	srli	r21,r17,16
 8011fe8:	8461c83a 	sub	r16,r16,r17
 8011fec:	8d3fffcc 	andi	r20,r17,65535
 8011ff0:	00c00044 	movi	r3,1
 8011ff4:	a80b883a 	mov	r5,r21
 8011ff8:	8009883a 	mov	r4,r16
 8011ffc:	d8c00115 	stw	r3,4(sp)
 8012000:	80049fc0 	call	80049fc <__umodsi3>
 8012004:	a80b883a 	mov	r5,r21
 8012008:	8009883a 	mov	r4,r16
 801200c:	1027883a 	mov	r19,r2
 8012010:	80049980 	call	8004998 <__udivsi3>
 8012014:	a00b883a 	mov	r5,r20
 8012018:	1009883a 	mov	r4,r2
 801201c:	102d883a 	mov	r22,r2
 8012020:	8004a540 	call	8004a54 <__mulsi3>
 8012024:	9826943a 	slli	r19,r19,16
 8012028:	900ed43a 	srli	r7,r18,16
 801202c:	d8c00117 	ldw	r3,4(sp)
 8012030:	3cceb03a 	or	r7,r7,r19
 8012034:	3880052e 	bgeu	r7,r2,801204c <__udivdi3+0x258>
 8012038:	3c4f883a 	add	r7,r7,r17
 801203c:	b13fffc4 	addi	r4,r22,-1
 8012040:	3c400136 	bltu	r7,r17,8012048 <__udivdi3+0x254>
 8012044:	3880e436 	bltu	r7,r2,80123d8 <__udivdi3+0x5e4>
 8012048:	202d883a 	mov	r22,r4
 801204c:	38a1c83a 	sub	r16,r7,r2
 8012050:	8009883a 	mov	r4,r16
 8012054:	a80b883a 	mov	r5,r21
 8012058:	d8c00115 	stw	r3,4(sp)
 801205c:	80049fc0 	call	80049fc <__umodsi3>
 8012060:	1027883a 	mov	r19,r2
 8012064:	8009883a 	mov	r4,r16
 8012068:	a80b883a 	mov	r5,r21
 801206c:	9826943a 	slli	r19,r19,16
 8012070:	80049980 	call	8004998 <__udivsi3>
 8012074:	a00b883a 	mov	r5,r20
 8012078:	1009883a 	mov	r4,r2
 801207c:	94bfffcc 	andi	r18,r18,65535
 8012080:	1021883a 	mov	r16,r2
 8012084:	94e4b03a 	or	r18,r18,r19
 8012088:	8004a540 	call	8004a54 <__mulsi3>
 801208c:	d8c00117 	ldw	r3,4(sp)
 8012090:	9080052e 	bgeu	r18,r2,80120a8 <__udivdi3+0x2b4>
 8012094:	8ca5883a 	add	r18,r17,r18
 8012098:	813fffc4 	addi	r4,r16,-1
 801209c:	9440ad36 	bltu	r18,r17,8012354 <__udivdi3+0x560>
 80120a0:	9080ac2e 	bgeu	r18,r2,8012354 <__udivdi3+0x560>
 80120a4:	843fff84 	addi	r16,r16,-2
 80120a8:	b004943a 	slli	r2,r22,16
 80120ac:	1404b03a 	or	r2,r2,r16
 80120b0:	00000206 	br	80120bc <__udivdi3+0x2c8>
 80120b4:	0007883a 	mov	r3,zero
 80120b8:	0005883a 	mov	r2,zero
 80120bc:	dfc00b17 	ldw	ra,44(sp)
 80120c0:	df000a17 	ldw	fp,40(sp)
 80120c4:	ddc00917 	ldw	r23,36(sp)
 80120c8:	dd800817 	ldw	r22,32(sp)
 80120cc:	dd400717 	ldw	r21,28(sp)
 80120d0:	dd000617 	ldw	r20,24(sp)
 80120d4:	dcc00517 	ldw	r19,20(sp)
 80120d8:	dc800417 	ldw	r18,16(sp)
 80120dc:	dc400317 	ldw	r17,12(sp)
 80120e0:	dc000217 	ldw	r16,8(sp)
 80120e4:	dec00c04 	addi	sp,sp,48
 80120e8:	f800283a 	ret
 80120ec:	00803fc4 	movi	r2,255
 80120f0:	11c5803a 	cmpltu	r2,r2,r7
 80120f4:	100490fa 	slli	r2,r2,3
 80120f8:	003f9906 	br	8011f60 <__alt_data_end+0xfc011f60>
 80120fc:	00803fc4 	movi	r2,255
 8012100:	1445803a 	cmpltu	r2,r2,r17
 8012104:	100490fa 	slli	r2,r2,3
 8012108:	003fad06 	br	8011fc0 <__alt_data_end+0xfc011fc0>
 801210c:	00804034 	movhi	r2,256
 8012110:	10bfffc4 	addi	r2,r2,-1
 8012114:	11809f36 	bltu	r2,r6,8012394 <__udivdi3+0x5a0>
 8012118:	00800404 	movi	r2,16
 801211c:	003f4c06 	br	8011e50 <__alt_data_end+0xfc011e50>
 8012120:	3dce983a 	sll	r7,r7,r23
 8012124:	30b8d83a 	srl	fp,r6,r2
 8012128:	80a2d83a 	srl	r17,r16,r2
 801212c:	35cc983a 	sll	r6,r6,r23
 8012130:	3f38b03a 	or	fp,r7,fp
 8012134:	e024d43a 	srli	r18,fp,16
 8012138:	9884d83a 	srl	r2,r19,r2
 801213c:	85e0983a 	sll	r16,r16,r23
 8012140:	8809883a 	mov	r4,r17
 8012144:	900b883a 	mov	r5,r18
 8012148:	d9800015 	stw	r6,0(sp)
 801214c:	1420b03a 	or	r16,r2,r16
 8012150:	80049fc0 	call	80049fc <__umodsi3>
 8012154:	900b883a 	mov	r5,r18
 8012158:	8809883a 	mov	r4,r17
 801215c:	1029883a 	mov	r20,r2
 8012160:	e5bfffcc 	andi	r22,fp,65535
 8012164:	80049980 	call	8004998 <__udivsi3>
 8012168:	100b883a 	mov	r5,r2
 801216c:	b009883a 	mov	r4,r22
 8012170:	102b883a 	mov	r21,r2
 8012174:	8004a540 	call	8004a54 <__mulsi3>
 8012178:	a028943a 	slli	r20,r20,16
 801217c:	8006d43a 	srli	r3,r16,16
 8012180:	1d06b03a 	or	r3,r3,r20
 8012184:	1880042e 	bgeu	r3,r2,8012198 <__udivdi3+0x3a4>
 8012188:	1f07883a 	add	r3,r3,fp
 801218c:	a93fffc4 	addi	r4,r21,-1
 8012190:	1f00892e 	bgeu	r3,fp,80123b8 <__udivdi3+0x5c4>
 8012194:	202b883a 	mov	r21,r4
 8012198:	18a3c83a 	sub	r17,r3,r2
 801219c:	8809883a 	mov	r4,r17
 80121a0:	900b883a 	mov	r5,r18
 80121a4:	80049fc0 	call	80049fc <__umodsi3>
 80121a8:	1029883a 	mov	r20,r2
 80121ac:	8809883a 	mov	r4,r17
 80121b0:	900b883a 	mov	r5,r18
 80121b4:	a028943a 	slli	r20,r20,16
 80121b8:	80049980 	call	8004998 <__udivsi3>
 80121bc:	100b883a 	mov	r5,r2
 80121c0:	b009883a 	mov	r4,r22
 80121c4:	843fffcc 	andi	r16,r16,65535
 80121c8:	1023883a 	mov	r17,r2
 80121cc:	8520b03a 	or	r16,r16,r20
 80121d0:	8004a540 	call	8004a54 <__mulsi3>
 80121d4:	8080042e 	bgeu	r16,r2,80121e8 <__udivdi3+0x3f4>
 80121d8:	8721883a 	add	r16,r16,fp
 80121dc:	88ffffc4 	addi	r3,r17,-1
 80121e0:	8700712e 	bgeu	r16,fp,80123a8 <__udivdi3+0x5b4>
 80121e4:	1823883a 	mov	r17,r3
 80121e8:	a80e943a 	slli	r7,r21,16
 80121ec:	d8c00017 	ldw	r3,0(sp)
 80121f0:	80a1c83a 	sub	r16,r16,r2
 80121f4:	3c64b03a 	or	r18,r7,r17
 80121f8:	1d3fffcc 	andi	r20,r3,65535
 80121fc:	9022d43a 	srli	r17,r18,16
 8012200:	95bfffcc 	andi	r22,r18,65535
 8012204:	a00b883a 	mov	r5,r20
 8012208:	b009883a 	mov	r4,r22
 801220c:	182ad43a 	srli	r21,r3,16
 8012210:	8004a540 	call	8004a54 <__mulsi3>
 8012214:	a00b883a 	mov	r5,r20
 8012218:	8809883a 	mov	r4,r17
 801221c:	1039883a 	mov	fp,r2
 8012220:	8004a540 	call	8004a54 <__mulsi3>
 8012224:	8809883a 	mov	r4,r17
 8012228:	a80b883a 	mov	r5,r21
 801222c:	1029883a 	mov	r20,r2
 8012230:	8004a540 	call	8004a54 <__mulsi3>
 8012234:	a80b883a 	mov	r5,r21
 8012238:	b009883a 	mov	r4,r22
 801223c:	1023883a 	mov	r17,r2
 8012240:	8004a540 	call	8004a54 <__mulsi3>
 8012244:	e006d43a 	srli	r3,fp,16
 8012248:	1505883a 	add	r2,r2,r20
 801224c:	1887883a 	add	r3,r3,r2
 8012250:	1d00022e 	bgeu	r3,r20,801225c <__udivdi3+0x468>
 8012254:	00800074 	movhi	r2,1
 8012258:	88a3883a 	add	r17,r17,r2
 801225c:	1804d43a 	srli	r2,r3,16
 8012260:	1463883a 	add	r17,r2,r17
 8012264:	84404436 	bltu	r16,r17,8012378 <__udivdi3+0x584>
 8012268:	84403e26 	beq	r16,r17,8012364 <__udivdi3+0x570>
 801226c:	9005883a 	mov	r2,r18
 8012270:	0007883a 	mov	r3,zero
 8012274:	003f9106 	br	80120bc <__alt_data_end+0xfc0120bc>
 8012278:	88e2983a 	sll	r17,r17,r3
 801227c:	80aed83a 	srl	r23,r16,r2
 8012280:	80e0983a 	sll	r16,r16,r3
 8012284:	882ad43a 	srli	r21,r17,16
 8012288:	9884d83a 	srl	r2,r19,r2
 801228c:	b809883a 	mov	r4,r23
 8012290:	a80b883a 	mov	r5,r21
 8012294:	98e4983a 	sll	r18,r19,r3
 8012298:	142cb03a 	or	r22,r2,r16
 801229c:	80049fc0 	call	80049fc <__umodsi3>
 80122a0:	b809883a 	mov	r4,r23
 80122a4:	a80b883a 	mov	r5,r21
 80122a8:	1027883a 	mov	r19,r2
 80122ac:	8d3fffcc 	andi	r20,r17,65535
 80122b0:	80049980 	call	8004998 <__udivsi3>
 80122b4:	a009883a 	mov	r4,r20
 80122b8:	100b883a 	mov	r5,r2
 80122bc:	102f883a 	mov	r23,r2
 80122c0:	8004a540 	call	8004a54 <__mulsi3>
 80122c4:	9826943a 	slli	r19,r19,16
 80122c8:	b008d43a 	srli	r4,r22,16
 80122cc:	24c8b03a 	or	r4,r4,r19
 80122d0:	2080062e 	bgeu	r4,r2,80122ec <__udivdi3+0x4f8>
 80122d4:	2449883a 	add	r4,r4,r17
 80122d8:	b8ffffc4 	addi	r3,r23,-1
 80122dc:	24403c36 	bltu	r4,r17,80123d0 <__udivdi3+0x5dc>
 80122e0:	20803b2e 	bgeu	r4,r2,80123d0 <__udivdi3+0x5dc>
 80122e4:	bdffff84 	addi	r23,r23,-2
 80122e8:	2449883a 	add	r4,r4,r17
 80122ec:	20a1c83a 	sub	r16,r4,r2
 80122f0:	a80b883a 	mov	r5,r21
 80122f4:	8009883a 	mov	r4,r16
 80122f8:	80049fc0 	call	80049fc <__umodsi3>
 80122fc:	a80b883a 	mov	r5,r21
 8012300:	8009883a 	mov	r4,r16
 8012304:	1027883a 	mov	r19,r2
 8012308:	80049980 	call	8004998 <__udivsi3>
 801230c:	a009883a 	mov	r4,r20
 8012310:	100b883a 	mov	r5,r2
 8012314:	9826943a 	slli	r19,r19,16
 8012318:	1039883a 	mov	fp,r2
 801231c:	8004a540 	call	8004a54 <__mulsi3>
 8012320:	b13fffcc 	andi	r4,r22,65535
 8012324:	24c8b03a 	or	r4,r4,r19
 8012328:	2080062e 	bgeu	r4,r2,8012344 <__udivdi3+0x550>
 801232c:	2449883a 	add	r4,r4,r17
 8012330:	e0ffffc4 	addi	r3,fp,-1
 8012334:	24402436 	bltu	r4,r17,80123c8 <__udivdi3+0x5d4>
 8012338:	2080232e 	bgeu	r4,r2,80123c8 <__udivdi3+0x5d4>
 801233c:	e73fff84 	addi	fp,fp,-2
 8012340:	2449883a 	add	r4,r4,r17
 8012344:	b82e943a 	slli	r23,r23,16
 8012348:	20a1c83a 	sub	r16,r4,r2
 801234c:	bf06b03a 	or	r3,r23,fp
 8012350:	003f2806 	br	8011ff4 <__alt_data_end+0xfc011ff4>
 8012354:	2021883a 	mov	r16,r4
 8012358:	003f5306 	br	80120a8 <__alt_data_end+0xfc0120a8>
 801235c:	1821883a 	mov	r16,r3
 8012360:	003ef406 	br	8011f34 <__alt_data_end+0xfc011f34>
 8012364:	1806943a 	slli	r3,r3,16
 8012368:	9de6983a 	sll	r19,r19,r23
 801236c:	e73fffcc 	andi	fp,fp,65535
 8012370:	1f07883a 	add	r3,r3,fp
 8012374:	98ffbd2e 	bgeu	r19,r3,801226c <__alt_data_end+0xfc01226c>
 8012378:	90bfffc4 	addi	r2,r18,-1
 801237c:	0007883a 	mov	r3,zero
 8012380:	003f4e06 	br	80120bc <__alt_data_end+0xfc0120bc>
 8012384:	00800604 	movi	r2,24
 8012388:	003ef506 	br	8011f60 <__alt_data_end+0xfc011f60>
 801238c:	00800604 	movi	r2,24
 8012390:	003f0b06 	br	8011fc0 <__alt_data_end+0xfc011fc0>
 8012394:	00800604 	movi	r2,24
 8012398:	003ead06 	br	8011e50 <__alt_data_end+0xfc011e50>
 801239c:	0007883a 	mov	r3,zero
 80123a0:	00800044 	movi	r2,1
 80123a4:	003f4506 	br	80120bc <__alt_data_end+0xfc0120bc>
 80123a8:	80bf8e2e 	bgeu	r16,r2,80121e4 <__alt_data_end+0xfc0121e4>
 80123ac:	8c7fff84 	addi	r17,r17,-2
 80123b0:	8721883a 	add	r16,r16,fp
 80123b4:	003f8c06 	br	80121e8 <__alt_data_end+0xfc0121e8>
 80123b8:	18bf762e 	bgeu	r3,r2,8012194 <__alt_data_end+0xfc012194>
 80123bc:	ad7fff84 	addi	r21,r21,-2
 80123c0:	1f07883a 	add	r3,r3,fp
 80123c4:	003f7406 	br	8012198 <__alt_data_end+0xfc012198>
 80123c8:	1839883a 	mov	fp,r3
 80123cc:	003fdd06 	br	8012344 <__alt_data_end+0xfc012344>
 80123d0:	182f883a 	mov	r23,r3
 80123d4:	003fc506 	br	80122ec <__alt_data_end+0xfc0122ec>
 80123d8:	b5bfff84 	addi	r22,r22,-2
 80123dc:	3c4f883a 	add	r7,r7,r17
 80123e0:	003f1a06 	br	801204c <__alt_data_end+0xfc01204c>
 80123e4:	b5bfff84 	addi	r22,r22,-2
 80123e8:	1c47883a 	add	r3,r3,r17
 80123ec:	003ebc06 	br	8011ee0 <__alt_data_end+0xfc011ee0>

080123f0 <__umoddi3>:
 80123f0:	defff304 	addi	sp,sp,-52
 80123f4:	df000b15 	stw	fp,44(sp)
 80123f8:	dc400415 	stw	r17,16(sp)
 80123fc:	dc000315 	stw	r16,12(sp)
 8012400:	dfc00c15 	stw	ra,48(sp)
 8012404:	ddc00a15 	stw	r23,40(sp)
 8012408:	dd800915 	stw	r22,36(sp)
 801240c:	dd400815 	stw	r21,32(sp)
 8012410:	dd000715 	stw	r20,28(sp)
 8012414:	dcc00615 	stw	r19,24(sp)
 8012418:	dc800515 	stw	r18,20(sp)
 801241c:	2021883a 	mov	r16,r4
 8012420:	2823883a 	mov	r17,r5
 8012424:	2839883a 	mov	fp,r5
 8012428:	3800401e 	bne	r7,zero,801252c <__umoddi3+0x13c>
 801242c:	3027883a 	mov	r19,r6
 8012430:	2029883a 	mov	r20,r4
 8012434:	2980552e 	bgeu	r5,r6,801258c <__umoddi3+0x19c>
 8012438:	00bfffd4 	movui	r2,65535
 801243c:	1180a236 	bltu	r2,r6,80126c8 <__umoddi3+0x2d8>
 8012440:	01003fc4 	movi	r4,255
 8012444:	2189803a 	cmpltu	r4,r4,r6
 8012448:	200890fa 	slli	r4,r4,3
 801244c:	3104d83a 	srl	r2,r6,r4
 8012450:	00c200b4 	movhi	r3,2050
 8012454:	18e06204 	addi	r3,r3,-32376
 8012458:	1885883a 	add	r2,r3,r2
 801245c:	10c00003 	ldbu	r3,0(r2)
 8012460:	00800804 	movi	r2,32
 8012464:	1909883a 	add	r4,r3,r4
 8012468:	1125c83a 	sub	r18,r2,r4
 801246c:	90000526 	beq	r18,zero,8012484 <__umoddi3+0x94>
 8012470:	8ca2983a 	sll	r17,r17,r18
 8012474:	8108d83a 	srl	r4,r16,r4
 8012478:	34a6983a 	sll	r19,r6,r18
 801247c:	84a8983a 	sll	r20,r16,r18
 8012480:	2478b03a 	or	fp,r4,r17
 8012484:	982cd43a 	srli	r22,r19,16
 8012488:	e009883a 	mov	r4,fp
 801248c:	9dffffcc 	andi	r23,r19,65535
 8012490:	b00b883a 	mov	r5,r22
 8012494:	80049fc0 	call	80049fc <__umodsi3>
 8012498:	b00b883a 	mov	r5,r22
 801249c:	e009883a 	mov	r4,fp
 80124a0:	102b883a 	mov	r21,r2
 80124a4:	80049980 	call	8004998 <__udivsi3>
 80124a8:	100b883a 	mov	r5,r2
 80124ac:	b809883a 	mov	r4,r23
 80124b0:	8004a540 	call	8004a54 <__mulsi3>
 80124b4:	a82a943a 	slli	r21,r21,16
 80124b8:	a006d43a 	srli	r3,r20,16
 80124bc:	1d46b03a 	or	r3,r3,r21
 80124c0:	1880032e 	bgeu	r3,r2,80124d0 <__umoddi3+0xe0>
 80124c4:	1cc7883a 	add	r3,r3,r19
 80124c8:	1cc00136 	bltu	r3,r19,80124d0 <__umoddi3+0xe0>
 80124cc:	18813136 	bltu	r3,r2,8012994 <__umoddi3+0x5a4>
 80124d0:	18a1c83a 	sub	r16,r3,r2
 80124d4:	b00b883a 	mov	r5,r22
 80124d8:	8009883a 	mov	r4,r16
 80124dc:	80049fc0 	call	80049fc <__umodsi3>
 80124e0:	b00b883a 	mov	r5,r22
 80124e4:	8009883a 	mov	r4,r16
 80124e8:	1023883a 	mov	r17,r2
 80124ec:	80049980 	call	8004998 <__udivsi3>
 80124f0:	100b883a 	mov	r5,r2
 80124f4:	b809883a 	mov	r4,r23
 80124f8:	8822943a 	slli	r17,r17,16
 80124fc:	8004a540 	call	8004a54 <__mulsi3>
 8012500:	a0ffffcc 	andi	r3,r20,65535
 8012504:	1c46b03a 	or	r3,r3,r17
 8012508:	1880042e 	bgeu	r3,r2,801251c <__umoddi3+0x12c>
 801250c:	1cc7883a 	add	r3,r3,r19
 8012510:	1cc00236 	bltu	r3,r19,801251c <__umoddi3+0x12c>
 8012514:	1880012e 	bgeu	r3,r2,801251c <__umoddi3+0x12c>
 8012518:	1cc7883a 	add	r3,r3,r19
 801251c:	1885c83a 	sub	r2,r3,r2
 8012520:	1484d83a 	srl	r2,r2,r18
 8012524:	0007883a 	mov	r3,zero
 8012528:	00005306 	br	8012678 <__umoddi3+0x288>
 801252c:	29c05036 	bltu	r5,r7,8012670 <__umoddi3+0x280>
 8012530:	00bfffd4 	movui	r2,65535
 8012534:	11c05c2e 	bgeu	r2,r7,80126a8 <__umoddi3+0x2b8>
 8012538:	00804034 	movhi	r2,256
 801253c:	10bfffc4 	addi	r2,r2,-1
 8012540:	11c10636 	bltu	r2,r7,801295c <__umoddi3+0x56c>
 8012544:	01000404 	movi	r4,16
 8012548:	3904d83a 	srl	r2,r7,r4
 801254c:	00c200b4 	movhi	r3,2050
 8012550:	18e06204 	addi	r3,r3,-32376
 8012554:	1885883a 	add	r2,r3,r2
 8012558:	14c00003 	ldbu	r19,0(r2)
 801255c:	00c00804 	movi	r3,32
 8012560:	9927883a 	add	r19,r19,r4
 8012564:	1ce9c83a 	sub	r20,r3,r19
 8012568:	a0005c1e 	bne	r20,zero,80126dc <__umoddi3+0x2ec>
 801256c:	3c400136 	bltu	r7,r17,8012574 <__umoddi3+0x184>
 8012570:	81810a36 	bltu	r16,r6,801299c <__umoddi3+0x5ac>
 8012574:	8185c83a 	sub	r2,r16,r6
 8012578:	89e3c83a 	sub	r17,r17,r7
 801257c:	8089803a 	cmpltu	r4,r16,r2
 8012580:	8939c83a 	sub	fp,r17,r4
 8012584:	e007883a 	mov	r3,fp
 8012588:	00003b06 	br	8012678 <__umoddi3+0x288>
 801258c:	3000041e 	bne	r6,zero,80125a0 <__umoddi3+0x1b0>
 8012590:	000b883a 	mov	r5,zero
 8012594:	01000044 	movi	r4,1
 8012598:	80049980 	call	8004998 <__udivsi3>
 801259c:	1027883a 	mov	r19,r2
 80125a0:	00bfffd4 	movui	r2,65535
 80125a4:	14c0442e 	bgeu	r2,r19,80126b8 <__umoddi3+0x2c8>
 80125a8:	00804034 	movhi	r2,256
 80125ac:	10bfffc4 	addi	r2,r2,-1
 80125b0:	14c0ec36 	bltu	r2,r19,8012964 <__umoddi3+0x574>
 80125b4:	00800404 	movi	r2,16
 80125b8:	9886d83a 	srl	r3,r19,r2
 80125bc:	010200b4 	movhi	r4,2050
 80125c0:	21206204 	addi	r4,r4,-32376
 80125c4:	20c7883a 	add	r3,r4,r3
 80125c8:	18c00003 	ldbu	r3,0(r3)
 80125cc:	1887883a 	add	r3,r3,r2
 80125d0:	00800804 	movi	r2,32
 80125d4:	10e5c83a 	sub	r18,r2,r3
 80125d8:	9000ab1e 	bne	r18,zero,8012888 <__umoddi3+0x498>
 80125dc:	982cd43a 	srli	r22,r19,16
 80125e0:	8ce3c83a 	sub	r17,r17,r19
 80125e4:	9dffffcc 	andi	r23,r19,65535
 80125e8:	b00b883a 	mov	r5,r22
 80125ec:	8809883a 	mov	r4,r17
 80125f0:	80049fc0 	call	80049fc <__umodsi3>
 80125f4:	b00b883a 	mov	r5,r22
 80125f8:	8809883a 	mov	r4,r17
 80125fc:	102b883a 	mov	r21,r2
 8012600:	80049980 	call	8004998 <__udivsi3>
 8012604:	b80b883a 	mov	r5,r23
 8012608:	1009883a 	mov	r4,r2
 801260c:	8004a540 	call	8004a54 <__mulsi3>
 8012610:	a82a943a 	slli	r21,r21,16
 8012614:	a006d43a 	srli	r3,r20,16
 8012618:	1d46b03a 	or	r3,r3,r21
 801261c:	1880042e 	bgeu	r3,r2,8012630 <__umoddi3+0x240>
 8012620:	1cc7883a 	add	r3,r3,r19
 8012624:	1cc00236 	bltu	r3,r19,8012630 <__umoddi3+0x240>
 8012628:	1880012e 	bgeu	r3,r2,8012630 <__umoddi3+0x240>
 801262c:	1cc7883a 	add	r3,r3,r19
 8012630:	18a1c83a 	sub	r16,r3,r2
 8012634:	b00b883a 	mov	r5,r22
 8012638:	8009883a 	mov	r4,r16
 801263c:	80049fc0 	call	80049fc <__umodsi3>
 8012640:	1023883a 	mov	r17,r2
 8012644:	b00b883a 	mov	r5,r22
 8012648:	8009883a 	mov	r4,r16
 801264c:	80049980 	call	8004998 <__udivsi3>
 8012650:	8822943a 	slli	r17,r17,16
 8012654:	b80b883a 	mov	r5,r23
 8012658:	1009883a 	mov	r4,r2
 801265c:	8004a540 	call	8004a54 <__mulsi3>
 8012660:	a53fffcc 	andi	r20,r20,65535
 8012664:	a446b03a 	or	r3,r20,r17
 8012668:	18bfac2e 	bgeu	r3,r2,801251c <__alt_data_end+0xfc01251c>
 801266c:	003fa706 	br	801250c <__alt_data_end+0xfc01250c>
 8012670:	2005883a 	mov	r2,r4
 8012674:	2807883a 	mov	r3,r5
 8012678:	dfc00c17 	ldw	ra,48(sp)
 801267c:	df000b17 	ldw	fp,44(sp)
 8012680:	ddc00a17 	ldw	r23,40(sp)
 8012684:	dd800917 	ldw	r22,36(sp)
 8012688:	dd400817 	ldw	r21,32(sp)
 801268c:	dd000717 	ldw	r20,28(sp)
 8012690:	dcc00617 	ldw	r19,24(sp)
 8012694:	dc800517 	ldw	r18,20(sp)
 8012698:	dc400417 	ldw	r17,16(sp)
 801269c:	dc000317 	ldw	r16,12(sp)
 80126a0:	dec00d04 	addi	sp,sp,52
 80126a4:	f800283a 	ret
 80126a8:	04c03fc4 	movi	r19,255
 80126ac:	99c9803a 	cmpltu	r4,r19,r7
 80126b0:	200890fa 	slli	r4,r4,3
 80126b4:	003fa406 	br	8012548 <__alt_data_end+0xfc012548>
 80126b8:	00803fc4 	movi	r2,255
 80126bc:	14c5803a 	cmpltu	r2,r2,r19
 80126c0:	100490fa 	slli	r2,r2,3
 80126c4:	003fbc06 	br	80125b8 <__alt_data_end+0xfc0125b8>
 80126c8:	00804034 	movhi	r2,256
 80126cc:	10bfffc4 	addi	r2,r2,-1
 80126d0:	1180a636 	bltu	r2,r6,801296c <__umoddi3+0x57c>
 80126d4:	01000404 	movi	r4,16
 80126d8:	003f5c06 	br	801244c <__alt_data_end+0xfc01244c>
 80126dc:	3d0e983a 	sll	r7,r7,r20
 80126e0:	34ead83a 	srl	r21,r6,r19
 80126e4:	8cc6d83a 	srl	r3,r17,r19
 80126e8:	8d10983a 	sll	r8,r17,r20
 80126ec:	3d6ab03a 	or	r21,r7,r21
 80126f0:	a82cd43a 	srli	r22,r21,16
 80126f4:	84e2d83a 	srl	r17,r16,r19
 80126f8:	1809883a 	mov	r4,r3
 80126fc:	b00b883a 	mov	r5,r22
 8012700:	8a22b03a 	or	r17,r17,r8
 8012704:	3524983a 	sll	r18,r6,r20
 8012708:	dc400015 	stw	r17,0(sp)
 801270c:	d8c00115 	stw	r3,4(sp)
 8012710:	80049fc0 	call	80049fc <__umodsi3>
 8012714:	d8c00117 	ldw	r3,4(sp)
 8012718:	b00b883a 	mov	r5,r22
 801271c:	1039883a 	mov	fp,r2
 8012720:	1809883a 	mov	r4,r3
 8012724:	80049980 	call	8004998 <__udivsi3>
 8012728:	adffffcc 	andi	r23,r21,65535
 801272c:	100b883a 	mov	r5,r2
 8012730:	b809883a 	mov	r4,r23
 8012734:	1023883a 	mov	r17,r2
 8012738:	8004a540 	call	8004a54 <__mulsi3>
 801273c:	d9400017 	ldw	r5,0(sp)
 8012740:	e008943a 	slli	r4,fp,16
 8012744:	8520983a 	sll	r16,r16,r20
 8012748:	2806d43a 	srli	r3,r5,16
 801274c:	1906b03a 	or	r3,r3,r4
 8012750:	1880042e 	bgeu	r3,r2,8012764 <__umoddi3+0x374>
 8012754:	1d47883a 	add	r3,r3,r21
 8012758:	893fffc4 	addi	r4,r17,-1
 801275c:	1d40892e 	bgeu	r3,r21,8012984 <__umoddi3+0x594>
 8012760:	2023883a 	mov	r17,r4
 8012764:	18b9c83a 	sub	fp,r3,r2
 8012768:	b00b883a 	mov	r5,r22
 801276c:	e009883a 	mov	r4,fp
 8012770:	80049fc0 	call	80049fc <__umodsi3>
 8012774:	b00b883a 	mov	r5,r22
 8012778:	e009883a 	mov	r4,fp
 801277c:	d8800215 	stw	r2,8(sp)
 8012780:	80049980 	call	8004998 <__udivsi3>
 8012784:	100b883a 	mov	r5,r2
 8012788:	b809883a 	mov	r4,r23
 801278c:	102d883a 	mov	r22,r2
 8012790:	8004a540 	call	8004a54 <__mulsi3>
 8012794:	d9800217 	ldw	r6,8(sp)
 8012798:	d8c00017 	ldw	r3,0(sp)
 801279c:	300c943a 	slli	r6,r6,16
 80127a0:	1a3fffcc 	andi	r8,r3,65535
 80127a4:	4190b03a 	or	r8,r8,r6
 80127a8:	4080042e 	bgeu	r8,r2,80127bc <__umoddi3+0x3cc>
 80127ac:	4551883a 	add	r8,r8,r21
 80127b0:	b0ffffc4 	addi	r3,r22,-1
 80127b4:	45406f2e 	bgeu	r8,r21,8012974 <__umoddi3+0x584>
 80127b8:	182d883a 	mov	r22,r3
 80127bc:	880e943a 	slli	r7,r17,16
 80127c0:	9006d43a 	srli	r3,r18,16
 80127c4:	91bfffcc 	andi	r6,r18,65535
 80127c8:	3dacb03a 	or	r22,r7,r22
 80127cc:	b02ed43a 	srli	r23,r22,16
 80127d0:	b5bfffcc 	andi	r22,r22,65535
 80127d4:	300b883a 	mov	r5,r6
 80127d8:	b009883a 	mov	r4,r22
 80127dc:	40a3c83a 	sub	r17,r8,r2
 80127e0:	d8c00115 	stw	r3,4(sp)
 80127e4:	d9800215 	stw	r6,8(sp)
 80127e8:	8004a540 	call	8004a54 <__mulsi3>
 80127ec:	d9800217 	ldw	r6,8(sp)
 80127f0:	b809883a 	mov	r4,r23
 80127f4:	1039883a 	mov	fp,r2
 80127f8:	300b883a 	mov	r5,r6
 80127fc:	8004a540 	call	8004a54 <__mulsi3>
 8012800:	d8c00117 	ldw	r3,4(sp)
 8012804:	b809883a 	mov	r4,r23
 8012808:	d8800215 	stw	r2,8(sp)
 801280c:	180b883a 	mov	r5,r3
 8012810:	8004a540 	call	8004a54 <__mulsi3>
 8012814:	d8c00117 	ldw	r3,4(sp)
 8012818:	b009883a 	mov	r4,r22
 801281c:	102f883a 	mov	r23,r2
 8012820:	180b883a 	mov	r5,r3
 8012824:	8004a540 	call	8004a54 <__mulsi3>
 8012828:	d9800217 	ldw	r6,8(sp)
 801282c:	e006d43a 	srli	r3,fp,16
 8012830:	1185883a 	add	r2,r2,r6
 8012834:	1885883a 	add	r2,r3,r2
 8012838:	1180022e 	bgeu	r2,r6,8012844 <__umoddi3+0x454>
 801283c:	00c00074 	movhi	r3,1
 8012840:	b8ef883a 	add	r23,r23,r3
 8012844:	1006d43a 	srli	r3,r2,16
 8012848:	1004943a 	slli	r2,r2,16
 801284c:	e73fffcc 	andi	fp,fp,65535
 8012850:	1dc7883a 	add	r3,r3,r23
 8012854:	1739883a 	add	fp,r2,fp
 8012858:	88c03a36 	bltu	r17,r3,8012944 <__umoddi3+0x554>
 801285c:	88c05126 	beq	r17,r3,80129a4 <__umoddi3+0x5b4>
 8012860:	88c9c83a 	sub	r4,r17,r3
 8012864:	e00f883a 	mov	r7,fp
 8012868:	81cfc83a 	sub	r7,r16,r7
 801286c:	81c7803a 	cmpltu	r3,r16,r7
 8012870:	20c7c83a 	sub	r3,r4,r3
 8012874:	1cc4983a 	sll	r2,r3,r19
 8012878:	3d0ed83a 	srl	r7,r7,r20
 801287c:	1d06d83a 	srl	r3,r3,r20
 8012880:	11c4b03a 	or	r2,r2,r7
 8012884:	003f7c06 	br	8012678 <__alt_data_end+0xfc012678>
 8012888:	9ca6983a 	sll	r19,r19,r18
 801288c:	88f8d83a 	srl	fp,r17,r3
 8012890:	80c4d83a 	srl	r2,r16,r3
 8012894:	982cd43a 	srli	r22,r19,16
 8012898:	8ca2983a 	sll	r17,r17,r18
 801289c:	e009883a 	mov	r4,fp
 80128a0:	b00b883a 	mov	r5,r22
 80128a4:	146ab03a 	or	r21,r2,r17
 80128a8:	80049fc0 	call	80049fc <__umodsi3>
 80128ac:	b00b883a 	mov	r5,r22
 80128b0:	e009883a 	mov	r4,fp
 80128b4:	1029883a 	mov	r20,r2
 80128b8:	9dffffcc 	andi	r23,r19,65535
 80128bc:	80049980 	call	8004998 <__udivsi3>
 80128c0:	b809883a 	mov	r4,r23
 80128c4:	100b883a 	mov	r5,r2
 80128c8:	8004a540 	call	8004a54 <__mulsi3>
 80128cc:	a008943a 	slli	r4,r20,16
 80128d0:	a806d43a 	srli	r3,r21,16
 80128d4:	84a8983a 	sll	r20,r16,r18
 80128d8:	1906b03a 	or	r3,r3,r4
 80128dc:	1880042e 	bgeu	r3,r2,80128f0 <__umoddi3+0x500>
 80128e0:	1cc7883a 	add	r3,r3,r19
 80128e4:	1cc00236 	bltu	r3,r19,80128f0 <__umoddi3+0x500>
 80128e8:	1880012e 	bgeu	r3,r2,80128f0 <__umoddi3+0x500>
 80128ec:	1cc7883a 	add	r3,r3,r19
 80128f0:	18a3c83a 	sub	r17,r3,r2
 80128f4:	b00b883a 	mov	r5,r22
 80128f8:	8809883a 	mov	r4,r17
 80128fc:	80049fc0 	call	80049fc <__umodsi3>
 8012900:	b00b883a 	mov	r5,r22
 8012904:	8809883a 	mov	r4,r17
 8012908:	1021883a 	mov	r16,r2
 801290c:	80049980 	call	8004998 <__udivsi3>
 8012910:	100b883a 	mov	r5,r2
 8012914:	b809883a 	mov	r4,r23
 8012918:	8020943a 	slli	r16,r16,16
 801291c:	8004a540 	call	8004a54 <__mulsi3>
 8012920:	a8ffffcc 	andi	r3,r21,65535
 8012924:	1c06b03a 	or	r3,r3,r16
 8012928:	1880042e 	bgeu	r3,r2,801293c <__umoddi3+0x54c>
 801292c:	1cc7883a 	add	r3,r3,r19
 8012930:	1cc00236 	bltu	r3,r19,801293c <__umoddi3+0x54c>
 8012934:	1880012e 	bgeu	r3,r2,801293c <__umoddi3+0x54c>
 8012938:	1cc7883a 	add	r3,r3,r19
 801293c:	18a3c83a 	sub	r17,r3,r2
 8012940:	003f2906 	br	80125e8 <__alt_data_end+0xfc0125e8>
 8012944:	e48fc83a 	sub	r7,fp,r18
 8012948:	1d49c83a 	sub	r4,r3,r21
 801294c:	e1f9803a 	cmpltu	fp,fp,r7
 8012950:	2739c83a 	sub	fp,r4,fp
 8012954:	8f09c83a 	sub	r4,r17,fp
 8012958:	003fc306 	br	8012868 <__alt_data_end+0xfc012868>
 801295c:	01000604 	movi	r4,24
 8012960:	003ef906 	br	8012548 <__alt_data_end+0xfc012548>
 8012964:	00800604 	movi	r2,24
 8012968:	003f1306 	br	80125b8 <__alt_data_end+0xfc0125b8>
 801296c:	01000604 	movi	r4,24
 8012970:	003eb606 	br	801244c <__alt_data_end+0xfc01244c>
 8012974:	40bf902e 	bgeu	r8,r2,80127b8 <__alt_data_end+0xfc0127b8>
 8012978:	b5bfff84 	addi	r22,r22,-2
 801297c:	4551883a 	add	r8,r8,r21
 8012980:	003f8e06 	br	80127bc <__alt_data_end+0xfc0127bc>
 8012984:	18bf762e 	bgeu	r3,r2,8012760 <__alt_data_end+0xfc012760>
 8012988:	8c7fff84 	addi	r17,r17,-2
 801298c:	1d47883a 	add	r3,r3,r21
 8012990:	003f7406 	br	8012764 <__alt_data_end+0xfc012764>
 8012994:	1cc7883a 	add	r3,r3,r19
 8012998:	003ecd06 	br	80124d0 <__alt_data_end+0xfc0124d0>
 801299c:	8005883a 	mov	r2,r16
 80129a0:	003ef806 	br	8012584 <__alt_data_end+0xfc012584>
 80129a4:	873fe736 	bltu	r16,fp,8012944 <__alt_data_end+0xfc012944>
 80129a8:	e00f883a 	mov	r7,fp
 80129ac:	0009883a 	mov	r4,zero
 80129b0:	003fad06 	br	8012868 <__alt_data_end+0xfc012868>

080129b4 <__adddf3>:
 80129b4:	02c00434 	movhi	r11,16
 80129b8:	5affffc4 	addi	r11,r11,-1
 80129bc:	2806d7fa 	srli	r3,r5,31
 80129c0:	2ad4703a 	and	r10,r5,r11
 80129c4:	3ad2703a 	and	r9,r7,r11
 80129c8:	3804d53a 	srli	r2,r7,20
 80129cc:	3018d77a 	srli	r12,r6,29
 80129d0:	280ad53a 	srli	r5,r5,20
 80129d4:	501490fa 	slli	r10,r10,3
 80129d8:	2010d77a 	srli	r8,r4,29
 80129dc:	481290fa 	slli	r9,r9,3
 80129e0:	380ed7fa 	srli	r7,r7,31
 80129e4:	defffb04 	addi	sp,sp,-20
 80129e8:	dc800215 	stw	r18,8(sp)
 80129ec:	dc400115 	stw	r17,4(sp)
 80129f0:	dc000015 	stw	r16,0(sp)
 80129f4:	dfc00415 	stw	ra,16(sp)
 80129f8:	dcc00315 	stw	r19,12(sp)
 80129fc:	1c803fcc 	andi	r18,r3,255
 8012a00:	2c01ffcc 	andi	r16,r5,2047
 8012a04:	5210b03a 	or	r8,r10,r8
 8012a08:	202290fa 	slli	r17,r4,3
 8012a0c:	1081ffcc 	andi	r2,r2,2047
 8012a10:	4b12b03a 	or	r9,r9,r12
 8012a14:	300c90fa 	slli	r6,r6,3
 8012a18:	91c07526 	beq	r18,r7,8012bf0 <__adddf3+0x23c>
 8012a1c:	8087c83a 	sub	r3,r16,r2
 8012a20:	00c0ab0e 	bge	zero,r3,8012cd0 <__adddf3+0x31c>
 8012a24:	10002a1e 	bne	r2,zero,8012ad0 <__adddf3+0x11c>
 8012a28:	4984b03a 	or	r2,r9,r6
 8012a2c:	1000961e 	bne	r2,zero,8012c88 <__adddf3+0x2d4>
 8012a30:	888001cc 	andi	r2,r17,7
 8012a34:	10000726 	beq	r2,zero,8012a54 <__adddf3+0xa0>
 8012a38:	888003cc 	andi	r2,r17,15
 8012a3c:	00c00104 	movi	r3,4
 8012a40:	10c00426 	beq	r2,r3,8012a54 <__adddf3+0xa0>
 8012a44:	88c7883a 	add	r3,r17,r3
 8012a48:	1c63803a 	cmpltu	r17,r3,r17
 8012a4c:	4451883a 	add	r8,r8,r17
 8012a50:	1823883a 	mov	r17,r3
 8012a54:	4080202c 	andhi	r2,r8,128
 8012a58:	10005926 	beq	r2,zero,8012bc0 <__adddf3+0x20c>
 8012a5c:	84000044 	addi	r16,r16,1
 8012a60:	0081ffc4 	movi	r2,2047
 8012a64:	8080ba26 	beq	r16,r2,8012d50 <__adddf3+0x39c>
 8012a68:	00bfe034 	movhi	r2,65408
 8012a6c:	10bfffc4 	addi	r2,r2,-1
 8012a70:	4090703a 	and	r8,r8,r2
 8012a74:	4004977a 	slli	r2,r8,29
 8012a78:	4010927a 	slli	r8,r8,9
 8012a7c:	8822d0fa 	srli	r17,r17,3
 8012a80:	8401ffcc 	andi	r16,r16,2047
 8012a84:	4010d33a 	srli	r8,r8,12
 8012a88:	9007883a 	mov	r3,r18
 8012a8c:	1444b03a 	or	r2,r2,r17
 8012a90:	8401ffcc 	andi	r16,r16,2047
 8012a94:	8020953a 	slli	r16,r16,20
 8012a98:	18c03fcc 	andi	r3,r3,255
 8012a9c:	01000434 	movhi	r4,16
 8012aa0:	213fffc4 	addi	r4,r4,-1
 8012aa4:	180697fa 	slli	r3,r3,31
 8012aa8:	4110703a 	and	r8,r8,r4
 8012aac:	4410b03a 	or	r8,r8,r16
 8012ab0:	40c6b03a 	or	r3,r8,r3
 8012ab4:	dfc00417 	ldw	ra,16(sp)
 8012ab8:	dcc00317 	ldw	r19,12(sp)
 8012abc:	dc800217 	ldw	r18,8(sp)
 8012ac0:	dc400117 	ldw	r17,4(sp)
 8012ac4:	dc000017 	ldw	r16,0(sp)
 8012ac8:	dec00504 	addi	sp,sp,20
 8012acc:	f800283a 	ret
 8012ad0:	0081ffc4 	movi	r2,2047
 8012ad4:	80bfd626 	beq	r16,r2,8012a30 <__alt_data_end+0xfc012a30>
 8012ad8:	4a402034 	orhi	r9,r9,128
 8012adc:	00800e04 	movi	r2,56
 8012ae0:	10c09f16 	blt	r2,r3,8012d60 <__adddf3+0x3ac>
 8012ae4:	008007c4 	movi	r2,31
 8012ae8:	10c0c216 	blt	r2,r3,8012df4 <__adddf3+0x440>
 8012aec:	00800804 	movi	r2,32
 8012af0:	10c5c83a 	sub	r2,r2,r3
 8012af4:	488a983a 	sll	r5,r9,r2
 8012af8:	30c8d83a 	srl	r4,r6,r3
 8012afc:	3084983a 	sll	r2,r6,r2
 8012b00:	48c6d83a 	srl	r3,r9,r3
 8012b04:	290cb03a 	or	r6,r5,r4
 8012b08:	1004c03a 	cmpne	r2,r2,zero
 8012b0c:	308cb03a 	or	r6,r6,r2
 8012b10:	898dc83a 	sub	r6,r17,r6
 8012b14:	89a3803a 	cmpltu	r17,r17,r6
 8012b18:	40d1c83a 	sub	r8,r8,r3
 8012b1c:	4451c83a 	sub	r8,r8,r17
 8012b20:	3023883a 	mov	r17,r6
 8012b24:	4080202c 	andhi	r2,r8,128
 8012b28:	10002326 	beq	r2,zero,8012bb8 <__adddf3+0x204>
 8012b2c:	04c02034 	movhi	r19,128
 8012b30:	9cffffc4 	addi	r19,r19,-1
 8012b34:	44e6703a 	and	r19,r8,r19
 8012b38:	98007626 	beq	r19,zero,8012d14 <__adddf3+0x360>
 8012b3c:	9809883a 	mov	r4,r19
 8012b40:	80151f40 	call	80151f4 <__clzsi2>
 8012b44:	10fffe04 	addi	r3,r2,-8
 8012b48:	010007c4 	movi	r4,31
 8012b4c:	20c07716 	blt	r4,r3,8012d2c <__adddf3+0x378>
 8012b50:	00800804 	movi	r2,32
 8012b54:	10c5c83a 	sub	r2,r2,r3
 8012b58:	8884d83a 	srl	r2,r17,r2
 8012b5c:	98d0983a 	sll	r8,r19,r3
 8012b60:	88e2983a 	sll	r17,r17,r3
 8012b64:	1204b03a 	or	r2,r2,r8
 8012b68:	1c007416 	blt	r3,r16,8012d3c <__adddf3+0x388>
 8012b6c:	1c21c83a 	sub	r16,r3,r16
 8012b70:	82000044 	addi	r8,r16,1
 8012b74:	00c007c4 	movi	r3,31
 8012b78:	1a009116 	blt	r3,r8,8012dc0 <__adddf3+0x40c>
 8012b7c:	00c00804 	movi	r3,32
 8012b80:	1a07c83a 	sub	r3,r3,r8
 8012b84:	8a08d83a 	srl	r4,r17,r8
 8012b88:	88e2983a 	sll	r17,r17,r3
 8012b8c:	10c6983a 	sll	r3,r2,r3
 8012b90:	1210d83a 	srl	r8,r2,r8
 8012b94:	8804c03a 	cmpne	r2,r17,zero
 8012b98:	1906b03a 	or	r3,r3,r4
 8012b9c:	18a2b03a 	or	r17,r3,r2
 8012ba0:	0021883a 	mov	r16,zero
 8012ba4:	003fa206 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012ba8:	1890b03a 	or	r8,r3,r2
 8012bac:	40017d26 	beq	r8,zero,80131a4 <__adddf3+0x7f0>
 8012bb0:	1011883a 	mov	r8,r2
 8012bb4:	1823883a 	mov	r17,r3
 8012bb8:	888001cc 	andi	r2,r17,7
 8012bbc:	103f9e1e 	bne	r2,zero,8012a38 <__alt_data_end+0xfc012a38>
 8012bc0:	4004977a 	slli	r2,r8,29
 8012bc4:	8822d0fa 	srli	r17,r17,3
 8012bc8:	4010d0fa 	srli	r8,r8,3
 8012bcc:	9007883a 	mov	r3,r18
 8012bd0:	1444b03a 	or	r2,r2,r17
 8012bd4:	0101ffc4 	movi	r4,2047
 8012bd8:	81002426 	beq	r16,r4,8012c6c <__adddf3+0x2b8>
 8012bdc:	8120703a 	and	r16,r16,r4
 8012be0:	01000434 	movhi	r4,16
 8012be4:	213fffc4 	addi	r4,r4,-1
 8012be8:	4110703a 	and	r8,r8,r4
 8012bec:	003fa806 	br	8012a90 <__alt_data_end+0xfc012a90>
 8012bf0:	8089c83a 	sub	r4,r16,r2
 8012bf4:	01005e0e 	bge	zero,r4,8012d70 <__adddf3+0x3bc>
 8012bf8:	10002b26 	beq	r2,zero,8012ca8 <__adddf3+0x2f4>
 8012bfc:	0081ffc4 	movi	r2,2047
 8012c00:	80bf8b26 	beq	r16,r2,8012a30 <__alt_data_end+0xfc012a30>
 8012c04:	4a402034 	orhi	r9,r9,128
 8012c08:	00800e04 	movi	r2,56
 8012c0c:	1100a40e 	bge	r2,r4,8012ea0 <__adddf3+0x4ec>
 8012c10:	498cb03a 	or	r6,r9,r6
 8012c14:	300ac03a 	cmpne	r5,r6,zero
 8012c18:	0013883a 	mov	r9,zero
 8012c1c:	2c4b883a 	add	r5,r5,r17
 8012c20:	2c63803a 	cmpltu	r17,r5,r17
 8012c24:	4a11883a 	add	r8,r9,r8
 8012c28:	8a11883a 	add	r8,r17,r8
 8012c2c:	2823883a 	mov	r17,r5
 8012c30:	4080202c 	andhi	r2,r8,128
 8012c34:	103fe026 	beq	r2,zero,8012bb8 <__alt_data_end+0xfc012bb8>
 8012c38:	84000044 	addi	r16,r16,1
 8012c3c:	0081ffc4 	movi	r2,2047
 8012c40:	8080d226 	beq	r16,r2,8012f8c <__adddf3+0x5d8>
 8012c44:	00bfe034 	movhi	r2,65408
 8012c48:	10bfffc4 	addi	r2,r2,-1
 8012c4c:	4090703a 	and	r8,r8,r2
 8012c50:	880ad07a 	srli	r5,r17,1
 8012c54:	400897fa 	slli	r4,r8,31
 8012c58:	88c0004c 	andi	r3,r17,1
 8012c5c:	28e2b03a 	or	r17,r5,r3
 8012c60:	4010d07a 	srli	r8,r8,1
 8012c64:	2462b03a 	or	r17,r4,r17
 8012c68:	003f7106 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012c6c:	4088b03a 	or	r4,r8,r2
 8012c70:	20014526 	beq	r4,zero,8013188 <__adddf3+0x7d4>
 8012c74:	01000434 	movhi	r4,16
 8012c78:	42000234 	orhi	r8,r8,8
 8012c7c:	213fffc4 	addi	r4,r4,-1
 8012c80:	4110703a 	and	r8,r8,r4
 8012c84:	003f8206 	br	8012a90 <__alt_data_end+0xfc012a90>
 8012c88:	18ffffc4 	addi	r3,r3,-1
 8012c8c:	1800491e 	bne	r3,zero,8012db4 <__adddf3+0x400>
 8012c90:	898bc83a 	sub	r5,r17,r6
 8012c94:	8963803a 	cmpltu	r17,r17,r5
 8012c98:	4251c83a 	sub	r8,r8,r9
 8012c9c:	4451c83a 	sub	r8,r8,r17
 8012ca0:	2823883a 	mov	r17,r5
 8012ca4:	003f9f06 	br	8012b24 <__alt_data_end+0xfc012b24>
 8012ca8:	4984b03a 	or	r2,r9,r6
 8012cac:	103f6026 	beq	r2,zero,8012a30 <__alt_data_end+0xfc012a30>
 8012cb0:	213fffc4 	addi	r4,r4,-1
 8012cb4:	2000931e 	bne	r4,zero,8012f04 <__adddf3+0x550>
 8012cb8:	898d883a 	add	r6,r17,r6
 8012cbc:	3463803a 	cmpltu	r17,r6,r17
 8012cc0:	4251883a 	add	r8,r8,r9
 8012cc4:	8a11883a 	add	r8,r17,r8
 8012cc8:	3023883a 	mov	r17,r6
 8012ccc:	003fd806 	br	8012c30 <__alt_data_end+0xfc012c30>
 8012cd0:	1800541e 	bne	r3,zero,8012e24 <__adddf3+0x470>
 8012cd4:	80800044 	addi	r2,r16,1
 8012cd8:	1081ffcc 	andi	r2,r2,2047
 8012cdc:	00c00044 	movi	r3,1
 8012ce0:	1880a00e 	bge	r3,r2,8012f64 <__adddf3+0x5b0>
 8012ce4:	8989c83a 	sub	r4,r17,r6
 8012ce8:	8905803a 	cmpltu	r2,r17,r4
 8012cec:	4267c83a 	sub	r19,r8,r9
 8012cf0:	98a7c83a 	sub	r19,r19,r2
 8012cf4:	9880202c 	andhi	r2,r19,128
 8012cf8:	10006326 	beq	r2,zero,8012e88 <__adddf3+0x4d4>
 8012cfc:	3463c83a 	sub	r17,r6,r17
 8012d00:	4a07c83a 	sub	r3,r9,r8
 8012d04:	344d803a 	cmpltu	r6,r6,r17
 8012d08:	19a7c83a 	sub	r19,r3,r6
 8012d0c:	3825883a 	mov	r18,r7
 8012d10:	983f8a1e 	bne	r19,zero,8012b3c <__alt_data_end+0xfc012b3c>
 8012d14:	8809883a 	mov	r4,r17
 8012d18:	80151f40 	call	80151f4 <__clzsi2>
 8012d1c:	10800804 	addi	r2,r2,32
 8012d20:	10fffe04 	addi	r3,r2,-8
 8012d24:	010007c4 	movi	r4,31
 8012d28:	20ff890e 	bge	r4,r3,8012b50 <__alt_data_end+0xfc012b50>
 8012d2c:	10bff604 	addi	r2,r2,-40
 8012d30:	8884983a 	sll	r2,r17,r2
 8012d34:	0023883a 	mov	r17,zero
 8012d38:	1c3f8c0e 	bge	r3,r16,8012b6c <__alt_data_end+0xfc012b6c>
 8012d3c:	023fe034 	movhi	r8,65408
 8012d40:	423fffc4 	addi	r8,r8,-1
 8012d44:	80e1c83a 	sub	r16,r16,r3
 8012d48:	1210703a 	and	r8,r2,r8
 8012d4c:	003f3806 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012d50:	9007883a 	mov	r3,r18
 8012d54:	0011883a 	mov	r8,zero
 8012d58:	0005883a 	mov	r2,zero
 8012d5c:	003f4c06 	br	8012a90 <__alt_data_end+0xfc012a90>
 8012d60:	498cb03a 	or	r6,r9,r6
 8012d64:	300cc03a 	cmpne	r6,r6,zero
 8012d68:	0007883a 	mov	r3,zero
 8012d6c:	003f6806 	br	8012b10 <__alt_data_end+0xfc012b10>
 8012d70:	20009c1e 	bne	r4,zero,8012fe4 <__adddf3+0x630>
 8012d74:	80800044 	addi	r2,r16,1
 8012d78:	1141ffcc 	andi	r5,r2,2047
 8012d7c:	01000044 	movi	r4,1
 8012d80:	2140670e 	bge	r4,r5,8012f20 <__adddf3+0x56c>
 8012d84:	0101ffc4 	movi	r4,2047
 8012d88:	11007f26 	beq	r2,r4,8012f88 <__adddf3+0x5d4>
 8012d8c:	898d883a 	add	r6,r17,r6
 8012d90:	4247883a 	add	r3,r8,r9
 8012d94:	3451803a 	cmpltu	r8,r6,r17
 8012d98:	40d1883a 	add	r8,r8,r3
 8012d9c:	402297fa 	slli	r17,r8,31
 8012da0:	300cd07a 	srli	r6,r6,1
 8012da4:	4010d07a 	srli	r8,r8,1
 8012da8:	1021883a 	mov	r16,r2
 8012dac:	89a2b03a 	or	r17,r17,r6
 8012db0:	003f1f06 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012db4:	0081ffc4 	movi	r2,2047
 8012db8:	80bf481e 	bne	r16,r2,8012adc <__alt_data_end+0xfc012adc>
 8012dbc:	003f1c06 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012dc0:	843ff844 	addi	r16,r16,-31
 8012dc4:	01000804 	movi	r4,32
 8012dc8:	1406d83a 	srl	r3,r2,r16
 8012dcc:	41005026 	beq	r8,r4,8012f10 <__adddf3+0x55c>
 8012dd0:	01001004 	movi	r4,64
 8012dd4:	2211c83a 	sub	r8,r4,r8
 8012dd8:	1204983a 	sll	r2,r2,r8
 8012ddc:	88a2b03a 	or	r17,r17,r2
 8012de0:	8822c03a 	cmpne	r17,r17,zero
 8012de4:	1c62b03a 	or	r17,r3,r17
 8012de8:	0011883a 	mov	r8,zero
 8012dec:	0021883a 	mov	r16,zero
 8012df0:	003f7106 	br	8012bb8 <__alt_data_end+0xfc012bb8>
 8012df4:	193ff804 	addi	r4,r3,-32
 8012df8:	00800804 	movi	r2,32
 8012dfc:	4908d83a 	srl	r4,r9,r4
 8012e00:	18804526 	beq	r3,r2,8012f18 <__adddf3+0x564>
 8012e04:	00801004 	movi	r2,64
 8012e08:	10c5c83a 	sub	r2,r2,r3
 8012e0c:	4886983a 	sll	r3,r9,r2
 8012e10:	198cb03a 	or	r6,r3,r6
 8012e14:	300cc03a 	cmpne	r6,r6,zero
 8012e18:	218cb03a 	or	r6,r4,r6
 8012e1c:	0007883a 	mov	r3,zero
 8012e20:	003f3b06 	br	8012b10 <__alt_data_end+0xfc012b10>
 8012e24:	80002a26 	beq	r16,zero,8012ed0 <__adddf3+0x51c>
 8012e28:	0101ffc4 	movi	r4,2047
 8012e2c:	11006826 	beq	r2,r4,8012fd0 <__adddf3+0x61c>
 8012e30:	00c7c83a 	sub	r3,zero,r3
 8012e34:	42002034 	orhi	r8,r8,128
 8012e38:	01000e04 	movi	r4,56
 8012e3c:	20c07c16 	blt	r4,r3,8013030 <__adddf3+0x67c>
 8012e40:	010007c4 	movi	r4,31
 8012e44:	20c0da16 	blt	r4,r3,80131b0 <__adddf3+0x7fc>
 8012e48:	01000804 	movi	r4,32
 8012e4c:	20c9c83a 	sub	r4,r4,r3
 8012e50:	4114983a 	sll	r10,r8,r4
 8012e54:	88cad83a 	srl	r5,r17,r3
 8012e58:	8908983a 	sll	r4,r17,r4
 8012e5c:	40c6d83a 	srl	r3,r8,r3
 8012e60:	5162b03a 	or	r17,r10,r5
 8012e64:	2008c03a 	cmpne	r4,r4,zero
 8012e68:	8922b03a 	or	r17,r17,r4
 8012e6c:	3463c83a 	sub	r17,r6,r17
 8012e70:	48c7c83a 	sub	r3,r9,r3
 8012e74:	344d803a 	cmpltu	r6,r6,r17
 8012e78:	1991c83a 	sub	r8,r3,r6
 8012e7c:	1021883a 	mov	r16,r2
 8012e80:	3825883a 	mov	r18,r7
 8012e84:	003f2706 	br	8012b24 <__alt_data_end+0xfc012b24>
 8012e88:	24d0b03a 	or	r8,r4,r19
 8012e8c:	40001b1e 	bne	r8,zero,8012efc <__adddf3+0x548>
 8012e90:	0005883a 	mov	r2,zero
 8012e94:	0007883a 	mov	r3,zero
 8012e98:	0021883a 	mov	r16,zero
 8012e9c:	003f4d06 	br	8012bd4 <__alt_data_end+0xfc012bd4>
 8012ea0:	008007c4 	movi	r2,31
 8012ea4:	11003c16 	blt	r2,r4,8012f98 <__adddf3+0x5e4>
 8012ea8:	00800804 	movi	r2,32
 8012eac:	1105c83a 	sub	r2,r2,r4
 8012eb0:	488e983a 	sll	r7,r9,r2
 8012eb4:	310ad83a 	srl	r5,r6,r4
 8012eb8:	3084983a 	sll	r2,r6,r2
 8012ebc:	4912d83a 	srl	r9,r9,r4
 8012ec0:	394ab03a 	or	r5,r7,r5
 8012ec4:	1004c03a 	cmpne	r2,r2,zero
 8012ec8:	288ab03a 	or	r5,r5,r2
 8012ecc:	003f5306 	br	8012c1c <__alt_data_end+0xfc012c1c>
 8012ed0:	4448b03a 	or	r4,r8,r17
 8012ed4:	20003e26 	beq	r4,zero,8012fd0 <__adddf3+0x61c>
 8012ed8:	00c6303a 	nor	r3,zero,r3
 8012edc:	18003a1e 	bne	r3,zero,8012fc8 <__adddf3+0x614>
 8012ee0:	3463c83a 	sub	r17,r6,r17
 8012ee4:	4a07c83a 	sub	r3,r9,r8
 8012ee8:	344d803a 	cmpltu	r6,r6,r17
 8012eec:	1991c83a 	sub	r8,r3,r6
 8012ef0:	1021883a 	mov	r16,r2
 8012ef4:	3825883a 	mov	r18,r7
 8012ef8:	003f0a06 	br	8012b24 <__alt_data_end+0xfc012b24>
 8012efc:	2023883a 	mov	r17,r4
 8012f00:	003f0d06 	br	8012b38 <__alt_data_end+0xfc012b38>
 8012f04:	0081ffc4 	movi	r2,2047
 8012f08:	80bf3f1e 	bne	r16,r2,8012c08 <__alt_data_end+0xfc012c08>
 8012f0c:	003ec806 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012f10:	0005883a 	mov	r2,zero
 8012f14:	003fb106 	br	8012ddc <__alt_data_end+0xfc012ddc>
 8012f18:	0007883a 	mov	r3,zero
 8012f1c:	003fbc06 	br	8012e10 <__alt_data_end+0xfc012e10>
 8012f20:	4444b03a 	or	r2,r8,r17
 8012f24:	8000871e 	bne	r16,zero,8013144 <__adddf3+0x790>
 8012f28:	1000ba26 	beq	r2,zero,8013214 <__adddf3+0x860>
 8012f2c:	4984b03a 	or	r2,r9,r6
 8012f30:	103ebf26 	beq	r2,zero,8012a30 <__alt_data_end+0xfc012a30>
 8012f34:	8985883a 	add	r2,r17,r6
 8012f38:	4247883a 	add	r3,r8,r9
 8012f3c:	1451803a 	cmpltu	r8,r2,r17
 8012f40:	40d1883a 	add	r8,r8,r3
 8012f44:	40c0202c 	andhi	r3,r8,128
 8012f48:	1023883a 	mov	r17,r2
 8012f4c:	183f1a26 	beq	r3,zero,8012bb8 <__alt_data_end+0xfc012bb8>
 8012f50:	00bfe034 	movhi	r2,65408
 8012f54:	10bfffc4 	addi	r2,r2,-1
 8012f58:	2021883a 	mov	r16,r4
 8012f5c:	4090703a 	and	r8,r8,r2
 8012f60:	003eb306 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012f64:	4444b03a 	or	r2,r8,r17
 8012f68:	8000291e 	bne	r16,zero,8013010 <__adddf3+0x65c>
 8012f6c:	10004b1e 	bne	r2,zero,801309c <__adddf3+0x6e8>
 8012f70:	4990b03a 	or	r8,r9,r6
 8012f74:	40008b26 	beq	r8,zero,80131a4 <__adddf3+0x7f0>
 8012f78:	4811883a 	mov	r8,r9
 8012f7c:	3023883a 	mov	r17,r6
 8012f80:	3825883a 	mov	r18,r7
 8012f84:	003eaa06 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012f88:	1021883a 	mov	r16,r2
 8012f8c:	0011883a 	mov	r8,zero
 8012f90:	0005883a 	mov	r2,zero
 8012f94:	003f0f06 	br	8012bd4 <__alt_data_end+0xfc012bd4>
 8012f98:	217ff804 	addi	r5,r4,-32
 8012f9c:	00800804 	movi	r2,32
 8012fa0:	494ad83a 	srl	r5,r9,r5
 8012fa4:	20807d26 	beq	r4,r2,801319c <__adddf3+0x7e8>
 8012fa8:	00801004 	movi	r2,64
 8012fac:	1109c83a 	sub	r4,r2,r4
 8012fb0:	4912983a 	sll	r9,r9,r4
 8012fb4:	498cb03a 	or	r6,r9,r6
 8012fb8:	300cc03a 	cmpne	r6,r6,zero
 8012fbc:	298ab03a 	or	r5,r5,r6
 8012fc0:	0013883a 	mov	r9,zero
 8012fc4:	003f1506 	br	8012c1c <__alt_data_end+0xfc012c1c>
 8012fc8:	0101ffc4 	movi	r4,2047
 8012fcc:	113f9a1e 	bne	r2,r4,8012e38 <__alt_data_end+0xfc012e38>
 8012fd0:	4811883a 	mov	r8,r9
 8012fd4:	3023883a 	mov	r17,r6
 8012fd8:	1021883a 	mov	r16,r2
 8012fdc:	3825883a 	mov	r18,r7
 8012fe0:	003e9306 	br	8012a30 <__alt_data_end+0xfc012a30>
 8012fe4:	8000161e 	bne	r16,zero,8013040 <__adddf3+0x68c>
 8012fe8:	444ab03a 	or	r5,r8,r17
 8012fec:	28005126 	beq	r5,zero,8013134 <__adddf3+0x780>
 8012ff0:	0108303a 	nor	r4,zero,r4
 8012ff4:	20004d1e 	bne	r4,zero,801312c <__adddf3+0x778>
 8012ff8:	89a3883a 	add	r17,r17,r6
 8012ffc:	4253883a 	add	r9,r8,r9
 8013000:	898d803a 	cmpltu	r6,r17,r6
 8013004:	3251883a 	add	r8,r6,r9
 8013008:	1021883a 	mov	r16,r2
 801300c:	003f0806 	br	8012c30 <__alt_data_end+0xfc012c30>
 8013010:	1000301e 	bne	r2,zero,80130d4 <__adddf3+0x720>
 8013014:	4984b03a 	or	r2,r9,r6
 8013018:	10007126 	beq	r2,zero,80131e0 <__adddf3+0x82c>
 801301c:	4811883a 	mov	r8,r9
 8013020:	3023883a 	mov	r17,r6
 8013024:	3825883a 	mov	r18,r7
 8013028:	0401ffc4 	movi	r16,2047
 801302c:	003e8006 	br	8012a30 <__alt_data_end+0xfc012a30>
 8013030:	4462b03a 	or	r17,r8,r17
 8013034:	8822c03a 	cmpne	r17,r17,zero
 8013038:	0007883a 	mov	r3,zero
 801303c:	003f8b06 	br	8012e6c <__alt_data_end+0xfc012e6c>
 8013040:	0141ffc4 	movi	r5,2047
 8013044:	11403b26 	beq	r2,r5,8013134 <__adddf3+0x780>
 8013048:	0109c83a 	sub	r4,zero,r4
 801304c:	42002034 	orhi	r8,r8,128
 8013050:	01400e04 	movi	r5,56
 8013054:	29006716 	blt	r5,r4,80131f4 <__adddf3+0x840>
 8013058:	014007c4 	movi	r5,31
 801305c:	29007016 	blt	r5,r4,8013220 <__adddf3+0x86c>
 8013060:	01400804 	movi	r5,32
 8013064:	290bc83a 	sub	r5,r5,r4
 8013068:	4154983a 	sll	r10,r8,r5
 801306c:	890ed83a 	srl	r7,r17,r4
 8013070:	894a983a 	sll	r5,r17,r5
 8013074:	4108d83a 	srl	r4,r8,r4
 8013078:	51e2b03a 	or	r17,r10,r7
 801307c:	280ac03a 	cmpne	r5,r5,zero
 8013080:	8962b03a 	or	r17,r17,r5
 8013084:	89a3883a 	add	r17,r17,r6
 8013088:	2253883a 	add	r9,r4,r9
 801308c:	898d803a 	cmpltu	r6,r17,r6
 8013090:	3251883a 	add	r8,r6,r9
 8013094:	1021883a 	mov	r16,r2
 8013098:	003ee506 	br	8012c30 <__alt_data_end+0xfc012c30>
 801309c:	4984b03a 	or	r2,r9,r6
 80130a0:	103e6326 	beq	r2,zero,8012a30 <__alt_data_end+0xfc012a30>
 80130a4:	8987c83a 	sub	r3,r17,r6
 80130a8:	88c9803a 	cmpltu	r4,r17,r3
 80130ac:	4245c83a 	sub	r2,r8,r9
 80130b0:	1105c83a 	sub	r2,r2,r4
 80130b4:	1100202c 	andhi	r4,r2,128
 80130b8:	203ebb26 	beq	r4,zero,8012ba8 <__alt_data_end+0xfc012ba8>
 80130bc:	3463c83a 	sub	r17,r6,r17
 80130c0:	4a07c83a 	sub	r3,r9,r8
 80130c4:	344d803a 	cmpltu	r6,r6,r17
 80130c8:	1991c83a 	sub	r8,r3,r6
 80130cc:	3825883a 	mov	r18,r7
 80130d0:	003e5706 	br	8012a30 <__alt_data_end+0xfc012a30>
 80130d4:	4984b03a 	or	r2,r9,r6
 80130d8:	10002e26 	beq	r2,zero,8013194 <__adddf3+0x7e0>
 80130dc:	4004d0fa 	srli	r2,r8,3
 80130e0:	8822d0fa 	srli	r17,r17,3
 80130e4:	4010977a 	slli	r8,r8,29
 80130e8:	10c0022c 	andhi	r3,r2,8
 80130ec:	4462b03a 	or	r17,r8,r17
 80130f0:	18000826 	beq	r3,zero,8013114 <__adddf3+0x760>
 80130f4:	4808d0fa 	srli	r4,r9,3
 80130f8:	20c0022c 	andhi	r3,r4,8
 80130fc:	1800051e 	bne	r3,zero,8013114 <__adddf3+0x760>
 8013100:	300cd0fa 	srli	r6,r6,3
 8013104:	4806977a 	slli	r3,r9,29
 8013108:	2005883a 	mov	r2,r4
 801310c:	3825883a 	mov	r18,r7
 8013110:	19a2b03a 	or	r17,r3,r6
 8013114:	8810d77a 	srli	r8,r17,29
 8013118:	100490fa 	slli	r2,r2,3
 801311c:	882290fa 	slli	r17,r17,3
 8013120:	0401ffc4 	movi	r16,2047
 8013124:	4090b03a 	or	r8,r8,r2
 8013128:	003e4106 	br	8012a30 <__alt_data_end+0xfc012a30>
 801312c:	0141ffc4 	movi	r5,2047
 8013130:	117fc71e 	bne	r2,r5,8013050 <__alt_data_end+0xfc013050>
 8013134:	4811883a 	mov	r8,r9
 8013138:	3023883a 	mov	r17,r6
 801313c:	1021883a 	mov	r16,r2
 8013140:	003e3b06 	br	8012a30 <__alt_data_end+0xfc012a30>
 8013144:	10002f26 	beq	r2,zero,8013204 <__adddf3+0x850>
 8013148:	4984b03a 	or	r2,r9,r6
 801314c:	10001126 	beq	r2,zero,8013194 <__adddf3+0x7e0>
 8013150:	4004d0fa 	srli	r2,r8,3
 8013154:	8822d0fa 	srli	r17,r17,3
 8013158:	4010977a 	slli	r8,r8,29
 801315c:	10c0022c 	andhi	r3,r2,8
 8013160:	4462b03a 	or	r17,r8,r17
 8013164:	183feb26 	beq	r3,zero,8013114 <__alt_data_end+0xfc013114>
 8013168:	4808d0fa 	srli	r4,r9,3
 801316c:	20c0022c 	andhi	r3,r4,8
 8013170:	183fe81e 	bne	r3,zero,8013114 <__alt_data_end+0xfc013114>
 8013174:	300cd0fa 	srli	r6,r6,3
 8013178:	4806977a 	slli	r3,r9,29
 801317c:	2005883a 	mov	r2,r4
 8013180:	19a2b03a 	or	r17,r3,r6
 8013184:	003fe306 	br	8013114 <__alt_data_end+0xfc013114>
 8013188:	0011883a 	mov	r8,zero
 801318c:	0005883a 	mov	r2,zero
 8013190:	003e3f06 	br	8012a90 <__alt_data_end+0xfc012a90>
 8013194:	0401ffc4 	movi	r16,2047
 8013198:	003e2506 	br	8012a30 <__alt_data_end+0xfc012a30>
 801319c:	0013883a 	mov	r9,zero
 80131a0:	003f8406 	br	8012fb4 <__alt_data_end+0xfc012fb4>
 80131a4:	0005883a 	mov	r2,zero
 80131a8:	0007883a 	mov	r3,zero
 80131ac:	003e8906 	br	8012bd4 <__alt_data_end+0xfc012bd4>
 80131b0:	197ff804 	addi	r5,r3,-32
 80131b4:	01000804 	movi	r4,32
 80131b8:	414ad83a 	srl	r5,r8,r5
 80131bc:	19002426 	beq	r3,r4,8013250 <__adddf3+0x89c>
 80131c0:	01001004 	movi	r4,64
 80131c4:	20c7c83a 	sub	r3,r4,r3
 80131c8:	40c6983a 	sll	r3,r8,r3
 80131cc:	1c46b03a 	or	r3,r3,r17
 80131d0:	1806c03a 	cmpne	r3,r3,zero
 80131d4:	28e2b03a 	or	r17,r5,r3
 80131d8:	0007883a 	mov	r3,zero
 80131dc:	003f2306 	br	8012e6c <__alt_data_end+0xfc012e6c>
 80131e0:	0007883a 	mov	r3,zero
 80131e4:	5811883a 	mov	r8,r11
 80131e8:	00bfffc4 	movi	r2,-1
 80131ec:	0401ffc4 	movi	r16,2047
 80131f0:	003e7806 	br	8012bd4 <__alt_data_end+0xfc012bd4>
 80131f4:	4462b03a 	or	r17,r8,r17
 80131f8:	8822c03a 	cmpne	r17,r17,zero
 80131fc:	0009883a 	mov	r4,zero
 8013200:	003fa006 	br	8013084 <__alt_data_end+0xfc013084>
 8013204:	4811883a 	mov	r8,r9
 8013208:	3023883a 	mov	r17,r6
 801320c:	0401ffc4 	movi	r16,2047
 8013210:	003e0706 	br	8012a30 <__alt_data_end+0xfc012a30>
 8013214:	4811883a 	mov	r8,r9
 8013218:	3023883a 	mov	r17,r6
 801321c:	003e0406 	br	8012a30 <__alt_data_end+0xfc012a30>
 8013220:	21fff804 	addi	r7,r4,-32
 8013224:	01400804 	movi	r5,32
 8013228:	41ced83a 	srl	r7,r8,r7
 801322c:	21400a26 	beq	r4,r5,8013258 <__adddf3+0x8a4>
 8013230:	01401004 	movi	r5,64
 8013234:	2909c83a 	sub	r4,r5,r4
 8013238:	4108983a 	sll	r4,r8,r4
 801323c:	2448b03a 	or	r4,r4,r17
 8013240:	2008c03a 	cmpne	r4,r4,zero
 8013244:	3922b03a 	or	r17,r7,r4
 8013248:	0009883a 	mov	r4,zero
 801324c:	003f8d06 	br	8013084 <__alt_data_end+0xfc013084>
 8013250:	0007883a 	mov	r3,zero
 8013254:	003fdd06 	br	80131cc <__alt_data_end+0xfc0131cc>
 8013258:	0009883a 	mov	r4,zero
 801325c:	003ff706 	br	801323c <__alt_data_end+0xfc01323c>

08013260 <__divdf3>:
 8013260:	defff004 	addi	sp,sp,-64
 8013264:	dc800815 	stw	r18,32(sp)
 8013268:	2824d53a 	srli	r18,r5,20
 801326c:	dd800c15 	stw	r22,48(sp)
 8013270:	282cd7fa 	srli	r22,r5,31
 8013274:	dc000615 	stw	r16,24(sp)
 8013278:	04000434 	movhi	r16,16
 801327c:	843fffc4 	addi	r16,r16,-1
 8013280:	dfc00f15 	stw	ra,60(sp)
 8013284:	df000e15 	stw	fp,56(sp)
 8013288:	ddc00d15 	stw	r23,52(sp)
 801328c:	dd400b15 	stw	r21,44(sp)
 8013290:	dd000a15 	stw	r20,40(sp)
 8013294:	dcc00915 	stw	r19,36(sp)
 8013298:	dc400715 	stw	r17,28(sp)
 801329c:	9481ffcc 	andi	r18,r18,2047
 80132a0:	2c20703a 	and	r16,r5,r16
 80132a4:	b2003fcc 	andi	r8,r22,255
 80132a8:	90006126 	beq	r18,zero,8013430 <__divdf3+0x1d0>
 80132ac:	0081ffc4 	movi	r2,2047
 80132b0:	202b883a 	mov	r21,r4
 80132b4:	90803726 	beq	r18,r2,8013394 <__divdf3+0x134>
 80132b8:	80800434 	orhi	r2,r16,16
 80132bc:	100490fa 	slli	r2,r2,3
 80132c0:	2020d77a 	srli	r16,r4,29
 80132c4:	202a90fa 	slli	r21,r4,3
 80132c8:	94bf0044 	addi	r18,r18,-1023
 80132cc:	80a0b03a 	or	r16,r16,r2
 80132d0:	0013883a 	mov	r9,zero
 80132d4:	000b883a 	mov	r5,zero
 80132d8:	3806d53a 	srli	r3,r7,20
 80132dc:	382ed7fa 	srli	r23,r7,31
 80132e0:	04400434 	movhi	r17,16
 80132e4:	8c7fffc4 	addi	r17,r17,-1
 80132e8:	18c1ffcc 	andi	r3,r3,2047
 80132ec:	3029883a 	mov	r20,r6
 80132f0:	3c62703a 	and	r17,r7,r17
 80132f4:	bf003fcc 	andi	fp,r23,255
 80132f8:	18006e26 	beq	r3,zero,80134b4 <__divdf3+0x254>
 80132fc:	0081ffc4 	movi	r2,2047
 8013300:	18806626 	beq	r3,r2,801349c <__divdf3+0x23c>
 8013304:	88800434 	orhi	r2,r17,16
 8013308:	100490fa 	slli	r2,r2,3
 801330c:	3022d77a 	srli	r17,r6,29
 8013310:	302890fa 	slli	r20,r6,3
 8013314:	18ff0044 	addi	r3,r3,-1023
 8013318:	88a2b03a 	or	r17,r17,r2
 801331c:	000f883a 	mov	r7,zero
 8013320:	b5e6f03a 	xor	r19,r22,r23
 8013324:	3a4cb03a 	or	r6,r7,r9
 8013328:	008003c4 	movi	r2,15
 801332c:	9809883a 	mov	r4,r19
 8013330:	90c7c83a 	sub	r3,r18,r3
 8013334:	9cc03fcc 	andi	r19,r19,255
 8013338:	11809636 	bltu	r2,r6,8013594 <__divdf3+0x334>
 801333c:	300c90ba 	slli	r6,r6,2
 8013340:	00820074 	movhi	r2,2049
 8013344:	108cd504 	addi	r2,r2,13140
 8013348:	308d883a 	add	r6,r6,r2
 801334c:	30800017 	ldw	r2,0(r6)
 8013350:	1000683a 	jmp	r2
 8013354:	08013594 	ori	zero,at,1238
 8013358:	080133cc 	andi	zero,at,1231
 801335c:	08013584 	addi	zero,at,1238
 8013360:	080133c0 	call	80133c <__alt_mem_onchip_memory2_0+0x80133c>
 8013364:	08013584 	addi	zero,at,1238
 8013368:	08013558 	cmpnei	zero,at,1237
 801336c:	08013584 	addi	zero,at,1238
 8013370:	080133c0 	call	80133c <__alt_mem_onchip_memory2_0+0x80133c>
 8013374:	080133cc 	andi	zero,at,1231
 8013378:	080133cc 	andi	zero,at,1231
 801337c:	08013558 	cmpnei	zero,at,1237
 8013380:	080133c0 	call	80133c <__alt_mem_onchip_memory2_0+0x80133c>
 8013384:	080133b0 	cmpltui	zero,at,1230
 8013388:	080133b0 	cmpltui	zero,at,1230
 801338c:	080133b0 	cmpltui	zero,at,1230
 8013390:	0801391c 	xori	zero,at,1252
 8013394:	2404b03a 	or	r2,r4,r16
 8013398:	10006c1e 	bne	r2,zero,801354c <__divdf3+0x2ec>
 801339c:	02400204 	movi	r9,8
 80133a0:	0021883a 	mov	r16,zero
 80133a4:	002b883a 	mov	r21,zero
 80133a8:	01400084 	movi	r5,2
 80133ac:	003fca06 	br	80132d8 <__alt_data_end+0xfc0132d8>
 80133b0:	8023883a 	mov	r17,r16
 80133b4:	a829883a 	mov	r20,r21
 80133b8:	4039883a 	mov	fp,r8
 80133bc:	280f883a 	mov	r7,r5
 80133c0:	00800084 	movi	r2,2
 80133c4:	3881601e 	bne	r7,r2,8013948 <__divdf3+0x6e8>
 80133c8:	e027883a 	mov	r19,fp
 80133cc:	9900004c 	andi	r4,r19,1
 80133d0:	0081ffc4 	movi	r2,2047
 80133d4:	0021883a 	mov	r16,zero
 80133d8:	002b883a 	mov	r21,zero
 80133dc:	1004953a 	slli	r2,r2,20
 80133e0:	20c03fcc 	andi	r3,r4,255
 80133e4:	01400434 	movhi	r5,16
 80133e8:	297fffc4 	addi	r5,r5,-1
 80133ec:	180697fa 	slli	r3,r3,31
 80133f0:	8160703a 	and	r16,r16,r5
 80133f4:	80a0b03a 	or	r16,r16,r2
 80133f8:	80c6b03a 	or	r3,r16,r3
 80133fc:	a805883a 	mov	r2,r21
 8013400:	dfc00f17 	ldw	ra,60(sp)
 8013404:	df000e17 	ldw	fp,56(sp)
 8013408:	ddc00d17 	ldw	r23,52(sp)
 801340c:	dd800c17 	ldw	r22,48(sp)
 8013410:	dd400b17 	ldw	r21,44(sp)
 8013414:	dd000a17 	ldw	r20,40(sp)
 8013418:	dcc00917 	ldw	r19,36(sp)
 801341c:	dc800817 	ldw	r18,32(sp)
 8013420:	dc400717 	ldw	r17,28(sp)
 8013424:	dc000617 	ldw	r16,24(sp)
 8013428:	dec01004 	addi	sp,sp,64
 801342c:	f800283a 	ret
 8013430:	2404b03a 	or	r2,r4,r16
 8013434:	2023883a 	mov	r17,r4
 8013438:	10003f26 	beq	r2,zero,8013538 <__divdf3+0x2d8>
 801343c:	80015e26 	beq	r16,zero,80139b8 <__divdf3+0x758>
 8013440:	8009883a 	mov	r4,r16
 8013444:	d9800215 	stw	r6,8(sp)
 8013448:	d9c00515 	stw	r7,20(sp)
 801344c:	da000415 	stw	r8,16(sp)
 8013450:	80151f40 	call	80151f4 <__clzsi2>
 8013454:	d9800217 	ldw	r6,8(sp)
 8013458:	d9c00517 	ldw	r7,20(sp)
 801345c:	da000417 	ldw	r8,16(sp)
 8013460:	113ffd44 	addi	r4,r2,-11
 8013464:	00c00704 	movi	r3,28
 8013468:	19014f16 	blt	r3,r4,80139a8 <__divdf3+0x748>
 801346c:	00c00744 	movi	r3,29
 8013470:	157ffe04 	addi	r21,r2,-8
 8013474:	1907c83a 	sub	r3,r3,r4
 8013478:	8560983a 	sll	r16,r16,r21
 801347c:	88c6d83a 	srl	r3,r17,r3
 8013480:	8d6a983a 	sll	r21,r17,r21
 8013484:	1c20b03a 	or	r16,r3,r16
 8013488:	1080fcc4 	addi	r2,r2,1011
 801348c:	00a5c83a 	sub	r18,zero,r2
 8013490:	0013883a 	mov	r9,zero
 8013494:	000b883a 	mov	r5,zero
 8013498:	003f8f06 	br	80132d8 <__alt_data_end+0xfc0132d8>
 801349c:	3444b03a 	or	r2,r6,r17
 80134a0:	1000231e 	bne	r2,zero,8013530 <__divdf3+0x2d0>
 80134a4:	0023883a 	mov	r17,zero
 80134a8:	0029883a 	mov	r20,zero
 80134ac:	01c00084 	movi	r7,2
 80134b0:	003f9b06 	br	8013320 <__alt_data_end+0xfc013320>
 80134b4:	3444b03a 	or	r2,r6,r17
 80134b8:	10001926 	beq	r2,zero,8013520 <__divdf3+0x2c0>
 80134bc:	88014b26 	beq	r17,zero,80139ec <__divdf3+0x78c>
 80134c0:	8809883a 	mov	r4,r17
 80134c4:	d9400115 	stw	r5,4(sp)
 80134c8:	d9800215 	stw	r6,8(sp)
 80134cc:	da000415 	stw	r8,16(sp)
 80134d0:	da400315 	stw	r9,12(sp)
 80134d4:	80151f40 	call	80151f4 <__clzsi2>
 80134d8:	d9400117 	ldw	r5,4(sp)
 80134dc:	d9800217 	ldw	r6,8(sp)
 80134e0:	da000417 	ldw	r8,16(sp)
 80134e4:	da400317 	ldw	r9,12(sp)
 80134e8:	113ffd44 	addi	r4,r2,-11
 80134ec:	00c00704 	movi	r3,28
 80134f0:	19013a16 	blt	r3,r4,80139dc <__divdf3+0x77c>
 80134f4:	00c00744 	movi	r3,29
 80134f8:	153ffe04 	addi	r20,r2,-8
 80134fc:	1907c83a 	sub	r3,r3,r4
 8013500:	8d22983a 	sll	r17,r17,r20
 8013504:	30c6d83a 	srl	r3,r6,r3
 8013508:	3528983a 	sll	r20,r6,r20
 801350c:	1c62b03a 	or	r17,r3,r17
 8013510:	1080fcc4 	addi	r2,r2,1011
 8013514:	0087c83a 	sub	r3,zero,r2
 8013518:	000f883a 	mov	r7,zero
 801351c:	003f8006 	br	8013320 <__alt_data_end+0xfc013320>
 8013520:	0023883a 	mov	r17,zero
 8013524:	0029883a 	mov	r20,zero
 8013528:	01c00044 	movi	r7,1
 801352c:	003f7c06 	br	8013320 <__alt_data_end+0xfc013320>
 8013530:	01c000c4 	movi	r7,3
 8013534:	003f7a06 	br	8013320 <__alt_data_end+0xfc013320>
 8013538:	02400104 	movi	r9,4
 801353c:	0021883a 	mov	r16,zero
 8013540:	002b883a 	mov	r21,zero
 8013544:	01400044 	movi	r5,1
 8013548:	003f6306 	br	80132d8 <__alt_data_end+0xfc0132d8>
 801354c:	02400304 	movi	r9,12
 8013550:	014000c4 	movi	r5,3
 8013554:	003f6006 	br	80132d8 <__alt_data_end+0xfc0132d8>
 8013558:	04000434 	movhi	r16,16
 801355c:	0009883a 	mov	r4,zero
 8013560:	843fffc4 	addi	r16,r16,-1
 8013564:	057fffc4 	movi	r21,-1
 8013568:	0081ffc4 	movi	r2,2047
 801356c:	003f9b06 	br	80133dc <__alt_data_end+0xfc0133dc>
 8013570:	00c00044 	movi	r3,1
 8013574:	1887c83a 	sub	r3,r3,r2
 8013578:	01000e04 	movi	r4,56
 801357c:	20c1530e 	bge	r4,r3,8013acc <__divdf3+0x86c>
 8013580:	9900004c 	andi	r4,r19,1
 8013584:	0005883a 	mov	r2,zero
 8013588:	0021883a 	mov	r16,zero
 801358c:	002b883a 	mov	r21,zero
 8013590:	003f9206 	br	80133dc <__alt_data_end+0xfc0133dc>
 8013594:	8c012e36 	bltu	r17,r16,8013a50 <__divdf3+0x7f0>
 8013598:	84412c26 	beq	r16,r17,8013a4c <__divdf3+0x7ec>
 801359c:	a82f883a 	mov	r23,r21
 80135a0:	18ffffc4 	addi	r3,r3,-1
 80135a4:	002b883a 	mov	r21,zero
 80135a8:	a004d63a 	srli	r2,r20,24
 80135ac:	8822923a 	slli	r17,r17,8
 80135b0:	a028923a 	slli	r20,r20,8
 80135b4:	8009883a 	mov	r4,r16
 80135b8:	88acb03a 	or	r22,r17,r2
 80135bc:	dd000015 	stw	r20,0(sp)
 80135c0:	b028d43a 	srli	r20,r22,16
 80135c4:	d8c00215 	stw	r3,8(sp)
 80135c8:	b4bfffcc 	andi	r18,r22,65535
 80135cc:	a00b883a 	mov	r5,r20
 80135d0:	80049980 	call	8004998 <__udivsi3>
 80135d4:	100b883a 	mov	r5,r2
 80135d8:	9009883a 	mov	r4,r18
 80135dc:	1023883a 	mov	r17,r2
 80135e0:	8004a540 	call	8004a54 <__mulsi3>
 80135e4:	8009883a 	mov	r4,r16
 80135e8:	a00b883a 	mov	r5,r20
 80135ec:	1039883a 	mov	fp,r2
 80135f0:	80049fc0 	call	80049fc <__umodsi3>
 80135f4:	1004943a 	slli	r2,r2,16
 80135f8:	b808d43a 	srli	r4,r23,16
 80135fc:	d8c00217 	ldw	r3,8(sp)
 8013600:	2084b03a 	or	r2,r4,r2
 8013604:	1700062e 	bgeu	r2,fp,8013620 <__divdf3+0x3c0>
 8013608:	1585883a 	add	r2,r2,r22
 801360c:	893fffc4 	addi	r4,r17,-1
 8013610:	15811d36 	bltu	r2,r22,8013a88 <__divdf3+0x828>
 8013614:	17011c2e 	bgeu	r2,fp,8013a88 <__divdf3+0x828>
 8013618:	8c7fff84 	addi	r17,r17,-2
 801361c:	1585883a 	add	r2,r2,r22
 8013620:	1739c83a 	sub	fp,r2,fp
 8013624:	a00b883a 	mov	r5,r20
 8013628:	e009883a 	mov	r4,fp
 801362c:	d8c00215 	stw	r3,8(sp)
 8013630:	80049980 	call	8004998 <__udivsi3>
 8013634:	100b883a 	mov	r5,r2
 8013638:	9009883a 	mov	r4,r18
 801363c:	1021883a 	mov	r16,r2
 8013640:	8004a540 	call	8004a54 <__mulsi3>
 8013644:	a00b883a 	mov	r5,r20
 8013648:	e009883a 	mov	r4,fp
 801364c:	d8800415 	stw	r2,16(sp)
 8013650:	80049fc0 	call	80049fc <__umodsi3>
 8013654:	1004943a 	slli	r2,r2,16
 8013658:	da000417 	ldw	r8,16(sp)
 801365c:	bdffffcc 	andi	r23,r23,65535
 8013660:	b884b03a 	or	r2,r23,r2
 8013664:	d8c00217 	ldw	r3,8(sp)
 8013668:	1200062e 	bgeu	r2,r8,8013684 <__divdf3+0x424>
 801366c:	1585883a 	add	r2,r2,r22
 8013670:	813fffc4 	addi	r4,r16,-1
 8013674:	15810236 	bltu	r2,r22,8013a80 <__divdf3+0x820>
 8013678:	1201012e 	bgeu	r2,r8,8013a80 <__divdf3+0x820>
 801367c:	843fff84 	addi	r16,r16,-2
 8013680:	1585883a 	add	r2,r2,r22
 8013684:	8822943a 	slli	r17,r17,16
 8013688:	d9800017 	ldw	r6,0(sp)
 801368c:	1211c83a 	sub	r8,r2,r8
 8013690:	8c22b03a 	or	r17,r17,r16
 8013694:	373fffcc 	andi	fp,r6,65535
 8013698:	8abfffcc 	andi	r10,r17,65535
 801369c:	8820d43a 	srli	r16,r17,16
 80136a0:	5009883a 	mov	r4,r10
 80136a4:	e00b883a 	mov	r5,fp
 80136a8:	302ed43a 	srli	r23,r6,16
 80136ac:	d8c00215 	stw	r3,8(sp)
 80136b0:	da000415 	stw	r8,16(sp)
 80136b4:	da800115 	stw	r10,4(sp)
 80136b8:	8004a540 	call	8004a54 <__mulsi3>
 80136bc:	800b883a 	mov	r5,r16
 80136c0:	e009883a 	mov	r4,fp
 80136c4:	d8800515 	stw	r2,20(sp)
 80136c8:	8004a540 	call	8004a54 <__mulsi3>
 80136cc:	8009883a 	mov	r4,r16
 80136d0:	b80b883a 	mov	r5,r23
 80136d4:	d8800315 	stw	r2,12(sp)
 80136d8:	8004a540 	call	8004a54 <__mulsi3>
 80136dc:	da800117 	ldw	r10,4(sp)
 80136e0:	b80b883a 	mov	r5,r23
 80136e4:	1021883a 	mov	r16,r2
 80136e8:	5009883a 	mov	r4,r10
 80136ec:	8004a540 	call	8004a54 <__mulsi3>
 80136f0:	d9c00517 	ldw	r7,20(sp)
 80136f4:	da400317 	ldw	r9,12(sp)
 80136f8:	d8c00217 	ldw	r3,8(sp)
 80136fc:	3808d43a 	srli	r4,r7,16
 8013700:	1245883a 	add	r2,r2,r9
 8013704:	da000417 	ldw	r8,16(sp)
 8013708:	2085883a 	add	r2,r4,r2
 801370c:	1240022e 	bgeu	r2,r9,8013718 <__divdf3+0x4b8>
 8013710:	01000074 	movhi	r4,1
 8013714:	8121883a 	add	r16,r16,r4
 8013718:	1008d43a 	srli	r4,r2,16
 801371c:	1004943a 	slli	r2,r2,16
 8013720:	39ffffcc 	andi	r7,r7,65535
 8013724:	2409883a 	add	r4,r4,r16
 8013728:	11c5883a 	add	r2,r2,r7
 801372c:	4100bb36 	bltu	r8,r4,8013a1c <__divdf3+0x7bc>
 8013730:	4100d726 	beq	r8,r4,8013a90 <__divdf3+0x830>
 8013734:	4109c83a 	sub	r4,r8,r4
 8013738:	a8a1c83a 	sub	r16,r21,r2
 801373c:	ac2b803a 	cmpltu	r21,r21,r16
 8013740:	256bc83a 	sub	r21,r4,r21
 8013744:	b540d926 	beq	r22,r21,8013aac <__divdf3+0x84c>
 8013748:	a00b883a 	mov	r5,r20
 801374c:	a809883a 	mov	r4,r21
 8013750:	d8c00215 	stw	r3,8(sp)
 8013754:	80049980 	call	8004998 <__udivsi3>
 8013758:	100b883a 	mov	r5,r2
 801375c:	9009883a 	mov	r4,r18
 8013760:	d8800515 	stw	r2,20(sp)
 8013764:	8004a540 	call	8004a54 <__mulsi3>
 8013768:	a809883a 	mov	r4,r21
 801376c:	a00b883a 	mov	r5,r20
 8013770:	d8800415 	stw	r2,16(sp)
 8013774:	80049fc0 	call	80049fc <__umodsi3>
 8013778:	1004943a 	slli	r2,r2,16
 801377c:	8008d43a 	srli	r4,r16,16
 8013780:	da000417 	ldw	r8,16(sp)
 8013784:	d8c00217 	ldw	r3,8(sp)
 8013788:	2084b03a 	or	r2,r4,r2
 801378c:	d9c00517 	ldw	r7,20(sp)
 8013790:	1200062e 	bgeu	r2,r8,80137ac <__divdf3+0x54c>
 8013794:	1585883a 	add	r2,r2,r22
 8013798:	393fffc4 	addi	r4,r7,-1
 801379c:	1580c536 	bltu	r2,r22,8013ab4 <__divdf3+0x854>
 80137a0:	1200c42e 	bgeu	r2,r8,8013ab4 <__divdf3+0x854>
 80137a4:	39ffff84 	addi	r7,r7,-2
 80137a8:	1585883a 	add	r2,r2,r22
 80137ac:	122bc83a 	sub	r21,r2,r8
 80137b0:	a00b883a 	mov	r5,r20
 80137b4:	a809883a 	mov	r4,r21
 80137b8:	d8c00215 	stw	r3,8(sp)
 80137bc:	d9c00515 	stw	r7,20(sp)
 80137c0:	80049980 	call	8004998 <__udivsi3>
 80137c4:	9009883a 	mov	r4,r18
 80137c8:	100b883a 	mov	r5,r2
 80137cc:	d8800415 	stw	r2,16(sp)
 80137d0:	8004a540 	call	8004a54 <__mulsi3>
 80137d4:	a809883a 	mov	r4,r21
 80137d8:	a00b883a 	mov	r5,r20
 80137dc:	1025883a 	mov	r18,r2
 80137e0:	80049fc0 	call	80049fc <__umodsi3>
 80137e4:	1004943a 	slli	r2,r2,16
 80137e8:	813fffcc 	andi	r4,r16,65535
 80137ec:	d8c00217 	ldw	r3,8(sp)
 80137f0:	20a0b03a 	or	r16,r4,r2
 80137f4:	d9c00517 	ldw	r7,20(sp)
 80137f8:	da000417 	ldw	r8,16(sp)
 80137fc:	8480062e 	bgeu	r16,r18,8013818 <__divdf3+0x5b8>
 8013800:	85a1883a 	add	r16,r16,r22
 8013804:	40bfffc4 	addi	r2,r8,-1
 8013808:	8580ac36 	bltu	r16,r22,8013abc <__divdf3+0x85c>
 801380c:	8480ab2e 	bgeu	r16,r18,8013abc <__divdf3+0x85c>
 8013810:	423fff84 	addi	r8,r8,-2
 8013814:	85a1883a 	add	r16,r16,r22
 8013818:	3804943a 	slli	r2,r7,16
 801381c:	84a1c83a 	sub	r16,r16,r18
 8013820:	e009883a 	mov	r4,fp
 8013824:	1228b03a 	or	r20,r2,r8
 8013828:	a1ffffcc 	andi	r7,r20,65535
 801382c:	a024d43a 	srli	r18,r20,16
 8013830:	380b883a 	mov	r5,r7
 8013834:	d8c00215 	stw	r3,8(sp)
 8013838:	d9c00515 	stw	r7,20(sp)
 801383c:	8004a540 	call	8004a54 <__mulsi3>
 8013840:	900b883a 	mov	r5,r18
 8013844:	e009883a 	mov	r4,fp
 8013848:	102b883a 	mov	r21,r2
 801384c:	8004a540 	call	8004a54 <__mulsi3>
 8013850:	900b883a 	mov	r5,r18
 8013854:	b809883a 	mov	r4,r23
 8013858:	1039883a 	mov	fp,r2
 801385c:	8004a540 	call	8004a54 <__mulsi3>
 8013860:	d9c00517 	ldw	r7,20(sp)
 8013864:	b80b883a 	mov	r5,r23
 8013868:	1025883a 	mov	r18,r2
 801386c:	3809883a 	mov	r4,r7
 8013870:	8004a540 	call	8004a54 <__mulsi3>
 8013874:	a808d43a 	srli	r4,r21,16
 8013878:	1705883a 	add	r2,r2,fp
 801387c:	d8c00217 	ldw	r3,8(sp)
 8013880:	2085883a 	add	r2,r4,r2
 8013884:	1700022e 	bgeu	r2,fp,8013890 <__divdf3+0x630>
 8013888:	01000074 	movhi	r4,1
 801388c:	9125883a 	add	r18,r18,r4
 8013890:	1008d43a 	srli	r4,r2,16
 8013894:	1004943a 	slli	r2,r2,16
 8013898:	ad7fffcc 	andi	r21,r21,65535
 801389c:	2489883a 	add	r4,r4,r18
 80138a0:	1545883a 	add	r2,r2,r21
 80138a4:	81003836 	bltu	r16,r4,8013988 <__divdf3+0x728>
 80138a8:	81003626 	beq	r16,r4,8013984 <__divdf3+0x724>
 80138ac:	a5000054 	ori	r20,r20,1
 80138b0:	1880ffc4 	addi	r2,r3,1023
 80138b4:	00bf2e0e 	bge	zero,r2,8013570 <__alt_data_end+0xfc013570>
 80138b8:	a10001cc 	andi	r4,r20,7
 80138bc:	20000726 	beq	r4,zero,80138dc <__divdf3+0x67c>
 80138c0:	a10003cc 	andi	r4,r20,15
 80138c4:	01400104 	movi	r5,4
 80138c8:	21400426 	beq	r4,r5,80138dc <__divdf3+0x67c>
 80138cc:	a149883a 	add	r4,r20,r5
 80138d0:	2529803a 	cmpltu	r20,r4,r20
 80138d4:	8d23883a 	add	r17,r17,r20
 80138d8:	2029883a 	mov	r20,r4
 80138dc:	8900402c 	andhi	r4,r17,256
 80138e0:	20000426 	beq	r4,zero,80138f4 <__divdf3+0x694>
 80138e4:	18810004 	addi	r2,r3,1024
 80138e8:	00ffc034 	movhi	r3,65280
 80138ec:	18ffffc4 	addi	r3,r3,-1
 80138f0:	88e2703a 	and	r17,r17,r3
 80138f4:	00c1ff84 	movi	r3,2046
 80138f8:	18beb416 	blt	r3,r2,80133cc <__alt_data_end+0xfc0133cc>
 80138fc:	a028d0fa 	srli	r20,r20,3
 8013900:	882a977a 	slli	r21,r17,29
 8013904:	8820927a 	slli	r16,r17,9
 8013908:	1081ffcc 	andi	r2,r2,2047
 801390c:	ad2ab03a 	or	r21,r21,r20
 8013910:	8020d33a 	srli	r16,r16,12
 8013914:	9900004c 	andi	r4,r19,1
 8013918:	003eb006 	br	80133dc <__alt_data_end+0xfc0133dc>
 801391c:	8080022c 	andhi	r2,r16,8
 8013920:	10001226 	beq	r2,zero,801396c <__divdf3+0x70c>
 8013924:	8880022c 	andhi	r2,r17,8
 8013928:	1000101e 	bne	r2,zero,801396c <__divdf3+0x70c>
 801392c:	00800434 	movhi	r2,16
 8013930:	8c000234 	orhi	r16,r17,8
 8013934:	10bfffc4 	addi	r2,r2,-1
 8013938:	b809883a 	mov	r4,r23
 801393c:	80a0703a 	and	r16,r16,r2
 8013940:	a02b883a 	mov	r21,r20
 8013944:	003f0806 	br	8013568 <__alt_data_end+0xfc013568>
 8013948:	008000c4 	movi	r2,3
 801394c:	3880b126 	beq	r7,r2,8013c14 <__divdf3+0x9b4>
 8013950:	00800044 	movi	r2,1
 8013954:	38805b1e 	bne	r7,r2,8013ac4 <__divdf3+0x864>
 8013958:	e009883a 	mov	r4,fp
 801395c:	0005883a 	mov	r2,zero
 8013960:	0021883a 	mov	r16,zero
 8013964:	002b883a 	mov	r21,zero
 8013968:	003e9c06 	br	80133dc <__alt_data_end+0xfc0133dc>
 801396c:	00800434 	movhi	r2,16
 8013970:	84000234 	orhi	r16,r16,8
 8013974:	10bfffc4 	addi	r2,r2,-1
 8013978:	b009883a 	mov	r4,r22
 801397c:	80a0703a 	and	r16,r16,r2
 8013980:	003ef906 	br	8013568 <__alt_data_end+0xfc013568>
 8013984:	103fca26 	beq	r2,zero,80138b0 <__alt_data_end+0xfc0138b0>
 8013988:	b421883a 	add	r16,r22,r16
 801398c:	a17fffc4 	addi	r5,r20,-1
 8013990:	8580422e 	bgeu	r16,r22,8013a9c <__divdf3+0x83c>
 8013994:	2829883a 	mov	r20,r5
 8013998:	813fc41e 	bne	r16,r4,80138ac <__alt_data_end+0xfc0138ac>
 801399c:	d9800017 	ldw	r6,0(sp)
 80139a0:	30bfc21e 	bne	r6,r2,80138ac <__alt_data_end+0xfc0138ac>
 80139a4:	003fc206 	br	80138b0 <__alt_data_end+0xfc0138b0>
 80139a8:	143ff604 	addi	r16,r2,-40
 80139ac:	8c20983a 	sll	r16,r17,r16
 80139b0:	002b883a 	mov	r21,zero
 80139b4:	003eb406 	br	8013488 <__alt_data_end+0xfc013488>
 80139b8:	d9800215 	stw	r6,8(sp)
 80139bc:	d9c00515 	stw	r7,20(sp)
 80139c0:	da000415 	stw	r8,16(sp)
 80139c4:	80151f40 	call	80151f4 <__clzsi2>
 80139c8:	10800804 	addi	r2,r2,32
 80139cc:	da000417 	ldw	r8,16(sp)
 80139d0:	d9c00517 	ldw	r7,20(sp)
 80139d4:	d9800217 	ldw	r6,8(sp)
 80139d8:	003ea106 	br	8013460 <__alt_data_end+0xfc013460>
 80139dc:	147ff604 	addi	r17,r2,-40
 80139e0:	3462983a 	sll	r17,r6,r17
 80139e4:	0029883a 	mov	r20,zero
 80139e8:	003ec906 	br	8013510 <__alt_data_end+0xfc013510>
 80139ec:	3009883a 	mov	r4,r6
 80139f0:	d9400115 	stw	r5,4(sp)
 80139f4:	d9800215 	stw	r6,8(sp)
 80139f8:	da000415 	stw	r8,16(sp)
 80139fc:	da400315 	stw	r9,12(sp)
 8013a00:	80151f40 	call	80151f4 <__clzsi2>
 8013a04:	10800804 	addi	r2,r2,32
 8013a08:	da400317 	ldw	r9,12(sp)
 8013a0c:	da000417 	ldw	r8,16(sp)
 8013a10:	d9800217 	ldw	r6,8(sp)
 8013a14:	d9400117 	ldw	r5,4(sp)
 8013a18:	003eb306 	br	80134e8 <__alt_data_end+0xfc0134e8>
 8013a1c:	d9800017 	ldw	r6,0(sp)
 8013a20:	a9ab883a 	add	r21,r21,r6
 8013a24:	a98b803a 	cmpltu	r5,r21,r6
 8013a28:	2d8b883a 	add	r5,r5,r22
 8013a2c:	2a11883a 	add	r8,r5,r8
 8013a30:	897fffc4 	addi	r5,r17,-1
 8013a34:	b2000c2e 	bgeu	r22,r8,8013a68 <__divdf3+0x808>
 8013a38:	41003f36 	bltu	r8,r4,8013b38 <__divdf3+0x8d8>
 8013a3c:	22006c26 	beq	r4,r8,8013bf0 <__divdf3+0x990>
 8013a40:	4109c83a 	sub	r4,r8,r4
 8013a44:	2823883a 	mov	r17,r5
 8013a48:	003f3b06 	br	8013738 <__alt_data_end+0xfc013738>
 8013a4c:	ad3ed336 	bltu	r21,r20,801359c <__alt_data_end+0xfc01359c>
 8013a50:	a804d07a 	srli	r2,r21,1
 8013a54:	802e97fa 	slli	r23,r16,31
 8013a58:	a82a97fa 	slli	r21,r21,31
 8013a5c:	8020d07a 	srli	r16,r16,1
 8013a60:	b8aeb03a 	or	r23,r23,r2
 8013a64:	003ed006 	br	80135a8 <__alt_data_end+0xfc0135a8>
 8013a68:	b23ff51e 	bne	r22,r8,8013a40 <__alt_data_end+0xfc013a40>
 8013a6c:	d9800017 	ldw	r6,0(sp)
 8013a70:	a9bff12e 	bgeu	r21,r6,8013a38 <__alt_data_end+0xfc013a38>
 8013a74:	b109c83a 	sub	r4,r22,r4
 8013a78:	2823883a 	mov	r17,r5
 8013a7c:	003f2e06 	br	8013738 <__alt_data_end+0xfc013738>
 8013a80:	2021883a 	mov	r16,r4
 8013a84:	003eff06 	br	8013684 <__alt_data_end+0xfc013684>
 8013a88:	2023883a 	mov	r17,r4
 8013a8c:	003ee406 	br	8013620 <__alt_data_end+0xfc013620>
 8013a90:	a8bfe236 	bltu	r21,r2,8013a1c <__alt_data_end+0xfc013a1c>
 8013a94:	0009883a 	mov	r4,zero
 8013a98:	003f2706 	br	8013738 <__alt_data_end+0xfc013738>
 8013a9c:	81002d36 	bltu	r16,r4,8013b54 <__divdf3+0x8f4>
 8013aa0:	24005626 	beq	r4,r16,8013bfc <__divdf3+0x99c>
 8013aa4:	2829883a 	mov	r20,r5
 8013aa8:	003f8006 	br	80138ac <__alt_data_end+0xfc0138ac>
 8013aac:	053fffc4 	movi	r20,-1
 8013ab0:	003f7f06 	br	80138b0 <__alt_data_end+0xfc0138b0>
 8013ab4:	200f883a 	mov	r7,r4
 8013ab8:	003f3c06 	br	80137ac <__alt_data_end+0xfc0137ac>
 8013abc:	1011883a 	mov	r8,r2
 8013ac0:	003f5506 	br	8013818 <__alt_data_end+0xfc013818>
 8013ac4:	e027883a 	mov	r19,fp
 8013ac8:	003f7906 	br	80138b0 <__alt_data_end+0xfc0138b0>
 8013acc:	010007c4 	movi	r4,31
 8013ad0:	20c02816 	blt	r4,r3,8013b74 <__divdf3+0x914>
 8013ad4:	00800804 	movi	r2,32
 8013ad8:	10c5c83a 	sub	r2,r2,r3
 8013adc:	888a983a 	sll	r5,r17,r2
 8013ae0:	a0c8d83a 	srl	r4,r20,r3
 8013ae4:	a084983a 	sll	r2,r20,r2
 8013ae8:	88e2d83a 	srl	r17,r17,r3
 8013aec:	2906b03a 	or	r3,r5,r4
 8013af0:	1004c03a 	cmpne	r2,r2,zero
 8013af4:	1886b03a 	or	r3,r3,r2
 8013af8:	188001cc 	andi	r2,r3,7
 8013afc:	10000726 	beq	r2,zero,8013b1c <__divdf3+0x8bc>
 8013b00:	188003cc 	andi	r2,r3,15
 8013b04:	01000104 	movi	r4,4
 8013b08:	11000426 	beq	r2,r4,8013b1c <__divdf3+0x8bc>
 8013b0c:	1805883a 	mov	r2,r3
 8013b10:	10c00104 	addi	r3,r2,4
 8013b14:	1885803a 	cmpltu	r2,r3,r2
 8013b18:	88a3883a 	add	r17,r17,r2
 8013b1c:	8880202c 	andhi	r2,r17,128
 8013b20:	10002926 	beq	r2,zero,8013bc8 <__divdf3+0x968>
 8013b24:	9900004c 	andi	r4,r19,1
 8013b28:	00800044 	movi	r2,1
 8013b2c:	0021883a 	mov	r16,zero
 8013b30:	002b883a 	mov	r21,zero
 8013b34:	003e2906 	br	80133dc <__alt_data_end+0xfc0133dc>
 8013b38:	d9800017 	ldw	r6,0(sp)
 8013b3c:	8c7fff84 	addi	r17,r17,-2
 8013b40:	a9ab883a 	add	r21,r21,r6
 8013b44:	a98b803a 	cmpltu	r5,r21,r6
 8013b48:	2d8b883a 	add	r5,r5,r22
 8013b4c:	2a11883a 	add	r8,r5,r8
 8013b50:	003ef806 	br	8013734 <__alt_data_end+0xfc013734>
 8013b54:	d9800017 	ldw	r6,0(sp)
 8013b58:	318f883a 	add	r7,r6,r6
 8013b5c:	398b803a 	cmpltu	r5,r7,r6
 8013b60:	2d8d883a 	add	r6,r5,r22
 8013b64:	81a1883a 	add	r16,r16,r6
 8013b68:	a17fff84 	addi	r5,r20,-2
 8013b6c:	d9c00015 	stw	r7,0(sp)
 8013b70:	003f8806 	br	8013994 <__alt_data_end+0xfc013994>
 8013b74:	013ff844 	movi	r4,-31
 8013b78:	2085c83a 	sub	r2,r4,r2
 8013b7c:	8888d83a 	srl	r4,r17,r2
 8013b80:	00800804 	movi	r2,32
 8013b84:	18802126 	beq	r3,r2,8013c0c <__divdf3+0x9ac>
 8013b88:	04001004 	movi	r16,64
 8013b8c:	80c7c83a 	sub	r3,r16,r3
 8013b90:	88e0983a 	sll	r16,r17,r3
 8013b94:	8504b03a 	or	r2,r16,r20
 8013b98:	1004c03a 	cmpne	r2,r2,zero
 8013b9c:	2084b03a 	or	r2,r4,r2
 8013ba0:	144001cc 	andi	r17,r2,7
 8013ba4:	88000d1e 	bne	r17,zero,8013bdc <__divdf3+0x97c>
 8013ba8:	0021883a 	mov	r16,zero
 8013bac:	102ad0fa 	srli	r21,r2,3
 8013bb0:	9900004c 	andi	r4,r19,1
 8013bb4:	0005883a 	mov	r2,zero
 8013bb8:	ac6ab03a 	or	r21,r21,r17
 8013bbc:	003e0706 	br	80133dc <__alt_data_end+0xfc0133dc>
 8013bc0:	1007883a 	mov	r3,r2
 8013bc4:	0023883a 	mov	r17,zero
 8013bc8:	8820927a 	slli	r16,r17,9
 8013bcc:	1805883a 	mov	r2,r3
 8013bd0:	8822977a 	slli	r17,r17,29
 8013bd4:	8020d33a 	srli	r16,r16,12
 8013bd8:	003ff406 	br	8013bac <__alt_data_end+0xfc013bac>
 8013bdc:	10c003cc 	andi	r3,r2,15
 8013be0:	01000104 	movi	r4,4
 8013be4:	193ff626 	beq	r3,r4,8013bc0 <__alt_data_end+0xfc013bc0>
 8013be8:	0023883a 	mov	r17,zero
 8013bec:	003fc806 	br	8013b10 <__alt_data_end+0xfc013b10>
 8013bf0:	a8bfd136 	bltu	r21,r2,8013b38 <__alt_data_end+0xfc013b38>
 8013bf4:	2823883a 	mov	r17,r5
 8013bf8:	003fa606 	br	8013a94 <__alt_data_end+0xfc013a94>
 8013bfc:	d9800017 	ldw	r6,0(sp)
 8013c00:	30bfd436 	bltu	r6,r2,8013b54 <__alt_data_end+0xfc013b54>
 8013c04:	2829883a 	mov	r20,r5
 8013c08:	003f6406 	br	801399c <__alt_data_end+0xfc01399c>
 8013c0c:	0021883a 	mov	r16,zero
 8013c10:	003fe006 	br	8013b94 <__alt_data_end+0xfc013b94>
 8013c14:	00800434 	movhi	r2,16
 8013c18:	8c000234 	orhi	r16,r17,8
 8013c1c:	10bfffc4 	addi	r2,r2,-1
 8013c20:	e009883a 	mov	r4,fp
 8013c24:	80a0703a 	and	r16,r16,r2
 8013c28:	a02b883a 	mov	r21,r20
 8013c2c:	003e4e06 	br	8013568 <__alt_data_end+0xfc013568>

08013c30 <__eqdf2>:
 8013c30:	2804d53a 	srli	r2,r5,20
 8013c34:	3806d53a 	srli	r3,r7,20
 8013c38:	02000434 	movhi	r8,16
 8013c3c:	423fffc4 	addi	r8,r8,-1
 8013c40:	1081ffcc 	andi	r2,r2,2047
 8013c44:	0281ffc4 	movi	r10,2047
 8013c48:	2a12703a 	and	r9,r5,r8
 8013c4c:	18c1ffcc 	andi	r3,r3,2047
 8013c50:	3a10703a 	and	r8,r7,r8
 8013c54:	280ad7fa 	srli	r5,r5,31
 8013c58:	380ed7fa 	srli	r7,r7,31
 8013c5c:	12801026 	beq	r2,r10,8013ca0 <__eqdf2+0x70>
 8013c60:	0281ffc4 	movi	r10,2047
 8013c64:	1a800a26 	beq	r3,r10,8013c90 <__eqdf2+0x60>
 8013c68:	10c00226 	beq	r2,r3,8013c74 <__eqdf2+0x44>
 8013c6c:	00800044 	movi	r2,1
 8013c70:	f800283a 	ret
 8013c74:	4a3ffd1e 	bne	r9,r8,8013c6c <__alt_data_end+0xfc013c6c>
 8013c78:	21bffc1e 	bne	r4,r6,8013c6c <__alt_data_end+0xfc013c6c>
 8013c7c:	29c00c26 	beq	r5,r7,8013cb0 <__eqdf2+0x80>
 8013c80:	103ffa1e 	bne	r2,zero,8013c6c <__alt_data_end+0xfc013c6c>
 8013c84:	2244b03a 	or	r2,r4,r9
 8013c88:	1004c03a 	cmpne	r2,r2,zero
 8013c8c:	f800283a 	ret
 8013c90:	3214b03a 	or	r10,r6,r8
 8013c94:	503ff426 	beq	r10,zero,8013c68 <__alt_data_end+0xfc013c68>
 8013c98:	00800044 	movi	r2,1
 8013c9c:	f800283a 	ret
 8013ca0:	2254b03a 	or	r10,r4,r9
 8013ca4:	503fee26 	beq	r10,zero,8013c60 <__alt_data_end+0xfc013c60>
 8013ca8:	00800044 	movi	r2,1
 8013cac:	f800283a 	ret
 8013cb0:	0005883a 	mov	r2,zero
 8013cb4:	f800283a 	ret

08013cb8 <__gedf2>:
 8013cb8:	2804d53a 	srli	r2,r5,20
 8013cbc:	3806d53a 	srli	r3,r7,20
 8013cc0:	02000434 	movhi	r8,16
 8013cc4:	423fffc4 	addi	r8,r8,-1
 8013cc8:	1081ffcc 	andi	r2,r2,2047
 8013ccc:	0241ffc4 	movi	r9,2047
 8013cd0:	2a14703a 	and	r10,r5,r8
 8013cd4:	18c1ffcc 	andi	r3,r3,2047
 8013cd8:	3a10703a 	and	r8,r7,r8
 8013cdc:	280ad7fa 	srli	r5,r5,31
 8013ce0:	380ed7fa 	srli	r7,r7,31
 8013ce4:	12401d26 	beq	r2,r9,8013d5c <__gedf2+0xa4>
 8013ce8:	0241ffc4 	movi	r9,2047
 8013cec:	1a401226 	beq	r3,r9,8013d38 <__gedf2+0x80>
 8013cf0:	1000081e 	bne	r2,zero,8013d14 <__gedf2+0x5c>
 8013cf4:	2296b03a 	or	r11,r4,r10
 8013cf8:	5813003a 	cmpeq	r9,r11,zero
 8013cfc:	1800091e 	bne	r3,zero,8013d24 <__gedf2+0x6c>
 8013d00:	3218b03a 	or	r12,r6,r8
 8013d04:	6000071e 	bne	r12,zero,8013d24 <__gedf2+0x6c>
 8013d08:	0005883a 	mov	r2,zero
 8013d0c:	5800101e 	bne	r11,zero,8013d50 <__gedf2+0x98>
 8013d10:	f800283a 	ret
 8013d14:	18000c1e 	bne	r3,zero,8013d48 <__gedf2+0x90>
 8013d18:	3212b03a 	or	r9,r6,r8
 8013d1c:	48000c26 	beq	r9,zero,8013d50 <__gedf2+0x98>
 8013d20:	0013883a 	mov	r9,zero
 8013d24:	39c03fcc 	andi	r7,r7,255
 8013d28:	48000826 	beq	r9,zero,8013d4c <__gedf2+0x94>
 8013d2c:	38000926 	beq	r7,zero,8013d54 <__gedf2+0x9c>
 8013d30:	00800044 	movi	r2,1
 8013d34:	f800283a 	ret
 8013d38:	3212b03a 	or	r9,r6,r8
 8013d3c:	483fec26 	beq	r9,zero,8013cf0 <__alt_data_end+0xfc013cf0>
 8013d40:	00bfff84 	movi	r2,-2
 8013d44:	f800283a 	ret
 8013d48:	39c03fcc 	andi	r7,r7,255
 8013d4c:	29c00626 	beq	r5,r7,8013d68 <__gedf2+0xb0>
 8013d50:	283ff726 	beq	r5,zero,8013d30 <__alt_data_end+0xfc013d30>
 8013d54:	00bfffc4 	movi	r2,-1
 8013d58:	f800283a 	ret
 8013d5c:	2292b03a 	or	r9,r4,r10
 8013d60:	483fe126 	beq	r9,zero,8013ce8 <__alt_data_end+0xfc013ce8>
 8013d64:	003ff606 	br	8013d40 <__alt_data_end+0xfc013d40>
 8013d68:	18bff916 	blt	r3,r2,8013d50 <__alt_data_end+0xfc013d50>
 8013d6c:	10c00316 	blt	r2,r3,8013d7c <__gedf2+0xc4>
 8013d70:	42bff736 	bltu	r8,r10,8013d50 <__alt_data_end+0xfc013d50>
 8013d74:	52000326 	beq	r10,r8,8013d84 <__gedf2+0xcc>
 8013d78:	5200042e 	bgeu	r10,r8,8013d8c <__gedf2+0xd4>
 8013d7c:	283fec1e 	bne	r5,zero,8013d30 <__alt_data_end+0xfc013d30>
 8013d80:	003ff406 	br	8013d54 <__alt_data_end+0xfc013d54>
 8013d84:	313ff236 	bltu	r6,r4,8013d50 <__alt_data_end+0xfc013d50>
 8013d88:	21bffc36 	bltu	r4,r6,8013d7c <__alt_data_end+0xfc013d7c>
 8013d8c:	0005883a 	mov	r2,zero
 8013d90:	f800283a 	ret

08013d94 <__ledf2>:
 8013d94:	2804d53a 	srli	r2,r5,20
 8013d98:	3810d53a 	srli	r8,r7,20
 8013d9c:	00c00434 	movhi	r3,16
 8013da0:	18ffffc4 	addi	r3,r3,-1
 8013da4:	1081ffcc 	andi	r2,r2,2047
 8013da8:	0241ffc4 	movi	r9,2047
 8013dac:	28d4703a 	and	r10,r5,r3
 8013db0:	4201ffcc 	andi	r8,r8,2047
 8013db4:	38c6703a 	and	r3,r7,r3
 8013db8:	280ad7fa 	srli	r5,r5,31
 8013dbc:	380ed7fa 	srli	r7,r7,31
 8013dc0:	12401f26 	beq	r2,r9,8013e40 <__ledf2+0xac>
 8013dc4:	0241ffc4 	movi	r9,2047
 8013dc8:	42401426 	beq	r8,r9,8013e1c <__ledf2+0x88>
 8013dcc:	1000091e 	bne	r2,zero,8013df4 <__ledf2+0x60>
 8013dd0:	2296b03a 	or	r11,r4,r10
 8013dd4:	5813003a 	cmpeq	r9,r11,zero
 8013dd8:	29403fcc 	andi	r5,r5,255
 8013ddc:	40000a1e 	bne	r8,zero,8013e08 <__ledf2+0x74>
 8013de0:	30d8b03a 	or	r12,r6,r3
 8013de4:	6000081e 	bne	r12,zero,8013e08 <__ledf2+0x74>
 8013de8:	0005883a 	mov	r2,zero
 8013dec:	5800111e 	bne	r11,zero,8013e34 <__ledf2+0xa0>
 8013df0:	f800283a 	ret
 8013df4:	29403fcc 	andi	r5,r5,255
 8013df8:	40000c1e 	bne	r8,zero,8013e2c <__ledf2+0x98>
 8013dfc:	30d2b03a 	or	r9,r6,r3
 8013e00:	48000c26 	beq	r9,zero,8013e34 <__ledf2+0xa0>
 8013e04:	0013883a 	mov	r9,zero
 8013e08:	39c03fcc 	andi	r7,r7,255
 8013e0c:	48000826 	beq	r9,zero,8013e30 <__ledf2+0x9c>
 8013e10:	38001126 	beq	r7,zero,8013e58 <__ledf2+0xc4>
 8013e14:	00800044 	movi	r2,1
 8013e18:	f800283a 	ret
 8013e1c:	30d2b03a 	or	r9,r6,r3
 8013e20:	483fea26 	beq	r9,zero,8013dcc <__alt_data_end+0xfc013dcc>
 8013e24:	00800084 	movi	r2,2
 8013e28:	f800283a 	ret
 8013e2c:	39c03fcc 	andi	r7,r7,255
 8013e30:	39400726 	beq	r7,r5,8013e50 <__ledf2+0xbc>
 8013e34:	2800081e 	bne	r5,zero,8013e58 <__ledf2+0xc4>
 8013e38:	00800044 	movi	r2,1
 8013e3c:	f800283a 	ret
 8013e40:	2292b03a 	or	r9,r4,r10
 8013e44:	483fdf26 	beq	r9,zero,8013dc4 <__alt_data_end+0xfc013dc4>
 8013e48:	00800084 	movi	r2,2
 8013e4c:	f800283a 	ret
 8013e50:	4080030e 	bge	r8,r2,8013e60 <__ledf2+0xcc>
 8013e54:	383fef26 	beq	r7,zero,8013e14 <__alt_data_end+0xfc013e14>
 8013e58:	00bfffc4 	movi	r2,-1
 8013e5c:	f800283a 	ret
 8013e60:	123feb16 	blt	r2,r8,8013e10 <__alt_data_end+0xfc013e10>
 8013e64:	1abff336 	bltu	r3,r10,8013e34 <__alt_data_end+0xfc013e34>
 8013e68:	50c00326 	beq	r10,r3,8013e78 <__ledf2+0xe4>
 8013e6c:	50c0042e 	bgeu	r10,r3,8013e80 <__ledf2+0xec>
 8013e70:	283fe81e 	bne	r5,zero,8013e14 <__alt_data_end+0xfc013e14>
 8013e74:	003ff806 	br	8013e58 <__alt_data_end+0xfc013e58>
 8013e78:	313fee36 	bltu	r6,r4,8013e34 <__alt_data_end+0xfc013e34>
 8013e7c:	21bffc36 	bltu	r4,r6,8013e70 <__alt_data_end+0xfc013e70>
 8013e80:	0005883a 	mov	r2,zero
 8013e84:	f800283a 	ret

08013e88 <__muldf3>:
 8013e88:	deffee04 	addi	sp,sp,-72
 8013e8c:	dd000c15 	stw	r20,48(sp)
 8013e90:	2828d53a 	srli	r20,r5,20
 8013e94:	ddc00f15 	stw	r23,60(sp)
 8013e98:	282ed7fa 	srli	r23,r5,31
 8013e9c:	dc000815 	stw	r16,32(sp)
 8013ea0:	04000434 	movhi	r16,16
 8013ea4:	dcc00b15 	stw	r19,44(sp)
 8013ea8:	843fffc4 	addi	r16,r16,-1
 8013eac:	dfc01115 	stw	ra,68(sp)
 8013eb0:	df001015 	stw	fp,64(sp)
 8013eb4:	dd800e15 	stw	r22,56(sp)
 8013eb8:	dd400d15 	stw	r21,52(sp)
 8013ebc:	dc800a15 	stw	r18,40(sp)
 8013ec0:	dc400915 	stw	r17,36(sp)
 8013ec4:	a501ffcc 	andi	r20,r20,2047
 8013ec8:	2c20703a 	and	r16,r5,r16
 8013ecc:	b827883a 	mov	r19,r23
 8013ed0:	ba403fcc 	andi	r9,r23,255
 8013ed4:	a0006026 	beq	r20,zero,8014058 <__muldf3+0x1d0>
 8013ed8:	0081ffc4 	movi	r2,2047
 8013edc:	202d883a 	mov	r22,r4
 8013ee0:	a0803626 	beq	r20,r2,8013fbc <__muldf3+0x134>
 8013ee4:	84000434 	orhi	r16,r16,16
 8013ee8:	200ad77a 	srli	r5,r4,29
 8013eec:	800490fa 	slli	r2,r16,3
 8013ef0:	202c90fa 	slli	r22,r4,3
 8013ef4:	a53f0044 	addi	r20,r20,-1023
 8013ef8:	28a0b03a 	or	r16,r5,r2
 8013efc:	002b883a 	mov	r21,zero
 8013f00:	000b883a 	mov	r5,zero
 8013f04:	3804d53a 	srli	r2,r7,20
 8013f08:	3838d7fa 	srli	fp,r7,31
 8013f0c:	04400434 	movhi	r17,16
 8013f10:	8c7fffc4 	addi	r17,r17,-1
 8013f14:	1081ffcc 	andi	r2,r2,2047
 8013f18:	3025883a 	mov	r18,r6
 8013f1c:	3c62703a 	and	r17,r7,r17
 8013f20:	e2803fcc 	andi	r10,fp,255
 8013f24:	10006d26 	beq	r2,zero,80140dc <__muldf3+0x254>
 8013f28:	00c1ffc4 	movi	r3,2047
 8013f2c:	10c06526 	beq	r2,r3,80140c4 <__muldf3+0x23c>
 8013f30:	8c400434 	orhi	r17,r17,16
 8013f34:	300ed77a 	srli	r7,r6,29
 8013f38:	880690fa 	slli	r3,r17,3
 8013f3c:	302490fa 	slli	r18,r6,3
 8013f40:	10bf0044 	addi	r2,r2,-1023
 8013f44:	38e2b03a 	or	r17,r7,r3
 8013f48:	000f883a 	mov	r7,zero
 8013f4c:	a087883a 	add	r3,r20,r2
 8013f50:	010003c4 	movi	r4,15
 8013f54:	3d44b03a 	or	r2,r7,r21
 8013f58:	e5ccf03a 	xor	r6,fp,r23
 8013f5c:	1a000044 	addi	r8,r3,1
 8013f60:	20809b36 	bltu	r4,r2,80141d0 <__muldf3+0x348>
 8013f64:	100490ba 	slli	r2,r2,2
 8013f68:	01020074 	movhi	r4,2049
 8013f6c:	210fdf04 	addi	r4,r4,16252
 8013f70:	1105883a 	add	r2,r2,r4
 8013f74:	10800017 	ldw	r2,0(r2)
 8013f78:	1000683a 	jmp	r2
 8013f7c:	080141d0 	cmplti	zero,at,1287
 8013f80:	08013fdc 	xori	zero,at,1279
 8013f84:	08013fdc 	xori	zero,at,1279
 8013f88:	08013fd8 	cmpnei	zero,at,1279
 8013f8c:	080141ac 	andhi	zero,at,1286
 8013f90:	080141ac 	andhi	zero,at,1286
 8013f94:	08014194 	ori	zero,at,1286
 8013f98:	08013fd8 	cmpnei	zero,at,1279
 8013f9c:	080141ac 	andhi	zero,at,1286
 8013fa0:	08014194 	ori	zero,at,1286
 8013fa4:	080141ac 	andhi	zero,at,1286
 8013fa8:	08013fd8 	cmpnei	zero,at,1279
 8013fac:	080141bc 	xorhi	zero,at,1286
 8013fb0:	080141bc 	xorhi	zero,at,1286
 8013fb4:	080141bc 	xorhi	zero,at,1286
 8013fb8:	0801451c 	xori	zero,at,1300
 8013fbc:	2404b03a 	or	r2,r4,r16
 8013fc0:	1000711e 	bne	r2,zero,8014188 <__muldf3+0x300>
 8013fc4:	05400204 	movi	r21,8
 8013fc8:	0021883a 	mov	r16,zero
 8013fcc:	002d883a 	mov	r22,zero
 8013fd0:	01400084 	movi	r5,2
 8013fd4:	003fcb06 	br	8013f04 <__alt_data_end+0xfc013f04>
 8013fd8:	500d883a 	mov	r6,r10
 8013fdc:	00800084 	movi	r2,2
 8013fe0:	38805926 	beq	r7,r2,8014148 <__muldf3+0x2c0>
 8013fe4:	008000c4 	movi	r2,3
 8013fe8:	3881bb26 	beq	r7,r2,80146d8 <__muldf3+0x850>
 8013fec:	00800044 	movi	r2,1
 8013ff0:	3881961e 	bne	r7,r2,801464c <__muldf3+0x7c4>
 8013ff4:	3027883a 	mov	r19,r6
 8013ff8:	0005883a 	mov	r2,zero
 8013ffc:	0021883a 	mov	r16,zero
 8014000:	002d883a 	mov	r22,zero
 8014004:	1004953a 	slli	r2,r2,20
 8014008:	98c03fcc 	andi	r3,r19,255
 801400c:	04400434 	movhi	r17,16
 8014010:	8c7fffc4 	addi	r17,r17,-1
 8014014:	180697fa 	slli	r3,r3,31
 8014018:	8460703a 	and	r16,r16,r17
 801401c:	80a0b03a 	or	r16,r16,r2
 8014020:	80c6b03a 	or	r3,r16,r3
 8014024:	b005883a 	mov	r2,r22
 8014028:	dfc01117 	ldw	ra,68(sp)
 801402c:	df001017 	ldw	fp,64(sp)
 8014030:	ddc00f17 	ldw	r23,60(sp)
 8014034:	dd800e17 	ldw	r22,56(sp)
 8014038:	dd400d17 	ldw	r21,52(sp)
 801403c:	dd000c17 	ldw	r20,48(sp)
 8014040:	dcc00b17 	ldw	r19,44(sp)
 8014044:	dc800a17 	ldw	r18,40(sp)
 8014048:	dc400917 	ldw	r17,36(sp)
 801404c:	dc000817 	ldw	r16,32(sp)
 8014050:	dec01204 	addi	sp,sp,72
 8014054:	f800283a 	ret
 8014058:	2404b03a 	or	r2,r4,r16
 801405c:	202b883a 	mov	r21,r4
 8014060:	10004426 	beq	r2,zero,8014174 <__muldf3+0x2ec>
 8014064:	80015126 	beq	r16,zero,80145ac <__muldf3+0x724>
 8014068:	8009883a 	mov	r4,r16
 801406c:	d9800715 	stw	r6,28(sp)
 8014070:	d9c00215 	stw	r7,8(sp)
 8014074:	da400415 	stw	r9,16(sp)
 8014078:	80151f40 	call	80151f4 <__clzsi2>
 801407c:	d9800717 	ldw	r6,28(sp)
 8014080:	d9c00217 	ldw	r7,8(sp)
 8014084:	da400417 	ldw	r9,16(sp)
 8014088:	113ffd44 	addi	r4,r2,-11
 801408c:	00c00704 	movi	r3,28
 8014090:	19014216 	blt	r3,r4,801459c <__muldf3+0x714>
 8014094:	00c00744 	movi	r3,29
 8014098:	15bffe04 	addi	r22,r2,-8
 801409c:	1907c83a 	sub	r3,r3,r4
 80140a0:	85a0983a 	sll	r16,r16,r22
 80140a4:	a8c6d83a 	srl	r3,r21,r3
 80140a8:	adac983a 	sll	r22,r21,r22
 80140ac:	1c20b03a 	or	r16,r3,r16
 80140b0:	1080fcc4 	addi	r2,r2,1011
 80140b4:	00a9c83a 	sub	r20,zero,r2
 80140b8:	002b883a 	mov	r21,zero
 80140bc:	000b883a 	mov	r5,zero
 80140c0:	003f9006 	br	8013f04 <__alt_data_end+0xfc013f04>
 80140c4:	3446b03a 	or	r3,r6,r17
 80140c8:	1800281e 	bne	r3,zero,801416c <__muldf3+0x2e4>
 80140cc:	0023883a 	mov	r17,zero
 80140d0:	0025883a 	mov	r18,zero
 80140d4:	01c00084 	movi	r7,2
 80140d8:	003f9c06 	br	8013f4c <__alt_data_end+0xfc013f4c>
 80140dc:	3446b03a 	or	r3,r6,r17
 80140e0:	18001e26 	beq	r3,zero,801415c <__muldf3+0x2d4>
 80140e4:	88012126 	beq	r17,zero,801456c <__muldf3+0x6e4>
 80140e8:	8809883a 	mov	r4,r17
 80140ec:	d9400215 	stw	r5,8(sp)
 80140f0:	d9800715 	stw	r6,28(sp)
 80140f4:	da400415 	stw	r9,16(sp)
 80140f8:	da800315 	stw	r10,12(sp)
 80140fc:	80151f40 	call	80151f4 <__clzsi2>
 8014100:	d9400217 	ldw	r5,8(sp)
 8014104:	d9800717 	ldw	r6,28(sp)
 8014108:	da400417 	ldw	r9,16(sp)
 801410c:	da800317 	ldw	r10,12(sp)
 8014110:	113ffd44 	addi	r4,r2,-11
 8014114:	00c00704 	movi	r3,28
 8014118:	19011016 	blt	r3,r4,801455c <__muldf3+0x6d4>
 801411c:	00c00744 	movi	r3,29
 8014120:	14bffe04 	addi	r18,r2,-8
 8014124:	1907c83a 	sub	r3,r3,r4
 8014128:	8ca2983a 	sll	r17,r17,r18
 801412c:	30c6d83a 	srl	r3,r6,r3
 8014130:	34a4983a 	sll	r18,r6,r18
 8014134:	1c62b03a 	or	r17,r3,r17
 8014138:	1080fcc4 	addi	r2,r2,1011
 801413c:	0085c83a 	sub	r2,zero,r2
 8014140:	000f883a 	mov	r7,zero
 8014144:	003f8106 	br	8013f4c <__alt_data_end+0xfc013f4c>
 8014148:	3027883a 	mov	r19,r6
 801414c:	0081ffc4 	movi	r2,2047
 8014150:	0021883a 	mov	r16,zero
 8014154:	002d883a 	mov	r22,zero
 8014158:	003faa06 	br	8014004 <__alt_data_end+0xfc014004>
 801415c:	0023883a 	mov	r17,zero
 8014160:	0025883a 	mov	r18,zero
 8014164:	01c00044 	movi	r7,1
 8014168:	003f7806 	br	8013f4c <__alt_data_end+0xfc013f4c>
 801416c:	01c000c4 	movi	r7,3
 8014170:	003f7606 	br	8013f4c <__alt_data_end+0xfc013f4c>
 8014174:	05400104 	movi	r21,4
 8014178:	0021883a 	mov	r16,zero
 801417c:	002d883a 	mov	r22,zero
 8014180:	01400044 	movi	r5,1
 8014184:	003f5f06 	br	8013f04 <__alt_data_end+0xfc013f04>
 8014188:	05400304 	movi	r21,12
 801418c:	014000c4 	movi	r5,3
 8014190:	003f5c06 	br	8013f04 <__alt_data_end+0xfc013f04>
 8014194:	04000434 	movhi	r16,16
 8014198:	0027883a 	mov	r19,zero
 801419c:	843fffc4 	addi	r16,r16,-1
 80141a0:	05bfffc4 	movi	r22,-1
 80141a4:	0081ffc4 	movi	r2,2047
 80141a8:	003f9606 	br	8014004 <__alt_data_end+0xfc014004>
 80141ac:	8023883a 	mov	r17,r16
 80141b0:	b025883a 	mov	r18,r22
 80141b4:	280f883a 	mov	r7,r5
 80141b8:	003f8806 	br	8013fdc <__alt_data_end+0xfc013fdc>
 80141bc:	8023883a 	mov	r17,r16
 80141c0:	b025883a 	mov	r18,r22
 80141c4:	480d883a 	mov	r6,r9
 80141c8:	280f883a 	mov	r7,r5
 80141cc:	003f8306 	br	8013fdc <__alt_data_end+0xfc013fdc>
 80141d0:	b026d43a 	srli	r19,r22,16
 80141d4:	902ed43a 	srli	r23,r18,16
 80141d8:	b5bfffcc 	andi	r22,r22,65535
 80141dc:	94bfffcc 	andi	r18,r18,65535
 80141e0:	b00b883a 	mov	r5,r22
 80141e4:	9009883a 	mov	r4,r18
 80141e8:	d8c00515 	stw	r3,20(sp)
 80141ec:	d9800715 	stw	r6,28(sp)
 80141f0:	da000615 	stw	r8,24(sp)
 80141f4:	8004a540 	call	8004a54 <__mulsi3>
 80141f8:	980b883a 	mov	r5,r19
 80141fc:	9009883a 	mov	r4,r18
 8014200:	1029883a 	mov	r20,r2
 8014204:	8004a540 	call	8004a54 <__mulsi3>
 8014208:	b80b883a 	mov	r5,r23
 801420c:	9809883a 	mov	r4,r19
 8014210:	102b883a 	mov	r21,r2
 8014214:	8004a540 	call	8004a54 <__mulsi3>
 8014218:	b809883a 	mov	r4,r23
 801421c:	b00b883a 	mov	r5,r22
 8014220:	1039883a 	mov	fp,r2
 8014224:	8004a540 	call	8004a54 <__mulsi3>
 8014228:	a008d43a 	srli	r4,r20,16
 801422c:	1545883a 	add	r2,r2,r21
 8014230:	d8c00517 	ldw	r3,20(sp)
 8014234:	2085883a 	add	r2,r4,r2
 8014238:	d9800717 	ldw	r6,28(sp)
 801423c:	da000617 	ldw	r8,24(sp)
 8014240:	1540022e 	bgeu	r2,r21,801424c <__muldf3+0x3c4>
 8014244:	01000074 	movhi	r4,1
 8014248:	e139883a 	add	fp,fp,r4
 801424c:	100e943a 	slli	r7,r2,16
 8014250:	1004d43a 	srli	r2,r2,16
 8014254:	882ad43a 	srli	r21,r17,16
 8014258:	a53fffcc 	andi	r20,r20,65535
 801425c:	8c7fffcc 	andi	r17,r17,65535
 8014260:	3d29883a 	add	r20,r7,r20
 8014264:	b00b883a 	mov	r5,r22
 8014268:	8809883a 	mov	r4,r17
 801426c:	d8c00515 	stw	r3,20(sp)
 8014270:	d9800715 	stw	r6,28(sp)
 8014274:	da000615 	stw	r8,24(sp)
 8014278:	dd000115 	stw	r20,4(sp)
 801427c:	d8800015 	stw	r2,0(sp)
 8014280:	8004a540 	call	8004a54 <__mulsi3>
 8014284:	980b883a 	mov	r5,r19
 8014288:	8809883a 	mov	r4,r17
 801428c:	d8800215 	stw	r2,8(sp)
 8014290:	8004a540 	call	8004a54 <__mulsi3>
 8014294:	9809883a 	mov	r4,r19
 8014298:	a80b883a 	mov	r5,r21
 801429c:	1029883a 	mov	r20,r2
 80142a0:	8004a540 	call	8004a54 <__mulsi3>
 80142a4:	b00b883a 	mov	r5,r22
 80142a8:	a809883a 	mov	r4,r21
 80142ac:	d8800415 	stw	r2,16(sp)
 80142b0:	8004a540 	call	8004a54 <__mulsi3>
 80142b4:	d9c00217 	ldw	r7,8(sp)
 80142b8:	1505883a 	add	r2,r2,r20
 80142bc:	d8c00517 	ldw	r3,20(sp)
 80142c0:	3826d43a 	srli	r19,r7,16
 80142c4:	d9800717 	ldw	r6,28(sp)
 80142c8:	da000617 	ldw	r8,24(sp)
 80142cc:	9885883a 	add	r2,r19,r2
 80142d0:	da400417 	ldw	r9,16(sp)
 80142d4:	1500022e 	bgeu	r2,r20,80142e0 <__muldf3+0x458>
 80142d8:	01000074 	movhi	r4,1
 80142dc:	4913883a 	add	r9,r9,r4
 80142e0:	1028d43a 	srli	r20,r2,16
 80142e4:	1004943a 	slli	r2,r2,16
 80142e8:	802cd43a 	srli	r22,r16,16
 80142ec:	843fffcc 	andi	r16,r16,65535
 80142f0:	3cffffcc 	andi	r19,r7,65535
 80142f4:	9009883a 	mov	r4,r18
 80142f8:	800b883a 	mov	r5,r16
 80142fc:	a269883a 	add	r20,r20,r9
 8014300:	d8c00515 	stw	r3,20(sp)
 8014304:	d9800715 	stw	r6,28(sp)
 8014308:	da000615 	stw	r8,24(sp)
 801430c:	14e7883a 	add	r19,r2,r19
 8014310:	8004a540 	call	8004a54 <__mulsi3>
 8014314:	9009883a 	mov	r4,r18
 8014318:	b00b883a 	mov	r5,r22
 801431c:	d8800315 	stw	r2,12(sp)
 8014320:	8004a540 	call	8004a54 <__mulsi3>
 8014324:	b809883a 	mov	r4,r23
 8014328:	b00b883a 	mov	r5,r22
 801432c:	d8800215 	stw	r2,8(sp)
 8014330:	8004a540 	call	8004a54 <__mulsi3>
 8014334:	b80b883a 	mov	r5,r23
 8014338:	8009883a 	mov	r4,r16
 801433c:	d8800415 	stw	r2,16(sp)
 8014340:	8004a540 	call	8004a54 <__mulsi3>
 8014344:	da800317 	ldw	r10,12(sp)
 8014348:	d9c00217 	ldw	r7,8(sp)
 801434c:	d9000017 	ldw	r4,0(sp)
 8014350:	502ed43a 	srli	r23,r10,16
 8014354:	11c5883a 	add	r2,r2,r7
 8014358:	24e5883a 	add	r18,r4,r19
 801435c:	b885883a 	add	r2,r23,r2
 8014360:	d8c00517 	ldw	r3,20(sp)
 8014364:	d9800717 	ldw	r6,28(sp)
 8014368:	da000617 	ldw	r8,24(sp)
 801436c:	da400417 	ldw	r9,16(sp)
 8014370:	11c0022e 	bgeu	r2,r7,801437c <__muldf3+0x4f4>
 8014374:	01000074 	movhi	r4,1
 8014378:	4913883a 	add	r9,r9,r4
 801437c:	100ed43a 	srli	r7,r2,16
 8014380:	1004943a 	slli	r2,r2,16
 8014384:	55ffffcc 	andi	r23,r10,65535
 8014388:	3a53883a 	add	r9,r7,r9
 801438c:	8809883a 	mov	r4,r17
 8014390:	800b883a 	mov	r5,r16
 8014394:	d8c00515 	stw	r3,20(sp)
 8014398:	d9800715 	stw	r6,28(sp)
 801439c:	da000615 	stw	r8,24(sp)
 80143a0:	da400415 	stw	r9,16(sp)
 80143a4:	15ef883a 	add	r23,r2,r23
 80143a8:	8004a540 	call	8004a54 <__mulsi3>
 80143ac:	8809883a 	mov	r4,r17
 80143b0:	b00b883a 	mov	r5,r22
 80143b4:	d8800215 	stw	r2,8(sp)
 80143b8:	8004a540 	call	8004a54 <__mulsi3>
 80143bc:	b00b883a 	mov	r5,r22
 80143c0:	a809883a 	mov	r4,r21
 80143c4:	d8800315 	stw	r2,12(sp)
 80143c8:	8004a540 	call	8004a54 <__mulsi3>
 80143cc:	8009883a 	mov	r4,r16
 80143d0:	a80b883a 	mov	r5,r21
 80143d4:	1023883a 	mov	r17,r2
 80143d8:	8004a540 	call	8004a54 <__mulsi3>
 80143dc:	d9c00217 	ldw	r7,8(sp)
 80143e0:	da800317 	ldw	r10,12(sp)
 80143e4:	d8c00517 	ldw	r3,20(sp)
 80143e8:	3808d43a 	srli	r4,r7,16
 80143ec:	1285883a 	add	r2,r2,r10
 80143f0:	d9800717 	ldw	r6,28(sp)
 80143f4:	2085883a 	add	r2,r4,r2
 80143f8:	da000617 	ldw	r8,24(sp)
 80143fc:	da400417 	ldw	r9,16(sp)
 8014400:	1280022e 	bgeu	r2,r10,801440c <__muldf3+0x584>
 8014404:	01000074 	movhi	r4,1
 8014408:	8923883a 	add	r17,r17,r4
 801440c:	1008943a 	slli	r4,r2,16
 8014410:	39ffffcc 	andi	r7,r7,65535
 8014414:	e4b9883a 	add	fp,fp,r18
 8014418:	21cf883a 	add	r7,r4,r7
 801441c:	e4e7803a 	cmpltu	r19,fp,r19
 8014420:	3d0f883a 	add	r7,r7,r20
 8014424:	bf39883a 	add	fp,r23,fp
 8014428:	99c9883a 	add	r4,r19,r7
 801442c:	e5ef803a 	cmpltu	r23,fp,r23
 8014430:	490b883a 	add	r5,r9,r4
 8014434:	1004d43a 	srli	r2,r2,16
 8014438:	b965883a 	add	r18,r23,r5
 801443c:	24c9803a 	cmpltu	r4,r4,r19
 8014440:	3d29803a 	cmpltu	r20,r7,r20
 8014444:	a128b03a 	or	r20,r20,r4
 8014448:	95ef803a 	cmpltu	r23,r18,r23
 801444c:	2a53803a 	cmpltu	r9,r5,r9
 8014450:	a0a9883a 	add	r20,r20,r2
 8014454:	4deeb03a 	or	r23,r9,r23
 8014458:	a5ef883a 	add	r23,r20,r23
 801445c:	bc63883a 	add	r17,r23,r17
 8014460:	e004927a 	slli	r2,fp,9
 8014464:	d9000117 	ldw	r4,4(sp)
 8014468:	882e927a 	slli	r23,r17,9
 801446c:	9022d5fa 	srli	r17,r18,23
 8014470:	e038d5fa 	srli	fp,fp,23
 8014474:	1104b03a 	or	r2,r2,r4
 8014478:	9024927a 	slli	r18,r18,9
 801447c:	1004c03a 	cmpne	r2,r2,zero
 8014480:	bc62b03a 	or	r17,r23,r17
 8014484:	1738b03a 	or	fp,r2,fp
 8014488:	8880402c 	andhi	r2,r17,256
 801448c:	e4a4b03a 	or	r18,fp,r18
 8014490:	10000726 	beq	r2,zero,80144b0 <__muldf3+0x628>
 8014494:	9006d07a 	srli	r3,r18,1
 8014498:	880497fa 	slli	r2,r17,31
 801449c:	9480004c 	andi	r18,r18,1
 80144a0:	8822d07a 	srli	r17,r17,1
 80144a4:	1ca4b03a 	or	r18,r3,r18
 80144a8:	14a4b03a 	or	r18,r2,r18
 80144ac:	4007883a 	mov	r3,r8
 80144b0:	1880ffc4 	addi	r2,r3,1023
 80144b4:	0080460e 	bge	zero,r2,80145d0 <__muldf3+0x748>
 80144b8:	910001cc 	andi	r4,r18,7
 80144bc:	20000726 	beq	r4,zero,80144dc <__muldf3+0x654>
 80144c0:	910003cc 	andi	r4,r18,15
 80144c4:	01400104 	movi	r5,4
 80144c8:	21400426 	beq	r4,r5,80144dc <__muldf3+0x654>
 80144cc:	9149883a 	add	r4,r18,r5
 80144d0:	24a5803a 	cmpltu	r18,r4,r18
 80144d4:	8ca3883a 	add	r17,r17,r18
 80144d8:	2025883a 	mov	r18,r4
 80144dc:	8900402c 	andhi	r4,r17,256
 80144e0:	20000426 	beq	r4,zero,80144f4 <__muldf3+0x66c>
 80144e4:	18810004 	addi	r2,r3,1024
 80144e8:	00ffc034 	movhi	r3,65280
 80144ec:	18ffffc4 	addi	r3,r3,-1
 80144f0:	88e2703a 	and	r17,r17,r3
 80144f4:	00c1ff84 	movi	r3,2046
 80144f8:	18bf1316 	blt	r3,r2,8014148 <__alt_data_end+0xfc014148>
 80144fc:	882c977a 	slli	r22,r17,29
 8014500:	9024d0fa 	srli	r18,r18,3
 8014504:	8822927a 	slli	r17,r17,9
 8014508:	1081ffcc 	andi	r2,r2,2047
 801450c:	b4acb03a 	or	r22,r22,r18
 8014510:	8820d33a 	srli	r16,r17,12
 8014514:	3027883a 	mov	r19,r6
 8014518:	003eba06 	br	8014004 <__alt_data_end+0xfc014004>
 801451c:	8080022c 	andhi	r2,r16,8
 8014520:	10000926 	beq	r2,zero,8014548 <__muldf3+0x6c0>
 8014524:	8880022c 	andhi	r2,r17,8
 8014528:	1000071e 	bne	r2,zero,8014548 <__muldf3+0x6c0>
 801452c:	00800434 	movhi	r2,16
 8014530:	8c000234 	orhi	r16,r17,8
 8014534:	10bfffc4 	addi	r2,r2,-1
 8014538:	e027883a 	mov	r19,fp
 801453c:	80a0703a 	and	r16,r16,r2
 8014540:	902d883a 	mov	r22,r18
 8014544:	003f1706 	br	80141a4 <__alt_data_end+0xfc0141a4>
 8014548:	00800434 	movhi	r2,16
 801454c:	84000234 	orhi	r16,r16,8
 8014550:	10bfffc4 	addi	r2,r2,-1
 8014554:	80a0703a 	and	r16,r16,r2
 8014558:	003f1206 	br	80141a4 <__alt_data_end+0xfc0141a4>
 801455c:	147ff604 	addi	r17,r2,-40
 8014560:	3462983a 	sll	r17,r6,r17
 8014564:	0025883a 	mov	r18,zero
 8014568:	003ef306 	br	8014138 <__alt_data_end+0xfc014138>
 801456c:	3009883a 	mov	r4,r6
 8014570:	d9400215 	stw	r5,8(sp)
 8014574:	d9800715 	stw	r6,28(sp)
 8014578:	da400415 	stw	r9,16(sp)
 801457c:	da800315 	stw	r10,12(sp)
 8014580:	80151f40 	call	80151f4 <__clzsi2>
 8014584:	10800804 	addi	r2,r2,32
 8014588:	da800317 	ldw	r10,12(sp)
 801458c:	da400417 	ldw	r9,16(sp)
 8014590:	d9800717 	ldw	r6,28(sp)
 8014594:	d9400217 	ldw	r5,8(sp)
 8014598:	003edd06 	br	8014110 <__alt_data_end+0xfc014110>
 801459c:	143ff604 	addi	r16,r2,-40
 80145a0:	ac20983a 	sll	r16,r21,r16
 80145a4:	002d883a 	mov	r22,zero
 80145a8:	003ec106 	br	80140b0 <__alt_data_end+0xfc0140b0>
 80145ac:	d9800715 	stw	r6,28(sp)
 80145b0:	d9c00215 	stw	r7,8(sp)
 80145b4:	da400415 	stw	r9,16(sp)
 80145b8:	80151f40 	call	80151f4 <__clzsi2>
 80145bc:	10800804 	addi	r2,r2,32
 80145c0:	da400417 	ldw	r9,16(sp)
 80145c4:	d9c00217 	ldw	r7,8(sp)
 80145c8:	d9800717 	ldw	r6,28(sp)
 80145cc:	003eae06 	br	8014088 <__alt_data_end+0xfc014088>
 80145d0:	00c00044 	movi	r3,1
 80145d4:	1887c83a 	sub	r3,r3,r2
 80145d8:	01000e04 	movi	r4,56
 80145dc:	20fe8516 	blt	r4,r3,8013ff4 <__alt_data_end+0xfc013ff4>
 80145e0:	010007c4 	movi	r4,31
 80145e4:	20c01b16 	blt	r4,r3,8014654 <__muldf3+0x7cc>
 80145e8:	00800804 	movi	r2,32
 80145ec:	10c5c83a 	sub	r2,r2,r3
 80145f0:	888a983a 	sll	r5,r17,r2
 80145f4:	90c8d83a 	srl	r4,r18,r3
 80145f8:	9084983a 	sll	r2,r18,r2
 80145fc:	88e2d83a 	srl	r17,r17,r3
 8014600:	2906b03a 	or	r3,r5,r4
 8014604:	1004c03a 	cmpne	r2,r2,zero
 8014608:	1886b03a 	or	r3,r3,r2
 801460c:	188001cc 	andi	r2,r3,7
 8014610:	10000726 	beq	r2,zero,8014630 <__muldf3+0x7a8>
 8014614:	188003cc 	andi	r2,r3,15
 8014618:	01000104 	movi	r4,4
 801461c:	11000426 	beq	r2,r4,8014630 <__muldf3+0x7a8>
 8014620:	1805883a 	mov	r2,r3
 8014624:	10c00104 	addi	r3,r2,4
 8014628:	1885803a 	cmpltu	r2,r3,r2
 801462c:	88a3883a 	add	r17,r17,r2
 8014630:	8880202c 	andhi	r2,r17,128
 8014634:	10001c26 	beq	r2,zero,80146a8 <__muldf3+0x820>
 8014638:	3027883a 	mov	r19,r6
 801463c:	00800044 	movi	r2,1
 8014640:	0021883a 	mov	r16,zero
 8014644:	002d883a 	mov	r22,zero
 8014648:	003e6e06 	br	8014004 <__alt_data_end+0xfc014004>
 801464c:	4007883a 	mov	r3,r8
 8014650:	003f9706 	br	80144b0 <__alt_data_end+0xfc0144b0>
 8014654:	017ff844 	movi	r5,-31
 8014658:	2885c83a 	sub	r2,r5,r2
 801465c:	888ad83a 	srl	r5,r17,r2
 8014660:	00800804 	movi	r2,32
 8014664:	18801a26 	beq	r3,r2,80146d0 <__muldf3+0x848>
 8014668:	01001004 	movi	r4,64
 801466c:	20c7c83a 	sub	r3,r4,r3
 8014670:	88e2983a 	sll	r17,r17,r3
 8014674:	8ca4b03a 	or	r18,r17,r18
 8014678:	9004c03a 	cmpne	r2,r18,zero
 801467c:	2884b03a 	or	r2,r5,r2
 8014680:	144001cc 	andi	r17,r2,7
 8014684:	88000d1e 	bne	r17,zero,80146bc <__muldf3+0x834>
 8014688:	0021883a 	mov	r16,zero
 801468c:	102cd0fa 	srli	r22,r2,3
 8014690:	3027883a 	mov	r19,r6
 8014694:	0005883a 	mov	r2,zero
 8014698:	b46cb03a 	or	r22,r22,r17
 801469c:	003e5906 	br	8014004 <__alt_data_end+0xfc014004>
 80146a0:	1007883a 	mov	r3,r2
 80146a4:	0023883a 	mov	r17,zero
 80146a8:	8820927a 	slli	r16,r17,9
 80146ac:	1805883a 	mov	r2,r3
 80146b0:	8822977a 	slli	r17,r17,29
 80146b4:	8020d33a 	srli	r16,r16,12
 80146b8:	003ff406 	br	801468c <__alt_data_end+0xfc01468c>
 80146bc:	10c003cc 	andi	r3,r2,15
 80146c0:	01000104 	movi	r4,4
 80146c4:	193ff626 	beq	r3,r4,80146a0 <__alt_data_end+0xfc0146a0>
 80146c8:	0023883a 	mov	r17,zero
 80146cc:	003fd506 	br	8014624 <__alt_data_end+0xfc014624>
 80146d0:	0023883a 	mov	r17,zero
 80146d4:	003fe706 	br	8014674 <__alt_data_end+0xfc014674>
 80146d8:	00800434 	movhi	r2,16
 80146dc:	8c000234 	orhi	r16,r17,8
 80146e0:	10bfffc4 	addi	r2,r2,-1
 80146e4:	3027883a 	mov	r19,r6
 80146e8:	80a0703a 	and	r16,r16,r2
 80146ec:	902d883a 	mov	r22,r18
 80146f0:	003eac06 	br	80141a4 <__alt_data_end+0xfc0141a4>

080146f4 <__subdf3>:
 80146f4:	02000434 	movhi	r8,16
 80146f8:	423fffc4 	addi	r8,r8,-1
 80146fc:	defffb04 	addi	sp,sp,-20
 8014700:	2a14703a 	and	r10,r5,r8
 8014704:	3812d53a 	srli	r9,r7,20
 8014708:	3a10703a 	and	r8,r7,r8
 801470c:	2006d77a 	srli	r3,r4,29
 8014710:	3004d77a 	srli	r2,r6,29
 8014714:	dc000015 	stw	r16,0(sp)
 8014718:	501490fa 	slli	r10,r10,3
 801471c:	2820d53a 	srli	r16,r5,20
 8014720:	401090fa 	slli	r8,r8,3
 8014724:	dc800215 	stw	r18,8(sp)
 8014728:	dc400115 	stw	r17,4(sp)
 801472c:	dfc00415 	stw	ra,16(sp)
 8014730:	202290fa 	slli	r17,r4,3
 8014734:	dcc00315 	stw	r19,12(sp)
 8014738:	4a41ffcc 	andi	r9,r9,2047
 801473c:	0101ffc4 	movi	r4,2047
 8014740:	2824d7fa 	srli	r18,r5,31
 8014744:	8401ffcc 	andi	r16,r16,2047
 8014748:	50c6b03a 	or	r3,r10,r3
 801474c:	380ed7fa 	srli	r7,r7,31
 8014750:	408ab03a 	or	r5,r8,r2
 8014754:	300c90fa 	slli	r6,r6,3
 8014758:	49009626 	beq	r9,r4,80149b4 <__subdf3+0x2c0>
 801475c:	39c0005c 	xori	r7,r7,1
 8014760:	8245c83a 	sub	r2,r16,r9
 8014764:	3c807426 	beq	r7,r18,8014938 <__subdf3+0x244>
 8014768:	0080af0e 	bge	zero,r2,8014a28 <__subdf3+0x334>
 801476c:	48002a1e 	bne	r9,zero,8014818 <__subdf3+0x124>
 8014770:	2988b03a 	or	r4,r5,r6
 8014774:	20009a1e 	bne	r4,zero,80149e0 <__subdf3+0x2ec>
 8014778:	888001cc 	andi	r2,r17,7
 801477c:	10000726 	beq	r2,zero,801479c <__subdf3+0xa8>
 8014780:	888003cc 	andi	r2,r17,15
 8014784:	01000104 	movi	r4,4
 8014788:	11000426 	beq	r2,r4,801479c <__subdf3+0xa8>
 801478c:	890b883a 	add	r5,r17,r4
 8014790:	2c63803a 	cmpltu	r17,r5,r17
 8014794:	1c47883a 	add	r3,r3,r17
 8014798:	2823883a 	mov	r17,r5
 801479c:	1880202c 	andhi	r2,r3,128
 80147a0:	10005926 	beq	r2,zero,8014908 <__subdf3+0x214>
 80147a4:	84000044 	addi	r16,r16,1
 80147a8:	0081ffc4 	movi	r2,2047
 80147ac:	8080be26 	beq	r16,r2,8014aa8 <__subdf3+0x3b4>
 80147b0:	017fe034 	movhi	r5,65408
 80147b4:	297fffc4 	addi	r5,r5,-1
 80147b8:	1946703a 	and	r3,r3,r5
 80147bc:	1804977a 	slli	r2,r3,29
 80147c0:	1806927a 	slli	r3,r3,9
 80147c4:	8822d0fa 	srli	r17,r17,3
 80147c8:	8401ffcc 	andi	r16,r16,2047
 80147cc:	180ad33a 	srli	r5,r3,12
 80147d0:	9100004c 	andi	r4,r18,1
 80147d4:	1444b03a 	or	r2,r2,r17
 80147d8:	80c1ffcc 	andi	r3,r16,2047
 80147dc:	1820953a 	slli	r16,r3,20
 80147e0:	20c03fcc 	andi	r3,r4,255
 80147e4:	180897fa 	slli	r4,r3,31
 80147e8:	00c00434 	movhi	r3,16
 80147ec:	18ffffc4 	addi	r3,r3,-1
 80147f0:	28c6703a 	and	r3,r5,r3
 80147f4:	1c06b03a 	or	r3,r3,r16
 80147f8:	1906b03a 	or	r3,r3,r4
 80147fc:	dfc00417 	ldw	ra,16(sp)
 8014800:	dcc00317 	ldw	r19,12(sp)
 8014804:	dc800217 	ldw	r18,8(sp)
 8014808:	dc400117 	ldw	r17,4(sp)
 801480c:	dc000017 	ldw	r16,0(sp)
 8014810:	dec00504 	addi	sp,sp,20
 8014814:	f800283a 	ret
 8014818:	0101ffc4 	movi	r4,2047
 801481c:	813fd626 	beq	r16,r4,8014778 <__alt_data_end+0xfc014778>
 8014820:	29402034 	orhi	r5,r5,128
 8014824:	01000e04 	movi	r4,56
 8014828:	2080a316 	blt	r4,r2,8014ab8 <__subdf3+0x3c4>
 801482c:	010007c4 	movi	r4,31
 8014830:	2080c616 	blt	r4,r2,8014b4c <__subdf3+0x458>
 8014834:	01000804 	movi	r4,32
 8014838:	2089c83a 	sub	r4,r4,r2
 801483c:	2910983a 	sll	r8,r5,r4
 8014840:	308ed83a 	srl	r7,r6,r2
 8014844:	3108983a 	sll	r4,r6,r4
 8014848:	2884d83a 	srl	r2,r5,r2
 801484c:	41ccb03a 	or	r6,r8,r7
 8014850:	2008c03a 	cmpne	r4,r4,zero
 8014854:	310cb03a 	or	r6,r6,r4
 8014858:	898dc83a 	sub	r6,r17,r6
 801485c:	89a3803a 	cmpltu	r17,r17,r6
 8014860:	1887c83a 	sub	r3,r3,r2
 8014864:	1c47c83a 	sub	r3,r3,r17
 8014868:	3023883a 	mov	r17,r6
 801486c:	1880202c 	andhi	r2,r3,128
 8014870:	10002326 	beq	r2,zero,8014900 <__subdf3+0x20c>
 8014874:	04c02034 	movhi	r19,128
 8014878:	9cffffc4 	addi	r19,r19,-1
 801487c:	1ce6703a 	and	r19,r3,r19
 8014880:	98007a26 	beq	r19,zero,8014a6c <__subdf3+0x378>
 8014884:	9809883a 	mov	r4,r19
 8014888:	80151f40 	call	80151f4 <__clzsi2>
 801488c:	113ffe04 	addi	r4,r2,-8
 8014890:	00c007c4 	movi	r3,31
 8014894:	19007b16 	blt	r3,r4,8014a84 <__subdf3+0x390>
 8014898:	00800804 	movi	r2,32
 801489c:	1105c83a 	sub	r2,r2,r4
 80148a0:	8884d83a 	srl	r2,r17,r2
 80148a4:	9906983a 	sll	r3,r19,r4
 80148a8:	8922983a 	sll	r17,r17,r4
 80148ac:	10c4b03a 	or	r2,r2,r3
 80148b0:	24007816 	blt	r4,r16,8014a94 <__subdf3+0x3a0>
 80148b4:	2421c83a 	sub	r16,r4,r16
 80148b8:	80c00044 	addi	r3,r16,1
 80148bc:	010007c4 	movi	r4,31
 80148c0:	20c09516 	blt	r4,r3,8014b18 <__subdf3+0x424>
 80148c4:	01400804 	movi	r5,32
 80148c8:	28cbc83a 	sub	r5,r5,r3
 80148cc:	88c8d83a 	srl	r4,r17,r3
 80148d0:	8962983a 	sll	r17,r17,r5
 80148d4:	114a983a 	sll	r5,r2,r5
 80148d8:	10c6d83a 	srl	r3,r2,r3
 80148dc:	8804c03a 	cmpne	r2,r17,zero
 80148e0:	290ab03a 	or	r5,r5,r4
 80148e4:	28a2b03a 	or	r17,r5,r2
 80148e8:	0021883a 	mov	r16,zero
 80148ec:	003fa206 	br	8014778 <__alt_data_end+0xfc014778>
 80148f0:	2090b03a 	or	r8,r4,r2
 80148f4:	40018e26 	beq	r8,zero,8014f30 <__subdf3+0x83c>
 80148f8:	1007883a 	mov	r3,r2
 80148fc:	2023883a 	mov	r17,r4
 8014900:	888001cc 	andi	r2,r17,7
 8014904:	103f9e1e 	bne	r2,zero,8014780 <__alt_data_end+0xfc014780>
 8014908:	1804977a 	slli	r2,r3,29
 801490c:	8822d0fa 	srli	r17,r17,3
 8014910:	1810d0fa 	srli	r8,r3,3
 8014914:	9100004c 	andi	r4,r18,1
 8014918:	1444b03a 	or	r2,r2,r17
 801491c:	00c1ffc4 	movi	r3,2047
 8014920:	80c02826 	beq	r16,r3,80149c4 <__subdf3+0x2d0>
 8014924:	01400434 	movhi	r5,16
 8014928:	297fffc4 	addi	r5,r5,-1
 801492c:	80e0703a 	and	r16,r16,r3
 8014930:	414a703a 	and	r5,r8,r5
 8014934:	003fa806 	br	80147d8 <__alt_data_end+0xfc0147d8>
 8014938:	0080630e 	bge	zero,r2,8014ac8 <__subdf3+0x3d4>
 801493c:	48003026 	beq	r9,zero,8014a00 <__subdf3+0x30c>
 8014940:	0101ffc4 	movi	r4,2047
 8014944:	813f8c26 	beq	r16,r4,8014778 <__alt_data_end+0xfc014778>
 8014948:	29402034 	orhi	r5,r5,128
 801494c:	01000e04 	movi	r4,56
 8014950:	2080a90e 	bge	r4,r2,8014bf8 <__subdf3+0x504>
 8014954:	298cb03a 	or	r6,r5,r6
 8014958:	3012c03a 	cmpne	r9,r6,zero
 801495c:	0005883a 	mov	r2,zero
 8014960:	4c53883a 	add	r9,r9,r17
 8014964:	4c63803a 	cmpltu	r17,r9,r17
 8014968:	10c7883a 	add	r3,r2,r3
 801496c:	88c7883a 	add	r3,r17,r3
 8014970:	4823883a 	mov	r17,r9
 8014974:	1880202c 	andhi	r2,r3,128
 8014978:	1000d026 	beq	r2,zero,8014cbc <__subdf3+0x5c8>
 801497c:	84000044 	addi	r16,r16,1
 8014980:	0081ffc4 	movi	r2,2047
 8014984:	8080fe26 	beq	r16,r2,8014d80 <__subdf3+0x68c>
 8014988:	00bfe034 	movhi	r2,65408
 801498c:	10bfffc4 	addi	r2,r2,-1
 8014990:	1886703a 	and	r3,r3,r2
 8014994:	880ad07a 	srli	r5,r17,1
 8014998:	180497fa 	slli	r2,r3,31
 801499c:	8900004c 	andi	r4,r17,1
 80149a0:	2922b03a 	or	r17,r5,r4
 80149a4:	1806d07a 	srli	r3,r3,1
 80149a8:	1462b03a 	or	r17,r2,r17
 80149ac:	3825883a 	mov	r18,r7
 80149b0:	003f7106 	br	8014778 <__alt_data_end+0xfc014778>
 80149b4:	2984b03a 	or	r2,r5,r6
 80149b8:	103f6826 	beq	r2,zero,801475c <__alt_data_end+0xfc01475c>
 80149bc:	39c03fcc 	andi	r7,r7,255
 80149c0:	003f6706 	br	8014760 <__alt_data_end+0xfc014760>
 80149c4:	4086b03a 	or	r3,r8,r2
 80149c8:	18015226 	beq	r3,zero,8014f14 <__subdf3+0x820>
 80149cc:	00c00434 	movhi	r3,16
 80149d0:	41400234 	orhi	r5,r8,8
 80149d4:	18ffffc4 	addi	r3,r3,-1
 80149d8:	28ca703a 	and	r5,r5,r3
 80149dc:	003f7e06 	br	80147d8 <__alt_data_end+0xfc0147d8>
 80149e0:	10bfffc4 	addi	r2,r2,-1
 80149e4:	1000491e 	bne	r2,zero,8014b0c <__subdf3+0x418>
 80149e8:	898fc83a 	sub	r7,r17,r6
 80149ec:	89e3803a 	cmpltu	r17,r17,r7
 80149f0:	1947c83a 	sub	r3,r3,r5
 80149f4:	1c47c83a 	sub	r3,r3,r17
 80149f8:	3823883a 	mov	r17,r7
 80149fc:	003f9b06 	br	801486c <__alt_data_end+0xfc01486c>
 8014a00:	2988b03a 	or	r4,r5,r6
 8014a04:	203f5c26 	beq	r4,zero,8014778 <__alt_data_end+0xfc014778>
 8014a08:	10bfffc4 	addi	r2,r2,-1
 8014a0c:	1000931e 	bne	r2,zero,8014c5c <__subdf3+0x568>
 8014a10:	898d883a 	add	r6,r17,r6
 8014a14:	3463803a 	cmpltu	r17,r6,r17
 8014a18:	1947883a 	add	r3,r3,r5
 8014a1c:	88c7883a 	add	r3,r17,r3
 8014a20:	3023883a 	mov	r17,r6
 8014a24:	003fd306 	br	8014974 <__alt_data_end+0xfc014974>
 8014a28:	1000541e 	bne	r2,zero,8014b7c <__subdf3+0x488>
 8014a2c:	80800044 	addi	r2,r16,1
 8014a30:	1081ffcc 	andi	r2,r2,2047
 8014a34:	01000044 	movi	r4,1
 8014a38:	2080a20e 	bge	r4,r2,8014cc4 <__subdf3+0x5d0>
 8014a3c:	8989c83a 	sub	r4,r17,r6
 8014a40:	8905803a 	cmpltu	r2,r17,r4
 8014a44:	1967c83a 	sub	r19,r3,r5
 8014a48:	98a7c83a 	sub	r19,r19,r2
 8014a4c:	9880202c 	andhi	r2,r19,128
 8014a50:	10006326 	beq	r2,zero,8014be0 <__subdf3+0x4ec>
 8014a54:	3463c83a 	sub	r17,r6,r17
 8014a58:	28c7c83a 	sub	r3,r5,r3
 8014a5c:	344d803a 	cmpltu	r6,r6,r17
 8014a60:	19a7c83a 	sub	r19,r3,r6
 8014a64:	3825883a 	mov	r18,r7
 8014a68:	983f861e 	bne	r19,zero,8014884 <__alt_data_end+0xfc014884>
 8014a6c:	8809883a 	mov	r4,r17
 8014a70:	80151f40 	call	80151f4 <__clzsi2>
 8014a74:	10800804 	addi	r2,r2,32
 8014a78:	113ffe04 	addi	r4,r2,-8
 8014a7c:	00c007c4 	movi	r3,31
 8014a80:	193f850e 	bge	r3,r4,8014898 <__alt_data_end+0xfc014898>
 8014a84:	10bff604 	addi	r2,r2,-40
 8014a88:	8884983a 	sll	r2,r17,r2
 8014a8c:	0023883a 	mov	r17,zero
 8014a90:	243f880e 	bge	r4,r16,80148b4 <__alt_data_end+0xfc0148b4>
 8014a94:	00ffe034 	movhi	r3,65408
 8014a98:	18ffffc4 	addi	r3,r3,-1
 8014a9c:	8121c83a 	sub	r16,r16,r4
 8014aa0:	10c6703a 	and	r3,r2,r3
 8014aa4:	003f3406 	br	8014778 <__alt_data_end+0xfc014778>
 8014aa8:	9100004c 	andi	r4,r18,1
 8014aac:	000b883a 	mov	r5,zero
 8014ab0:	0005883a 	mov	r2,zero
 8014ab4:	003f4806 	br	80147d8 <__alt_data_end+0xfc0147d8>
 8014ab8:	298cb03a 	or	r6,r5,r6
 8014abc:	300cc03a 	cmpne	r6,r6,zero
 8014ac0:	0005883a 	mov	r2,zero
 8014ac4:	003f6406 	br	8014858 <__alt_data_end+0xfc014858>
 8014ac8:	10009a1e 	bne	r2,zero,8014d34 <__subdf3+0x640>
 8014acc:	82400044 	addi	r9,r16,1
 8014ad0:	4881ffcc 	andi	r2,r9,2047
 8014ad4:	02800044 	movi	r10,1
 8014ad8:	5080670e 	bge	r10,r2,8014c78 <__subdf3+0x584>
 8014adc:	0081ffc4 	movi	r2,2047
 8014ae0:	4880af26 	beq	r9,r2,8014da0 <__subdf3+0x6ac>
 8014ae4:	898d883a 	add	r6,r17,r6
 8014ae8:	1945883a 	add	r2,r3,r5
 8014aec:	3447803a 	cmpltu	r3,r6,r17
 8014af0:	1887883a 	add	r3,r3,r2
 8014af4:	182297fa 	slli	r17,r3,31
 8014af8:	300cd07a 	srli	r6,r6,1
 8014afc:	1806d07a 	srli	r3,r3,1
 8014b00:	4821883a 	mov	r16,r9
 8014b04:	89a2b03a 	or	r17,r17,r6
 8014b08:	003f1b06 	br	8014778 <__alt_data_end+0xfc014778>
 8014b0c:	0101ffc4 	movi	r4,2047
 8014b10:	813f441e 	bne	r16,r4,8014824 <__alt_data_end+0xfc014824>
 8014b14:	003f1806 	br	8014778 <__alt_data_end+0xfc014778>
 8014b18:	843ff844 	addi	r16,r16,-31
 8014b1c:	01400804 	movi	r5,32
 8014b20:	1408d83a 	srl	r4,r2,r16
 8014b24:	19405026 	beq	r3,r5,8014c68 <__subdf3+0x574>
 8014b28:	01401004 	movi	r5,64
 8014b2c:	28c7c83a 	sub	r3,r5,r3
 8014b30:	10c4983a 	sll	r2,r2,r3
 8014b34:	88a2b03a 	or	r17,r17,r2
 8014b38:	8822c03a 	cmpne	r17,r17,zero
 8014b3c:	2462b03a 	or	r17,r4,r17
 8014b40:	0007883a 	mov	r3,zero
 8014b44:	0021883a 	mov	r16,zero
 8014b48:	003f6d06 	br	8014900 <__alt_data_end+0xfc014900>
 8014b4c:	11fff804 	addi	r7,r2,-32
 8014b50:	01000804 	movi	r4,32
 8014b54:	29ced83a 	srl	r7,r5,r7
 8014b58:	11004526 	beq	r2,r4,8014c70 <__subdf3+0x57c>
 8014b5c:	01001004 	movi	r4,64
 8014b60:	2089c83a 	sub	r4,r4,r2
 8014b64:	2904983a 	sll	r2,r5,r4
 8014b68:	118cb03a 	or	r6,r2,r6
 8014b6c:	300cc03a 	cmpne	r6,r6,zero
 8014b70:	398cb03a 	or	r6,r7,r6
 8014b74:	0005883a 	mov	r2,zero
 8014b78:	003f3706 	br	8014858 <__alt_data_end+0xfc014858>
 8014b7c:	80002a26 	beq	r16,zero,8014c28 <__subdf3+0x534>
 8014b80:	0101ffc4 	movi	r4,2047
 8014b84:	49006626 	beq	r9,r4,8014d20 <__subdf3+0x62c>
 8014b88:	0085c83a 	sub	r2,zero,r2
 8014b8c:	18c02034 	orhi	r3,r3,128
 8014b90:	01000e04 	movi	r4,56
 8014b94:	20807e16 	blt	r4,r2,8014d90 <__subdf3+0x69c>
 8014b98:	010007c4 	movi	r4,31
 8014b9c:	2080e716 	blt	r4,r2,8014f3c <__subdf3+0x848>
 8014ba0:	01000804 	movi	r4,32
 8014ba4:	2089c83a 	sub	r4,r4,r2
 8014ba8:	1914983a 	sll	r10,r3,r4
 8014bac:	8890d83a 	srl	r8,r17,r2
 8014bb0:	8908983a 	sll	r4,r17,r4
 8014bb4:	1884d83a 	srl	r2,r3,r2
 8014bb8:	5222b03a 	or	r17,r10,r8
 8014bbc:	2006c03a 	cmpne	r3,r4,zero
 8014bc0:	88e2b03a 	or	r17,r17,r3
 8014bc4:	3463c83a 	sub	r17,r6,r17
 8014bc8:	2885c83a 	sub	r2,r5,r2
 8014bcc:	344d803a 	cmpltu	r6,r6,r17
 8014bd0:	1187c83a 	sub	r3,r2,r6
 8014bd4:	4821883a 	mov	r16,r9
 8014bd8:	3825883a 	mov	r18,r7
 8014bdc:	003f2306 	br	801486c <__alt_data_end+0xfc01486c>
 8014be0:	24d0b03a 	or	r8,r4,r19
 8014be4:	40001b1e 	bne	r8,zero,8014c54 <__subdf3+0x560>
 8014be8:	0005883a 	mov	r2,zero
 8014bec:	0009883a 	mov	r4,zero
 8014bf0:	0021883a 	mov	r16,zero
 8014bf4:	003f4906 	br	801491c <__alt_data_end+0xfc01491c>
 8014bf8:	010007c4 	movi	r4,31
 8014bfc:	20803a16 	blt	r4,r2,8014ce8 <__subdf3+0x5f4>
 8014c00:	01000804 	movi	r4,32
 8014c04:	2089c83a 	sub	r4,r4,r2
 8014c08:	2912983a 	sll	r9,r5,r4
 8014c0c:	3090d83a 	srl	r8,r6,r2
 8014c10:	3108983a 	sll	r4,r6,r4
 8014c14:	2884d83a 	srl	r2,r5,r2
 8014c18:	4a12b03a 	or	r9,r9,r8
 8014c1c:	2008c03a 	cmpne	r4,r4,zero
 8014c20:	4912b03a 	or	r9,r9,r4
 8014c24:	003f4e06 	br	8014960 <__alt_data_end+0xfc014960>
 8014c28:	1c48b03a 	or	r4,r3,r17
 8014c2c:	20003c26 	beq	r4,zero,8014d20 <__subdf3+0x62c>
 8014c30:	0084303a 	nor	r2,zero,r2
 8014c34:	1000381e 	bne	r2,zero,8014d18 <__subdf3+0x624>
 8014c38:	3463c83a 	sub	r17,r6,r17
 8014c3c:	28c5c83a 	sub	r2,r5,r3
 8014c40:	344d803a 	cmpltu	r6,r6,r17
 8014c44:	1187c83a 	sub	r3,r2,r6
 8014c48:	4821883a 	mov	r16,r9
 8014c4c:	3825883a 	mov	r18,r7
 8014c50:	003f0606 	br	801486c <__alt_data_end+0xfc01486c>
 8014c54:	2023883a 	mov	r17,r4
 8014c58:	003f0906 	br	8014880 <__alt_data_end+0xfc014880>
 8014c5c:	0101ffc4 	movi	r4,2047
 8014c60:	813f3a1e 	bne	r16,r4,801494c <__alt_data_end+0xfc01494c>
 8014c64:	003ec406 	br	8014778 <__alt_data_end+0xfc014778>
 8014c68:	0005883a 	mov	r2,zero
 8014c6c:	003fb106 	br	8014b34 <__alt_data_end+0xfc014b34>
 8014c70:	0005883a 	mov	r2,zero
 8014c74:	003fbc06 	br	8014b68 <__alt_data_end+0xfc014b68>
 8014c78:	1c44b03a 	or	r2,r3,r17
 8014c7c:	80008e1e 	bne	r16,zero,8014eb8 <__subdf3+0x7c4>
 8014c80:	1000c826 	beq	r2,zero,8014fa4 <__subdf3+0x8b0>
 8014c84:	2984b03a 	or	r2,r5,r6
 8014c88:	103ebb26 	beq	r2,zero,8014778 <__alt_data_end+0xfc014778>
 8014c8c:	8989883a 	add	r4,r17,r6
 8014c90:	1945883a 	add	r2,r3,r5
 8014c94:	2447803a 	cmpltu	r3,r4,r17
 8014c98:	1887883a 	add	r3,r3,r2
 8014c9c:	1880202c 	andhi	r2,r3,128
 8014ca0:	2023883a 	mov	r17,r4
 8014ca4:	103f1626 	beq	r2,zero,8014900 <__alt_data_end+0xfc014900>
 8014ca8:	00bfe034 	movhi	r2,65408
 8014cac:	10bfffc4 	addi	r2,r2,-1
 8014cb0:	5021883a 	mov	r16,r10
 8014cb4:	1886703a 	and	r3,r3,r2
 8014cb8:	003eaf06 	br	8014778 <__alt_data_end+0xfc014778>
 8014cbc:	3825883a 	mov	r18,r7
 8014cc0:	003f0f06 	br	8014900 <__alt_data_end+0xfc014900>
 8014cc4:	1c44b03a 	or	r2,r3,r17
 8014cc8:	8000251e 	bne	r16,zero,8014d60 <__subdf3+0x66c>
 8014ccc:	1000661e 	bne	r2,zero,8014e68 <__subdf3+0x774>
 8014cd0:	2990b03a 	or	r8,r5,r6
 8014cd4:	40009626 	beq	r8,zero,8014f30 <__subdf3+0x83c>
 8014cd8:	2807883a 	mov	r3,r5
 8014cdc:	3023883a 	mov	r17,r6
 8014ce0:	3825883a 	mov	r18,r7
 8014ce4:	003ea406 	br	8014778 <__alt_data_end+0xfc014778>
 8014ce8:	127ff804 	addi	r9,r2,-32
 8014cec:	01000804 	movi	r4,32
 8014cf0:	2a52d83a 	srl	r9,r5,r9
 8014cf4:	11008c26 	beq	r2,r4,8014f28 <__subdf3+0x834>
 8014cf8:	01001004 	movi	r4,64
 8014cfc:	2085c83a 	sub	r2,r4,r2
 8014d00:	2884983a 	sll	r2,r5,r2
 8014d04:	118cb03a 	or	r6,r2,r6
 8014d08:	300cc03a 	cmpne	r6,r6,zero
 8014d0c:	4992b03a 	or	r9,r9,r6
 8014d10:	0005883a 	mov	r2,zero
 8014d14:	003f1206 	br	8014960 <__alt_data_end+0xfc014960>
 8014d18:	0101ffc4 	movi	r4,2047
 8014d1c:	493f9c1e 	bne	r9,r4,8014b90 <__alt_data_end+0xfc014b90>
 8014d20:	2807883a 	mov	r3,r5
 8014d24:	3023883a 	mov	r17,r6
 8014d28:	4821883a 	mov	r16,r9
 8014d2c:	3825883a 	mov	r18,r7
 8014d30:	003e9106 	br	8014778 <__alt_data_end+0xfc014778>
 8014d34:	80001f1e 	bne	r16,zero,8014db4 <__subdf3+0x6c0>
 8014d38:	1c48b03a 	or	r4,r3,r17
 8014d3c:	20005a26 	beq	r4,zero,8014ea8 <__subdf3+0x7b4>
 8014d40:	0084303a 	nor	r2,zero,r2
 8014d44:	1000561e 	bne	r2,zero,8014ea0 <__subdf3+0x7ac>
 8014d48:	89a3883a 	add	r17,r17,r6
 8014d4c:	1945883a 	add	r2,r3,r5
 8014d50:	898d803a 	cmpltu	r6,r17,r6
 8014d54:	3087883a 	add	r3,r6,r2
 8014d58:	4821883a 	mov	r16,r9
 8014d5c:	003f0506 	br	8014974 <__alt_data_end+0xfc014974>
 8014d60:	10002b1e 	bne	r2,zero,8014e10 <__subdf3+0x71c>
 8014d64:	2984b03a 	or	r2,r5,r6
 8014d68:	10008026 	beq	r2,zero,8014f6c <__subdf3+0x878>
 8014d6c:	2807883a 	mov	r3,r5
 8014d70:	3023883a 	mov	r17,r6
 8014d74:	3825883a 	mov	r18,r7
 8014d78:	0401ffc4 	movi	r16,2047
 8014d7c:	003e7e06 	br	8014778 <__alt_data_end+0xfc014778>
 8014d80:	3809883a 	mov	r4,r7
 8014d84:	0011883a 	mov	r8,zero
 8014d88:	0005883a 	mov	r2,zero
 8014d8c:	003ee306 	br	801491c <__alt_data_end+0xfc01491c>
 8014d90:	1c62b03a 	or	r17,r3,r17
 8014d94:	8822c03a 	cmpne	r17,r17,zero
 8014d98:	0005883a 	mov	r2,zero
 8014d9c:	003f8906 	br	8014bc4 <__alt_data_end+0xfc014bc4>
 8014da0:	3809883a 	mov	r4,r7
 8014da4:	4821883a 	mov	r16,r9
 8014da8:	0011883a 	mov	r8,zero
 8014dac:	0005883a 	mov	r2,zero
 8014db0:	003eda06 	br	801491c <__alt_data_end+0xfc01491c>
 8014db4:	0101ffc4 	movi	r4,2047
 8014db8:	49003b26 	beq	r9,r4,8014ea8 <__subdf3+0x7b4>
 8014dbc:	0085c83a 	sub	r2,zero,r2
 8014dc0:	18c02034 	orhi	r3,r3,128
 8014dc4:	01000e04 	movi	r4,56
 8014dc8:	20806e16 	blt	r4,r2,8014f84 <__subdf3+0x890>
 8014dcc:	010007c4 	movi	r4,31
 8014dd0:	20807716 	blt	r4,r2,8014fb0 <__subdf3+0x8bc>
 8014dd4:	01000804 	movi	r4,32
 8014dd8:	2089c83a 	sub	r4,r4,r2
 8014ddc:	1914983a 	sll	r10,r3,r4
 8014de0:	8890d83a 	srl	r8,r17,r2
 8014de4:	8908983a 	sll	r4,r17,r4
 8014de8:	1884d83a 	srl	r2,r3,r2
 8014dec:	5222b03a 	or	r17,r10,r8
 8014df0:	2006c03a 	cmpne	r3,r4,zero
 8014df4:	88e2b03a 	or	r17,r17,r3
 8014df8:	89a3883a 	add	r17,r17,r6
 8014dfc:	1145883a 	add	r2,r2,r5
 8014e00:	898d803a 	cmpltu	r6,r17,r6
 8014e04:	3087883a 	add	r3,r6,r2
 8014e08:	4821883a 	mov	r16,r9
 8014e0c:	003ed906 	br	8014974 <__alt_data_end+0xfc014974>
 8014e10:	2984b03a 	or	r2,r5,r6
 8014e14:	10004226 	beq	r2,zero,8014f20 <__subdf3+0x82c>
 8014e18:	1808d0fa 	srli	r4,r3,3
 8014e1c:	8822d0fa 	srli	r17,r17,3
 8014e20:	1806977a 	slli	r3,r3,29
 8014e24:	2080022c 	andhi	r2,r4,8
 8014e28:	1c62b03a 	or	r17,r3,r17
 8014e2c:	10000826 	beq	r2,zero,8014e50 <__subdf3+0x75c>
 8014e30:	2812d0fa 	srli	r9,r5,3
 8014e34:	4880022c 	andhi	r2,r9,8
 8014e38:	1000051e 	bne	r2,zero,8014e50 <__subdf3+0x75c>
 8014e3c:	300cd0fa 	srli	r6,r6,3
 8014e40:	2804977a 	slli	r2,r5,29
 8014e44:	4809883a 	mov	r4,r9
 8014e48:	3825883a 	mov	r18,r7
 8014e4c:	11a2b03a 	or	r17,r2,r6
 8014e50:	8806d77a 	srli	r3,r17,29
 8014e54:	200890fa 	slli	r4,r4,3
 8014e58:	882290fa 	slli	r17,r17,3
 8014e5c:	0401ffc4 	movi	r16,2047
 8014e60:	1906b03a 	or	r3,r3,r4
 8014e64:	003e4406 	br	8014778 <__alt_data_end+0xfc014778>
 8014e68:	2984b03a 	or	r2,r5,r6
 8014e6c:	103e4226 	beq	r2,zero,8014778 <__alt_data_end+0xfc014778>
 8014e70:	8989c83a 	sub	r4,r17,r6
 8014e74:	8911803a 	cmpltu	r8,r17,r4
 8014e78:	1945c83a 	sub	r2,r3,r5
 8014e7c:	1205c83a 	sub	r2,r2,r8
 8014e80:	1200202c 	andhi	r8,r2,128
 8014e84:	403e9a26 	beq	r8,zero,80148f0 <__alt_data_end+0xfc0148f0>
 8014e88:	3463c83a 	sub	r17,r6,r17
 8014e8c:	28c5c83a 	sub	r2,r5,r3
 8014e90:	344d803a 	cmpltu	r6,r6,r17
 8014e94:	1187c83a 	sub	r3,r2,r6
 8014e98:	3825883a 	mov	r18,r7
 8014e9c:	003e3606 	br	8014778 <__alt_data_end+0xfc014778>
 8014ea0:	0101ffc4 	movi	r4,2047
 8014ea4:	493fc71e 	bne	r9,r4,8014dc4 <__alt_data_end+0xfc014dc4>
 8014ea8:	2807883a 	mov	r3,r5
 8014eac:	3023883a 	mov	r17,r6
 8014eb0:	4821883a 	mov	r16,r9
 8014eb4:	003e3006 	br	8014778 <__alt_data_end+0xfc014778>
 8014eb8:	10003626 	beq	r2,zero,8014f94 <__subdf3+0x8a0>
 8014ebc:	2984b03a 	or	r2,r5,r6
 8014ec0:	10001726 	beq	r2,zero,8014f20 <__subdf3+0x82c>
 8014ec4:	1808d0fa 	srli	r4,r3,3
 8014ec8:	8822d0fa 	srli	r17,r17,3
 8014ecc:	1806977a 	slli	r3,r3,29
 8014ed0:	2080022c 	andhi	r2,r4,8
 8014ed4:	1c62b03a 	or	r17,r3,r17
 8014ed8:	10000726 	beq	r2,zero,8014ef8 <__subdf3+0x804>
 8014edc:	2812d0fa 	srli	r9,r5,3
 8014ee0:	4880022c 	andhi	r2,r9,8
 8014ee4:	1000041e 	bne	r2,zero,8014ef8 <__subdf3+0x804>
 8014ee8:	300cd0fa 	srli	r6,r6,3
 8014eec:	2804977a 	slli	r2,r5,29
 8014ef0:	4809883a 	mov	r4,r9
 8014ef4:	11a2b03a 	or	r17,r2,r6
 8014ef8:	8806d77a 	srli	r3,r17,29
 8014efc:	200890fa 	slli	r4,r4,3
 8014f00:	882290fa 	slli	r17,r17,3
 8014f04:	3825883a 	mov	r18,r7
 8014f08:	1906b03a 	or	r3,r3,r4
 8014f0c:	0401ffc4 	movi	r16,2047
 8014f10:	003e1906 	br	8014778 <__alt_data_end+0xfc014778>
 8014f14:	000b883a 	mov	r5,zero
 8014f18:	0005883a 	mov	r2,zero
 8014f1c:	003e2e06 	br	80147d8 <__alt_data_end+0xfc0147d8>
 8014f20:	0401ffc4 	movi	r16,2047
 8014f24:	003e1406 	br	8014778 <__alt_data_end+0xfc014778>
 8014f28:	0005883a 	mov	r2,zero
 8014f2c:	003f7506 	br	8014d04 <__alt_data_end+0xfc014d04>
 8014f30:	0005883a 	mov	r2,zero
 8014f34:	0009883a 	mov	r4,zero
 8014f38:	003e7806 	br	801491c <__alt_data_end+0xfc01491c>
 8014f3c:	123ff804 	addi	r8,r2,-32
 8014f40:	01000804 	movi	r4,32
 8014f44:	1a10d83a 	srl	r8,r3,r8
 8014f48:	11002526 	beq	r2,r4,8014fe0 <__subdf3+0x8ec>
 8014f4c:	01001004 	movi	r4,64
 8014f50:	2085c83a 	sub	r2,r4,r2
 8014f54:	1884983a 	sll	r2,r3,r2
 8014f58:	1444b03a 	or	r2,r2,r17
 8014f5c:	1004c03a 	cmpne	r2,r2,zero
 8014f60:	40a2b03a 	or	r17,r8,r2
 8014f64:	0005883a 	mov	r2,zero
 8014f68:	003f1606 	br	8014bc4 <__alt_data_end+0xfc014bc4>
 8014f6c:	02000434 	movhi	r8,16
 8014f70:	0009883a 	mov	r4,zero
 8014f74:	423fffc4 	addi	r8,r8,-1
 8014f78:	00bfffc4 	movi	r2,-1
 8014f7c:	0401ffc4 	movi	r16,2047
 8014f80:	003e6606 	br	801491c <__alt_data_end+0xfc01491c>
 8014f84:	1c62b03a 	or	r17,r3,r17
 8014f88:	8822c03a 	cmpne	r17,r17,zero
 8014f8c:	0005883a 	mov	r2,zero
 8014f90:	003f9906 	br	8014df8 <__alt_data_end+0xfc014df8>
 8014f94:	2807883a 	mov	r3,r5
 8014f98:	3023883a 	mov	r17,r6
 8014f9c:	0401ffc4 	movi	r16,2047
 8014fa0:	003df506 	br	8014778 <__alt_data_end+0xfc014778>
 8014fa4:	2807883a 	mov	r3,r5
 8014fa8:	3023883a 	mov	r17,r6
 8014fac:	003df206 	br	8014778 <__alt_data_end+0xfc014778>
 8014fb0:	123ff804 	addi	r8,r2,-32
 8014fb4:	01000804 	movi	r4,32
 8014fb8:	1a10d83a 	srl	r8,r3,r8
 8014fbc:	11000a26 	beq	r2,r4,8014fe8 <__subdf3+0x8f4>
 8014fc0:	01001004 	movi	r4,64
 8014fc4:	2085c83a 	sub	r2,r4,r2
 8014fc8:	1884983a 	sll	r2,r3,r2
 8014fcc:	1444b03a 	or	r2,r2,r17
 8014fd0:	1004c03a 	cmpne	r2,r2,zero
 8014fd4:	40a2b03a 	or	r17,r8,r2
 8014fd8:	0005883a 	mov	r2,zero
 8014fdc:	003f8606 	br	8014df8 <__alt_data_end+0xfc014df8>
 8014fe0:	0005883a 	mov	r2,zero
 8014fe4:	003fdc06 	br	8014f58 <__alt_data_end+0xfc014f58>
 8014fe8:	0005883a 	mov	r2,zero
 8014fec:	003ff706 	br	8014fcc <__alt_data_end+0xfc014fcc>

08014ff0 <__fixdfsi>:
 8014ff0:	280cd53a 	srli	r6,r5,20
 8014ff4:	00c00434 	movhi	r3,16
 8014ff8:	18ffffc4 	addi	r3,r3,-1
 8014ffc:	3181ffcc 	andi	r6,r6,2047
 8015000:	01c0ff84 	movi	r7,1022
 8015004:	28c6703a 	and	r3,r5,r3
 8015008:	280ad7fa 	srli	r5,r5,31
 801500c:	3980120e 	bge	r7,r6,8015058 <__fixdfsi+0x68>
 8015010:	00810744 	movi	r2,1053
 8015014:	11800c16 	blt	r2,r6,8015048 <__fixdfsi+0x58>
 8015018:	00810cc4 	movi	r2,1075
 801501c:	1185c83a 	sub	r2,r2,r6
 8015020:	01c007c4 	movi	r7,31
 8015024:	18c00434 	orhi	r3,r3,16
 8015028:	38800d16 	blt	r7,r2,8015060 <__fixdfsi+0x70>
 801502c:	31befb44 	addi	r6,r6,-1043
 8015030:	2084d83a 	srl	r2,r4,r2
 8015034:	1986983a 	sll	r3,r3,r6
 8015038:	1884b03a 	or	r2,r3,r2
 801503c:	28000726 	beq	r5,zero,801505c <__fixdfsi+0x6c>
 8015040:	0085c83a 	sub	r2,zero,r2
 8015044:	f800283a 	ret
 8015048:	00a00034 	movhi	r2,32768
 801504c:	10bfffc4 	addi	r2,r2,-1
 8015050:	2885883a 	add	r2,r5,r2
 8015054:	f800283a 	ret
 8015058:	0005883a 	mov	r2,zero
 801505c:	f800283a 	ret
 8015060:	008104c4 	movi	r2,1043
 8015064:	1185c83a 	sub	r2,r2,r6
 8015068:	1884d83a 	srl	r2,r3,r2
 801506c:	003ff306 	br	801503c <__alt_data_end+0xfc01503c>

08015070 <__floatsidf>:
 8015070:	defffd04 	addi	sp,sp,-12
 8015074:	dfc00215 	stw	ra,8(sp)
 8015078:	dc400115 	stw	r17,4(sp)
 801507c:	dc000015 	stw	r16,0(sp)
 8015080:	20002b26 	beq	r4,zero,8015130 <__floatsidf+0xc0>
 8015084:	2023883a 	mov	r17,r4
 8015088:	2020d7fa 	srli	r16,r4,31
 801508c:	20002d16 	blt	r4,zero,8015144 <__floatsidf+0xd4>
 8015090:	8809883a 	mov	r4,r17
 8015094:	80151f40 	call	80151f4 <__clzsi2>
 8015098:	01410784 	movi	r5,1054
 801509c:	288bc83a 	sub	r5,r5,r2
 80150a0:	01010cc4 	movi	r4,1075
 80150a4:	2149c83a 	sub	r4,r4,r5
 80150a8:	00c007c4 	movi	r3,31
 80150ac:	1900160e 	bge	r3,r4,8015108 <__floatsidf+0x98>
 80150b0:	00c104c4 	movi	r3,1043
 80150b4:	1947c83a 	sub	r3,r3,r5
 80150b8:	88c6983a 	sll	r3,r17,r3
 80150bc:	00800434 	movhi	r2,16
 80150c0:	10bfffc4 	addi	r2,r2,-1
 80150c4:	1886703a 	and	r3,r3,r2
 80150c8:	2941ffcc 	andi	r5,r5,2047
 80150cc:	800d883a 	mov	r6,r16
 80150d0:	0005883a 	mov	r2,zero
 80150d4:	280a953a 	slli	r5,r5,20
 80150d8:	31803fcc 	andi	r6,r6,255
 80150dc:	01000434 	movhi	r4,16
 80150e0:	300c97fa 	slli	r6,r6,31
 80150e4:	213fffc4 	addi	r4,r4,-1
 80150e8:	1906703a 	and	r3,r3,r4
 80150ec:	1946b03a 	or	r3,r3,r5
 80150f0:	1986b03a 	or	r3,r3,r6
 80150f4:	dfc00217 	ldw	ra,8(sp)
 80150f8:	dc400117 	ldw	r17,4(sp)
 80150fc:	dc000017 	ldw	r16,0(sp)
 8015100:	dec00304 	addi	sp,sp,12
 8015104:	f800283a 	ret
 8015108:	00c002c4 	movi	r3,11
 801510c:	1887c83a 	sub	r3,r3,r2
 8015110:	88c6d83a 	srl	r3,r17,r3
 8015114:	8904983a 	sll	r2,r17,r4
 8015118:	01000434 	movhi	r4,16
 801511c:	213fffc4 	addi	r4,r4,-1
 8015120:	2941ffcc 	andi	r5,r5,2047
 8015124:	1906703a 	and	r3,r3,r4
 8015128:	800d883a 	mov	r6,r16
 801512c:	003fe906 	br	80150d4 <__alt_data_end+0xfc0150d4>
 8015130:	000d883a 	mov	r6,zero
 8015134:	000b883a 	mov	r5,zero
 8015138:	0007883a 	mov	r3,zero
 801513c:	0005883a 	mov	r2,zero
 8015140:	003fe406 	br	80150d4 <__alt_data_end+0xfc0150d4>
 8015144:	0123c83a 	sub	r17,zero,r4
 8015148:	003fd106 	br	8015090 <__alt_data_end+0xfc015090>

0801514c <__floatunsidf>:
 801514c:	defffe04 	addi	sp,sp,-8
 8015150:	dc000015 	stw	r16,0(sp)
 8015154:	dfc00115 	stw	ra,4(sp)
 8015158:	2021883a 	mov	r16,r4
 801515c:	20002226 	beq	r4,zero,80151e8 <__floatunsidf+0x9c>
 8015160:	80151f40 	call	80151f4 <__clzsi2>
 8015164:	01010784 	movi	r4,1054
 8015168:	2089c83a 	sub	r4,r4,r2
 801516c:	01810cc4 	movi	r6,1075
 8015170:	310dc83a 	sub	r6,r6,r4
 8015174:	00c007c4 	movi	r3,31
 8015178:	1980120e 	bge	r3,r6,80151c4 <__floatunsidf+0x78>
 801517c:	00c104c4 	movi	r3,1043
 8015180:	1907c83a 	sub	r3,r3,r4
 8015184:	80ca983a 	sll	r5,r16,r3
 8015188:	00800434 	movhi	r2,16
 801518c:	10bfffc4 	addi	r2,r2,-1
 8015190:	2101ffcc 	andi	r4,r4,2047
 8015194:	0021883a 	mov	r16,zero
 8015198:	288a703a 	and	r5,r5,r2
 801519c:	2008953a 	slli	r4,r4,20
 80151a0:	00c00434 	movhi	r3,16
 80151a4:	18ffffc4 	addi	r3,r3,-1
 80151a8:	28c6703a 	and	r3,r5,r3
 80151ac:	8005883a 	mov	r2,r16
 80151b0:	1906b03a 	or	r3,r3,r4
 80151b4:	dfc00117 	ldw	ra,4(sp)
 80151b8:	dc000017 	ldw	r16,0(sp)
 80151bc:	dec00204 	addi	sp,sp,8
 80151c0:	f800283a 	ret
 80151c4:	00c002c4 	movi	r3,11
 80151c8:	188bc83a 	sub	r5,r3,r2
 80151cc:	814ad83a 	srl	r5,r16,r5
 80151d0:	00c00434 	movhi	r3,16
 80151d4:	18ffffc4 	addi	r3,r3,-1
 80151d8:	81a0983a 	sll	r16,r16,r6
 80151dc:	2101ffcc 	andi	r4,r4,2047
 80151e0:	28ca703a 	and	r5,r5,r3
 80151e4:	003fed06 	br	801519c <__alt_data_end+0xfc01519c>
 80151e8:	0009883a 	mov	r4,zero
 80151ec:	000b883a 	mov	r5,zero
 80151f0:	003fea06 	br	801519c <__alt_data_end+0xfc01519c>

080151f4 <__clzsi2>:
 80151f4:	00bfffd4 	movui	r2,65535
 80151f8:	11000536 	bltu	r2,r4,8015210 <__clzsi2+0x1c>
 80151fc:	00803fc4 	movi	r2,255
 8015200:	11000f36 	bltu	r2,r4,8015240 <__clzsi2+0x4c>
 8015204:	00800804 	movi	r2,32
 8015208:	0007883a 	mov	r3,zero
 801520c:	00000506 	br	8015224 <__clzsi2+0x30>
 8015210:	00804034 	movhi	r2,256
 8015214:	10bfffc4 	addi	r2,r2,-1
 8015218:	11000c2e 	bgeu	r2,r4,801524c <__clzsi2+0x58>
 801521c:	00800204 	movi	r2,8
 8015220:	00c00604 	movi	r3,24
 8015224:	20c8d83a 	srl	r4,r4,r3
 8015228:	00c200b4 	movhi	r3,2050
 801522c:	18e06204 	addi	r3,r3,-32376
 8015230:	1909883a 	add	r4,r3,r4
 8015234:	20c00003 	ldbu	r3,0(r4)
 8015238:	10c5c83a 	sub	r2,r2,r3
 801523c:	f800283a 	ret
 8015240:	00800604 	movi	r2,24
 8015244:	00c00204 	movi	r3,8
 8015248:	003ff606 	br	8015224 <__alt_data_end+0xfc015224>
 801524c:	00800404 	movi	r2,16
 8015250:	1007883a 	mov	r3,r2
 8015254:	003ff306 	br	8015224 <__alt_data_end+0xfc015224>

08015258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015258:	defffe04 	addi	sp,sp,-8
 801525c:	dfc00115 	stw	ra,4(sp)
 8015260:	df000015 	stw	fp,0(sp)
 8015264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015268:	d0a01017 	ldw	r2,-32704(gp)
 801526c:	10000326 	beq	r2,zero,801527c <alt_get_errno+0x24>
 8015270:	d0a01017 	ldw	r2,-32704(gp)
 8015274:	103ee83a 	callr	r2
 8015278:	00000106 	br	8015280 <alt_get_errno+0x28>
 801527c:	d0a78404 	addi	r2,gp,-25072
}
 8015280:	e037883a 	mov	sp,fp
 8015284:	dfc00117 	ldw	ra,4(sp)
 8015288:	df000017 	ldw	fp,0(sp)
 801528c:	dec00204 	addi	sp,sp,8
 8015290:	f800283a 	ret

08015294 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8015294:	defffb04 	addi	sp,sp,-20
 8015298:	dfc00415 	stw	ra,16(sp)
 801529c:	df000315 	stw	fp,12(sp)
 80152a0:	df000304 	addi	fp,sp,12
 80152a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80152a8:	e0bfff17 	ldw	r2,-4(fp)
 80152ac:	10000816 	blt	r2,zero,80152d0 <close+0x3c>
 80152b0:	01400304 	movi	r5,12
 80152b4:	e13fff17 	ldw	r4,-4(fp)
 80152b8:	8004a540 	call	8004a54 <__mulsi3>
 80152bc:	1007883a 	mov	r3,r2
 80152c0:	008200b4 	movhi	r2,2050
 80152c4:	10a38204 	addi	r2,r2,-29176
 80152c8:	1885883a 	add	r2,r3,r2
 80152cc:	00000106 	br	80152d4 <close+0x40>
 80152d0:	0005883a 	mov	r2,zero
 80152d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80152d8:	e0bffd17 	ldw	r2,-12(fp)
 80152dc:	10001926 	beq	r2,zero,8015344 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80152e0:	e0bffd17 	ldw	r2,-12(fp)
 80152e4:	10800017 	ldw	r2,0(r2)
 80152e8:	10800417 	ldw	r2,16(r2)
 80152ec:	10000626 	beq	r2,zero,8015308 <close+0x74>
 80152f0:	e0bffd17 	ldw	r2,-12(fp)
 80152f4:	10800017 	ldw	r2,0(r2)
 80152f8:	10800417 	ldw	r2,16(r2)
 80152fc:	e13ffd17 	ldw	r4,-12(fp)
 8015300:	103ee83a 	callr	r2
 8015304:	00000106 	br	801530c <close+0x78>
 8015308:	0005883a 	mov	r2,zero
 801530c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015310:	e13fff17 	ldw	r4,-4(fp)
 8015314:	801597c0 	call	801597c <alt_release_fd>
    if (rval < 0)
 8015318:	e0bffe17 	ldw	r2,-8(fp)
 801531c:	1000070e 	bge	r2,zero,801533c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015320:	80152580 	call	8015258 <alt_get_errno>
 8015324:	1007883a 	mov	r3,r2
 8015328:	e0bffe17 	ldw	r2,-8(fp)
 801532c:	0085c83a 	sub	r2,zero,r2
 8015330:	18800015 	stw	r2,0(r3)
      return -1;
 8015334:	00bfffc4 	movi	r2,-1
 8015338:	00000706 	br	8015358 <close+0xc4>
    }
    return 0;
 801533c:	0005883a 	mov	r2,zero
 8015340:	00000506 	br	8015358 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015344:	80152580 	call	8015258 <alt_get_errno>
 8015348:	1007883a 	mov	r3,r2
 801534c:	00801444 	movi	r2,81
 8015350:	18800015 	stw	r2,0(r3)
    return -1;
 8015354:	00bfffc4 	movi	r2,-1
  }
}
 8015358:	e037883a 	mov	sp,fp
 801535c:	dfc00117 	ldw	ra,4(sp)
 8015360:	df000017 	ldw	fp,0(sp)
 8015364:	dec00204 	addi	sp,sp,8
 8015368:	f800283a 	ret

0801536c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 801536c:	defffc04 	addi	sp,sp,-16
 8015370:	df000315 	stw	fp,12(sp)
 8015374:	df000304 	addi	fp,sp,12
 8015378:	e13ffd15 	stw	r4,-12(fp)
 801537c:	e17ffe15 	stw	r5,-8(fp)
 8015380:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8015384:	e0bfff17 	ldw	r2,-4(fp)
}
 8015388:	e037883a 	mov	sp,fp
 801538c:	df000017 	ldw	fp,0(sp)
 8015390:	dec00104 	addi	sp,sp,4
 8015394:	f800283a 	ret

08015398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015398:	defffe04 	addi	sp,sp,-8
 801539c:	dfc00115 	stw	ra,4(sp)
 80153a0:	df000015 	stw	fp,0(sp)
 80153a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80153a8:	d0a01017 	ldw	r2,-32704(gp)
 80153ac:	10000326 	beq	r2,zero,80153bc <alt_get_errno+0x24>
 80153b0:	d0a01017 	ldw	r2,-32704(gp)
 80153b4:	103ee83a 	callr	r2
 80153b8:	00000106 	br	80153c0 <alt_get_errno+0x28>
 80153bc:	d0a78404 	addi	r2,gp,-25072
}
 80153c0:	e037883a 	mov	sp,fp
 80153c4:	dfc00117 	ldw	ra,4(sp)
 80153c8:	df000017 	ldw	fp,0(sp)
 80153cc:	dec00204 	addi	sp,sp,8
 80153d0:	f800283a 	ret

080153d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80153d4:	defffb04 	addi	sp,sp,-20
 80153d8:	dfc00415 	stw	ra,16(sp)
 80153dc:	df000315 	stw	fp,12(sp)
 80153e0:	df000304 	addi	fp,sp,12
 80153e4:	e13ffe15 	stw	r4,-8(fp)
 80153e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80153ec:	e0bffe17 	ldw	r2,-8(fp)
 80153f0:	10000816 	blt	r2,zero,8015414 <fstat+0x40>
 80153f4:	01400304 	movi	r5,12
 80153f8:	e13ffe17 	ldw	r4,-8(fp)
 80153fc:	8004a540 	call	8004a54 <__mulsi3>
 8015400:	1007883a 	mov	r3,r2
 8015404:	008200b4 	movhi	r2,2050
 8015408:	10a38204 	addi	r2,r2,-29176
 801540c:	1885883a 	add	r2,r3,r2
 8015410:	00000106 	br	8015418 <fstat+0x44>
 8015414:	0005883a 	mov	r2,zero
 8015418:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 801541c:	e0bffd17 	ldw	r2,-12(fp)
 8015420:	10001026 	beq	r2,zero,8015464 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8015424:	e0bffd17 	ldw	r2,-12(fp)
 8015428:	10800017 	ldw	r2,0(r2)
 801542c:	10800817 	ldw	r2,32(r2)
 8015430:	10000726 	beq	r2,zero,8015450 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8015434:	e0bffd17 	ldw	r2,-12(fp)
 8015438:	10800017 	ldw	r2,0(r2)
 801543c:	10800817 	ldw	r2,32(r2)
 8015440:	e17fff17 	ldw	r5,-4(fp)
 8015444:	e13ffd17 	ldw	r4,-12(fp)
 8015448:	103ee83a 	callr	r2
 801544c:	00000a06 	br	8015478 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8015450:	e0bfff17 	ldw	r2,-4(fp)
 8015454:	00c80004 	movi	r3,8192
 8015458:	10c00115 	stw	r3,4(r2)
      return 0;
 801545c:	0005883a 	mov	r2,zero
 8015460:	00000506 	br	8015478 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015464:	80153980 	call	8015398 <alt_get_errno>
 8015468:	1007883a 	mov	r3,r2
 801546c:	00801444 	movi	r2,81
 8015470:	18800015 	stw	r2,0(r3)
    return -1;
 8015474:	00bfffc4 	movi	r2,-1
  }
}
 8015478:	e037883a 	mov	sp,fp
 801547c:	dfc00117 	ldw	ra,4(sp)
 8015480:	df000017 	ldw	fp,0(sp)
 8015484:	dec00204 	addi	sp,sp,8
 8015488:	f800283a 	ret

0801548c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801548c:	defffe04 	addi	sp,sp,-8
 8015490:	dfc00115 	stw	ra,4(sp)
 8015494:	df000015 	stw	fp,0(sp)
 8015498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801549c:	d0a01017 	ldw	r2,-32704(gp)
 80154a0:	10000326 	beq	r2,zero,80154b0 <alt_get_errno+0x24>
 80154a4:	d0a01017 	ldw	r2,-32704(gp)
 80154a8:	103ee83a 	callr	r2
 80154ac:	00000106 	br	80154b4 <alt_get_errno+0x28>
 80154b0:	d0a78404 	addi	r2,gp,-25072
}
 80154b4:	e037883a 	mov	sp,fp
 80154b8:	dfc00117 	ldw	ra,4(sp)
 80154bc:	df000017 	ldw	fp,0(sp)
 80154c0:	dec00204 	addi	sp,sp,8
 80154c4:	f800283a 	ret

080154c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80154c8:	deffed04 	addi	sp,sp,-76
 80154cc:	dfc01215 	stw	ra,72(sp)
 80154d0:	df001115 	stw	fp,68(sp)
 80154d4:	df001104 	addi	fp,sp,68
 80154d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80154dc:	e0bfff17 	ldw	r2,-4(fp)
 80154e0:	10000816 	blt	r2,zero,8015504 <isatty+0x3c>
 80154e4:	01400304 	movi	r5,12
 80154e8:	e13fff17 	ldw	r4,-4(fp)
 80154ec:	8004a540 	call	8004a54 <__mulsi3>
 80154f0:	1007883a 	mov	r3,r2
 80154f4:	008200b4 	movhi	r2,2050
 80154f8:	10a38204 	addi	r2,r2,-29176
 80154fc:	1885883a 	add	r2,r3,r2
 8015500:	00000106 	br	8015508 <isatty+0x40>
 8015504:	0005883a 	mov	r2,zero
 8015508:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801550c:	e0bfef17 	ldw	r2,-68(fp)
 8015510:	10000e26 	beq	r2,zero,801554c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8015514:	e0bfef17 	ldw	r2,-68(fp)
 8015518:	10800017 	ldw	r2,0(r2)
 801551c:	10800817 	ldw	r2,32(r2)
 8015520:	1000021e 	bne	r2,zero,801552c <isatty+0x64>
    {
      return 1;
 8015524:	00800044 	movi	r2,1
 8015528:	00000d06 	br	8015560 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 801552c:	e0bff004 	addi	r2,fp,-64
 8015530:	100b883a 	mov	r5,r2
 8015534:	e13fff17 	ldw	r4,-4(fp)
 8015538:	80153d40 	call	80153d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 801553c:	e0bff117 	ldw	r2,-60(fp)
 8015540:	10880020 	cmpeqi	r2,r2,8192
 8015544:	10803fcc 	andi	r2,r2,255
 8015548:	00000506 	br	8015560 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801554c:	801548c0 	call	801548c <alt_get_errno>
 8015550:	1007883a 	mov	r3,r2
 8015554:	00801444 	movi	r2,81
 8015558:	18800015 	stw	r2,0(r3)
    return 0;
 801555c:	0005883a 	mov	r2,zero
  }
}
 8015560:	e037883a 	mov	sp,fp
 8015564:	dfc00117 	ldw	ra,4(sp)
 8015568:	df000017 	ldw	fp,0(sp)
 801556c:	dec00204 	addi	sp,sp,8
 8015570:	f800283a 	ret

08015574 <alt_load_section>:
 8015574:	defffc04 	addi	sp,sp,-16
 8015578:	df000315 	stw	fp,12(sp)
 801557c:	df000304 	addi	fp,sp,12
 8015580:	e13ffd15 	stw	r4,-12(fp)
 8015584:	e17ffe15 	stw	r5,-8(fp)
 8015588:	e1bfff15 	stw	r6,-4(fp)
 801558c:	e0fffe17 	ldw	r3,-8(fp)
 8015590:	e0bffd17 	ldw	r2,-12(fp)
 8015594:	18800c26 	beq	r3,r2,80155c8 <alt_load_section+0x54>
 8015598:	00000806 	br	80155bc <alt_load_section+0x48>
 801559c:	e0bffe17 	ldw	r2,-8(fp)
 80155a0:	10c00104 	addi	r3,r2,4
 80155a4:	e0fffe15 	stw	r3,-8(fp)
 80155a8:	e0fffd17 	ldw	r3,-12(fp)
 80155ac:	19000104 	addi	r4,r3,4
 80155b0:	e13ffd15 	stw	r4,-12(fp)
 80155b4:	18c00017 	ldw	r3,0(r3)
 80155b8:	10c00015 	stw	r3,0(r2)
 80155bc:	e0fffe17 	ldw	r3,-8(fp)
 80155c0:	e0bfff17 	ldw	r2,-4(fp)
 80155c4:	18bff51e 	bne	r3,r2,801559c <__alt_data_end+0xfc01559c>
 80155c8:	0001883a 	nop
 80155cc:	e037883a 	mov	sp,fp
 80155d0:	df000017 	ldw	fp,0(sp)
 80155d4:	dec00104 	addi	sp,sp,4
 80155d8:	f800283a 	ret

080155dc <alt_load>:
 80155dc:	defffe04 	addi	sp,sp,-8
 80155e0:	dfc00115 	stw	ra,4(sp)
 80155e4:	df000015 	stw	fp,0(sp)
 80155e8:	d839883a 	mov	fp,sp
 80155ec:	018200b4 	movhi	r6,2050
 80155f0:	31a80f04 	addi	r6,r6,-24516
 80155f4:	014200b4 	movhi	r5,2050
 80155f8:	2960af04 	addi	r5,r5,-32068
 80155fc:	010200b4 	movhi	r4,2050
 8015600:	21280f04 	addi	r4,r4,-24516
 8015604:	80155740 	call	8015574 <alt_load_section>
 8015608:	01820034 	movhi	r6,2048
 801560c:	31808c04 	addi	r6,r6,560
 8015610:	01420034 	movhi	r5,2048
 8015614:	29400804 	addi	r5,r5,32
 8015618:	01020034 	movhi	r4,2048
 801561c:	21000804 	addi	r4,r4,32
 8015620:	80155740 	call	8015574 <alt_load_section>
 8015624:	018200b4 	movhi	r6,2050
 8015628:	31a0af04 	addi	r6,r6,-32068
 801562c:	01420074 	movhi	r5,2049
 8015630:	295f6004 	addi	r5,r5,32128
 8015634:	01020074 	movhi	r4,2049
 8015638:	211f6004 	addi	r4,r4,32128
 801563c:	80155740 	call	8015574 <alt_load_section>
 8015640:	8016e6c0 	call	8016e6c <alt_dcache_flush_all>
 8015644:	801702c0 	call	801702c <alt_icache_flush_all>
 8015648:	0001883a 	nop
 801564c:	e037883a 	mov	sp,fp
 8015650:	dfc00117 	ldw	ra,4(sp)
 8015654:	df000017 	ldw	fp,0(sp)
 8015658:	dec00204 	addi	sp,sp,8
 801565c:	f800283a 	ret

08015660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015660:	defffe04 	addi	sp,sp,-8
 8015664:	dfc00115 	stw	ra,4(sp)
 8015668:	df000015 	stw	fp,0(sp)
 801566c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015670:	d0a01017 	ldw	r2,-32704(gp)
 8015674:	10000326 	beq	r2,zero,8015684 <alt_get_errno+0x24>
 8015678:	d0a01017 	ldw	r2,-32704(gp)
 801567c:	103ee83a 	callr	r2
 8015680:	00000106 	br	8015688 <alt_get_errno+0x28>
 8015684:	d0a78404 	addi	r2,gp,-25072
}
 8015688:	e037883a 	mov	sp,fp
 801568c:	dfc00117 	ldw	ra,4(sp)
 8015690:	df000017 	ldw	fp,0(sp)
 8015694:	dec00204 	addi	sp,sp,8
 8015698:	f800283a 	ret

0801569c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801569c:	defff904 	addi	sp,sp,-28
 80156a0:	dfc00615 	stw	ra,24(sp)
 80156a4:	df000515 	stw	fp,20(sp)
 80156a8:	df000504 	addi	fp,sp,20
 80156ac:	e13ffd15 	stw	r4,-12(fp)
 80156b0:	e17ffe15 	stw	r5,-8(fp)
 80156b4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80156b8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80156bc:	e0bffd17 	ldw	r2,-12(fp)
 80156c0:	10000816 	blt	r2,zero,80156e4 <lseek+0x48>
 80156c4:	01400304 	movi	r5,12
 80156c8:	e13ffd17 	ldw	r4,-12(fp)
 80156cc:	8004a540 	call	8004a54 <__mulsi3>
 80156d0:	1007883a 	mov	r3,r2
 80156d4:	008200b4 	movhi	r2,2050
 80156d8:	10a38204 	addi	r2,r2,-29176
 80156dc:	1885883a 	add	r2,r3,r2
 80156e0:	00000106 	br	80156e8 <lseek+0x4c>
 80156e4:	0005883a 	mov	r2,zero
 80156e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80156ec:	e0bffc17 	ldw	r2,-16(fp)
 80156f0:	10001026 	beq	r2,zero,8015734 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80156f4:	e0bffc17 	ldw	r2,-16(fp)
 80156f8:	10800017 	ldw	r2,0(r2)
 80156fc:	10800717 	ldw	r2,28(r2)
 8015700:	10000926 	beq	r2,zero,8015728 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8015704:	e0bffc17 	ldw	r2,-16(fp)
 8015708:	10800017 	ldw	r2,0(r2)
 801570c:	10800717 	ldw	r2,28(r2)
 8015710:	e1bfff17 	ldw	r6,-4(fp)
 8015714:	e17ffe17 	ldw	r5,-8(fp)
 8015718:	e13ffc17 	ldw	r4,-16(fp)
 801571c:	103ee83a 	callr	r2
 8015720:	e0bffb15 	stw	r2,-20(fp)
 8015724:	00000506 	br	801573c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8015728:	00bfde84 	movi	r2,-134
 801572c:	e0bffb15 	stw	r2,-20(fp)
 8015730:	00000206 	br	801573c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8015734:	00bfebc4 	movi	r2,-81
 8015738:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 801573c:	e0bffb17 	ldw	r2,-20(fp)
 8015740:	1000070e 	bge	r2,zero,8015760 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8015744:	80156600 	call	8015660 <alt_get_errno>
 8015748:	1007883a 	mov	r3,r2
 801574c:	e0bffb17 	ldw	r2,-20(fp)
 8015750:	0085c83a 	sub	r2,zero,r2
 8015754:	18800015 	stw	r2,0(r3)
    rc = -1;
 8015758:	00bfffc4 	movi	r2,-1
 801575c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8015760:	e0bffb17 	ldw	r2,-20(fp)
}
 8015764:	e037883a 	mov	sp,fp
 8015768:	dfc00117 	ldw	ra,4(sp)
 801576c:	df000017 	ldw	fp,0(sp)
 8015770:	dec00204 	addi	sp,sp,8
 8015774:	f800283a 	ret

08015778 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8015778:	defffd04 	addi	sp,sp,-12
 801577c:	dfc00215 	stw	ra,8(sp)
 8015780:	df000115 	stw	fp,4(sp)
 8015784:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8015788:	0009883a 	mov	r4,zero
 801578c:	8015df40 	call	8015df4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8015790:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8015794:	8015e2c0 	call	8015e2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8015798:	018200b4 	movhi	r6,2050
 801579c:	31a0a504 	addi	r6,r6,-32108
 80157a0:	014200b4 	movhi	r5,2050
 80157a4:	2960a504 	addi	r5,r5,-32108
 80157a8:	010200b4 	movhi	r4,2050
 80157ac:	2120a504 	addi	r4,r4,-32108
 80157b0:	80173d00 	call	80173d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80157b4:	8016f6c0 	call	8016f6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80157b8:	01020074 	movhi	r4,2049
 80157bc:	211bf304 	addi	r4,r4,28620
 80157c0:	80179ec0 	call	80179ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80157c4:	d0a78517 	ldw	r2,-25068(gp)
 80157c8:	d0e78617 	ldw	r3,-25064(gp)
 80157cc:	d1278717 	ldw	r4,-25060(gp)
 80157d0:	200d883a 	mov	r6,r4
 80157d4:	180b883a 	mov	r5,r3
 80157d8:	1009883a 	mov	r4,r2
 80157dc:	8001fe80 	call	8001fe8 <main>
 80157e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80157e4:	01000044 	movi	r4,1
 80157e8:	80152940 	call	8015294 <close>
  exit (result);
 80157ec:	e13fff17 	ldw	r4,-4(fp)
 80157f0:	8017a000 	call	8017a00 <exit>

080157f4 <__malloc_lock>:
 80157f4:	defffe04 	addi	sp,sp,-8
 80157f8:	df000115 	stw	fp,4(sp)
 80157fc:	df000104 	addi	fp,sp,4
 8015800:	e13fff15 	stw	r4,-4(fp)
 8015804:	0001883a 	nop
 8015808:	e037883a 	mov	sp,fp
 801580c:	df000017 	ldw	fp,0(sp)
 8015810:	dec00104 	addi	sp,sp,4
 8015814:	f800283a 	ret

08015818 <__malloc_unlock>:
 8015818:	defffe04 	addi	sp,sp,-8
 801581c:	df000115 	stw	fp,4(sp)
 8015820:	df000104 	addi	fp,sp,4
 8015824:	e13fff15 	stw	r4,-4(fp)
 8015828:	0001883a 	nop
 801582c:	e037883a 	mov	sp,fp
 8015830:	df000017 	ldw	fp,0(sp)
 8015834:	dec00104 	addi	sp,sp,4
 8015838:	f800283a 	ret

0801583c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801583c:	defffe04 	addi	sp,sp,-8
 8015840:	dfc00115 	stw	ra,4(sp)
 8015844:	df000015 	stw	fp,0(sp)
 8015848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801584c:	d0a01017 	ldw	r2,-32704(gp)
 8015850:	10000326 	beq	r2,zero,8015860 <alt_get_errno+0x24>
 8015854:	d0a01017 	ldw	r2,-32704(gp)
 8015858:	103ee83a 	callr	r2
 801585c:	00000106 	br	8015864 <alt_get_errno+0x28>
 8015860:	d0a78404 	addi	r2,gp,-25072
}
 8015864:	e037883a 	mov	sp,fp
 8015868:	dfc00117 	ldw	ra,4(sp)
 801586c:	df000017 	ldw	fp,0(sp)
 8015870:	dec00204 	addi	sp,sp,8
 8015874:	f800283a 	ret

08015878 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8015878:	defff904 	addi	sp,sp,-28
 801587c:	dfc00615 	stw	ra,24(sp)
 8015880:	df000515 	stw	fp,20(sp)
 8015884:	df000504 	addi	fp,sp,20
 8015888:	e13ffd15 	stw	r4,-12(fp)
 801588c:	e17ffe15 	stw	r5,-8(fp)
 8015890:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015894:	e0bffd17 	ldw	r2,-12(fp)
 8015898:	10000816 	blt	r2,zero,80158bc <read+0x44>
 801589c:	01400304 	movi	r5,12
 80158a0:	e13ffd17 	ldw	r4,-12(fp)
 80158a4:	8004a540 	call	8004a54 <__mulsi3>
 80158a8:	1007883a 	mov	r3,r2
 80158ac:	008200b4 	movhi	r2,2050
 80158b0:	10a38204 	addi	r2,r2,-29176
 80158b4:	1885883a 	add	r2,r3,r2
 80158b8:	00000106 	br	80158c0 <read+0x48>
 80158bc:	0005883a 	mov	r2,zero
 80158c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80158c4:	e0bffb17 	ldw	r2,-20(fp)
 80158c8:	10002226 	beq	r2,zero,8015954 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80158cc:	e0bffb17 	ldw	r2,-20(fp)
 80158d0:	10800217 	ldw	r2,8(r2)
 80158d4:	108000cc 	andi	r2,r2,3
 80158d8:	10800060 	cmpeqi	r2,r2,1
 80158dc:	1000181e 	bne	r2,zero,8015940 <read+0xc8>
        (fd->dev->read))
 80158e0:	e0bffb17 	ldw	r2,-20(fp)
 80158e4:	10800017 	ldw	r2,0(r2)
 80158e8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80158ec:	10001426 	beq	r2,zero,8015940 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80158f0:	e0bffb17 	ldw	r2,-20(fp)
 80158f4:	10800017 	ldw	r2,0(r2)
 80158f8:	10800517 	ldw	r2,20(r2)
 80158fc:	e0ffff17 	ldw	r3,-4(fp)
 8015900:	180d883a 	mov	r6,r3
 8015904:	e17ffe17 	ldw	r5,-8(fp)
 8015908:	e13ffb17 	ldw	r4,-20(fp)
 801590c:	103ee83a 	callr	r2
 8015910:	e0bffc15 	stw	r2,-16(fp)
 8015914:	e0bffc17 	ldw	r2,-16(fp)
 8015918:	1000070e 	bge	r2,zero,8015938 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 801591c:	801583c0 	call	801583c <alt_get_errno>
 8015920:	1007883a 	mov	r3,r2
 8015924:	e0bffc17 	ldw	r2,-16(fp)
 8015928:	0085c83a 	sub	r2,zero,r2
 801592c:	18800015 	stw	r2,0(r3)
          return -1;
 8015930:	00bfffc4 	movi	r2,-1
 8015934:	00000c06 	br	8015968 <read+0xf0>
        }
        return rval;
 8015938:	e0bffc17 	ldw	r2,-16(fp)
 801593c:	00000a06 	br	8015968 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8015940:	801583c0 	call	801583c <alt_get_errno>
 8015944:	1007883a 	mov	r3,r2
 8015948:	00800344 	movi	r2,13
 801594c:	18800015 	stw	r2,0(r3)
 8015950:	00000406 	br	8015964 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8015954:	801583c0 	call	801583c <alt_get_errno>
 8015958:	1007883a 	mov	r3,r2
 801595c:	00801444 	movi	r2,81
 8015960:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015964:	00bfffc4 	movi	r2,-1
}
 8015968:	e037883a 	mov	sp,fp
 801596c:	dfc00117 	ldw	ra,4(sp)
 8015970:	df000017 	ldw	fp,0(sp)
 8015974:	dec00204 	addi	sp,sp,8
 8015978:	f800283a 	ret

0801597c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 801597c:	defffc04 	addi	sp,sp,-16
 8015980:	dfc00315 	stw	ra,12(sp)
 8015984:	df000215 	stw	fp,8(sp)
 8015988:	dc000115 	stw	r16,4(sp)
 801598c:	df000204 	addi	fp,sp,8
 8015990:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8015994:	e0bffe17 	ldw	r2,-8(fp)
 8015998:	108000d0 	cmplti	r2,r2,3
 801599c:	1000111e 	bne	r2,zero,80159e4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80159a0:	040200b4 	movhi	r16,2050
 80159a4:	84238204 	addi	r16,r16,-29176
 80159a8:	e0bffe17 	ldw	r2,-8(fp)
 80159ac:	01400304 	movi	r5,12
 80159b0:	1009883a 	mov	r4,r2
 80159b4:	8004a540 	call	8004a54 <__mulsi3>
 80159b8:	8085883a 	add	r2,r16,r2
 80159bc:	10800204 	addi	r2,r2,8
 80159c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80159c4:	040200b4 	movhi	r16,2050
 80159c8:	84238204 	addi	r16,r16,-29176
 80159cc:	e0bffe17 	ldw	r2,-8(fp)
 80159d0:	01400304 	movi	r5,12
 80159d4:	1009883a 	mov	r4,r2
 80159d8:	8004a540 	call	8004a54 <__mulsi3>
 80159dc:	8085883a 	add	r2,r16,r2
 80159e0:	10000015 	stw	zero,0(r2)
  }
}
 80159e4:	0001883a 	nop
 80159e8:	e6ffff04 	addi	sp,fp,-4
 80159ec:	dfc00217 	ldw	ra,8(sp)
 80159f0:	df000117 	ldw	fp,4(sp)
 80159f4:	dc000017 	ldw	r16,0(sp)
 80159f8:	dec00304 	addi	sp,sp,12
 80159fc:	f800283a 	ret

08015a00 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8015a00:	defff904 	addi	sp,sp,-28
 8015a04:	df000615 	stw	fp,24(sp)
 8015a08:	df000604 	addi	fp,sp,24
 8015a0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a10:	0005303a 	rdctl	r2,status
 8015a14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a18:	e0fffe17 	ldw	r3,-8(fp)
 8015a1c:	00bfff84 	movi	r2,-2
 8015a20:	1884703a 	and	r2,r3,r2
 8015a24:	1001703a 	wrctl	status,r2
  
  return context;
 8015a28:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8015a2c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8015a30:	d0a01117 	ldw	r2,-32700(gp)
 8015a34:	10c000c4 	addi	r3,r2,3
 8015a38:	00bfff04 	movi	r2,-4
 8015a3c:	1884703a 	and	r2,r3,r2
 8015a40:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8015a44:	d0e01117 	ldw	r3,-32700(gp)
 8015a48:	e0bfff17 	ldw	r2,-4(fp)
 8015a4c:	1887883a 	add	r3,r3,r2
 8015a50:	00830034 	movhi	r2,3072
 8015a54:	10800004 	addi	r2,r2,0
 8015a58:	10c0062e 	bgeu	r2,r3,8015a74 <sbrk+0x74>
 8015a5c:	e0bffb17 	ldw	r2,-20(fp)
 8015a60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015a64:	e0bffa17 	ldw	r2,-24(fp)
 8015a68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8015a6c:	00bfffc4 	movi	r2,-1
 8015a70:	00000b06 	br	8015aa0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8015a74:	d0a01117 	ldw	r2,-32700(gp)
 8015a78:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8015a7c:	d0e01117 	ldw	r3,-32700(gp)
 8015a80:	e0bfff17 	ldw	r2,-4(fp)
 8015a84:	1885883a 	add	r2,r3,r2
 8015a88:	d0a01115 	stw	r2,-32700(gp)
 8015a8c:	e0bffb17 	ldw	r2,-20(fp)
 8015a90:	e0bffc15 	stw	r2,-16(fp)
 8015a94:	e0bffc17 	ldw	r2,-16(fp)
 8015a98:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8015a9c:	e0bffd17 	ldw	r2,-12(fp)
} 
 8015aa0:	e037883a 	mov	sp,fp
 8015aa4:	df000017 	ldw	fp,0(sp)
 8015aa8:	dec00104 	addi	sp,sp,4
 8015aac:	f800283a 	ret

08015ab0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8015ab0:	defffa04 	addi	sp,sp,-24
 8015ab4:	df000515 	stw	fp,20(sp)
 8015ab8:	df000504 	addi	fp,sp,20
 8015abc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015ac0:	0005303a 	rdctl	r2,status
 8015ac4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015ac8:	e0fffc17 	ldw	r3,-16(fp)
 8015acc:	00bfff84 	movi	r2,-2
 8015ad0:	1884703a 	and	r2,r3,r2
 8015ad4:	1001703a 	wrctl	status,r2
  
  return context;
 8015ad8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015adc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015ae0:	e0bfff17 	ldw	r2,-4(fp)
 8015ae4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8015ae8:	e0bffd17 	ldw	r2,-12(fp)
 8015aec:	10800017 	ldw	r2,0(r2)
 8015af0:	e0fffd17 	ldw	r3,-12(fp)
 8015af4:	18c00117 	ldw	r3,4(r3)
 8015af8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015afc:	e0bffd17 	ldw	r2,-12(fp)
 8015b00:	10800117 	ldw	r2,4(r2)
 8015b04:	e0fffd17 	ldw	r3,-12(fp)
 8015b08:	18c00017 	ldw	r3,0(r3)
 8015b0c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015b10:	e0bffd17 	ldw	r2,-12(fp)
 8015b14:	e0fffd17 	ldw	r3,-12(fp)
 8015b18:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015b1c:	e0bffd17 	ldw	r2,-12(fp)
 8015b20:	e0fffd17 	ldw	r3,-12(fp)
 8015b24:	10c00015 	stw	r3,0(r2)
 8015b28:	e0bffb17 	ldw	r2,-20(fp)
 8015b2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015b30:	e0bffe17 	ldw	r2,-8(fp)
 8015b34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8015b38:	0001883a 	nop
 8015b3c:	e037883a 	mov	sp,fp
 8015b40:	df000017 	ldw	fp,0(sp)
 8015b44:	dec00104 	addi	sp,sp,4
 8015b48:	f800283a 	ret

08015b4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8015b4c:	defffb04 	addi	sp,sp,-20
 8015b50:	dfc00415 	stw	ra,16(sp)
 8015b54:	df000315 	stw	fp,12(sp)
 8015b58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8015b5c:	d0a01217 	ldw	r2,-32696(gp)
 8015b60:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8015b64:	d0a78917 	ldw	r2,-25052(gp)
 8015b68:	10800044 	addi	r2,r2,1
 8015b6c:	d0a78915 	stw	r2,-25052(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015b70:	00002e06 	br	8015c2c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8015b74:	e0bffd17 	ldw	r2,-12(fp)
 8015b78:	10800017 	ldw	r2,0(r2)
 8015b7c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8015b80:	e0bffd17 	ldw	r2,-12(fp)
 8015b84:	10800403 	ldbu	r2,16(r2)
 8015b88:	10803fcc 	andi	r2,r2,255
 8015b8c:	10000426 	beq	r2,zero,8015ba0 <alt_tick+0x54>
 8015b90:	d0a78917 	ldw	r2,-25052(gp)
 8015b94:	1000021e 	bne	r2,zero,8015ba0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8015b98:	e0bffd17 	ldw	r2,-12(fp)
 8015b9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015ba0:	e0bffd17 	ldw	r2,-12(fp)
 8015ba4:	10800217 	ldw	r2,8(r2)
 8015ba8:	d0e78917 	ldw	r3,-25052(gp)
 8015bac:	18801d36 	bltu	r3,r2,8015c24 <alt_tick+0xd8>
 8015bb0:	e0bffd17 	ldw	r2,-12(fp)
 8015bb4:	10800403 	ldbu	r2,16(r2)
 8015bb8:	10803fcc 	andi	r2,r2,255
 8015bbc:	1000191e 	bne	r2,zero,8015c24 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015bc0:	e0bffd17 	ldw	r2,-12(fp)
 8015bc4:	10800317 	ldw	r2,12(r2)
 8015bc8:	e0fffd17 	ldw	r3,-12(fp)
 8015bcc:	18c00517 	ldw	r3,20(r3)
 8015bd0:	1809883a 	mov	r4,r3
 8015bd4:	103ee83a 	callr	r2
 8015bd8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015bdc:	e0bfff17 	ldw	r2,-4(fp)
 8015be0:	1000031e 	bne	r2,zero,8015bf0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015be4:	e13ffd17 	ldw	r4,-12(fp)
 8015be8:	8015ab00 	call	8015ab0 <alt_alarm_stop>
 8015bec:	00000d06 	br	8015c24 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015bf0:	e0bffd17 	ldw	r2,-12(fp)
 8015bf4:	10c00217 	ldw	r3,8(r2)
 8015bf8:	e0bfff17 	ldw	r2,-4(fp)
 8015bfc:	1887883a 	add	r3,r3,r2
 8015c00:	e0bffd17 	ldw	r2,-12(fp)
 8015c04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8015c08:	e0bffd17 	ldw	r2,-12(fp)
 8015c0c:	10c00217 	ldw	r3,8(r2)
 8015c10:	d0a78917 	ldw	r2,-25052(gp)
 8015c14:	1880032e 	bgeu	r3,r2,8015c24 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8015c18:	e0bffd17 	ldw	r2,-12(fp)
 8015c1c:	00c00044 	movi	r3,1
 8015c20:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015c24:	e0bffe17 	ldw	r2,-8(fp)
 8015c28:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015c2c:	e0fffd17 	ldw	r3,-12(fp)
 8015c30:	d0a01204 	addi	r2,gp,-32696
 8015c34:	18bfcf1e 	bne	r3,r2,8015b74 <__alt_data_end+0xfc015b74>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8015c38:	0001883a 	nop
}
 8015c3c:	0001883a 	nop
 8015c40:	e037883a 	mov	sp,fp
 8015c44:	dfc00117 	ldw	ra,4(sp)
 8015c48:	df000017 	ldw	fp,0(sp)
 8015c4c:	dec00204 	addi	sp,sp,8
 8015c50:	f800283a 	ret

08015c54 <usleep>:
 8015c54:	defffd04 	addi	sp,sp,-12
 8015c58:	dfc00215 	stw	ra,8(sp)
 8015c5c:	df000115 	stw	fp,4(sp)
 8015c60:	df000104 	addi	fp,sp,4
 8015c64:	e13fff15 	stw	r4,-4(fp)
 8015c68:	e13fff17 	ldw	r4,-4(fp)
 8015c6c:	8016d140 	call	8016d14 <alt_busy_sleep>
 8015c70:	e037883a 	mov	sp,fp
 8015c74:	dfc00117 	ldw	ra,4(sp)
 8015c78:	df000017 	ldw	fp,0(sp)
 8015c7c:	dec00204 	addi	sp,sp,8
 8015c80:	f800283a 	ret

08015c84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015c84:	defffe04 	addi	sp,sp,-8
 8015c88:	dfc00115 	stw	ra,4(sp)
 8015c8c:	df000015 	stw	fp,0(sp)
 8015c90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015c94:	d0a01017 	ldw	r2,-32704(gp)
 8015c98:	10000326 	beq	r2,zero,8015ca8 <alt_get_errno+0x24>
 8015c9c:	d0a01017 	ldw	r2,-32704(gp)
 8015ca0:	103ee83a 	callr	r2
 8015ca4:	00000106 	br	8015cac <alt_get_errno+0x28>
 8015ca8:	d0a78404 	addi	r2,gp,-25072
}
 8015cac:	e037883a 	mov	sp,fp
 8015cb0:	dfc00117 	ldw	ra,4(sp)
 8015cb4:	df000017 	ldw	fp,0(sp)
 8015cb8:	dec00204 	addi	sp,sp,8
 8015cbc:	f800283a 	ret

08015cc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8015cc0:	defff904 	addi	sp,sp,-28
 8015cc4:	dfc00615 	stw	ra,24(sp)
 8015cc8:	df000515 	stw	fp,20(sp)
 8015ccc:	df000504 	addi	fp,sp,20
 8015cd0:	e13ffd15 	stw	r4,-12(fp)
 8015cd4:	e17ffe15 	stw	r5,-8(fp)
 8015cd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015cdc:	e0bffd17 	ldw	r2,-12(fp)
 8015ce0:	10000816 	blt	r2,zero,8015d04 <write+0x44>
 8015ce4:	01400304 	movi	r5,12
 8015ce8:	e13ffd17 	ldw	r4,-12(fp)
 8015cec:	8004a540 	call	8004a54 <__mulsi3>
 8015cf0:	1007883a 	mov	r3,r2
 8015cf4:	008200b4 	movhi	r2,2050
 8015cf8:	10a38204 	addi	r2,r2,-29176
 8015cfc:	1885883a 	add	r2,r3,r2
 8015d00:	00000106 	br	8015d08 <write+0x48>
 8015d04:	0005883a 	mov	r2,zero
 8015d08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8015d0c:	e0bffb17 	ldw	r2,-20(fp)
 8015d10:	10002126 	beq	r2,zero,8015d98 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8015d14:	e0bffb17 	ldw	r2,-20(fp)
 8015d18:	10800217 	ldw	r2,8(r2)
 8015d1c:	108000cc 	andi	r2,r2,3
 8015d20:	10001826 	beq	r2,zero,8015d84 <write+0xc4>
 8015d24:	e0bffb17 	ldw	r2,-20(fp)
 8015d28:	10800017 	ldw	r2,0(r2)
 8015d2c:	10800617 	ldw	r2,24(r2)
 8015d30:	10001426 	beq	r2,zero,8015d84 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8015d34:	e0bffb17 	ldw	r2,-20(fp)
 8015d38:	10800017 	ldw	r2,0(r2)
 8015d3c:	10800617 	ldw	r2,24(r2)
 8015d40:	e0ffff17 	ldw	r3,-4(fp)
 8015d44:	180d883a 	mov	r6,r3
 8015d48:	e17ffe17 	ldw	r5,-8(fp)
 8015d4c:	e13ffb17 	ldw	r4,-20(fp)
 8015d50:	103ee83a 	callr	r2
 8015d54:	e0bffc15 	stw	r2,-16(fp)
 8015d58:	e0bffc17 	ldw	r2,-16(fp)
 8015d5c:	1000070e 	bge	r2,zero,8015d7c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8015d60:	8015c840 	call	8015c84 <alt_get_errno>
 8015d64:	1007883a 	mov	r3,r2
 8015d68:	e0bffc17 	ldw	r2,-16(fp)
 8015d6c:	0085c83a 	sub	r2,zero,r2
 8015d70:	18800015 	stw	r2,0(r3)
        return -1;
 8015d74:	00bfffc4 	movi	r2,-1
 8015d78:	00000c06 	br	8015dac <write+0xec>
      }
      return rval;
 8015d7c:	e0bffc17 	ldw	r2,-16(fp)
 8015d80:	00000a06 	br	8015dac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8015d84:	8015c840 	call	8015c84 <alt_get_errno>
 8015d88:	1007883a 	mov	r3,r2
 8015d8c:	00800344 	movi	r2,13
 8015d90:	18800015 	stw	r2,0(r3)
 8015d94:	00000406 	br	8015da8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8015d98:	8015c840 	call	8015c84 <alt_get_errno>
 8015d9c:	1007883a 	mov	r3,r2
 8015da0:	00801444 	movi	r2,81
 8015da4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015da8:	00bfffc4 	movi	r2,-1
}
 8015dac:	e037883a 	mov	sp,fp
 8015db0:	dfc00117 	ldw	ra,4(sp)
 8015db4:	df000017 	ldw	fp,0(sp)
 8015db8:	dec00204 	addi	sp,sp,8
 8015dbc:	f800283a 	ret

08015dc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8015dc0:	defffd04 	addi	sp,sp,-12
 8015dc4:	dfc00215 	stw	ra,8(sp)
 8015dc8:	df000115 	stw	fp,4(sp)
 8015dcc:	df000104 	addi	fp,sp,4
 8015dd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8015dd4:	d1600d04 	addi	r5,gp,-32716
 8015dd8:	e13fff17 	ldw	r4,-4(fp)
 8015ddc:	8016ec80 	call	8016ec8 <alt_dev_llist_insert>
}
 8015de0:	e037883a 	mov	sp,fp
 8015de4:	dfc00117 	ldw	ra,4(sp)
 8015de8:	df000017 	ldw	fp,0(sp)
 8015dec:	dec00204 	addi	sp,sp,8
 8015df0:	f800283a 	ret

08015df4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8015df4:	defffd04 	addi	sp,sp,-12
 8015df8:	dfc00215 	stw	ra,8(sp)
 8015dfc:	df000115 	stw	fp,4(sp)
 8015e00:	df000104 	addi	fp,sp,4
 8015e04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8015e08:	80176d00 	call	80176d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8015e0c:	00800044 	movi	r2,1
 8015e10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8015e14:	0001883a 	nop
 8015e18:	e037883a 	mov	sp,fp
 8015e1c:	dfc00117 	ldw	ra,4(sp)
 8015e20:	df000017 	ldw	fp,0(sp)
 8015e24:	dec00204 	addi	sp,sp,8
 8015e28:	f800283a 	ret

08015e2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8015e2c:	defffe04 	addi	sp,sp,-8
 8015e30:	dfc00115 	stw	ra,4(sp)
 8015e34:	df000015 	stw	fp,0(sp)
 8015e38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8015e3c:	01c0fa04 	movi	r7,1000
 8015e40:	01800044 	movi	r6,1
 8015e44:	000b883a 	mov	r5,zero
 8015e48:	01002004 	movi	r4,128
 8015e4c:	8016b6c0 	call	8016b6c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8015e50:	000d883a 	mov	r6,zero
 8015e54:	000b883a 	mov	r5,zero
 8015e58:	010200b4 	movhi	r4,2050
 8015e5c:	2123ec04 	addi	r4,r4,-28752
 8015e60:	8015ff40 	call	8015ff4 <altera_avalon_jtag_uart_init>
 8015e64:	010200b4 	movhi	r4,2050
 8015e68:	2123e204 	addi	r4,r4,-28792
 8015e6c:	8015dc00 	call	8015dc0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI0, spi0);
 8015e70:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8015e74:	0001883a 	nop
}
 8015e78:	0001883a 	nop
 8015e7c:	e037883a 	mov	sp,fp
 8015e80:	dfc00117 	ldw	ra,4(sp)
 8015e84:	df000017 	ldw	fp,0(sp)
 8015e88:	dec00204 	addi	sp,sp,8
 8015e8c:	f800283a 	ret

08015e90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8015e90:	defffa04 	addi	sp,sp,-24
 8015e94:	dfc00515 	stw	ra,20(sp)
 8015e98:	df000415 	stw	fp,16(sp)
 8015e9c:	df000404 	addi	fp,sp,16
 8015ea0:	e13ffd15 	stw	r4,-12(fp)
 8015ea4:	e17ffe15 	stw	r5,-8(fp)
 8015ea8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015eac:	e0bffd17 	ldw	r2,-12(fp)
 8015eb0:	10800017 	ldw	r2,0(r2)
 8015eb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8015eb8:	e0bffc17 	ldw	r2,-16(fp)
 8015ebc:	10c00a04 	addi	r3,r2,40
 8015ec0:	e0bffd17 	ldw	r2,-12(fp)
 8015ec4:	10800217 	ldw	r2,8(r2)
 8015ec8:	100f883a 	mov	r7,r2
 8015ecc:	e1bfff17 	ldw	r6,-4(fp)
 8015ed0:	e17ffe17 	ldw	r5,-8(fp)
 8015ed4:	1809883a 	mov	r4,r3
 8015ed8:	80164b80 	call	80164b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8015edc:	e037883a 	mov	sp,fp
 8015ee0:	dfc00117 	ldw	ra,4(sp)
 8015ee4:	df000017 	ldw	fp,0(sp)
 8015ee8:	dec00204 	addi	sp,sp,8
 8015eec:	f800283a 	ret

08015ef0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8015ef0:	defffa04 	addi	sp,sp,-24
 8015ef4:	dfc00515 	stw	ra,20(sp)
 8015ef8:	df000415 	stw	fp,16(sp)
 8015efc:	df000404 	addi	fp,sp,16
 8015f00:	e13ffd15 	stw	r4,-12(fp)
 8015f04:	e17ffe15 	stw	r5,-8(fp)
 8015f08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015f0c:	e0bffd17 	ldw	r2,-12(fp)
 8015f10:	10800017 	ldw	r2,0(r2)
 8015f14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8015f18:	e0bffc17 	ldw	r2,-16(fp)
 8015f1c:	10c00a04 	addi	r3,r2,40
 8015f20:	e0bffd17 	ldw	r2,-12(fp)
 8015f24:	10800217 	ldw	r2,8(r2)
 8015f28:	100f883a 	mov	r7,r2
 8015f2c:	e1bfff17 	ldw	r6,-4(fp)
 8015f30:	e17ffe17 	ldw	r5,-8(fp)
 8015f34:	1809883a 	mov	r4,r3
 8015f38:	80166d40 	call	80166d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8015f3c:	e037883a 	mov	sp,fp
 8015f40:	dfc00117 	ldw	ra,4(sp)
 8015f44:	df000017 	ldw	fp,0(sp)
 8015f48:	dec00204 	addi	sp,sp,8
 8015f4c:	f800283a 	ret

08015f50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8015f50:	defffc04 	addi	sp,sp,-16
 8015f54:	dfc00315 	stw	ra,12(sp)
 8015f58:	df000215 	stw	fp,8(sp)
 8015f5c:	df000204 	addi	fp,sp,8
 8015f60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015f64:	e0bfff17 	ldw	r2,-4(fp)
 8015f68:	10800017 	ldw	r2,0(r2)
 8015f6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8015f70:	e0bffe17 	ldw	r2,-8(fp)
 8015f74:	10c00a04 	addi	r3,r2,40
 8015f78:	e0bfff17 	ldw	r2,-4(fp)
 8015f7c:	10800217 	ldw	r2,8(r2)
 8015f80:	100b883a 	mov	r5,r2
 8015f84:	1809883a 	mov	r4,r3
 8015f88:	80163600 	call	8016360 <altera_avalon_jtag_uart_close>
}
 8015f8c:	e037883a 	mov	sp,fp
 8015f90:	dfc00117 	ldw	ra,4(sp)
 8015f94:	df000017 	ldw	fp,0(sp)
 8015f98:	dec00204 	addi	sp,sp,8
 8015f9c:	f800283a 	ret

08015fa0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8015fa0:	defffa04 	addi	sp,sp,-24
 8015fa4:	dfc00515 	stw	ra,20(sp)
 8015fa8:	df000415 	stw	fp,16(sp)
 8015fac:	df000404 	addi	fp,sp,16
 8015fb0:	e13ffd15 	stw	r4,-12(fp)
 8015fb4:	e17ffe15 	stw	r5,-8(fp)
 8015fb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8015fbc:	e0bffd17 	ldw	r2,-12(fp)
 8015fc0:	10800017 	ldw	r2,0(r2)
 8015fc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8015fc8:	e0bffc17 	ldw	r2,-16(fp)
 8015fcc:	10800a04 	addi	r2,r2,40
 8015fd0:	e1bfff17 	ldw	r6,-4(fp)
 8015fd4:	e17ffe17 	ldw	r5,-8(fp)
 8015fd8:	1009883a 	mov	r4,r2
 8015fdc:	80163c80 	call	80163c8 <altera_avalon_jtag_uart_ioctl>
}
 8015fe0:	e037883a 	mov	sp,fp
 8015fe4:	dfc00117 	ldw	ra,4(sp)
 8015fe8:	df000017 	ldw	fp,0(sp)
 8015fec:	dec00204 	addi	sp,sp,8
 8015ff0:	f800283a 	ret

08015ff4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8015ff4:	defffa04 	addi	sp,sp,-24
 8015ff8:	dfc00515 	stw	ra,20(sp)
 8015ffc:	df000415 	stw	fp,16(sp)
 8016000:	df000404 	addi	fp,sp,16
 8016004:	e13ffd15 	stw	r4,-12(fp)
 8016008:	e17ffe15 	stw	r5,-8(fp)
 801600c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016010:	e0bffd17 	ldw	r2,-12(fp)
 8016014:	00c00044 	movi	r3,1
 8016018:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801601c:	e0bffd17 	ldw	r2,-12(fp)
 8016020:	10800017 	ldw	r2,0(r2)
 8016024:	10800104 	addi	r2,r2,4
 8016028:	1007883a 	mov	r3,r2
 801602c:	e0bffd17 	ldw	r2,-12(fp)
 8016030:	10800817 	ldw	r2,32(r2)
 8016034:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8016038:	e0bffe17 	ldw	r2,-8(fp)
 801603c:	e0ffff17 	ldw	r3,-4(fp)
 8016040:	d8000015 	stw	zero,0(sp)
 8016044:	e1fffd17 	ldw	r7,-12(fp)
 8016048:	01820074 	movhi	r6,2049
 801604c:	31982d04 	addi	r6,r6,24756
 8016050:	180b883a 	mov	r5,r3
 8016054:	1009883a 	mov	r4,r2
 8016058:	801704c0 	call	801704c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801605c:	e0bffd17 	ldw	r2,-12(fp)
 8016060:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8016064:	e0bffd17 	ldw	r2,-12(fp)
 8016068:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801606c:	d0e78817 	ldw	r3,-25056(gp)
 8016070:	e1fffd17 	ldw	r7,-12(fp)
 8016074:	01820074 	movhi	r6,2049
 8016078:	3198b004 	addi	r6,r6,25280
 801607c:	180b883a 	mov	r5,r3
 8016080:	1009883a 	mov	r4,r2
 8016084:	8016be80 	call	8016be8 <alt_alarm_start>
 8016088:	1000040e 	bge	r2,zero,801609c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801608c:	e0fffd17 	ldw	r3,-12(fp)
 8016090:	00a00034 	movhi	r2,32768
 8016094:	10bfffc4 	addi	r2,r2,-1
 8016098:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801609c:	0001883a 	nop
 80160a0:	e037883a 	mov	sp,fp
 80160a4:	dfc00117 	ldw	ra,4(sp)
 80160a8:	df000017 	ldw	fp,0(sp)
 80160ac:	dec00204 	addi	sp,sp,8
 80160b0:	f800283a 	ret

080160b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80160b4:	defff804 	addi	sp,sp,-32
 80160b8:	df000715 	stw	fp,28(sp)
 80160bc:	df000704 	addi	fp,sp,28
 80160c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80160c4:	e0bfff17 	ldw	r2,-4(fp)
 80160c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80160cc:	e0bffb17 	ldw	r2,-20(fp)
 80160d0:	10800017 	ldw	r2,0(r2)
 80160d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80160d8:	e0bffc17 	ldw	r2,-16(fp)
 80160dc:	10800104 	addi	r2,r2,4
 80160e0:	10800037 	ldwio	r2,0(r2)
 80160e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80160e8:	e0bffd17 	ldw	r2,-12(fp)
 80160ec:	1080c00c 	andi	r2,r2,768
 80160f0:	10006d26 	beq	r2,zero,80162a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80160f4:	e0bffd17 	ldw	r2,-12(fp)
 80160f8:	1080400c 	andi	r2,r2,256
 80160fc:	10003526 	beq	r2,zero,80161d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8016100:	00800074 	movhi	r2,1
 8016104:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016108:	e0bffb17 	ldw	r2,-20(fp)
 801610c:	10800a17 	ldw	r2,40(r2)
 8016110:	10800044 	addi	r2,r2,1
 8016114:	1081ffcc 	andi	r2,r2,2047
 8016118:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801611c:	e0bffb17 	ldw	r2,-20(fp)
 8016120:	10c00b17 	ldw	r3,44(r2)
 8016124:	e0bffe17 	ldw	r2,-8(fp)
 8016128:	18801526 	beq	r3,r2,8016180 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801612c:	e0bffc17 	ldw	r2,-16(fp)
 8016130:	10800037 	ldwio	r2,0(r2)
 8016134:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8016138:	e0bff917 	ldw	r2,-28(fp)
 801613c:	10a0000c 	andi	r2,r2,32768
 8016140:	10001126 	beq	r2,zero,8016188 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8016144:	e0bffb17 	ldw	r2,-20(fp)
 8016148:	10800a17 	ldw	r2,40(r2)
 801614c:	e0fff917 	ldw	r3,-28(fp)
 8016150:	1809883a 	mov	r4,r3
 8016154:	e0fffb17 	ldw	r3,-20(fp)
 8016158:	1885883a 	add	r2,r3,r2
 801615c:	10800e04 	addi	r2,r2,56
 8016160:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016164:	e0bffb17 	ldw	r2,-20(fp)
 8016168:	10800a17 	ldw	r2,40(r2)
 801616c:	10800044 	addi	r2,r2,1
 8016170:	10c1ffcc 	andi	r3,r2,2047
 8016174:	e0bffb17 	ldw	r2,-20(fp)
 8016178:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801617c:	003fe206 	br	8016108 <__alt_data_end+0xfc016108>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8016180:	0001883a 	nop
 8016184:	00000106 	br	801618c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8016188:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801618c:	e0bff917 	ldw	r2,-28(fp)
 8016190:	10bfffec 	andhi	r2,r2,65535
 8016194:	10000f26 	beq	r2,zero,80161d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016198:	e0bffb17 	ldw	r2,-20(fp)
 801619c:	10c00817 	ldw	r3,32(r2)
 80161a0:	00bfff84 	movi	r2,-2
 80161a4:	1886703a 	and	r3,r3,r2
 80161a8:	e0bffb17 	ldw	r2,-20(fp)
 80161ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80161b0:	e0bffc17 	ldw	r2,-16(fp)
 80161b4:	10800104 	addi	r2,r2,4
 80161b8:	1007883a 	mov	r3,r2
 80161bc:	e0bffb17 	ldw	r2,-20(fp)
 80161c0:	10800817 	ldw	r2,32(r2)
 80161c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80161c8:	e0bffc17 	ldw	r2,-16(fp)
 80161cc:	10800104 	addi	r2,r2,4
 80161d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80161d4:	e0bffd17 	ldw	r2,-12(fp)
 80161d8:	1080800c 	andi	r2,r2,512
 80161dc:	103fbe26 	beq	r2,zero,80160d8 <__alt_data_end+0xfc0160d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80161e0:	e0bffd17 	ldw	r2,-12(fp)
 80161e4:	1004d43a 	srli	r2,r2,16
 80161e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80161ec:	00001406 	br	8016240 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80161f0:	e0bffc17 	ldw	r2,-16(fp)
 80161f4:	e0fffb17 	ldw	r3,-20(fp)
 80161f8:	18c00d17 	ldw	r3,52(r3)
 80161fc:	e13ffb17 	ldw	r4,-20(fp)
 8016200:	20c7883a 	add	r3,r4,r3
 8016204:	18c20e04 	addi	r3,r3,2104
 8016208:	18c00003 	ldbu	r3,0(r3)
 801620c:	18c03fcc 	andi	r3,r3,255
 8016210:	18c0201c 	xori	r3,r3,128
 8016214:	18ffe004 	addi	r3,r3,-128
 8016218:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801621c:	e0bffb17 	ldw	r2,-20(fp)
 8016220:	10800d17 	ldw	r2,52(r2)
 8016224:	10800044 	addi	r2,r2,1
 8016228:	10c1ffcc 	andi	r3,r2,2047
 801622c:	e0bffb17 	ldw	r2,-20(fp)
 8016230:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8016234:	e0bffa17 	ldw	r2,-24(fp)
 8016238:	10bfffc4 	addi	r2,r2,-1
 801623c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016240:	e0bffa17 	ldw	r2,-24(fp)
 8016244:	10000526 	beq	r2,zero,801625c <altera_avalon_jtag_uart_irq+0x1a8>
 8016248:	e0bffb17 	ldw	r2,-20(fp)
 801624c:	10c00d17 	ldw	r3,52(r2)
 8016250:	e0bffb17 	ldw	r2,-20(fp)
 8016254:	10800c17 	ldw	r2,48(r2)
 8016258:	18bfe51e 	bne	r3,r2,80161f0 <__alt_data_end+0xfc0161f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801625c:	e0bffa17 	ldw	r2,-24(fp)
 8016260:	103f9d26 	beq	r2,zero,80160d8 <__alt_data_end+0xfc0160d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016264:	e0bffb17 	ldw	r2,-20(fp)
 8016268:	10c00817 	ldw	r3,32(r2)
 801626c:	00bfff44 	movi	r2,-3
 8016270:	1886703a 	and	r3,r3,r2
 8016274:	e0bffb17 	ldw	r2,-20(fp)
 8016278:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801627c:	e0bffb17 	ldw	r2,-20(fp)
 8016280:	10800017 	ldw	r2,0(r2)
 8016284:	10800104 	addi	r2,r2,4
 8016288:	1007883a 	mov	r3,r2
 801628c:	e0bffb17 	ldw	r2,-20(fp)
 8016290:	10800817 	ldw	r2,32(r2)
 8016294:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016298:	e0bffc17 	ldw	r2,-16(fp)
 801629c:	10800104 	addi	r2,r2,4
 80162a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80162a4:	003f8c06 	br	80160d8 <__alt_data_end+0xfc0160d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80162a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80162ac:	0001883a 	nop
 80162b0:	e037883a 	mov	sp,fp
 80162b4:	df000017 	ldw	fp,0(sp)
 80162b8:	dec00104 	addi	sp,sp,4
 80162bc:	f800283a 	ret

080162c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80162c0:	defff804 	addi	sp,sp,-32
 80162c4:	df000715 	stw	fp,28(sp)
 80162c8:	df000704 	addi	fp,sp,28
 80162cc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80162d0:	e0bffb17 	ldw	r2,-20(fp)
 80162d4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80162d8:	e0bff917 	ldw	r2,-28(fp)
 80162dc:	10800017 	ldw	r2,0(r2)
 80162e0:	10800104 	addi	r2,r2,4
 80162e4:	10800037 	ldwio	r2,0(r2)
 80162e8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80162ec:	e0bffa17 	ldw	r2,-24(fp)
 80162f0:	1081000c 	andi	r2,r2,1024
 80162f4:	10000b26 	beq	r2,zero,8016324 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80162f8:	e0bff917 	ldw	r2,-28(fp)
 80162fc:	10800017 	ldw	r2,0(r2)
 8016300:	10800104 	addi	r2,r2,4
 8016304:	1007883a 	mov	r3,r2
 8016308:	e0bff917 	ldw	r2,-28(fp)
 801630c:	10800817 	ldw	r2,32(r2)
 8016310:	10810014 	ori	r2,r2,1024
 8016314:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016318:	e0bff917 	ldw	r2,-28(fp)
 801631c:	10000915 	stw	zero,36(r2)
 8016320:	00000a06 	br	801634c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016324:	e0bff917 	ldw	r2,-28(fp)
 8016328:	10c00917 	ldw	r3,36(r2)
 801632c:	00a00034 	movhi	r2,32768
 8016330:	10bfff04 	addi	r2,r2,-4
 8016334:	10c00536 	bltu	r2,r3,801634c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8016338:	e0bff917 	ldw	r2,-28(fp)
 801633c:	10800917 	ldw	r2,36(r2)
 8016340:	10c00044 	addi	r3,r2,1
 8016344:	e0bff917 	ldw	r2,-28(fp)
 8016348:	10c00915 	stw	r3,36(r2)
 801634c:	d0a78817 	ldw	r2,-25056(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8016350:	e037883a 	mov	sp,fp
 8016354:	df000017 	ldw	fp,0(sp)
 8016358:	dec00104 	addi	sp,sp,4
 801635c:	f800283a 	ret

08016360 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8016360:	defffd04 	addi	sp,sp,-12
 8016364:	df000215 	stw	fp,8(sp)
 8016368:	df000204 	addi	fp,sp,8
 801636c:	e13ffe15 	stw	r4,-8(fp)
 8016370:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016374:	00000506 	br	801638c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8016378:	e0bfff17 	ldw	r2,-4(fp)
 801637c:	1090000c 	andi	r2,r2,16384
 8016380:	10000226 	beq	r2,zero,801638c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8016384:	00bffd44 	movi	r2,-11
 8016388:	00000b06 	br	80163b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801638c:	e0bffe17 	ldw	r2,-8(fp)
 8016390:	10c00d17 	ldw	r3,52(r2)
 8016394:	e0bffe17 	ldw	r2,-8(fp)
 8016398:	10800c17 	ldw	r2,48(r2)
 801639c:	18800526 	beq	r3,r2,80163b4 <altera_avalon_jtag_uart_close+0x54>
 80163a0:	e0bffe17 	ldw	r2,-8(fp)
 80163a4:	10c00917 	ldw	r3,36(r2)
 80163a8:	e0bffe17 	ldw	r2,-8(fp)
 80163ac:	10800117 	ldw	r2,4(r2)
 80163b0:	18bff136 	bltu	r3,r2,8016378 <__alt_data_end+0xfc016378>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80163b4:	0005883a 	mov	r2,zero
}
 80163b8:	e037883a 	mov	sp,fp
 80163bc:	df000017 	ldw	fp,0(sp)
 80163c0:	dec00104 	addi	sp,sp,4
 80163c4:	f800283a 	ret

080163c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80163c8:	defffa04 	addi	sp,sp,-24
 80163cc:	df000515 	stw	fp,20(sp)
 80163d0:	df000504 	addi	fp,sp,20
 80163d4:	e13ffd15 	stw	r4,-12(fp)
 80163d8:	e17ffe15 	stw	r5,-8(fp)
 80163dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80163e0:	00bff9c4 	movi	r2,-25
 80163e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80163e8:	e0bffe17 	ldw	r2,-8(fp)
 80163ec:	10da8060 	cmpeqi	r3,r2,27137
 80163f0:	1800031e 	bne	r3,zero,8016400 <altera_avalon_jtag_uart_ioctl+0x38>
 80163f4:	109a80a0 	cmpeqi	r2,r2,27138
 80163f8:	1000181e 	bne	r2,zero,801645c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80163fc:	00002906 	br	80164a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8016400:	e0bffd17 	ldw	r2,-12(fp)
 8016404:	10c00117 	ldw	r3,4(r2)
 8016408:	00a00034 	movhi	r2,32768
 801640c:	10bfffc4 	addi	r2,r2,-1
 8016410:	18802126 	beq	r3,r2,8016498 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8016414:	e0bfff17 	ldw	r2,-4(fp)
 8016418:	10800017 	ldw	r2,0(r2)
 801641c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8016420:	e0bffc17 	ldw	r2,-16(fp)
 8016424:	10800090 	cmplti	r2,r2,2
 8016428:	1000061e 	bne	r2,zero,8016444 <altera_avalon_jtag_uart_ioctl+0x7c>
 801642c:	e0fffc17 	ldw	r3,-16(fp)
 8016430:	00a00034 	movhi	r2,32768
 8016434:	10bfffc4 	addi	r2,r2,-1
 8016438:	18800226 	beq	r3,r2,8016444 <altera_avalon_jtag_uart_ioctl+0x7c>
 801643c:	e0bffc17 	ldw	r2,-16(fp)
 8016440:	00000206 	br	801644c <altera_avalon_jtag_uart_ioctl+0x84>
 8016444:	00a00034 	movhi	r2,32768
 8016448:	10bfff84 	addi	r2,r2,-2
 801644c:	e0fffd17 	ldw	r3,-12(fp)
 8016450:	18800115 	stw	r2,4(r3)
      rc = 0;
 8016454:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016458:	00000f06 	br	8016498 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 801645c:	e0bffd17 	ldw	r2,-12(fp)
 8016460:	10c00117 	ldw	r3,4(r2)
 8016464:	00a00034 	movhi	r2,32768
 8016468:	10bfffc4 	addi	r2,r2,-1
 801646c:	18800c26 	beq	r3,r2,80164a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8016470:	e0bffd17 	ldw	r2,-12(fp)
 8016474:	10c00917 	ldw	r3,36(r2)
 8016478:	e0bffd17 	ldw	r2,-12(fp)
 801647c:	10800117 	ldw	r2,4(r2)
 8016480:	1885803a 	cmpltu	r2,r3,r2
 8016484:	10c03fcc 	andi	r3,r2,255
 8016488:	e0bfff17 	ldw	r2,-4(fp)
 801648c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8016490:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016494:	00000206 	br	80164a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8016498:	0001883a 	nop
 801649c:	00000106 	br	80164a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80164a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80164a4:	e0bffb17 	ldw	r2,-20(fp)
}
 80164a8:	e037883a 	mov	sp,fp
 80164ac:	df000017 	ldw	fp,0(sp)
 80164b0:	dec00104 	addi	sp,sp,4
 80164b4:	f800283a 	ret

080164b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80164b8:	defff304 	addi	sp,sp,-52
 80164bc:	dfc00c15 	stw	ra,48(sp)
 80164c0:	df000b15 	stw	fp,44(sp)
 80164c4:	df000b04 	addi	fp,sp,44
 80164c8:	e13ffc15 	stw	r4,-16(fp)
 80164cc:	e17ffd15 	stw	r5,-12(fp)
 80164d0:	e1bffe15 	stw	r6,-8(fp)
 80164d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80164d8:	e0bffd17 	ldw	r2,-12(fp)
 80164dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80164e0:	00004706 	br	8016600 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80164e4:	e0bffc17 	ldw	r2,-16(fp)
 80164e8:	10800a17 	ldw	r2,40(r2)
 80164ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80164f0:	e0bffc17 	ldw	r2,-16(fp)
 80164f4:	10800b17 	ldw	r2,44(r2)
 80164f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80164fc:	e0fff717 	ldw	r3,-36(fp)
 8016500:	e0bff817 	ldw	r2,-32(fp)
 8016504:	18800536 	bltu	r3,r2,801651c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8016508:	e0fff717 	ldw	r3,-36(fp)
 801650c:	e0bff817 	ldw	r2,-32(fp)
 8016510:	1885c83a 	sub	r2,r3,r2
 8016514:	e0bff615 	stw	r2,-40(fp)
 8016518:	00000406 	br	801652c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801651c:	00c20004 	movi	r3,2048
 8016520:	e0bff817 	ldw	r2,-32(fp)
 8016524:	1885c83a 	sub	r2,r3,r2
 8016528:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801652c:	e0bff617 	ldw	r2,-40(fp)
 8016530:	10001e26 	beq	r2,zero,80165ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8016534:	e0fffe17 	ldw	r3,-8(fp)
 8016538:	e0bff617 	ldw	r2,-40(fp)
 801653c:	1880022e 	bgeu	r3,r2,8016548 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8016540:	e0bffe17 	ldw	r2,-8(fp)
 8016544:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8016548:	e0bffc17 	ldw	r2,-16(fp)
 801654c:	10c00e04 	addi	r3,r2,56
 8016550:	e0bff817 	ldw	r2,-32(fp)
 8016554:	1885883a 	add	r2,r3,r2
 8016558:	e1bff617 	ldw	r6,-40(fp)
 801655c:	100b883a 	mov	r5,r2
 8016560:	e13ff517 	ldw	r4,-44(fp)
 8016564:	800ca6c0 	call	800ca6c <memcpy>
      ptr   += n;
 8016568:	e0fff517 	ldw	r3,-44(fp)
 801656c:	e0bff617 	ldw	r2,-40(fp)
 8016570:	1885883a 	add	r2,r3,r2
 8016574:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8016578:	e0fffe17 	ldw	r3,-8(fp)
 801657c:	e0bff617 	ldw	r2,-40(fp)
 8016580:	1885c83a 	sub	r2,r3,r2
 8016584:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016588:	e0fff817 	ldw	r3,-32(fp)
 801658c:	e0bff617 	ldw	r2,-40(fp)
 8016590:	1885883a 	add	r2,r3,r2
 8016594:	10c1ffcc 	andi	r3,r2,2047
 8016598:	e0bffc17 	ldw	r2,-16(fp)
 801659c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80165a0:	e0bffe17 	ldw	r2,-8(fp)
 80165a4:	00bfcf16 	blt	zero,r2,80164e4 <__alt_data_end+0xfc0164e4>
 80165a8:	00000106 	br	80165b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80165ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80165b0:	e0fff517 	ldw	r3,-44(fp)
 80165b4:	e0bffd17 	ldw	r2,-12(fp)
 80165b8:	1880141e 	bne	r3,r2,801660c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80165bc:	e0bfff17 	ldw	r2,-4(fp)
 80165c0:	1090000c 	andi	r2,r2,16384
 80165c4:	1000131e 	bne	r2,zero,8016614 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80165c8:	0001883a 	nop
 80165cc:	e0bffc17 	ldw	r2,-16(fp)
 80165d0:	10c00a17 	ldw	r3,40(r2)
 80165d4:	e0bff717 	ldw	r2,-36(fp)
 80165d8:	1880051e 	bne	r3,r2,80165f0 <altera_avalon_jtag_uart_read+0x138>
 80165dc:	e0bffc17 	ldw	r2,-16(fp)
 80165e0:	10c00917 	ldw	r3,36(r2)
 80165e4:	e0bffc17 	ldw	r2,-16(fp)
 80165e8:	10800117 	ldw	r2,4(r2)
 80165ec:	18bff736 	bltu	r3,r2,80165cc <__alt_data_end+0xfc0165cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80165f0:	e0bffc17 	ldw	r2,-16(fp)
 80165f4:	10c00a17 	ldw	r3,40(r2)
 80165f8:	e0bff717 	ldw	r2,-36(fp)
 80165fc:	18800726 	beq	r3,r2,801661c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8016600:	e0bffe17 	ldw	r2,-8(fp)
 8016604:	00bfb716 	blt	zero,r2,80164e4 <__alt_data_end+0xfc0164e4>
 8016608:	00000506 	br	8016620 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 801660c:	0001883a 	nop
 8016610:	00000306 	br	8016620 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8016614:	0001883a 	nop
 8016618:	00000106 	br	8016620 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 801661c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8016620:	e0fff517 	ldw	r3,-44(fp)
 8016624:	e0bffd17 	ldw	r2,-12(fp)
 8016628:	18801826 	beq	r3,r2,801668c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801662c:	0005303a 	rdctl	r2,status
 8016630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016634:	e0fffb17 	ldw	r3,-20(fp)
 8016638:	00bfff84 	movi	r2,-2
 801663c:	1884703a 	and	r2,r3,r2
 8016640:	1001703a 	wrctl	status,r2
  
  return context;
 8016644:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8016648:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801664c:	e0bffc17 	ldw	r2,-16(fp)
 8016650:	10800817 	ldw	r2,32(r2)
 8016654:	10c00054 	ori	r3,r2,1
 8016658:	e0bffc17 	ldw	r2,-16(fp)
 801665c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016660:	e0bffc17 	ldw	r2,-16(fp)
 8016664:	10800017 	ldw	r2,0(r2)
 8016668:	10800104 	addi	r2,r2,4
 801666c:	1007883a 	mov	r3,r2
 8016670:	e0bffc17 	ldw	r2,-16(fp)
 8016674:	10800817 	ldw	r2,32(r2)
 8016678:	18800035 	stwio	r2,0(r3)
 801667c:	e0bffa17 	ldw	r2,-24(fp)
 8016680:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016684:	e0bff917 	ldw	r2,-28(fp)
 8016688:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801668c:	e0fff517 	ldw	r3,-44(fp)
 8016690:	e0bffd17 	ldw	r2,-12(fp)
 8016694:	18800426 	beq	r3,r2,80166a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8016698:	e0fff517 	ldw	r3,-44(fp)
 801669c:	e0bffd17 	ldw	r2,-12(fp)
 80166a0:	1885c83a 	sub	r2,r3,r2
 80166a4:	00000606 	br	80166c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80166a8:	e0bfff17 	ldw	r2,-4(fp)
 80166ac:	1090000c 	andi	r2,r2,16384
 80166b0:	10000226 	beq	r2,zero,80166bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80166b4:	00bffd44 	movi	r2,-11
 80166b8:	00000106 	br	80166c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80166bc:	00bffec4 	movi	r2,-5
}
 80166c0:	e037883a 	mov	sp,fp
 80166c4:	dfc00117 	ldw	ra,4(sp)
 80166c8:	df000017 	ldw	fp,0(sp)
 80166cc:	dec00204 	addi	sp,sp,8
 80166d0:	f800283a 	ret

080166d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80166d4:	defff304 	addi	sp,sp,-52
 80166d8:	dfc00c15 	stw	ra,48(sp)
 80166dc:	df000b15 	stw	fp,44(sp)
 80166e0:	df000b04 	addi	fp,sp,44
 80166e4:	e13ffc15 	stw	r4,-16(fp)
 80166e8:	e17ffd15 	stw	r5,-12(fp)
 80166ec:	e1bffe15 	stw	r6,-8(fp)
 80166f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80166f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80166f8:	e0bffd17 	ldw	r2,-12(fp)
 80166fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8016700:	00003706 	br	80167e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8016704:	e0bffc17 	ldw	r2,-16(fp)
 8016708:	10800c17 	ldw	r2,48(r2)
 801670c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8016710:	e0bffc17 	ldw	r2,-16(fp)
 8016714:	10800d17 	ldw	r2,52(r2)
 8016718:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801671c:	e0fff917 	ldw	r3,-28(fp)
 8016720:	e0bff517 	ldw	r2,-44(fp)
 8016724:	1880062e 	bgeu	r3,r2,8016740 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8016728:	e0fff517 	ldw	r3,-44(fp)
 801672c:	e0bff917 	ldw	r2,-28(fp)
 8016730:	1885c83a 	sub	r2,r3,r2
 8016734:	10bfffc4 	addi	r2,r2,-1
 8016738:	e0bff615 	stw	r2,-40(fp)
 801673c:	00000b06 	br	801676c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8016740:	e0bff517 	ldw	r2,-44(fp)
 8016744:	10000526 	beq	r2,zero,801675c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8016748:	00c20004 	movi	r3,2048
 801674c:	e0bff917 	ldw	r2,-28(fp)
 8016750:	1885c83a 	sub	r2,r3,r2
 8016754:	e0bff615 	stw	r2,-40(fp)
 8016758:	00000406 	br	801676c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801675c:	00c1ffc4 	movi	r3,2047
 8016760:	e0bff917 	ldw	r2,-28(fp)
 8016764:	1885c83a 	sub	r2,r3,r2
 8016768:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801676c:	e0bff617 	ldw	r2,-40(fp)
 8016770:	10001e26 	beq	r2,zero,80167ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8016774:	e0fffe17 	ldw	r3,-8(fp)
 8016778:	e0bff617 	ldw	r2,-40(fp)
 801677c:	1880022e 	bgeu	r3,r2,8016788 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8016780:	e0bffe17 	ldw	r2,-8(fp)
 8016784:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8016788:	e0bffc17 	ldw	r2,-16(fp)
 801678c:	10c20e04 	addi	r3,r2,2104
 8016790:	e0bff917 	ldw	r2,-28(fp)
 8016794:	1885883a 	add	r2,r3,r2
 8016798:	e1bff617 	ldw	r6,-40(fp)
 801679c:	e17ffd17 	ldw	r5,-12(fp)
 80167a0:	1009883a 	mov	r4,r2
 80167a4:	800ca6c0 	call	800ca6c <memcpy>
      ptr   += n;
 80167a8:	e0fffd17 	ldw	r3,-12(fp)
 80167ac:	e0bff617 	ldw	r2,-40(fp)
 80167b0:	1885883a 	add	r2,r3,r2
 80167b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80167b8:	e0fffe17 	ldw	r3,-8(fp)
 80167bc:	e0bff617 	ldw	r2,-40(fp)
 80167c0:	1885c83a 	sub	r2,r3,r2
 80167c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80167c8:	e0fff917 	ldw	r3,-28(fp)
 80167cc:	e0bff617 	ldw	r2,-40(fp)
 80167d0:	1885883a 	add	r2,r3,r2
 80167d4:	10c1ffcc 	andi	r3,r2,2047
 80167d8:	e0bffc17 	ldw	r2,-16(fp)
 80167dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80167e0:	e0bffe17 	ldw	r2,-8(fp)
 80167e4:	00bfc716 	blt	zero,r2,8016704 <__alt_data_end+0xfc016704>
 80167e8:	00000106 	br	80167f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80167ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80167f0:	0005303a 	rdctl	r2,status
 80167f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80167f8:	e0fffb17 	ldw	r3,-20(fp)
 80167fc:	00bfff84 	movi	r2,-2
 8016800:	1884703a 	and	r2,r3,r2
 8016804:	1001703a 	wrctl	status,r2
  
  return context;
 8016808:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801680c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016810:	e0bffc17 	ldw	r2,-16(fp)
 8016814:	10800817 	ldw	r2,32(r2)
 8016818:	10c00094 	ori	r3,r2,2
 801681c:	e0bffc17 	ldw	r2,-16(fp)
 8016820:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016824:	e0bffc17 	ldw	r2,-16(fp)
 8016828:	10800017 	ldw	r2,0(r2)
 801682c:	10800104 	addi	r2,r2,4
 8016830:	1007883a 	mov	r3,r2
 8016834:	e0bffc17 	ldw	r2,-16(fp)
 8016838:	10800817 	ldw	r2,32(r2)
 801683c:	18800035 	stwio	r2,0(r3)
 8016840:	e0bffa17 	ldw	r2,-24(fp)
 8016844:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016848:	e0bff817 	ldw	r2,-32(fp)
 801684c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8016850:	e0bffe17 	ldw	r2,-8(fp)
 8016854:	0080100e 	bge	zero,r2,8016898 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8016858:	e0bfff17 	ldw	r2,-4(fp)
 801685c:	1090000c 	andi	r2,r2,16384
 8016860:	1000101e 	bne	r2,zero,80168a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8016864:	0001883a 	nop
 8016868:	e0bffc17 	ldw	r2,-16(fp)
 801686c:	10c00d17 	ldw	r3,52(r2)
 8016870:	e0bff517 	ldw	r2,-44(fp)
 8016874:	1880051e 	bne	r3,r2,801688c <altera_avalon_jtag_uart_write+0x1b8>
 8016878:	e0bffc17 	ldw	r2,-16(fp)
 801687c:	10c00917 	ldw	r3,36(r2)
 8016880:	e0bffc17 	ldw	r2,-16(fp)
 8016884:	10800117 	ldw	r2,4(r2)
 8016888:	18bff736 	bltu	r3,r2,8016868 <__alt_data_end+0xfc016868>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801688c:	e0bffc17 	ldw	r2,-16(fp)
 8016890:	10800917 	ldw	r2,36(r2)
 8016894:	1000051e 	bne	r2,zero,80168ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8016898:	e0bffe17 	ldw	r2,-8(fp)
 801689c:	00bfd016 	blt	zero,r2,80167e0 <__alt_data_end+0xfc0167e0>
 80168a0:	00000306 	br	80168b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80168a4:	0001883a 	nop
 80168a8:	00000106 	br	80168b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80168ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80168b0:	e0fffd17 	ldw	r3,-12(fp)
 80168b4:	e0bff717 	ldw	r2,-36(fp)
 80168b8:	18800426 	beq	r3,r2,80168cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80168bc:	e0fffd17 	ldw	r3,-12(fp)
 80168c0:	e0bff717 	ldw	r2,-36(fp)
 80168c4:	1885c83a 	sub	r2,r3,r2
 80168c8:	00000606 	br	80168e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80168cc:	e0bfff17 	ldw	r2,-4(fp)
 80168d0:	1090000c 	andi	r2,r2,16384
 80168d4:	10000226 	beq	r2,zero,80168e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80168d8:	00bffd44 	movi	r2,-11
 80168dc:	00000106 	br	80168e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80168e0:	00bffec4 	movi	r2,-5
}
 80168e4:	e037883a 	mov	sp,fp
 80168e8:	dfc00117 	ldw	ra,4(sp)
 80168ec:	df000017 	ldw	fp,0(sp)
 80168f0:	dec00204 	addi	sp,sp,8
 80168f4:	f800283a 	ret

080168f8 <alt_avalon_spi_command>:
 80168f8:	defff404 	addi	sp,sp,-48
 80168fc:	df000b15 	stw	fp,44(sp)
 8016900:	df000b04 	addi	fp,sp,44
 8016904:	e13ffc15 	stw	r4,-16(fp)
 8016908:	e17ffd15 	stw	r5,-12(fp)
 801690c:	e1bffe15 	stw	r6,-8(fp)
 8016910:	e1ffff15 	stw	r7,-4(fp)
 8016914:	e0ffff17 	ldw	r3,-4(fp)
 8016918:	e0bffe17 	ldw	r2,-8(fp)
 801691c:	1885883a 	add	r2,r3,r2
 8016920:	e0bff815 	stw	r2,-32(fp)
 8016924:	e0c00217 	ldw	r3,8(fp)
 8016928:	e0800117 	ldw	r2,4(fp)
 801692c:	1885883a 	add	r2,r3,r2
 8016930:	e0bff915 	stw	r2,-28(fp)
 8016934:	e0800117 	ldw	r2,4(fp)
 8016938:	e0bff515 	stw	r2,-44(fp)
 801693c:	e0bffe17 	ldw	r2,-8(fp)
 8016940:	e0bff615 	stw	r2,-40(fp)
 8016944:	00800044 	movi	r2,1
 8016948:	e0bff715 	stw	r2,-36(fp)
 801694c:	e0bffc17 	ldw	r2,-16(fp)
 8016950:	10800504 	addi	r2,r2,20
 8016954:	1009883a 	mov	r4,r2
 8016958:	00c00044 	movi	r3,1
 801695c:	e0bffd17 	ldw	r2,-12(fp)
 8016960:	1884983a 	sll	r2,r3,r2
 8016964:	20800035 	stwio	r2,0(r4)
 8016968:	e0800317 	ldw	r2,12(fp)
 801696c:	1080008c 	andi	r2,r2,2
 8016970:	1000051e 	bne	r2,zero,8016988 <alt_avalon_spi_command+0x90>
 8016974:	e0bffc17 	ldw	r2,-16(fp)
 8016978:	10800304 	addi	r2,r2,12
 801697c:	1007883a 	mov	r3,r2
 8016980:	00810004 	movi	r2,1024
 8016984:	18800035 	stwio	r2,0(r3)
 8016988:	e0bffc17 	ldw	r2,-16(fp)
 801698c:	10800037 	ldwio	r2,0(r2)
 8016990:	e0bffc17 	ldw	r2,-16(fp)
 8016994:	10800204 	addi	r2,r2,8
 8016998:	10800037 	ldwio	r2,0(r2)
 801699c:	e0bffa15 	stw	r2,-24(fp)
 80169a0:	e0bffa17 	ldw	r2,-24(fp)
 80169a4:	1080100c 	andi	r2,r2,64
 80169a8:	10000226 	beq	r2,zero,80169b4 <alt_avalon_spi_command+0xbc>
 80169ac:	e0bff717 	ldw	r2,-36(fp)
 80169b0:	1000031e 	bne	r2,zero,80169c0 <alt_avalon_spi_command+0xc8>
 80169b4:	e0bffa17 	ldw	r2,-24(fp)
 80169b8:	1080200c 	andi	r2,r2,128
 80169bc:	103ff426 	beq	r2,zero,8016990 <__alt_data_end+0xfc016990>
 80169c0:	e0bffa17 	ldw	r2,-24(fp)
 80169c4:	1080100c 	andi	r2,r2,64
 80169c8:	10001e26 	beq	r2,zero,8016a44 <alt_avalon_spi_command+0x14c>
 80169cc:	e0bff717 	ldw	r2,-36(fp)
 80169d0:	00801c0e 	bge	zero,r2,8016a44 <alt_avalon_spi_command+0x14c>
 80169d4:	e0bff717 	ldw	r2,-36(fp)
 80169d8:	10bfffc4 	addi	r2,r2,-1
 80169dc:	e0bff715 	stw	r2,-36(fp)
 80169e0:	e0ffff17 	ldw	r3,-4(fp)
 80169e4:	e0bff817 	ldw	r2,-32(fp)
 80169e8:	18800a2e 	bgeu	r3,r2,8016a14 <alt_avalon_spi_command+0x11c>
 80169ec:	e0bffc17 	ldw	r2,-16(fp)
 80169f0:	10800104 	addi	r2,r2,4
 80169f4:	1009883a 	mov	r4,r2
 80169f8:	e0bfff17 	ldw	r2,-4(fp)
 80169fc:	10c00044 	addi	r3,r2,1
 8016a00:	e0ffff15 	stw	r3,-4(fp)
 8016a04:	10800003 	ldbu	r2,0(r2)
 8016a08:	10803fcc 	andi	r2,r2,255
 8016a0c:	20800035 	stwio	r2,0(r4)
 8016a10:	00000c06 	br	8016a44 <alt_avalon_spi_command+0x14c>
 8016a14:	e0bff517 	ldw	r2,-44(fp)
 8016a18:	10000826 	beq	r2,zero,8016a3c <alt_avalon_spi_command+0x144>
 8016a1c:	e0bff517 	ldw	r2,-44(fp)
 8016a20:	10bfffc4 	addi	r2,r2,-1
 8016a24:	e0bff515 	stw	r2,-44(fp)
 8016a28:	e0bffc17 	ldw	r2,-16(fp)
 8016a2c:	10800104 	addi	r2,r2,4
 8016a30:	0007883a 	mov	r3,zero
 8016a34:	10c00035 	stwio	r3,0(r2)
 8016a38:	00000206 	br	8016a44 <alt_avalon_spi_command+0x14c>
 8016a3c:	00bf0004 	movi	r2,-1024
 8016a40:	e0bff715 	stw	r2,-36(fp)
 8016a44:	e0bffa17 	ldw	r2,-24(fp)
 8016a48:	1080200c 	andi	r2,r2,128
 8016a4c:	103fd026 	beq	r2,zero,8016990 <__alt_data_end+0xfc016990>
 8016a50:	e0bffc17 	ldw	r2,-16(fp)
 8016a54:	10800037 	ldwio	r2,0(r2)
 8016a58:	e0bffb15 	stw	r2,-20(fp)
 8016a5c:	e0bff617 	ldw	r2,-40(fp)
 8016a60:	10000426 	beq	r2,zero,8016a74 <alt_avalon_spi_command+0x17c>
 8016a64:	e0bff617 	ldw	r2,-40(fp)
 8016a68:	10bfffc4 	addi	r2,r2,-1
 8016a6c:	e0bff615 	stw	r2,-40(fp)
 8016a70:	00000506 	br	8016a88 <alt_avalon_spi_command+0x190>
 8016a74:	e0800217 	ldw	r2,8(fp)
 8016a78:	10c00044 	addi	r3,r2,1
 8016a7c:	e0c00215 	stw	r3,8(fp)
 8016a80:	e0fffb17 	ldw	r3,-20(fp)
 8016a84:	10c00005 	stb	r3,0(r2)
 8016a88:	e0bff717 	ldw	r2,-36(fp)
 8016a8c:	10800044 	addi	r2,r2,1
 8016a90:	e0bff715 	stw	r2,-36(fp)
 8016a94:	e0bff617 	ldw	r2,-40(fp)
 8016a98:	103fbd1e 	bne	r2,zero,8016990 <__alt_data_end+0xfc016990>
 8016a9c:	e0c00217 	ldw	r3,8(fp)
 8016aa0:	e0bff917 	ldw	r2,-28(fp)
 8016aa4:	18bfba1e 	bne	r3,r2,8016990 <__alt_data_end+0xfc016990>
 8016aa8:	e0bffc17 	ldw	r2,-16(fp)
 8016aac:	10800204 	addi	r2,r2,8
 8016ab0:	10800037 	ldwio	r2,0(r2)
 8016ab4:	e0bffa15 	stw	r2,-24(fp)
 8016ab8:	e0bffa17 	ldw	r2,-24(fp)
 8016abc:	1080080c 	andi	r2,r2,32
 8016ac0:	103ff926 	beq	r2,zero,8016aa8 <__alt_data_end+0xfc016aa8>
 8016ac4:	e0800317 	ldw	r2,12(fp)
 8016ac8:	1080004c 	andi	r2,r2,1
 8016acc:	1000041e 	bne	r2,zero,8016ae0 <alt_avalon_spi_command+0x1e8>
 8016ad0:	e0bffc17 	ldw	r2,-16(fp)
 8016ad4:	10800304 	addi	r2,r2,12
 8016ad8:	0007883a 	mov	r3,zero
 8016adc:	10c00035 	stwio	r3,0(r2)
 8016ae0:	e0800117 	ldw	r2,4(fp)
 8016ae4:	e037883a 	mov	sp,fp
 8016ae8:	df000017 	ldw	fp,0(sp)
 8016aec:	dec00104 	addi	sp,sp,4
 8016af0:	f800283a 	ret

08016af4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8016af4:	defffa04 	addi	sp,sp,-24
 8016af8:	dfc00515 	stw	ra,20(sp)
 8016afc:	df000415 	stw	fp,16(sp)
 8016b00:	df000404 	addi	fp,sp,16
 8016b04:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8016b08:	0007883a 	mov	r3,zero
 8016b0c:	e0bfff17 	ldw	r2,-4(fp)
 8016b10:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8016b14:	e0bfff17 	ldw	r2,-4(fp)
 8016b18:	10800104 	addi	r2,r2,4
 8016b1c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016b20:	0005303a 	rdctl	r2,status
 8016b24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016b28:	e0fffd17 	ldw	r3,-12(fp)
 8016b2c:	00bfff84 	movi	r2,-2
 8016b30:	1884703a 	and	r2,r3,r2
 8016b34:	1001703a 	wrctl	status,r2
  
  return context;
 8016b38:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8016b3c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8016b40:	8015b4c0 	call	8015b4c <alt_tick>
 8016b44:	e0bffc17 	ldw	r2,-16(fp)
 8016b48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016b4c:	e0bffe17 	ldw	r2,-8(fp)
 8016b50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8016b54:	0001883a 	nop
 8016b58:	e037883a 	mov	sp,fp
 8016b5c:	dfc00117 	ldw	ra,4(sp)
 8016b60:	df000017 	ldw	fp,0(sp)
 8016b64:	dec00204 	addi	sp,sp,8
 8016b68:	f800283a 	ret

08016b6c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8016b6c:	defff804 	addi	sp,sp,-32
 8016b70:	dfc00715 	stw	ra,28(sp)
 8016b74:	df000615 	stw	fp,24(sp)
 8016b78:	df000604 	addi	fp,sp,24
 8016b7c:	e13ffc15 	stw	r4,-16(fp)
 8016b80:	e17ffd15 	stw	r5,-12(fp)
 8016b84:	e1bffe15 	stw	r6,-8(fp)
 8016b88:	e1ffff15 	stw	r7,-4(fp)
 8016b8c:	e0bfff17 	ldw	r2,-4(fp)
 8016b90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8016b94:	d0a78817 	ldw	r2,-25056(gp)
 8016b98:	1000021e 	bne	r2,zero,8016ba4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8016b9c:	e0bffb17 	ldw	r2,-20(fp)
 8016ba0:	d0a78815 	stw	r2,-25056(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8016ba4:	e0bffc17 	ldw	r2,-16(fp)
 8016ba8:	10800104 	addi	r2,r2,4
 8016bac:	00c001c4 	movi	r3,7
 8016bb0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8016bb4:	d8000015 	stw	zero,0(sp)
 8016bb8:	e1fffc17 	ldw	r7,-16(fp)
 8016bbc:	01820074 	movhi	r6,2049
 8016bc0:	319abd04 	addi	r6,r6,27380
 8016bc4:	e17ffe17 	ldw	r5,-8(fp)
 8016bc8:	e13ffd17 	ldw	r4,-12(fp)
 8016bcc:	801704c0 	call	801704c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8016bd0:	0001883a 	nop
 8016bd4:	e037883a 	mov	sp,fp
 8016bd8:	dfc00117 	ldw	ra,4(sp)
 8016bdc:	df000017 	ldw	fp,0(sp)
 8016be0:	dec00204 	addi	sp,sp,8
 8016be4:	f800283a 	ret

08016be8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8016be8:	defff504 	addi	sp,sp,-44
 8016bec:	df000a15 	stw	fp,40(sp)
 8016bf0:	df000a04 	addi	fp,sp,40
 8016bf4:	e13ffc15 	stw	r4,-16(fp)
 8016bf8:	e17ffd15 	stw	r5,-12(fp)
 8016bfc:	e1bffe15 	stw	r6,-8(fp)
 8016c00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8016c04:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016c08:	d0a78817 	ldw	r2,-25056(gp)
  
  if (alt_ticks_per_second ())
 8016c0c:	10003c26 	beq	r2,zero,8016d00 <alt_alarm_start+0x118>
  {
    if (alarm)
 8016c10:	e0bffc17 	ldw	r2,-16(fp)
 8016c14:	10003826 	beq	r2,zero,8016cf8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8016c18:	e0bffc17 	ldw	r2,-16(fp)
 8016c1c:	e0fffe17 	ldw	r3,-8(fp)
 8016c20:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8016c24:	e0bffc17 	ldw	r2,-16(fp)
 8016c28:	e0ffff17 	ldw	r3,-4(fp)
 8016c2c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016c30:	0005303a 	rdctl	r2,status
 8016c34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016c38:	e0fff917 	ldw	r3,-28(fp)
 8016c3c:	00bfff84 	movi	r2,-2
 8016c40:	1884703a 	and	r2,r3,r2
 8016c44:	1001703a 	wrctl	status,r2
  
  return context;
 8016c48:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8016c4c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8016c50:	d0a78917 	ldw	r2,-25052(gp)
      
      current_nticks = alt_nticks();
 8016c54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8016c58:	e0fffd17 	ldw	r3,-12(fp)
 8016c5c:	e0bff617 	ldw	r2,-40(fp)
 8016c60:	1885883a 	add	r2,r3,r2
 8016c64:	10c00044 	addi	r3,r2,1
 8016c68:	e0bffc17 	ldw	r2,-16(fp)
 8016c6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8016c70:	e0bffc17 	ldw	r2,-16(fp)
 8016c74:	10c00217 	ldw	r3,8(r2)
 8016c78:	e0bff617 	ldw	r2,-40(fp)
 8016c7c:	1880042e 	bgeu	r3,r2,8016c90 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8016c80:	e0bffc17 	ldw	r2,-16(fp)
 8016c84:	00c00044 	movi	r3,1
 8016c88:	10c00405 	stb	r3,16(r2)
 8016c8c:	00000206 	br	8016c98 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8016c90:	e0bffc17 	ldw	r2,-16(fp)
 8016c94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8016c98:	e0bffc17 	ldw	r2,-16(fp)
 8016c9c:	d0e01204 	addi	r3,gp,-32696
 8016ca0:	e0fffa15 	stw	r3,-24(fp)
 8016ca4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016ca8:	e0bffb17 	ldw	r2,-20(fp)
 8016cac:	e0fffa17 	ldw	r3,-24(fp)
 8016cb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016cb4:	e0bffa17 	ldw	r2,-24(fp)
 8016cb8:	10c00017 	ldw	r3,0(r2)
 8016cbc:	e0bffb17 	ldw	r2,-20(fp)
 8016cc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8016cc4:	e0bffa17 	ldw	r2,-24(fp)
 8016cc8:	10800017 	ldw	r2,0(r2)
 8016ccc:	e0fffb17 	ldw	r3,-20(fp)
 8016cd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016cd4:	e0bffa17 	ldw	r2,-24(fp)
 8016cd8:	e0fffb17 	ldw	r3,-20(fp)
 8016cdc:	10c00015 	stw	r3,0(r2)
 8016ce0:	e0bff817 	ldw	r2,-32(fp)
 8016ce4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016ce8:	e0bff717 	ldw	r2,-36(fp)
 8016cec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8016cf0:	0005883a 	mov	r2,zero
 8016cf4:	00000306 	br	8016d04 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8016cf8:	00bffa84 	movi	r2,-22
 8016cfc:	00000106 	br	8016d04 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8016d00:	00bfde84 	movi	r2,-134
  }
}
 8016d04:	e037883a 	mov	sp,fp
 8016d08:	df000017 	ldw	fp,0(sp)
 8016d0c:	dec00104 	addi	sp,sp,4
 8016d10:	f800283a 	ret

08016d14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8016d14:	defffa04 	addi	sp,sp,-24
 8016d18:	dfc00515 	stw	ra,20(sp)
 8016d1c:	df000415 	stw	fp,16(sp)
 8016d20:	df000404 	addi	fp,sp,16
 8016d24:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8016d28:	00800244 	movi	r2,9
 8016d2c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8016d30:	014003f4 	movhi	r5,15
 8016d34:	29509004 	addi	r5,r5,16960
 8016d38:	e13ffd17 	ldw	r4,-12(fp)
 8016d3c:	8004a540 	call	8004a54 <__mulsi3>
 8016d40:	100b883a 	mov	r5,r2
 8016d44:	0100bef4 	movhi	r4,763
 8016d48:	213c2004 	addi	r4,r4,-3968
 8016d4c:	80049980 	call	8004998 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8016d50:	100b883a 	mov	r5,r2
 8016d54:	01200034 	movhi	r4,32768
 8016d58:	213fffc4 	addi	r4,r4,-1
 8016d5c:	80049980 	call	8004998 <__udivsi3>
 8016d60:	100b883a 	mov	r5,r2
 8016d64:	e13fff17 	ldw	r4,-4(fp)
 8016d68:	80049980 	call	8004998 <__udivsi3>
 8016d6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8016d70:	e0bffe17 	ldw	r2,-8(fp)
 8016d74:	10002a26 	beq	r2,zero,8016e20 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8016d78:	e03ffc15 	stw	zero,-16(fp)
 8016d7c:	00001706 	br	8016ddc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8016d80:	00a00034 	movhi	r2,32768
 8016d84:	10bfffc4 	addi	r2,r2,-1
 8016d88:	10bfffc4 	addi	r2,r2,-1
 8016d8c:	103ffe1e 	bne	r2,zero,8016d88 <__alt_data_end+0xfc016d88>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8016d90:	014003f4 	movhi	r5,15
 8016d94:	29509004 	addi	r5,r5,16960
 8016d98:	e13ffd17 	ldw	r4,-12(fp)
 8016d9c:	8004a540 	call	8004a54 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8016da0:	100b883a 	mov	r5,r2
 8016da4:	0100bef4 	movhi	r4,763
 8016da8:	213c2004 	addi	r4,r4,-3968
 8016dac:	80049980 	call	8004998 <__udivsi3>
 8016db0:	100b883a 	mov	r5,r2
 8016db4:	01200034 	movhi	r4,32768
 8016db8:	213fffc4 	addi	r4,r4,-1
 8016dbc:	80049980 	call	8004998 <__udivsi3>
 8016dc0:	1007883a 	mov	r3,r2
 8016dc4:	e0bfff17 	ldw	r2,-4(fp)
 8016dc8:	10c5c83a 	sub	r2,r2,r3
 8016dcc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8016dd0:	e0bffc17 	ldw	r2,-16(fp)
 8016dd4:	10800044 	addi	r2,r2,1
 8016dd8:	e0bffc15 	stw	r2,-16(fp)
 8016ddc:	e0fffc17 	ldw	r3,-16(fp)
 8016de0:	e0bffe17 	ldw	r2,-8(fp)
 8016de4:	18bfe616 	blt	r3,r2,8016d80 <__alt_data_end+0xfc016d80>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8016de8:	014003f4 	movhi	r5,15
 8016dec:	29509004 	addi	r5,r5,16960
 8016df0:	e13ffd17 	ldw	r4,-12(fp)
 8016df4:	8004a540 	call	8004a54 <__mulsi3>
 8016df8:	100b883a 	mov	r5,r2
 8016dfc:	0100bef4 	movhi	r4,763
 8016e00:	213c2004 	addi	r4,r4,-3968
 8016e04:	80049980 	call	8004998 <__udivsi3>
 8016e08:	e17fff17 	ldw	r5,-4(fp)
 8016e0c:	1009883a 	mov	r4,r2
 8016e10:	8004a540 	call	8004a54 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016e14:	10bfffc4 	addi	r2,r2,-1
 8016e18:	103ffe1e 	bne	r2,zero,8016e14 <__alt_data_end+0xfc016e14>
 8016e1c:	00000d06 	br	8016e54 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8016e20:	014003f4 	movhi	r5,15
 8016e24:	29509004 	addi	r5,r5,16960
 8016e28:	e13ffd17 	ldw	r4,-12(fp)
 8016e2c:	8004a540 	call	8004a54 <__mulsi3>
 8016e30:	100b883a 	mov	r5,r2
 8016e34:	0100bef4 	movhi	r4,763
 8016e38:	213c2004 	addi	r4,r4,-3968
 8016e3c:	80049980 	call	8004998 <__udivsi3>
 8016e40:	e17fff17 	ldw	r5,-4(fp)
 8016e44:	1009883a 	mov	r4,r2
 8016e48:	8004a540 	call	8004a54 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016e4c:	10bfffc4 	addi	r2,r2,-1
 8016e50:	00bffe16 	blt	zero,r2,8016e4c <__alt_data_end+0xfc016e4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8016e54:	0005883a 	mov	r2,zero
}
 8016e58:	e037883a 	mov	sp,fp
 8016e5c:	dfc00117 	ldw	ra,4(sp)
 8016e60:	df000017 	ldw	fp,0(sp)
 8016e64:	dec00204 	addi	sp,sp,8
 8016e68:	f800283a 	ret

08016e6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8016e6c:	deffff04 	addi	sp,sp,-4
 8016e70:	df000015 	stw	fp,0(sp)
 8016e74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8016e78:	0001883a 	nop
 8016e7c:	e037883a 	mov	sp,fp
 8016e80:	df000017 	ldw	fp,0(sp)
 8016e84:	dec00104 	addi	sp,sp,4
 8016e88:	f800283a 	ret

08016e8c <alt_get_errno>:
 8016e8c:	defffe04 	addi	sp,sp,-8
 8016e90:	dfc00115 	stw	ra,4(sp)
 8016e94:	df000015 	stw	fp,0(sp)
 8016e98:	d839883a 	mov	fp,sp
 8016e9c:	d0a01017 	ldw	r2,-32704(gp)
 8016ea0:	10000326 	beq	r2,zero,8016eb0 <alt_get_errno+0x24>
 8016ea4:	d0a01017 	ldw	r2,-32704(gp)
 8016ea8:	103ee83a 	callr	r2
 8016eac:	00000106 	br	8016eb4 <alt_get_errno+0x28>
 8016eb0:	d0a78404 	addi	r2,gp,-25072
 8016eb4:	e037883a 	mov	sp,fp
 8016eb8:	dfc00117 	ldw	ra,4(sp)
 8016ebc:	df000017 	ldw	fp,0(sp)
 8016ec0:	dec00204 	addi	sp,sp,8
 8016ec4:	f800283a 	ret

08016ec8 <alt_dev_llist_insert>:
 8016ec8:	defffa04 	addi	sp,sp,-24
 8016ecc:	dfc00515 	stw	ra,20(sp)
 8016ed0:	df000415 	stw	fp,16(sp)
 8016ed4:	df000404 	addi	fp,sp,16
 8016ed8:	e13ffe15 	stw	r4,-8(fp)
 8016edc:	e17fff15 	stw	r5,-4(fp)
 8016ee0:	e0bffe17 	ldw	r2,-8(fp)
 8016ee4:	10000326 	beq	r2,zero,8016ef4 <alt_dev_llist_insert+0x2c>
 8016ee8:	e0bffe17 	ldw	r2,-8(fp)
 8016eec:	10800217 	ldw	r2,8(r2)
 8016ef0:	1000061e 	bne	r2,zero,8016f0c <alt_dev_llist_insert+0x44>
 8016ef4:	8016e8c0 	call	8016e8c <alt_get_errno>
 8016ef8:	1007883a 	mov	r3,r2
 8016efc:	00800584 	movi	r2,22
 8016f00:	18800015 	stw	r2,0(r3)
 8016f04:	00bffa84 	movi	r2,-22
 8016f08:	00001306 	br	8016f58 <alt_dev_llist_insert+0x90>
 8016f0c:	e0bffe17 	ldw	r2,-8(fp)
 8016f10:	e0ffff17 	ldw	r3,-4(fp)
 8016f14:	e0fffc15 	stw	r3,-16(fp)
 8016f18:	e0bffd15 	stw	r2,-12(fp)
 8016f1c:	e0bffd17 	ldw	r2,-12(fp)
 8016f20:	e0fffc17 	ldw	r3,-16(fp)
 8016f24:	10c00115 	stw	r3,4(r2)
 8016f28:	e0bffc17 	ldw	r2,-16(fp)
 8016f2c:	10c00017 	ldw	r3,0(r2)
 8016f30:	e0bffd17 	ldw	r2,-12(fp)
 8016f34:	10c00015 	stw	r3,0(r2)
 8016f38:	e0bffc17 	ldw	r2,-16(fp)
 8016f3c:	10800017 	ldw	r2,0(r2)
 8016f40:	e0fffd17 	ldw	r3,-12(fp)
 8016f44:	10c00115 	stw	r3,4(r2)
 8016f48:	e0bffc17 	ldw	r2,-16(fp)
 8016f4c:	e0fffd17 	ldw	r3,-12(fp)
 8016f50:	10c00015 	stw	r3,0(r2)
 8016f54:	0005883a 	mov	r2,zero
 8016f58:	e037883a 	mov	sp,fp
 8016f5c:	dfc00117 	ldw	ra,4(sp)
 8016f60:	df000017 	ldw	fp,0(sp)
 8016f64:	dec00204 	addi	sp,sp,8
 8016f68:	f800283a 	ret

08016f6c <_do_ctors>:
 8016f6c:	defffd04 	addi	sp,sp,-12
 8016f70:	dfc00215 	stw	ra,8(sp)
 8016f74:	df000115 	stw	fp,4(sp)
 8016f78:	df000104 	addi	fp,sp,4
 8016f7c:	00820074 	movhi	r2,2049
 8016f80:	109f5f04 	addi	r2,r2,32124
 8016f84:	e0bfff15 	stw	r2,-4(fp)
 8016f88:	00000606 	br	8016fa4 <_do_ctors+0x38>
 8016f8c:	e0bfff17 	ldw	r2,-4(fp)
 8016f90:	10800017 	ldw	r2,0(r2)
 8016f94:	103ee83a 	callr	r2
 8016f98:	e0bfff17 	ldw	r2,-4(fp)
 8016f9c:	10bfff04 	addi	r2,r2,-4
 8016fa0:	e0bfff15 	stw	r2,-4(fp)
 8016fa4:	e0ffff17 	ldw	r3,-4(fp)
 8016fa8:	00820074 	movhi	r2,2049
 8016fac:	109f6004 	addi	r2,r2,32128
 8016fb0:	18bff62e 	bgeu	r3,r2,8016f8c <__alt_data_end+0xfc016f8c>
 8016fb4:	0001883a 	nop
 8016fb8:	e037883a 	mov	sp,fp
 8016fbc:	dfc00117 	ldw	ra,4(sp)
 8016fc0:	df000017 	ldw	fp,0(sp)
 8016fc4:	dec00204 	addi	sp,sp,8
 8016fc8:	f800283a 	ret

08016fcc <_do_dtors>:
 8016fcc:	defffd04 	addi	sp,sp,-12
 8016fd0:	dfc00215 	stw	ra,8(sp)
 8016fd4:	df000115 	stw	fp,4(sp)
 8016fd8:	df000104 	addi	fp,sp,4
 8016fdc:	00820074 	movhi	r2,2049
 8016fe0:	109f5f04 	addi	r2,r2,32124
 8016fe4:	e0bfff15 	stw	r2,-4(fp)
 8016fe8:	00000606 	br	8017004 <_do_dtors+0x38>
 8016fec:	e0bfff17 	ldw	r2,-4(fp)
 8016ff0:	10800017 	ldw	r2,0(r2)
 8016ff4:	103ee83a 	callr	r2
 8016ff8:	e0bfff17 	ldw	r2,-4(fp)
 8016ffc:	10bfff04 	addi	r2,r2,-4
 8017000:	e0bfff15 	stw	r2,-4(fp)
 8017004:	e0ffff17 	ldw	r3,-4(fp)
 8017008:	00820074 	movhi	r2,2049
 801700c:	109f6004 	addi	r2,r2,32128
 8017010:	18bff62e 	bgeu	r3,r2,8016fec <__alt_data_end+0xfc016fec>
 8017014:	0001883a 	nop
 8017018:	e037883a 	mov	sp,fp
 801701c:	dfc00117 	ldw	ra,4(sp)
 8017020:	df000017 	ldw	fp,0(sp)
 8017024:	dec00204 	addi	sp,sp,8
 8017028:	f800283a 	ret

0801702c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801702c:	deffff04 	addi	sp,sp,-4
 8017030:	df000015 	stw	fp,0(sp)
 8017034:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8017038:	0001883a 	nop
 801703c:	e037883a 	mov	sp,fp
 8017040:	df000017 	ldw	fp,0(sp)
 8017044:	dec00104 	addi	sp,sp,4
 8017048:	f800283a 	ret

0801704c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801704c:	defff904 	addi	sp,sp,-28
 8017050:	dfc00615 	stw	ra,24(sp)
 8017054:	df000515 	stw	fp,20(sp)
 8017058:	df000504 	addi	fp,sp,20
 801705c:	e13ffc15 	stw	r4,-16(fp)
 8017060:	e17ffd15 	stw	r5,-12(fp)
 8017064:	e1bffe15 	stw	r6,-8(fp)
 8017068:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801706c:	e0800217 	ldw	r2,8(fp)
 8017070:	d8800015 	stw	r2,0(sp)
 8017074:	e1ffff17 	ldw	r7,-4(fp)
 8017078:	e1bffe17 	ldw	r6,-8(fp)
 801707c:	e17ffd17 	ldw	r5,-12(fp)
 8017080:	e13ffc17 	ldw	r4,-16(fp)
 8017084:	80171fc0 	call	80171fc <alt_iic_isr_register>
}  
 8017088:	e037883a 	mov	sp,fp
 801708c:	dfc00117 	ldw	ra,4(sp)
 8017090:	df000017 	ldw	fp,0(sp)
 8017094:	dec00204 	addi	sp,sp,8
 8017098:	f800283a 	ret

0801709c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801709c:	defff904 	addi	sp,sp,-28
 80170a0:	df000615 	stw	fp,24(sp)
 80170a4:	df000604 	addi	fp,sp,24
 80170a8:	e13ffe15 	stw	r4,-8(fp)
 80170ac:	e17fff15 	stw	r5,-4(fp)
 80170b0:	e0bfff17 	ldw	r2,-4(fp)
 80170b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80170b8:	0005303a 	rdctl	r2,status
 80170bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80170c0:	e0fffb17 	ldw	r3,-20(fp)
 80170c4:	00bfff84 	movi	r2,-2
 80170c8:	1884703a 	and	r2,r3,r2
 80170cc:	1001703a 	wrctl	status,r2
  
  return context;
 80170d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80170d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80170d8:	00c00044 	movi	r3,1
 80170dc:	e0bffa17 	ldw	r2,-24(fp)
 80170e0:	1884983a 	sll	r2,r3,r2
 80170e4:	1007883a 	mov	r3,r2
 80170e8:	d0a78a17 	ldw	r2,-25048(gp)
 80170ec:	1884b03a 	or	r2,r3,r2
 80170f0:	d0a78a15 	stw	r2,-25048(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80170f4:	d0a78a17 	ldw	r2,-25048(gp)
 80170f8:	100170fa 	wrctl	ienable,r2
 80170fc:	e0bffc17 	ldw	r2,-16(fp)
 8017100:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017104:	e0bffd17 	ldw	r2,-12(fp)
 8017108:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801710c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8017110:	0001883a 	nop
}
 8017114:	e037883a 	mov	sp,fp
 8017118:	df000017 	ldw	fp,0(sp)
 801711c:	dec00104 	addi	sp,sp,4
 8017120:	f800283a 	ret

08017124 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8017124:	defff904 	addi	sp,sp,-28
 8017128:	df000615 	stw	fp,24(sp)
 801712c:	df000604 	addi	fp,sp,24
 8017130:	e13ffe15 	stw	r4,-8(fp)
 8017134:	e17fff15 	stw	r5,-4(fp)
 8017138:	e0bfff17 	ldw	r2,-4(fp)
 801713c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017140:	0005303a 	rdctl	r2,status
 8017144:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017148:	e0fffb17 	ldw	r3,-20(fp)
 801714c:	00bfff84 	movi	r2,-2
 8017150:	1884703a 	and	r2,r3,r2
 8017154:	1001703a 	wrctl	status,r2
  
  return context;
 8017158:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801715c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8017160:	00c00044 	movi	r3,1
 8017164:	e0bffa17 	ldw	r2,-24(fp)
 8017168:	1884983a 	sll	r2,r3,r2
 801716c:	0084303a 	nor	r2,zero,r2
 8017170:	1007883a 	mov	r3,r2
 8017174:	d0a78a17 	ldw	r2,-25048(gp)
 8017178:	1884703a 	and	r2,r3,r2
 801717c:	d0a78a15 	stw	r2,-25048(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017180:	d0a78a17 	ldw	r2,-25048(gp)
 8017184:	100170fa 	wrctl	ienable,r2
 8017188:	e0bffc17 	ldw	r2,-16(fp)
 801718c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017190:	e0bffd17 	ldw	r2,-12(fp)
 8017194:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017198:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801719c:	0001883a 	nop
}
 80171a0:	e037883a 	mov	sp,fp
 80171a4:	df000017 	ldw	fp,0(sp)
 80171a8:	dec00104 	addi	sp,sp,4
 80171ac:	f800283a 	ret

080171b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80171b0:	defffc04 	addi	sp,sp,-16
 80171b4:	df000315 	stw	fp,12(sp)
 80171b8:	df000304 	addi	fp,sp,12
 80171bc:	e13ffe15 	stw	r4,-8(fp)
 80171c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80171c4:	000530fa 	rdctl	r2,ienable
 80171c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80171cc:	00c00044 	movi	r3,1
 80171d0:	e0bfff17 	ldw	r2,-4(fp)
 80171d4:	1884983a 	sll	r2,r3,r2
 80171d8:	1007883a 	mov	r3,r2
 80171dc:	e0bffd17 	ldw	r2,-12(fp)
 80171e0:	1884703a 	and	r2,r3,r2
 80171e4:	1004c03a 	cmpne	r2,r2,zero
 80171e8:	10803fcc 	andi	r2,r2,255
}
 80171ec:	e037883a 	mov	sp,fp
 80171f0:	df000017 	ldw	fp,0(sp)
 80171f4:	dec00104 	addi	sp,sp,4
 80171f8:	f800283a 	ret

080171fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80171fc:	defff504 	addi	sp,sp,-44
 8017200:	dfc00a15 	stw	ra,40(sp)
 8017204:	df000915 	stw	fp,36(sp)
 8017208:	df000904 	addi	fp,sp,36
 801720c:	e13ffc15 	stw	r4,-16(fp)
 8017210:	e17ffd15 	stw	r5,-12(fp)
 8017214:	e1bffe15 	stw	r6,-8(fp)
 8017218:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801721c:	00bffa84 	movi	r2,-22
 8017220:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8017224:	e0bffd17 	ldw	r2,-12(fp)
 8017228:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801722c:	e0bff817 	ldw	r2,-32(fp)
 8017230:	10800808 	cmpgei	r2,r2,32
 8017234:	1000271e 	bne	r2,zero,80172d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017238:	0005303a 	rdctl	r2,status
 801723c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017240:	e0fffb17 	ldw	r3,-20(fp)
 8017244:	00bfff84 	movi	r2,-2
 8017248:	1884703a 	and	r2,r3,r2
 801724c:	1001703a 	wrctl	status,r2
  
  return context;
 8017250:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8017254:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8017258:	008200b4 	movhi	r2,2050
 801725c:	10b17c04 	addi	r2,r2,-14864
 8017260:	e0fff817 	ldw	r3,-32(fp)
 8017264:	180690fa 	slli	r3,r3,3
 8017268:	10c5883a 	add	r2,r2,r3
 801726c:	e0fffe17 	ldw	r3,-8(fp)
 8017270:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8017274:	008200b4 	movhi	r2,2050
 8017278:	10b17c04 	addi	r2,r2,-14864
 801727c:	e0fff817 	ldw	r3,-32(fp)
 8017280:	180690fa 	slli	r3,r3,3
 8017284:	10c5883a 	add	r2,r2,r3
 8017288:	10800104 	addi	r2,r2,4
 801728c:	e0ffff17 	ldw	r3,-4(fp)
 8017290:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8017294:	e0bffe17 	ldw	r2,-8(fp)
 8017298:	10000526 	beq	r2,zero,80172b0 <alt_iic_isr_register+0xb4>
 801729c:	e0bff817 	ldw	r2,-32(fp)
 80172a0:	100b883a 	mov	r5,r2
 80172a4:	e13ffc17 	ldw	r4,-16(fp)
 80172a8:	801709c0 	call	801709c <alt_ic_irq_enable>
 80172ac:	00000406 	br	80172c0 <alt_iic_isr_register+0xc4>
 80172b0:	e0bff817 	ldw	r2,-32(fp)
 80172b4:	100b883a 	mov	r5,r2
 80172b8:	e13ffc17 	ldw	r4,-16(fp)
 80172bc:	80171240 	call	8017124 <alt_ic_irq_disable>
 80172c0:	e0bff715 	stw	r2,-36(fp)
 80172c4:	e0bffa17 	ldw	r2,-24(fp)
 80172c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80172cc:	e0bff917 	ldw	r2,-28(fp)
 80172d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80172d4:	e0bff717 	ldw	r2,-36(fp)
}
 80172d8:	e037883a 	mov	sp,fp
 80172dc:	dfc00117 	ldw	ra,4(sp)
 80172e0:	df000017 	ldw	fp,0(sp)
 80172e4:	dec00204 	addi	sp,sp,8
 80172e8:	f800283a 	ret

080172ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80172ec:	defff804 	addi	sp,sp,-32
 80172f0:	dfc00715 	stw	ra,28(sp)
 80172f4:	df000615 	stw	fp,24(sp)
 80172f8:	dc000515 	stw	r16,20(sp)
 80172fc:	df000604 	addi	fp,sp,24
 8017300:	e13ffb15 	stw	r4,-20(fp)
 8017304:	e17ffc15 	stw	r5,-16(fp)
 8017308:	e1bffd15 	stw	r6,-12(fp)
 801730c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8017310:	e1bffe17 	ldw	r6,-8(fp)
 8017314:	e17ffd17 	ldw	r5,-12(fp)
 8017318:	e13ffc17 	ldw	r4,-16(fp)
 801731c:	80175740 	call	8017574 <open>
 8017320:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8017324:	e0bffa17 	ldw	r2,-24(fp)
 8017328:	10002216 	blt	r2,zero,80173b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801732c:	040200b4 	movhi	r16,2050
 8017330:	84238204 	addi	r16,r16,-29176
 8017334:	e0bffa17 	ldw	r2,-24(fp)
 8017338:	01400304 	movi	r5,12
 801733c:	1009883a 	mov	r4,r2
 8017340:	8004a540 	call	8004a54 <__mulsi3>
 8017344:	8085883a 	add	r2,r16,r2
 8017348:	10c00017 	ldw	r3,0(r2)
 801734c:	e0bffb17 	ldw	r2,-20(fp)
 8017350:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8017354:	040200b4 	movhi	r16,2050
 8017358:	84238204 	addi	r16,r16,-29176
 801735c:	e0bffa17 	ldw	r2,-24(fp)
 8017360:	01400304 	movi	r5,12
 8017364:	1009883a 	mov	r4,r2
 8017368:	8004a540 	call	8004a54 <__mulsi3>
 801736c:	8085883a 	add	r2,r16,r2
 8017370:	10800104 	addi	r2,r2,4
 8017374:	10c00017 	ldw	r3,0(r2)
 8017378:	e0bffb17 	ldw	r2,-20(fp)
 801737c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8017380:	040200b4 	movhi	r16,2050
 8017384:	84238204 	addi	r16,r16,-29176
 8017388:	e0bffa17 	ldw	r2,-24(fp)
 801738c:	01400304 	movi	r5,12
 8017390:	1009883a 	mov	r4,r2
 8017394:	8004a540 	call	8004a54 <__mulsi3>
 8017398:	8085883a 	add	r2,r16,r2
 801739c:	10800204 	addi	r2,r2,8
 80173a0:	10c00017 	ldw	r3,0(r2)
 80173a4:	e0bffb17 	ldw	r2,-20(fp)
 80173a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80173ac:	e13ffa17 	ldw	r4,-24(fp)
 80173b0:	801597c0 	call	801597c <alt_release_fd>
  }
} 
 80173b4:	0001883a 	nop
 80173b8:	e6ffff04 	addi	sp,fp,-4
 80173bc:	dfc00217 	ldw	ra,8(sp)
 80173c0:	df000117 	ldw	fp,4(sp)
 80173c4:	dc000017 	ldw	r16,0(sp)
 80173c8:	dec00304 	addi	sp,sp,12
 80173cc:	f800283a 	ret

080173d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80173d0:	defffb04 	addi	sp,sp,-20
 80173d4:	dfc00415 	stw	ra,16(sp)
 80173d8:	df000315 	stw	fp,12(sp)
 80173dc:	df000304 	addi	fp,sp,12
 80173e0:	e13ffd15 	stw	r4,-12(fp)
 80173e4:	e17ffe15 	stw	r5,-8(fp)
 80173e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80173ec:	01c07fc4 	movi	r7,511
 80173f0:	01800044 	movi	r6,1
 80173f4:	e17ffd17 	ldw	r5,-12(fp)
 80173f8:	010200b4 	movhi	r4,2050
 80173fc:	21238504 	addi	r4,r4,-29164
 8017400:	80172ec0 	call	80172ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8017404:	01c07fc4 	movi	r7,511
 8017408:	000d883a 	mov	r6,zero
 801740c:	e17ffe17 	ldw	r5,-8(fp)
 8017410:	010200b4 	movhi	r4,2050
 8017414:	21238204 	addi	r4,r4,-29176
 8017418:	80172ec0 	call	80172ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801741c:	01c07fc4 	movi	r7,511
 8017420:	01800044 	movi	r6,1
 8017424:	e17fff17 	ldw	r5,-4(fp)
 8017428:	010200b4 	movhi	r4,2050
 801742c:	21238804 	addi	r4,r4,-29152
 8017430:	80172ec0 	call	80172ec <alt_open_fd>
}  
 8017434:	0001883a 	nop
 8017438:	e037883a 	mov	sp,fp
 801743c:	dfc00117 	ldw	ra,4(sp)
 8017440:	df000017 	ldw	fp,0(sp)
 8017444:	dec00204 	addi	sp,sp,8
 8017448:	f800283a 	ret

0801744c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801744c:	defffe04 	addi	sp,sp,-8
 8017450:	dfc00115 	stw	ra,4(sp)
 8017454:	df000015 	stw	fp,0(sp)
 8017458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801745c:	d0a01017 	ldw	r2,-32704(gp)
 8017460:	10000326 	beq	r2,zero,8017470 <alt_get_errno+0x24>
 8017464:	d0a01017 	ldw	r2,-32704(gp)
 8017468:	103ee83a 	callr	r2
 801746c:	00000106 	br	8017474 <alt_get_errno+0x28>
 8017470:	d0a78404 	addi	r2,gp,-25072
}
 8017474:	e037883a 	mov	sp,fp
 8017478:	dfc00117 	ldw	ra,4(sp)
 801747c:	df000017 	ldw	fp,0(sp)
 8017480:	dec00204 	addi	sp,sp,8
 8017484:	f800283a 	ret

08017488 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8017488:	defffb04 	addi	sp,sp,-20
 801748c:	dfc00415 	stw	ra,16(sp)
 8017490:	df000315 	stw	fp,12(sp)
 8017494:	dc000215 	stw	r16,8(sp)
 8017498:	df000304 	addi	fp,sp,12
 801749c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80174a0:	e0bffe17 	ldw	r2,-8(fp)
 80174a4:	10800217 	ldw	r2,8(r2)
 80174a8:	10d00034 	orhi	r3,r2,16384
 80174ac:	e0bffe17 	ldw	r2,-8(fp)
 80174b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80174b4:	e03ffd15 	stw	zero,-12(fp)
 80174b8:	00002306 	br	8017548 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80174bc:	040200b4 	movhi	r16,2050
 80174c0:	84238204 	addi	r16,r16,-29176
 80174c4:	e0bffd17 	ldw	r2,-12(fp)
 80174c8:	01400304 	movi	r5,12
 80174cc:	1009883a 	mov	r4,r2
 80174d0:	8004a540 	call	8004a54 <__mulsi3>
 80174d4:	8085883a 	add	r2,r16,r2
 80174d8:	10c00017 	ldw	r3,0(r2)
 80174dc:	e0bffe17 	ldw	r2,-8(fp)
 80174e0:	10800017 	ldw	r2,0(r2)
 80174e4:	1880151e 	bne	r3,r2,801753c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80174e8:	040200b4 	movhi	r16,2050
 80174ec:	84238204 	addi	r16,r16,-29176
 80174f0:	e0bffd17 	ldw	r2,-12(fp)
 80174f4:	01400304 	movi	r5,12
 80174f8:	1009883a 	mov	r4,r2
 80174fc:	8004a540 	call	8004a54 <__mulsi3>
 8017500:	8085883a 	add	r2,r16,r2
 8017504:	10800204 	addi	r2,r2,8
 8017508:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801750c:	10000b0e 	bge	r2,zero,801753c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8017510:	01400304 	movi	r5,12
 8017514:	e13ffd17 	ldw	r4,-12(fp)
 8017518:	8004a540 	call	8004a54 <__mulsi3>
 801751c:	1007883a 	mov	r3,r2
 8017520:	008200b4 	movhi	r2,2050
 8017524:	10a38204 	addi	r2,r2,-29176
 8017528:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801752c:	e0bffe17 	ldw	r2,-8(fp)
 8017530:	18800226 	beq	r3,r2,801753c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8017534:	00bffcc4 	movi	r2,-13
 8017538:	00000806 	br	801755c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801753c:	e0bffd17 	ldw	r2,-12(fp)
 8017540:	10800044 	addi	r2,r2,1
 8017544:	e0bffd15 	stw	r2,-12(fp)
 8017548:	d0a00f17 	ldw	r2,-32708(gp)
 801754c:	1007883a 	mov	r3,r2
 8017550:	e0bffd17 	ldw	r2,-12(fp)
 8017554:	18bfd92e 	bgeu	r3,r2,80174bc <__alt_data_end+0xfc0174bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8017558:	0005883a 	mov	r2,zero
}
 801755c:	e6ffff04 	addi	sp,fp,-4
 8017560:	dfc00217 	ldw	ra,8(sp)
 8017564:	df000117 	ldw	fp,4(sp)
 8017568:	dc000017 	ldw	r16,0(sp)
 801756c:	dec00304 	addi	sp,sp,12
 8017570:	f800283a 	ret

08017574 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8017574:	defff604 	addi	sp,sp,-40
 8017578:	dfc00915 	stw	ra,36(sp)
 801757c:	df000815 	stw	fp,32(sp)
 8017580:	df000804 	addi	fp,sp,32
 8017584:	e13ffd15 	stw	r4,-12(fp)
 8017588:	e17ffe15 	stw	r5,-8(fp)
 801758c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8017590:	00bfffc4 	movi	r2,-1
 8017594:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8017598:	00bffb44 	movi	r2,-19
 801759c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80175a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80175a4:	d1600d04 	addi	r5,gp,-32716
 80175a8:	e13ffd17 	ldw	r4,-12(fp)
 80175ac:	80176f40 	call	80176f4 <alt_find_dev>
 80175b0:	e0bff815 	stw	r2,-32(fp)
 80175b4:	e0bff817 	ldw	r2,-32(fp)
 80175b8:	1000051e 	bne	r2,zero,80175d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80175bc:	e13ffd17 	ldw	r4,-12(fp)
 80175c0:	80177840 	call	8017784 <alt_find_file>
 80175c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80175c8:	00800044 	movi	r2,1
 80175cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80175d0:	e0bff817 	ldw	r2,-32(fp)
 80175d4:	10002b26 	beq	r2,zero,8017684 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80175d8:	e13ff817 	ldw	r4,-32(fp)
 80175dc:	801788c0 	call	801788c <alt_get_fd>
 80175e0:	e0bff915 	stw	r2,-28(fp)
 80175e4:	e0bff917 	ldw	r2,-28(fp)
 80175e8:	1000030e 	bge	r2,zero,80175f8 <open+0x84>
    {
      status = index;
 80175ec:	e0bff917 	ldw	r2,-28(fp)
 80175f0:	e0bffa15 	stw	r2,-24(fp)
 80175f4:	00002506 	br	801768c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80175f8:	01400304 	movi	r5,12
 80175fc:	e13ff917 	ldw	r4,-28(fp)
 8017600:	8004a540 	call	8004a54 <__mulsi3>
 8017604:	1007883a 	mov	r3,r2
 8017608:	008200b4 	movhi	r2,2050
 801760c:	10a38204 	addi	r2,r2,-29176
 8017610:	1885883a 	add	r2,r3,r2
 8017614:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8017618:	e0fffe17 	ldw	r3,-8(fp)
 801761c:	00900034 	movhi	r2,16384
 8017620:	10bfffc4 	addi	r2,r2,-1
 8017624:	1886703a 	and	r3,r3,r2
 8017628:	e0bffc17 	ldw	r2,-16(fp)
 801762c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8017630:	e0bffb17 	ldw	r2,-20(fp)
 8017634:	1000051e 	bne	r2,zero,801764c <open+0xd8>
 8017638:	e13ffc17 	ldw	r4,-16(fp)
 801763c:	80174880 	call	8017488 <alt_file_locked>
 8017640:	e0bffa15 	stw	r2,-24(fp)
 8017644:	e0bffa17 	ldw	r2,-24(fp)
 8017648:	10001016 	blt	r2,zero,801768c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801764c:	e0bff817 	ldw	r2,-32(fp)
 8017650:	10800317 	ldw	r2,12(r2)
 8017654:	10000826 	beq	r2,zero,8017678 <open+0x104>
 8017658:	e0bff817 	ldw	r2,-32(fp)
 801765c:	10800317 	ldw	r2,12(r2)
 8017660:	e1ffff17 	ldw	r7,-4(fp)
 8017664:	e1bffe17 	ldw	r6,-8(fp)
 8017668:	e17ffd17 	ldw	r5,-12(fp)
 801766c:	e13ffc17 	ldw	r4,-16(fp)
 8017670:	103ee83a 	callr	r2
 8017674:	00000106 	br	801767c <open+0x108>
 8017678:	0005883a 	mov	r2,zero
 801767c:	e0bffa15 	stw	r2,-24(fp)
 8017680:	00000206 	br	801768c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8017684:	00bffb44 	movi	r2,-19
 8017688:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801768c:	e0bffa17 	ldw	r2,-24(fp)
 8017690:	1000090e 	bge	r2,zero,80176b8 <open+0x144>
  {
    alt_release_fd (index);  
 8017694:	e13ff917 	ldw	r4,-28(fp)
 8017698:	801597c0 	call	801597c <alt_release_fd>
    ALT_ERRNO = -status;
 801769c:	801744c0 	call	801744c <alt_get_errno>
 80176a0:	1007883a 	mov	r3,r2
 80176a4:	e0bffa17 	ldw	r2,-24(fp)
 80176a8:	0085c83a 	sub	r2,zero,r2
 80176ac:	18800015 	stw	r2,0(r3)
    return -1;
 80176b0:	00bfffc4 	movi	r2,-1
 80176b4:	00000106 	br	80176bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80176b8:	e0bff917 	ldw	r2,-28(fp)
}
 80176bc:	e037883a 	mov	sp,fp
 80176c0:	dfc00117 	ldw	ra,4(sp)
 80176c4:	df000017 	ldw	fp,0(sp)
 80176c8:	dec00204 	addi	sp,sp,8
 80176cc:	f800283a 	ret

080176d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80176d0:	deffff04 	addi	sp,sp,-4
 80176d4:	df000015 	stw	fp,0(sp)
 80176d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80176dc:	000170fa 	wrctl	ienable,zero
}
 80176e0:	0001883a 	nop
 80176e4:	e037883a 	mov	sp,fp
 80176e8:	df000017 	ldw	fp,0(sp)
 80176ec:	dec00104 	addi	sp,sp,4
 80176f0:	f800283a 	ret

080176f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80176f4:	defffa04 	addi	sp,sp,-24
 80176f8:	dfc00515 	stw	ra,20(sp)
 80176fc:	df000415 	stw	fp,16(sp)
 8017700:	df000404 	addi	fp,sp,16
 8017704:	e13ffe15 	stw	r4,-8(fp)
 8017708:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801770c:	e0bfff17 	ldw	r2,-4(fp)
 8017710:	10800017 	ldw	r2,0(r2)
 8017714:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8017718:	e13ffe17 	ldw	r4,-8(fp)
 801771c:	8004cfc0 	call	8004cfc <strlen>
 8017720:	10800044 	addi	r2,r2,1
 8017724:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017728:	00000d06 	br	8017760 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801772c:	e0bffc17 	ldw	r2,-16(fp)
 8017730:	10800217 	ldw	r2,8(r2)
 8017734:	e0fffd17 	ldw	r3,-12(fp)
 8017738:	180d883a 	mov	r6,r3
 801773c:	e17ffe17 	ldw	r5,-8(fp)
 8017740:	1009883a 	mov	r4,r2
 8017744:	8017a380 	call	8017a38 <memcmp>
 8017748:	1000021e 	bne	r2,zero,8017754 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801774c:	e0bffc17 	ldw	r2,-16(fp)
 8017750:	00000706 	br	8017770 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8017754:	e0bffc17 	ldw	r2,-16(fp)
 8017758:	10800017 	ldw	r2,0(r2)
 801775c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017760:	e0fffc17 	ldw	r3,-16(fp)
 8017764:	e0bfff17 	ldw	r2,-4(fp)
 8017768:	18bff01e 	bne	r3,r2,801772c <__alt_data_end+0xfc01772c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801776c:	0005883a 	mov	r2,zero
}
 8017770:	e037883a 	mov	sp,fp
 8017774:	dfc00117 	ldw	ra,4(sp)
 8017778:	df000017 	ldw	fp,0(sp)
 801777c:	dec00204 	addi	sp,sp,8
 8017780:	f800283a 	ret

08017784 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8017784:	defffb04 	addi	sp,sp,-20
 8017788:	dfc00415 	stw	ra,16(sp)
 801778c:	df000315 	stw	fp,12(sp)
 8017790:	df000304 	addi	fp,sp,12
 8017794:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8017798:	d0a00b17 	ldw	r2,-32724(gp)
 801779c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80177a0:	00003106 	br	8017868 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80177a4:	e0bffd17 	ldw	r2,-12(fp)
 80177a8:	10800217 	ldw	r2,8(r2)
 80177ac:	1009883a 	mov	r4,r2
 80177b0:	8004cfc0 	call	8004cfc <strlen>
 80177b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80177b8:	e0bffd17 	ldw	r2,-12(fp)
 80177bc:	10c00217 	ldw	r3,8(r2)
 80177c0:	e0bffe17 	ldw	r2,-8(fp)
 80177c4:	10bfffc4 	addi	r2,r2,-1
 80177c8:	1885883a 	add	r2,r3,r2
 80177cc:	10800003 	ldbu	r2,0(r2)
 80177d0:	10803fcc 	andi	r2,r2,255
 80177d4:	1080201c 	xori	r2,r2,128
 80177d8:	10bfe004 	addi	r2,r2,-128
 80177dc:	10800bd8 	cmpnei	r2,r2,47
 80177e0:	1000031e 	bne	r2,zero,80177f0 <alt_find_file+0x6c>
    {
      len -= 1;
 80177e4:	e0bffe17 	ldw	r2,-8(fp)
 80177e8:	10bfffc4 	addi	r2,r2,-1
 80177ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80177f0:	e0bffe17 	ldw	r2,-8(fp)
 80177f4:	e0ffff17 	ldw	r3,-4(fp)
 80177f8:	1885883a 	add	r2,r3,r2
 80177fc:	10800003 	ldbu	r2,0(r2)
 8017800:	10803fcc 	andi	r2,r2,255
 8017804:	1080201c 	xori	r2,r2,128
 8017808:	10bfe004 	addi	r2,r2,-128
 801780c:	10800be0 	cmpeqi	r2,r2,47
 8017810:	1000081e 	bne	r2,zero,8017834 <alt_find_file+0xb0>
 8017814:	e0bffe17 	ldw	r2,-8(fp)
 8017818:	e0ffff17 	ldw	r3,-4(fp)
 801781c:	1885883a 	add	r2,r3,r2
 8017820:	10800003 	ldbu	r2,0(r2)
 8017824:	10803fcc 	andi	r2,r2,255
 8017828:	1080201c 	xori	r2,r2,128
 801782c:	10bfe004 	addi	r2,r2,-128
 8017830:	10000a1e 	bne	r2,zero,801785c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8017834:	e0bffd17 	ldw	r2,-12(fp)
 8017838:	10800217 	ldw	r2,8(r2)
 801783c:	e0fffe17 	ldw	r3,-8(fp)
 8017840:	180d883a 	mov	r6,r3
 8017844:	e17fff17 	ldw	r5,-4(fp)
 8017848:	1009883a 	mov	r4,r2
 801784c:	8017a380 	call	8017a38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8017850:	1000021e 	bne	r2,zero,801785c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8017854:	e0bffd17 	ldw	r2,-12(fp)
 8017858:	00000706 	br	8017878 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801785c:	e0bffd17 	ldw	r2,-12(fp)
 8017860:	10800017 	ldw	r2,0(r2)
 8017864:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017868:	e0fffd17 	ldw	r3,-12(fp)
 801786c:	d0a00b04 	addi	r2,gp,-32724
 8017870:	18bfcc1e 	bne	r3,r2,80177a4 <__alt_data_end+0xfc0177a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8017874:	0005883a 	mov	r2,zero
}
 8017878:	e037883a 	mov	sp,fp
 801787c:	dfc00117 	ldw	ra,4(sp)
 8017880:	df000017 	ldw	fp,0(sp)
 8017884:	dec00204 	addi	sp,sp,8
 8017888:	f800283a 	ret

0801788c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801788c:	defffa04 	addi	sp,sp,-24
 8017890:	dfc00515 	stw	ra,20(sp)
 8017894:	df000415 	stw	fp,16(sp)
 8017898:	dc000315 	stw	r16,12(sp)
 801789c:	df000404 	addi	fp,sp,16
 80178a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80178a4:	00bffa04 	movi	r2,-24
 80178a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80178ac:	e03ffc15 	stw	zero,-16(fp)
 80178b0:	00001d06 	br	8017928 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80178b4:	040200b4 	movhi	r16,2050
 80178b8:	84238204 	addi	r16,r16,-29176
 80178bc:	e0bffc17 	ldw	r2,-16(fp)
 80178c0:	01400304 	movi	r5,12
 80178c4:	1009883a 	mov	r4,r2
 80178c8:	8004a540 	call	8004a54 <__mulsi3>
 80178cc:	8085883a 	add	r2,r16,r2
 80178d0:	10800017 	ldw	r2,0(r2)
 80178d4:	1000111e 	bne	r2,zero,801791c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80178d8:	040200b4 	movhi	r16,2050
 80178dc:	84238204 	addi	r16,r16,-29176
 80178e0:	e0bffc17 	ldw	r2,-16(fp)
 80178e4:	01400304 	movi	r5,12
 80178e8:	1009883a 	mov	r4,r2
 80178ec:	8004a540 	call	8004a54 <__mulsi3>
 80178f0:	8085883a 	add	r2,r16,r2
 80178f4:	e0fffe17 	ldw	r3,-8(fp)
 80178f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80178fc:	d0e00f17 	ldw	r3,-32708(gp)
 8017900:	e0bffc17 	ldw	r2,-16(fp)
 8017904:	1880020e 	bge	r3,r2,8017910 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8017908:	e0bffc17 	ldw	r2,-16(fp)
 801790c:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 8017910:	e0bffc17 	ldw	r2,-16(fp)
 8017914:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8017918:	00000606 	br	8017934 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801791c:	e0bffc17 	ldw	r2,-16(fp)
 8017920:	10800044 	addi	r2,r2,1
 8017924:	e0bffc15 	stw	r2,-16(fp)
 8017928:	e0bffc17 	ldw	r2,-16(fp)
 801792c:	10800810 	cmplti	r2,r2,32
 8017930:	103fe01e 	bne	r2,zero,80178b4 <__alt_data_end+0xfc0178b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8017934:	e0bffd17 	ldw	r2,-12(fp)
}
 8017938:	e6ffff04 	addi	sp,fp,-4
 801793c:	dfc00217 	ldw	ra,8(sp)
 8017940:	df000117 	ldw	fp,4(sp)
 8017944:	dc000017 	ldw	r16,0(sp)
 8017948:	dec00304 	addi	sp,sp,12
 801794c:	f800283a 	ret

08017950 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8017950:	defffe04 	addi	sp,sp,-8
 8017954:	df000115 	stw	fp,4(sp)
 8017958:	df000104 	addi	fp,sp,4
 801795c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8017960:	e0bfff17 	ldw	r2,-4(fp)
 8017964:	10bffe84 	addi	r2,r2,-6
 8017968:	10c00428 	cmpgeui	r3,r2,16
 801796c:	18001a1e 	bne	r3,zero,80179d8 <alt_exception_cause_generated_bad_addr+0x88>
 8017970:	100690ba 	slli	r3,r2,2
 8017974:	00820074 	movhi	r2,2049
 8017978:	109e6204 	addi	r2,r2,31112
 801797c:	1885883a 	add	r2,r3,r2
 8017980:	10800017 	ldw	r2,0(r2)
 8017984:	1000683a 	jmp	r2
 8017988:	080179c8 	cmpgei	zero,at,1511
 801798c:	080179c8 	cmpgei	zero,at,1511
 8017990:	080179d8 	cmpnei	zero,at,1511
 8017994:	080179d8 	cmpnei	zero,at,1511
 8017998:	080179d8 	cmpnei	zero,at,1511
 801799c:	080179c8 	cmpgei	zero,at,1511
 80179a0:	080179d0 	cmplti	zero,at,1511
 80179a4:	080179d8 	cmpnei	zero,at,1511
 80179a8:	080179c8 	cmpgei	zero,at,1511
 80179ac:	080179c8 	cmpgei	zero,at,1511
 80179b0:	080179d8 	cmpnei	zero,at,1511
 80179b4:	080179c8 	cmpgei	zero,at,1511
 80179b8:	080179d0 	cmplti	zero,at,1511
 80179bc:	080179d8 	cmpnei	zero,at,1511
 80179c0:	080179d8 	cmpnei	zero,at,1511
 80179c4:	080179c8 	cmpgei	zero,at,1511
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80179c8:	00800044 	movi	r2,1
 80179cc:	00000306 	br	80179dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80179d0:	0005883a 	mov	r2,zero
 80179d4:	00000106 	br	80179dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80179d8:	0005883a 	mov	r2,zero
  }
}
 80179dc:	e037883a 	mov	sp,fp
 80179e0:	df000017 	ldw	fp,0(sp)
 80179e4:	dec00104 	addi	sp,sp,4
 80179e8:	f800283a 	ret

080179ec <atexit>:
 80179ec:	200b883a 	mov	r5,r4
 80179f0:	000f883a 	mov	r7,zero
 80179f4:	000d883a 	mov	r6,zero
 80179f8:	0009883a 	mov	r4,zero
 80179fc:	8017ab41 	jmpi	8017ab4 <__register_exitproc>

08017a00 <exit>:
 8017a00:	defffe04 	addi	sp,sp,-8
 8017a04:	000b883a 	mov	r5,zero
 8017a08:	dc000015 	stw	r16,0(sp)
 8017a0c:	dfc00115 	stw	ra,4(sp)
 8017a10:	2021883a 	mov	r16,r4
 8017a14:	8017bcc0 	call	8017bcc <__call_exitprocs>
 8017a18:	008200b4 	movhi	r2,2050
 8017a1c:	10a7ff04 	addi	r2,r2,-24580
 8017a20:	11000017 	ldw	r4,0(r2)
 8017a24:	20800f17 	ldw	r2,60(r4)
 8017a28:	10000126 	beq	r2,zero,8017a30 <exit+0x30>
 8017a2c:	103ee83a 	callr	r2
 8017a30:	8009883a 	mov	r4,r16
 8017a34:	8017d4c0 	call	8017d4c <_exit>

08017a38 <memcmp>:
 8017a38:	01c000c4 	movi	r7,3
 8017a3c:	3980192e 	bgeu	r7,r6,8017aa4 <memcmp+0x6c>
 8017a40:	2144b03a 	or	r2,r4,r5
 8017a44:	11c4703a 	and	r2,r2,r7
 8017a48:	10000f26 	beq	r2,zero,8017a88 <memcmp+0x50>
 8017a4c:	20800003 	ldbu	r2,0(r4)
 8017a50:	28c00003 	ldbu	r3,0(r5)
 8017a54:	10c0151e 	bne	r2,r3,8017aac <memcmp+0x74>
 8017a58:	31bfff84 	addi	r6,r6,-2
 8017a5c:	01ffffc4 	movi	r7,-1
 8017a60:	00000406 	br	8017a74 <memcmp+0x3c>
 8017a64:	20800003 	ldbu	r2,0(r4)
 8017a68:	28c00003 	ldbu	r3,0(r5)
 8017a6c:	31bfffc4 	addi	r6,r6,-1
 8017a70:	10c00e1e 	bne	r2,r3,8017aac <memcmp+0x74>
 8017a74:	21000044 	addi	r4,r4,1
 8017a78:	29400044 	addi	r5,r5,1
 8017a7c:	31fff91e 	bne	r6,r7,8017a64 <__alt_data_end+0xfc017a64>
 8017a80:	0005883a 	mov	r2,zero
 8017a84:	f800283a 	ret
 8017a88:	20c00017 	ldw	r3,0(r4)
 8017a8c:	28800017 	ldw	r2,0(r5)
 8017a90:	18bfee1e 	bne	r3,r2,8017a4c <__alt_data_end+0xfc017a4c>
 8017a94:	31bfff04 	addi	r6,r6,-4
 8017a98:	21000104 	addi	r4,r4,4
 8017a9c:	29400104 	addi	r5,r5,4
 8017aa0:	39bff936 	bltu	r7,r6,8017a88 <__alt_data_end+0xfc017a88>
 8017aa4:	303fe91e 	bne	r6,zero,8017a4c <__alt_data_end+0xfc017a4c>
 8017aa8:	003ff506 	br	8017a80 <__alt_data_end+0xfc017a80>
 8017aac:	10c5c83a 	sub	r2,r2,r3
 8017ab0:	f800283a 	ret

08017ab4 <__register_exitproc>:
 8017ab4:	defffa04 	addi	sp,sp,-24
 8017ab8:	dc000315 	stw	r16,12(sp)
 8017abc:	040200b4 	movhi	r16,2050
 8017ac0:	8427ff04 	addi	r16,r16,-24580
 8017ac4:	80c00017 	ldw	r3,0(r16)
 8017ac8:	dc400415 	stw	r17,16(sp)
 8017acc:	dfc00515 	stw	ra,20(sp)
 8017ad0:	18805217 	ldw	r2,328(r3)
 8017ad4:	2023883a 	mov	r17,r4
 8017ad8:	10003726 	beq	r2,zero,8017bb8 <__register_exitproc+0x104>
 8017adc:	10c00117 	ldw	r3,4(r2)
 8017ae0:	010007c4 	movi	r4,31
 8017ae4:	20c00e16 	blt	r4,r3,8017b20 <__register_exitproc+0x6c>
 8017ae8:	1a000044 	addi	r8,r3,1
 8017aec:	8800221e 	bne	r17,zero,8017b78 <__register_exitproc+0xc4>
 8017af0:	18c00084 	addi	r3,r3,2
 8017af4:	18c7883a 	add	r3,r3,r3
 8017af8:	18c7883a 	add	r3,r3,r3
 8017afc:	12000115 	stw	r8,4(r2)
 8017b00:	10c7883a 	add	r3,r2,r3
 8017b04:	19400015 	stw	r5,0(r3)
 8017b08:	0005883a 	mov	r2,zero
 8017b0c:	dfc00517 	ldw	ra,20(sp)
 8017b10:	dc400417 	ldw	r17,16(sp)
 8017b14:	dc000317 	ldw	r16,12(sp)
 8017b18:	dec00604 	addi	sp,sp,24
 8017b1c:	f800283a 	ret
 8017b20:	00800034 	movhi	r2,0
 8017b24:	10800004 	addi	r2,r2,0
 8017b28:	10002626 	beq	r2,zero,8017bc4 <__register_exitproc+0x110>
 8017b2c:	01006404 	movi	r4,400
 8017b30:	d9400015 	stw	r5,0(sp)
 8017b34:	d9800115 	stw	r6,4(sp)
 8017b38:	d9c00215 	stw	r7,8(sp)
 8017b3c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8017b40:	d9400017 	ldw	r5,0(sp)
 8017b44:	d9800117 	ldw	r6,4(sp)
 8017b48:	d9c00217 	ldw	r7,8(sp)
 8017b4c:	10001d26 	beq	r2,zero,8017bc4 <__register_exitproc+0x110>
 8017b50:	81000017 	ldw	r4,0(r16)
 8017b54:	10000115 	stw	zero,4(r2)
 8017b58:	02000044 	movi	r8,1
 8017b5c:	22405217 	ldw	r9,328(r4)
 8017b60:	0007883a 	mov	r3,zero
 8017b64:	12400015 	stw	r9,0(r2)
 8017b68:	20805215 	stw	r2,328(r4)
 8017b6c:	10006215 	stw	zero,392(r2)
 8017b70:	10006315 	stw	zero,396(r2)
 8017b74:	883fde26 	beq	r17,zero,8017af0 <__alt_data_end+0xfc017af0>
 8017b78:	18c9883a 	add	r4,r3,r3
 8017b7c:	2109883a 	add	r4,r4,r4
 8017b80:	1109883a 	add	r4,r2,r4
 8017b84:	21802215 	stw	r6,136(r4)
 8017b88:	01800044 	movi	r6,1
 8017b8c:	12406217 	ldw	r9,392(r2)
 8017b90:	30cc983a 	sll	r6,r6,r3
 8017b94:	4992b03a 	or	r9,r9,r6
 8017b98:	12406215 	stw	r9,392(r2)
 8017b9c:	21c04215 	stw	r7,264(r4)
 8017ba0:	01000084 	movi	r4,2
 8017ba4:	893fd21e 	bne	r17,r4,8017af0 <__alt_data_end+0xfc017af0>
 8017ba8:	11006317 	ldw	r4,396(r2)
 8017bac:	218cb03a 	or	r6,r4,r6
 8017bb0:	11806315 	stw	r6,396(r2)
 8017bb4:	003fce06 	br	8017af0 <__alt_data_end+0xfc017af0>
 8017bb8:	18805304 	addi	r2,r3,332
 8017bbc:	18805215 	stw	r2,328(r3)
 8017bc0:	003fc606 	br	8017adc <__alt_data_end+0xfc017adc>
 8017bc4:	00bfffc4 	movi	r2,-1
 8017bc8:	003fd006 	br	8017b0c <__alt_data_end+0xfc017b0c>

08017bcc <__call_exitprocs>:
 8017bcc:	defff504 	addi	sp,sp,-44
 8017bd0:	df000915 	stw	fp,36(sp)
 8017bd4:	dd400615 	stw	r21,24(sp)
 8017bd8:	dc800315 	stw	r18,12(sp)
 8017bdc:	dfc00a15 	stw	ra,40(sp)
 8017be0:	ddc00815 	stw	r23,32(sp)
 8017be4:	dd800715 	stw	r22,28(sp)
 8017be8:	dd000515 	stw	r20,20(sp)
 8017bec:	dcc00415 	stw	r19,16(sp)
 8017bf0:	dc400215 	stw	r17,8(sp)
 8017bf4:	dc000115 	stw	r16,4(sp)
 8017bf8:	d9000015 	stw	r4,0(sp)
 8017bfc:	2839883a 	mov	fp,r5
 8017c00:	04800044 	movi	r18,1
 8017c04:	057fffc4 	movi	r21,-1
 8017c08:	008200b4 	movhi	r2,2050
 8017c0c:	10a7ff04 	addi	r2,r2,-24580
 8017c10:	12000017 	ldw	r8,0(r2)
 8017c14:	45005217 	ldw	r20,328(r8)
 8017c18:	44c05204 	addi	r19,r8,328
 8017c1c:	a0001c26 	beq	r20,zero,8017c90 <__call_exitprocs+0xc4>
 8017c20:	a0800117 	ldw	r2,4(r20)
 8017c24:	15ffffc4 	addi	r23,r2,-1
 8017c28:	b8000d16 	blt	r23,zero,8017c60 <__call_exitprocs+0x94>
 8017c2c:	14000044 	addi	r16,r2,1
 8017c30:	8421883a 	add	r16,r16,r16
 8017c34:	8421883a 	add	r16,r16,r16
 8017c38:	84402004 	addi	r17,r16,128
 8017c3c:	a463883a 	add	r17,r20,r17
 8017c40:	a421883a 	add	r16,r20,r16
 8017c44:	e0001e26 	beq	fp,zero,8017cc0 <__call_exitprocs+0xf4>
 8017c48:	80804017 	ldw	r2,256(r16)
 8017c4c:	e0801c26 	beq	fp,r2,8017cc0 <__call_exitprocs+0xf4>
 8017c50:	bdffffc4 	addi	r23,r23,-1
 8017c54:	843fff04 	addi	r16,r16,-4
 8017c58:	8c7fff04 	addi	r17,r17,-4
 8017c5c:	bd7ff91e 	bne	r23,r21,8017c44 <__alt_data_end+0xfc017c44>
 8017c60:	00800034 	movhi	r2,0
 8017c64:	10800004 	addi	r2,r2,0
 8017c68:	10000926 	beq	r2,zero,8017c90 <__call_exitprocs+0xc4>
 8017c6c:	a0800117 	ldw	r2,4(r20)
 8017c70:	1000301e 	bne	r2,zero,8017d34 <__call_exitprocs+0x168>
 8017c74:	a0800017 	ldw	r2,0(r20)
 8017c78:	10003226 	beq	r2,zero,8017d44 <__call_exitprocs+0x178>
 8017c7c:	a009883a 	mov	r4,r20
 8017c80:	98800015 	stw	r2,0(r19)
 8017c84:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8017c88:	9d000017 	ldw	r20,0(r19)
 8017c8c:	a03fe41e 	bne	r20,zero,8017c20 <__alt_data_end+0xfc017c20>
 8017c90:	dfc00a17 	ldw	ra,40(sp)
 8017c94:	df000917 	ldw	fp,36(sp)
 8017c98:	ddc00817 	ldw	r23,32(sp)
 8017c9c:	dd800717 	ldw	r22,28(sp)
 8017ca0:	dd400617 	ldw	r21,24(sp)
 8017ca4:	dd000517 	ldw	r20,20(sp)
 8017ca8:	dcc00417 	ldw	r19,16(sp)
 8017cac:	dc800317 	ldw	r18,12(sp)
 8017cb0:	dc400217 	ldw	r17,8(sp)
 8017cb4:	dc000117 	ldw	r16,4(sp)
 8017cb8:	dec00b04 	addi	sp,sp,44
 8017cbc:	f800283a 	ret
 8017cc0:	a0800117 	ldw	r2,4(r20)
 8017cc4:	80c00017 	ldw	r3,0(r16)
 8017cc8:	10bfffc4 	addi	r2,r2,-1
 8017ccc:	15c01426 	beq	r2,r23,8017d20 <__call_exitprocs+0x154>
 8017cd0:	80000015 	stw	zero,0(r16)
 8017cd4:	183fde26 	beq	r3,zero,8017c50 <__alt_data_end+0xfc017c50>
 8017cd8:	95c8983a 	sll	r4,r18,r23
 8017cdc:	a0806217 	ldw	r2,392(r20)
 8017ce0:	a5800117 	ldw	r22,4(r20)
 8017ce4:	2084703a 	and	r2,r4,r2
 8017ce8:	10000b26 	beq	r2,zero,8017d18 <__call_exitprocs+0x14c>
 8017cec:	a0806317 	ldw	r2,396(r20)
 8017cf0:	2088703a 	and	r4,r4,r2
 8017cf4:	20000c1e 	bne	r4,zero,8017d28 <__call_exitprocs+0x15c>
 8017cf8:	89400017 	ldw	r5,0(r17)
 8017cfc:	d9000017 	ldw	r4,0(sp)
 8017d00:	183ee83a 	callr	r3
 8017d04:	a0800117 	ldw	r2,4(r20)
 8017d08:	15bfbf1e 	bne	r2,r22,8017c08 <__alt_data_end+0xfc017c08>
 8017d0c:	98800017 	ldw	r2,0(r19)
 8017d10:	153fcf26 	beq	r2,r20,8017c50 <__alt_data_end+0xfc017c50>
 8017d14:	003fbc06 	br	8017c08 <__alt_data_end+0xfc017c08>
 8017d18:	183ee83a 	callr	r3
 8017d1c:	003ff906 	br	8017d04 <__alt_data_end+0xfc017d04>
 8017d20:	a5c00115 	stw	r23,4(r20)
 8017d24:	003feb06 	br	8017cd4 <__alt_data_end+0xfc017cd4>
 8017d28:	89000017 	ldw	r4,0(r17)
 8017d2c:	183ee83a 	callr	r3
 8017d30:	003ff406 	br	8017d04 <__alt_data_end+0xfc017d04>
 8017d34:	a0800017 	ldw	r2,0(r20)
 8017d38:	a027883a 	mov	r19,r20
 8017d3c:	1029883a 	mov	r20,r2
 8017d40:	003fb606 	br	8017c1c <__alt_data_end+0xfc017c1c>
 8017d44:	0005883a 	mov	r2,zero
 8017d48:	003ffb06 	br	8017d38 <__alt_data_end+0xfc017d38>

08017d4c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8017d4c:	defffd04 	addi	sp,sp,-12
 8017d50:	df000215 	stw	fp,8(sp)
 8017d54:	df000204 	addi	fp,sp,8
 8017d58:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8017d5c:	0001883a 	nop
 8017d60:	e0bfff17 	ldw	r2,-4(fp)
 8017d64:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8017d68:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8017d6c:	10000226 	beq	r2,zero,8017d78 <_exit+0x2c>
    ALT_SIM_FAIL();
 8017d70:	002af070 	cmpltui	zero,zero,43969
 8017d74:	00000106 	br	8017d7c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8017d78:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8017d7c:	003fff06 	br	8017d7c <__alt_data_end+0xfc017d7c>
